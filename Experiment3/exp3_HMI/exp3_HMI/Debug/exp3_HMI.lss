
exp3_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800100  00006984  00006a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000619  008003b2  008003b2  00006cca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00006d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000102  00000000  00000000  000072bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009770  00000000  00000000  000073be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018ef  00000000  00000000  00010b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005a58  00000000  00000000  0001241d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000018bc  00000000  00000000  00017e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000147d  00000000  00000000  00019734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d5b9  00000000  00000000  0001abb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006b0  00000000  00000000  0002816a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	30 c1       	rjmp	.+608    	; 0x262 <__ctors_end>
       2:	00 00       	nop
       4:	4d c1       	rjmp	.+666    	; 0x2a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c1       	rjmp	.+658    	; 0x2a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c1       	rjmp	.+654    	; 0x2a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c1       	rjmp	.+650    	; 0x2a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c1       	rjmp	.+646    	; 0x2a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c1       	rjmp	.+642    	; 0x2a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c1       	rjmp	.+638    	; 0x2a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__vector_9>
      28:	3b c1       	rjmp	.+630    	; 0x2a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c1       	rjmp	.+626    	; 0x2a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c1       	rjmp	.+622    	; 0x2a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__vector_13>
      38:	33 c1       	rjmp	.+614    	; 0x2a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__vector_15>
      40:	2f c1       	rjmp	.+606    	; 0x2a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c1       	rjmp	.+602    	; 0x2a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c1       	rjmp	.+598    	; 0x2a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c1       	rjmp	.+594    	; 0x2a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c1       	rjmp	.+590    	; 0x2a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__vector_21>
      58:	23 c1       	rjmp	.+582    	; 0x2a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c1       	rjmp	.+578    	; 0x2a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c1       	rjmp	.+574    	; 0x2a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c1       	rjmp	.+570    	; 0x2a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	1b c1       	rjmp	.+566    	; 0x2a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 ea 26 	jmp	0x4dd4	; 0x4dd4 <__vector_27>
      70:	17 c1       	rjmp	.+558    	; 0x2a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c1       	rjmp	.+554    	; 0x2a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	13 c1       	rjmp	.+550    	; 0x2a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	11 c1       	rjmp	.+546    	; 0x2a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c1       	rjmp	.+542    	; 0x2a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	0d c1       	rjmp	.+538    	; 0x2a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0b c1       	rjmp	.+534    	; 0x2a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 23       	and	r17, r25
      8e:	20 23       	and	r18, r16
      90:	1e 26       	eor	r1, r30
      92:	99 23       	and	r25, r25
      94:	32 24       	eor	r3, r2
      96:	1e 26       	eor	r1, r30
      98:	1e 26       	eor	r1, r30
      9a:	d7 24       	eor	r13, r7
      9c:	1e 26       	eor	r1, r30
      9e:	1e 26       	eor	r1, r30
      a0:	1e 26       	eor	r1, r30
      a2:	1e 26       	eor	r1, r30
      a4:	1e 26       	eor	r1, r30
      a6:	1e 26       	eor	r1, r30
      a8:	1e 26       	eor	r1, r30
      aa:	1e 26       	eor	r1, r30
      ac:	1e 26       	eor	r1, r30
      ae:	1e 26       	eor	r1, r30
      b0:	1e 26       	eor	r1, r30
      b2:	1e 26       	eor	r1, r30
      b4:	1e 26       	eor	r1, r30
      b6:	1e 26       	eor	r1, r30
      b8:	1e 26       	eor	r1, r30
      ba:	1e 26       	eor	r1, r30
      bc:	1e 26       	eor	r1, r30
      be:	1e 26       	eor	r1, r30
      c0:	1e 26       	eor	r1, r30
      c2:	1e 26       	eor	r1, r30
      c4:	1e 26       	eor	r1, r30
      c6:	1e 26       	eor	r1, r30
      c8:	1e 26       	eor	r1, r30
      ca:	1e 26       	eor	r1, r30
      cc:	1e 26       	eor	r1, r30
      ce:	1e 26       	eor	r1, r30
      d0:	1e 26       	eor	r1, r30
      d2:	1e 26       	eor	r1, r30
      d4:	1e 26       	eor	r1, r30
      d6:	1e 26       	eor	r1, r30
      d8:	1e 26       	eor	r1, r30
      da:	1e 26       	eor	r1, r30
      dc:	1e 26       	eor	r1, r30
      de:	1e 26       	eor	r1, r30
      e0:	1e 26       	eor	r1, r30
      e2:	1e 26       	eor	r1, r30
      e4:	1e 26       	eor	r1, r30
      e6:	1e 26       	eor	r1, r30
      e8:	1e 26       	eor	r1, r30
      ea:	1e 26       	eor	r1, r30
      ec:	1e 26       	eor	r1, r30
      ee:	1e 26       	eor	r1, r30
      f0:	7f 24       	eor	r7, r15
      f2:	85 24       	eor	r8, r5
      f4:	98 24       	eor	r9, r8
      f6:	ab 24       	eor	r10, r11
      f8:	c2 24       	eor	r12, r2
      fa:	de 24       	eor	r13, r14
      fc:	78 25       	eor	r23, r8
      fe:	d7 25       	eor	r29, r7
     100:	fe 26       	eor	r15, r30
     102:	01 27       	eor	r16, r17
     104:	04 27       	eor	r16, r20
     106:	07 27       	eor	r16, r23
     108:	0a 27       	eor	r16, r26
     10a:	0d 27       	eor	r16, r29
     10c:	10 27       	eor	r17, r16
     10e:	13 27       	eor	r17, r19
     110:	16 27       	eor	r17, r22

00000112 <__trampolines_end>:
     112:	6e 61       	ori	r22, 0x1E	; 30
     114:	6e 00       	.word	0x006e	; ????

00000116 <__c.2332>:
     116:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     126:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     136:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     146:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     156:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     166:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     176:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     186:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     196:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1a6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1b6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1c6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1d6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1e6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1f6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     206:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000214 <__c.2529>:
     214:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     224:	47 00                                               G.

00000226 <pstr_an>:
     226:	61 6e 00                                            an.

00000229 <pstr_nfinity>:
     229:	6e 66 69 6e 69 74 79 00                             nfinity.

00000231 <pwr_m10>:
     231:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     241:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000249 <pwr_p10>:
     249:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     259:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d0 e1       	ldi	r29, 0x10	; 16
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	13 e0       	ldi	r17, 0x03	; 3
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e4 e8       	ldi	r30, 0x84	; 132
     276:	f9 e6       	ldi	r31, 0x69	; 105
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a2 3b       	cpi	r26, 0xB2	; 178
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>

00000288 <__do_clear_bss>:
     288:	29 e0       	ldi	r18, 0x09	; 9
     28a:	a2 eb       	ldi	r26, 0xB2	; 178
     28c:	b3 e0       	ldi	r27, 0x03	; 3
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	ab 3c       	cpi	r26, 0xCB	; 203
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <main>
     29c:	0c 94 c0 34 	jmp	0x6980	; 0x6980 <_exit>

000002a0 <__bad_interrupt>:
     2a0:	af ce       	rjmp	.-674    	; 0x0 <__vectors>

000002a2 <uart_put>:
     2a2:	5d 9b       	sbis	0x0b, 5	; 11
     2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <uart_put>
     2a6:	8c b9       	out	0x0c, r24	; 12
     2a8:	08 95       	ret

000002aa <uart_get>:
     2aa:	5f 9b       	sbis	0x0b, 7	; 11
     2ac:	fe cf       	rjmp	.-4      	; 0x2aa <uart_get>
     2ae:	8c b1       	in	r24, 0x0c	; 12
     2b0:	08 95       	ret

000002b2 <M128_HMI_set>:
     2b2:	88 3c       	cpi	r24, 0xC8	; 200
     2b4:	91 f4       	brne	.+36     	; 0x2da <M128_HMI_set+0x28>
     2b6:	6f 3f       	cpi	r22, 0xFF	; 255
     2b8:	81 f4       	brne	.+32     	; 0x2da <M128_HMI_set+0x28>
     2ba:	44 23       	and	r20, r20
     2bc:	71 f4       	brne	.+28     	; 0x2da <M128_HMI_set+0x28>
     2be:	82 2f       	mov	r24, r18
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	a0 e0       	ldi	r26, 0x00	; 0
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Timeout>
     2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Timeout+0x1>
     2ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Timeout+0x2>
     2d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Timeout+0x3>
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 95       	ret
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	08 95       	ret

000002de <HMI_timeout_set>:
     2de:	9c 01       	movw	r18, r24
     2e0:	c2 97       	sbiw	r24, 0x32	; 50
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
     2e4:	94 47       	sbci	r25, 0x74	; 116
     2e6:	10 f0       	brcs	.+4      	; 0x2ec <HMI_timeout_set+0xe>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	08 95       	ret
     2ec:	89 e9       	ldi	r24, 0x99	; 153
     2ee:	93 e0       	ldi	r25, 0x03	; 3
     2f0:	ac 01       	movw	r20, r24
     2f2:	24 9f       	mul	r18, r20
     2f4:	c0 01       	movw	r24, r0
     2f6:	25 9f       	mul	r18, r21
     2f8:	90 0d       	add	r25, r0
     2fa:	34 9f       	mul	r19, r20
     2fc:	90 0d       	add	r25, r0
     2fe:	11 24       	eor	r1, r1
     300:	aa 27       	eor	r26, r26
     302:	97 fd       	sbrc	r25, 7
     304:	a0 95       	com	r26
     306:	ba 2f       	mov	r27, r26
     308:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Timeout>
     30c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Timeout+0x1>
     310:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Timeout+0x2>
     314:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Timeout+0x3>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	08 95       	ret

0000031c <M128_HMI_put>:
     31c:	dc 01       	movw	r26, r24
     31e:	5d 9b       	sbis	0x0b, 5	; 11
     320:	fe cf       	rjmp	.-4      	; 0x31e <M128_HMI_put+0x2>
     322:	8a ea       	ldi	r24, 0xAA	; 170
     324:	8c b9       	out	0x0c, r24	; 12
     326:	5d 9b       	sbis	0x0b, 5	; 11
     328:	fe cf       	rjmp	.-4      	; 0x326 <M128_HMI_put+0xa>
     32a:	8a ea       	ldi	r24, 0xAA	; 170
     32c:	8c b9       	out	0x0c, r24	; 12
     32e:	5d 9b       	sbis	0x0b, 5	; 11
     330:	fe cf       	rjmp	.-4      	; 0x32e <M128_HMI_put+0x12>
     332:	8a ea       	ldi	r24, 0xAA	; 170
     334:	8c b9       	out	0x0c, r24	; 12
     336:	5d 9b       	sbis	0x0b, 5	; 11
     338:	fe cf       	rjmp	.-4      	; 0x336 <M128_HMI_put+0x1a>
     33a:	6c b9       	out	0x0c, r22	; 12
     33c:	8b 2f       	mov	r24, r27
     33e:	99 27       	eor	r25, r25
     340:	87 fd       	sbrc	r24, 7
     342:	9a 95       	dec	r25
     344:	98 2f       	mov	r25, r24
     346:	5d 9b       	sbis	0x0b, 5	; 11
     348:	fe cf       	rjmp	.-4      	; 0x346 <M128_HMI_put+0x2a>
     34a:	9c b9       	out	0x0c, r25	; 12
     34c:	8a 2f       	mov	r24, r26
     34e:	5d 9b       	sbis	0x0b, 5	; 11
     350:	fe cf       	rjmp	.-4      	; 0x34e <M128_HMI_put+0x32>
     352:	8c b9       	out	0x0c, r24	; 12
     354:	89 0f       	add	r24, r25
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	0a c0       	rjmp	.+20     	; 0x370 <M128_HMI_put+0x54>
     35c:	fa 01       	movw	r30, r20
     35e:	e2 0f       	add	r30, r18
     360:	f3 1f       	adc	r31, r19
     362:	e0 81       	ld	r30, Z
     364:	5d 9b       	sbis	0x0b, 5	; 11
     366:	fe cf       	rjmp	.-4      	; 0x364 <M128_HMI_put+0x48>
     368:	ec b9       	out	0x0c, r30	; 12
     36a:	8e 0f       	add	r24, r30
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	2a 17       	cp	r18, r26
     372:	3b 07       	cpc	r19, r27
     374:	98 f3       	brcs	.-26     	; 0x35c <M128_HMI_put+0x40>
     376:	5d 9b       	sbis	0x0b, 5	; 11
     378:	fe cf       	rjmp	.-4      	; 0x376 <M128_HMI_put+0x5a>
     37a:	8c b9       	out	0x0c, r24	; 12
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 95       	ret

00000380 <M128_HMI_get>:
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	ec 01       	movw	r28, r24
     386:	5f 9b       	sbis	0x0b, 7	; 11
     388:	fe cf       	rjmp	.-4      	; 0x386 <M128_HMI_get+0x6>
     38a:	8c b1       	in	r24, 0x0c	; 12
     38c:	8b 3a       	cpi	r24, 0xAB	; 171
     38e:	c1 f5       	brne	.+112    	; 0x400 <__LOCK_REGION_LENGTH__>
     390:	5f 9b       	sbis	0x0b, 7	; 11
     392:	fe cf       	rjmp	.-4      	; 0x390 <M128_HMI_get+0x10>
     394:	8c b1       	in	r24, 0x0c	; 12
     396:	8b 3a       	cpi	r24, 0xAB	; 171
     398:	99 f5       	brne	.+102    	; 0x400 <__LOCK_REGION_LENGTH__>
     39a:	5f 9b       	sbis	0x0b, 7	; 11
     39c:	fe cf       	rjmp	.-4      	; 0x39a <M128_HMI_get+0x1a>
     39e:	8c b1       	in	r24, 0x0c	; 12
     3a0:	8b 3a       	cpi	r24, 0xAB	; 171
     3a2:	71 f5       	brne	.+92     	; 0x400 <__LOCK_REGION_LENGTH__>
     3a4:	5f 9b       	sbis	0x0b, 7	; 11
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <M128_HMI_get+0x24>
     3a8:	8c b1       	in	r24, 0x0c	; 12
     3aa:	5f 9b       	sbis	0x0b, 7	; 11
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <M128_HMI_get+0x2a>
     3ae:	3c b1       	in	r19, 0x0c	; 12
     3b0:	5f 9b       	sbis	0x0b, 7	; 11
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <M128_HMI_get+0x30>
     3b4:	2c b1       	in	r18, 0x0c	; 12
     3b6:	a2 2f       	mov	r26, r18
     3b8:	a3 0f       	add	r26, r19
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	0a c0       	rjmp	.+20     	; 0x3d4 <M128_HMI_get+0x54>
     3c0:	5f 9b       	sbis	0x0b, 7	; 11
     3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <M128_HMI_get+0x40>
     3c4:	8c b1       	in	r24, 0x0c	; 12
     3c6:	fb 01       	movw	r30, r22
     3c8:	e4 0f       	add	r30, r20
     3ca:	f5 1f       	adc	r31, r21
     3cc:	80 83       	st	Z, r24
     3ce:	a8 0f       	add	r26, r24
     3d0:	4f 5f       	subi	r20, 0xFF	; 255
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	4c 17       	cp	r20, r28
     3d6:	5d 07       	cpc	r21, r29
     3d8:	9c f3       	brlt	.-26     	; 0x3c0 <M128_HMI_get+0x40>
     3da:	5f 9b       	sbis	0x0b, 7	; 11
     3dc:	fe cf       	rjmp	.-4      	; 0x3da <M128_HMI_get+0x5a>
     3de:	4c b1       	in	r20, 0x0c	; 12
     3e0:	93 2f       	mov	r25, r19
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	82 2b       	or	r24, r18
     3e8:	93 2b       	or	r25, r19
     3ea:	8c 17       	cp	r24, r28
     3ec:	9d 07       	cpc	r25, r29
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <M128_HMI_get+0x74>
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	07 c0       	rjmp	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f4:	4a 17       	cp	r20, r26
     3f6:	11 f4       	brne	.+4      	; 0x3fc <M128_HMI_get+0x7c>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <stdio_putchar>:
     408:	1f 93       	push	r17
     40a:	18 2f       	mov	r17, r24
     40c:	8a 30       	cpi	r24, 0x0A	; 10
     40e:	11 f4       	brne	.+4      	; 0x414 <stdio_putchar+0xc>
     410:	8d e0       	ldi	r24, 0x0D	; 13
     412:	fa df       	rcall	.-12     	; 0x408 <stdio_putchar>
     414:	5d 9b       	sbis	0x0b, 5	; 11
     416:	fe cf       	rjmp	.-4      	; 0x414 <stdio_putchar+0xc>
     418:	1c b9       	out	0x0c, r17	; 12
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <stdio_getchar>:
     422:	1f 93       	push	r17
     424:	bc 01       	movw	r22, r24
     426:	5f 9b       	sbis	0x0b, 7	; 11
     428:	fe cf       	rjmp	.-4      	; 0x426 <stdio_getchar+0x4>
     42a:	1c b1       	in	r17, 0x0c	; 12
     42c:	81 2f       	mov	r24, r17
     42e:	ec df       	rcall	.-40     	; 0x408 <stdio_putchar>
     430:	81 2f       	mov	r24, r17
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	1f 91       	pop	r17
     436:	08 95       	ret

00000438 <ASA_M128_set>:
     438:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     43c:	81 e1       	ldi	r24, 0x11	; 17
     43e:	89 b9       	out	0x09, r24	; 9
     440:	8a b1       	in	r24, 0x0a	; 10
     442:	88 61       	ori	r24, 0x18	; 24
     444:	8a b9       	out	0x0a, r24	; 10
     446:	e5 e9       	ldi	r30, 0x95	; 149
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	86 60       	ori	r24, 0x06	; 6
     44e:	80 83       	st	Z, r24
     450:	85 e0       	ldi	r24, 0x05	; 5
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	90 93 c8 09 	sts	0x09C8, r25	; 0x8009c8 <__iob+0x3>
     458:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <__iob+0x2>
     45c:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <__iob+0x1>
     460:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <__iob>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret

00000468 <M128_HMI_Form_get>:
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	8a 01       	movw	r16, r20
     478:	5f 9b       	sbis	0x0b, 7	; 11
     47a:	fe cf       	rjmp	.-4      	; 0x478 <M128_HMI_Form_get+0x10>
     47c:	8c b1       	in	r24, 0x0c	; 12
     47e:	8b 3a       	cpi	r24, 0xAB	; 171
     480:	09 f0       	breq	.+2      	; 0x484 <M128_HMI_Form_get+0x1c>
     482:	50 c0       	rjmp	.+160    	; 0x524 <M128_HMI_Form_get+0xbc>
     484:	5f 9b       	sbis	0x0b, 7	; 11
     486:	fe cf       	rjmp	.-4      	; 0x484 <M128_HMI_Form_get+0x1c>
     488:	8c b1       	in	r24, 0x0c	; 12
     48a:	8b 3a       	cpi	r24, 0xAB	; 171
     48c:	09 f0       	breq	.+2      	; 0x490 <M128_HMI_Form_get+0x28>
     48e:	4a c0       	rjmp	.+148    	; 0x524 <M128_HMI_Form_get+0xbc>
     490:	5f 9b       	sbis	0x0b, 7	; 11
     492:	fe cf       	rjmp	.-4      	; 0x490 <M128_HMI_Form_get+0x28>
     494:	8c b1       	in	r24, 0x0c	; 12
     496:	8b 3a       	cpi	r24, 0xAB	; 171
     498:	09 f0       	breq	.+2      	; 0x49c <M128_HMI_Form_get+0x34>
     49a:	44 c0       	rjmp	.+136    	; 0x524 <M128_HMI_Form_get+0xbc>
     49c:	5f 9b       	sbis	0x0b, 7	; 11
     49e:	fe cf       	rjmp	.-4      	; 0x49c <M128_HMI_Form_get+0x34>
     4a0:	ec b0       	in	r14, 0x0c	; 12
     4a2:	5f 9b       	sbis	0x0b, 7	; 11
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <M128_HMI_Form_get+0x3a>
     4a6:	5c b1       	in	r21, 0x0c	; 12
     4a8:	5f 9b       	sbis	0x0b, 7	; 11
     4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <M128_HMI_Form_get+0x40>
     4ac:	fc b0       	in	r15, 0x0c	; 12
     4ae:	de 01       	movw	r26, r28
     4b0:	0d 90       	ld	r0, X+
     4b2:	00 20       	and	r0, r0
     4b4:	e9 f7       	brne	.-6      	; 0x4b0 <M128_HMI_Form_get+0x48>
     4b6:	11 97       	sbiw	r26, 0x01	; 1
     4b8:	ac 1b       	sub	r26, r28
     4ba:	bd 0b       	sbc	r27, r29
     4bc:	4f 2d       	mov	r20, r15
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <M128_HMI_Form_get+0x70>
     4c4:	5f 9b       	sbis	0x0b, 7	; 11
     4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <M128_HMI_Form_get+0x5c>
     4c8:	8c b1       	in	r24, 0x0c	; 12
     4ca:	fe 01       	movw	r30, r28
     4cc:	e2 0f       	add	r30, r18
     4ce:	f3 1f       	adc	r31, r19
     4d0:	80 83       	st	Z, r24
     4d2:	48 0f       	add	r20, r24
     4d4:	2f 5f       	subi	r18, 0xFF	; 255
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	2a 17       	cp	r18, r26
     4da:	3b 07       	cpc	r19, r27
     4dc:	9c f3       	brlt	.-26     	; 0x4c4 <M128_HMI_Form_get+0x5c>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <M128_HMI_Form_get+0x90>
     4e4:	5f 9b       	sbis	0x0b, 7	; 11
     4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <M128_HMI_Form_get+0x7c>
     4e8:	8c b1       	in	r24, 0x0c	; 12
     4ea:	f8 01       	movw	r30, r16
     4ec:	e2 0f       	add	r30, r18
     4ee:	f3 1f       	adc	r31, r19
     4f0:	80 83       	st	Z, r24
     4f2:	48 0f       	add	r20, r24
     4f4:	2f 5f       	subi	r18, 0xFF	; 255
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	26 17       	cp	r18, r22
     4fa:	37 07       	cpc	r19, r23
     4fc:	9c f3       	brlt	.-26     	; 0x4e4 <M128_HMI_Form_get+0x7c>
     4fe:	5f 9b       	sbis	0x0b, 7	; 11
     500:	fe cf       	rjmp	.-4      	; 0x4fe <M128_HMI_Form_get+0x96>
     502:	2c b1       	in	r18, 0x0c	; 12
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	58 2b       	or	r21, r24
     508:	5f 19       	sub	r21, r15
     50a:	85 2f       	mov	r24, r21
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	86 17       	cp	r24, r22
     510:	97 07       	cpc	r25, r23
     512:	11 f0       	breq	.+4      	; 0x518 <M128_HMI_Form_get+0xb0>
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	07 c0       	rjmp	.+14     	; 0x526 <M128_HMI_Form_get+0xbe>
     518:	24 17       	cp	r18, r20
     51a:	11 f4       	brne	.+4      	; 0x520 <M128_HMI_Form_get+0xb8>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	03 c0       	rjmp	.+6      	; 0x526 <M128_HMI_Form_get+0xbe>
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	01 c0       	rjmp	.+2      	; 0x526 <M128_HMI_Form_get+0xbe>
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	08 95       	ret

00000534 <M128_HMI_Form_put>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
     53a:	5d 9b       	sbis	0x0b, 5	; 11
     53c:	fe cf       	rjmp	.-4      	; 0x53a <M128_HMI_Form_put+0x6>
     53e:	8b eb       	ldi	r24, 0xBB	; 187
     540:	8c b9       	out	0x0c, r24	; 12
     542:	5d 9b       	sbis	0x0b, 5	; 11
     544:	fe cf       	rjmp	.-4      	; 0x542 <M128_HMI_Form_put+0xe>
     546:	8b eb       	ldi	r24, 0xBB	; 187
     548:	8c b9       	out	0x0c, r24	; 12
     54a:	5d 9b       	sbis	0x0b, 5	; 11
     54c:	fe cf       	rjmp	.-4      	; 0x54a <M128_HMI_Form_put+0x16>
     54e:	8b eb       	ldi	r24, 0xBB	; 187
     550:	8c b9       	out	0x0c, r24	; 12
     552:	de 01       	movw	r26, r28
     554:	0d 90       	ld	r0, X+
     556:	00 20       	and	r0, r0
     558:	e9 f7       	brne	.-6      	; 0x554 <M128_HMI_Form_put+0x20>
     55a:	11 97       	sbiw	r26, 0x01	; 1
     55c:	ac 1b       	sub	r26, r28
     55e:	bd 0b       	sbc	r27, r29
     560:	af 3f       	cpi	r26, 0xFF	; 255
     562:	b1 05       	cpc	r27, r1
     564:	10 f0       	brcs	.+4      	; 0x56a <M128_HMI_Form_put+0x36>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	38 c0       	rjmp	.+112    	; 0x5da <M128_HMI_Form_put+0xa6>
     56a:	8a 2f       	mov	r24, r26
     56c:	2a 2f       	mov	r18, r26
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	26 0f       	add	r18, r22
     576:	37 1f       	adc	r19, r23
     578:	93 2f       	mov	r25, r19
     57a:	5d 9b       	sbis	0x0b, 5	; 11
     57c:	fe cf       	rjmp	.-4      	; 0x57a <M128_HMI_Form_put+0x46>
     57e:	9c b9       	out	0x0c, r25	; 12
     580:	5d 9b       	sbis	0x0b, 5	; 11
     582:	fe cf       	rjmp	.-4      	; 0x580 <M128_HMI_Form_put+0x4c>
     584:	2c b9       	out	0x0c, r18	; 12
     586:	5d 9b       	sbis	0x0b, 5	; 11
     588:	fe cf       	rjmp	.-4      	; 0x586 <M128_HMI_Form_put+0x52>
     58a:	8c b9       	out	0x0c, r24	; 12
     58c:	a2 2f       	mov	r26, r18
     58e:	a8 0f       	add	r26, r24
     590:	a9 0f       	add	r26, r25
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0a c0       	rjmp	.+20     	; 0x5ae <M128_HMI_Form_put+0x7a>
     59a:	fe 01       	movw	r30, r28
     59c:	e2 0f       	add	r30, r18
     59e:	f3 1f       	adc	r31, r19
     5a0:	e0 81       	ld	r30, Z
     5a2:	5d 9b       	sbis	0x0b, 5	; 11
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <M128_HMI_Form_put+0x6e>
     5a6:	ec b9       	out	0x0c, r30	; 12
     5a8:	ae 0f       	add	r26, r30
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	98 f3       	brcs	.-26     	; 0x59a <M128_HMI_Form_put+0x66>
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	09 c0       	rjmp	.+18     	; 0x5cc <M128_HMI_Form_put+0x98>
     5ba:	fa 01       	movw	r30, r20
     5bc:	e8 0f       	add	r30, r24
     5be:	f9 1f       	adc	r31, r25
     5c0:	e0 81       	ld	r30, Z
     5c2:	5d 9b       	sbis	0x0b, 5	; 11
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <M128_HMI_Form_put+0x8e>
     5c6:	ec b9       	out	0x0c, r30	; 12
     5c8:	ae 0f       	add	r26, r30
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	86 17       	cp	r24, r22
     5ce:	97 07       	cpc	r25, r23
     5d0:	a0 f3       	brcs	.-24     	; 0x5ba <M128_HMI_Form_put+0x86>
     5d2:	5d 9b       	sbis	0x0b, 5	; 11
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <M128_HMI_Form_put+0x9e>
     5d6:	ac b9       	out	0x0c, r26	; 12
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <ASA_SDC00_Select>:
}

/**** Functions ****/
void ASA_SDC00_Select(char ASA_ID)
{
	PORTB |= 0b00000101;	// Configure MOSI/SCK/CS as output
     5e0:	98 b3       	in	r25, 0x18	; 24
     5e2:	95 60       	ori	r25, 0x05	; 5
     5e4:	98 bb       	out	0x18, r25	; 24
	DDRB  |= 0b00000111;
     5e6:	97 b3       	in	r25, 0x17	; 23
     5e8:	97 60       	ori	r25, 0x07	; 7
     5ea:	97 bb       	out	0x17, r25	; 23
	SPCR = 0x52;			// Enable SPI function in mode 0
     5ec:	92 e5       	ldi	r25, 0x52	; 82
     5ee:	9d b9       	out	0x0d, r25	; 13
	SPSR = 0x01;			// SPI 2x mode
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	9e b9       	out	0x0e, r25	; 14
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     5f4:	97 b3       	in	r25, 0x17	; 23
     5f6:	90 6e       	ori	r25, 0xE0	; 224
     5f8:	97 bb       	out	0x17, r25	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
     5fa:	88 30       	cpi	r24, 0x08	; 8
     5fc:	48 f4       	brcc	.+18     	; 0x610 <ASA_SDC00_Select+0x30>
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     5fe:	28 b3       	in	r18, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
     600:	30 e2       	ldi	r19, 0x20	; 32
     602:	83 9f       	mul	r24, r19
     604:	c0 01       	movw	r24, r0
     606:	11 24       	eor	r1, r1
     608:	92 2f       	mov	r25, r18
     60a:	9f 71       	andi	r25, 0x1F	; 31
     60c:	89 2b       	or	r24, r25
		ADDR_PORT  = ASA_ID_temp;
     60e:	88 bb       	out	0x18, r24	; 24
     610:	08 95       	ret

00000612 <ASA_SDC00_Deselect>:
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     612:	87 b3       	in	r24, 0x17	; 23
     614:	80 6e       	ori	r24, 0xE0	; 224
     616:	87 bb       	out	0x17, r24	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     618:	88 b3       	in	r24, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
     61a:	8f 71       	andi	r24, 0x1F	; 31
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
		ADDR_PORT  = ASA_ID_temp;
     61c:	88 bb       	out	0x18, r24	; 24
	ASA_ID_set(ASA_ID);
}
void ASA_SDC00_Deselect(void)
{
	ASA_ID_set(0);
	SPCR = 0;				// Disable SPI function
     61e:	1d b8       	out	0x0d, r1	; 13
	DDRB  &= ~0b00000111;	// Set MOSI/SCK/CS as hi-z
     620:	87 b3       	in	r24, 0x17	; 23
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~0b00000111;
     626:	88 b3       	in	r24, 0x18	; 24
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	88 bb       	out	0x18, r24	; 24
	PORTB |=  0b00000000;
     62c:	88 b3       	in	r24, 0x18	; 24
     62e:	88 bb       	out	0x18, r24	; 24
     630:	08 95       	ret

00000632 <ASA_SDC00_Init>:
}

char ASA_SDC00_Init(char ASA_ID)
{
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
	////		res = 2;
	////return ARRTC_INVALID_ERR;
	//}


	ASA_SDC00_Select(0);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	d3 df       	rcall	.-90     	; 0x5e0 <ASA_SDC00_Select>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63a:	87 ea       	ldi	r24, 0xA7	; 167
     63c:	91 e6       	ldi	r25, 0x61	; 97
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <ASA_SDC00_Init+0xc>
     642:	00 c0       	rjmp	.+0      	; 0x644 <ASA_SDC00_Init+0x12>
     644:	00 00       	nop
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     646:	87 b3       	in	r24, 0x17	; 23
     648:	80 6e       	ori	r24, 0xE0	; 224
     64a:	87 bb       	out	0x17, r24	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
     64c:	c8 30       	cpi	r28, 0x08	; 8
     64e:	40 f4       	brcc	.+16     	; 0x660 <ASA_SDC00_Init+0x2e>
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     650:	28 b3       	in	r18, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
     652:	30 e2       	ldi	r19, 0x20	; 32
     654:	c3 9f       	mul	r28, r19
     656:	c0 01       	movw	r24, r0
     658:	11 24       	eor	r1, r1
     65a:	2f 71       	andi	r18, 0x1F	; 31
     65c:	82 2b       	or	r24, r18
		ADDR_PORT  = ASA_ID_temp;
     65e:	88 bb       	out	0x18, r24	; 24
#ifdef _DEBUG_INFO
	printf("Set ASA ID :%d \n", ASA_ID);
#endif
	ASA_ID_set(ASA_ID);

	if( f_mount(&FatFs[0], "", 1) != FR_OK )			// SD card mount a volume
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	68 e6       	ldi	r22, 0x68	; 104
     664:	72 e0       	ldi	r23, 0x02	; 2
     666:	83 ef       	ldi	r24, 0xF3	; 243
     668:	93 e0       	ldi	r25, 0x03	; 3
     66a:	0e 94 b2 14 	call	0x2964	; 0x2964 <f_mount>
     66e:	81 11       	cpse	r24, r1
     670:	28 c0       	rjmp	.+80     	; 0x6c2 <ASA_SDC00_Init+0x90>
	else {
		printf("Mount ID<%d> successful\n", ASA_ID);
	}
#endif

	if( f_chdir(ASA_DATA_Dir) != FR_OK )			// Trying goto ASA default directory
     672:	84 e1       	ldi	r24, 0x14	; 20
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_chdir>
     67a:	88 23       	and	r24, r24
     67c:	81 f0       	breq	.+32     	; 0x69e <ASA_SDC00_Init+0x6c>
	{
		f_mkdir(ASA_DATA_Dir);						// If ASA Default directory don't exist, then create one
     67e:	84 e1       	ldi	r24, 0x14	; 20
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 90 1c 	call	0x3920	; 0x3920 <f_mkdir>
		if( f_chdir(ASA_DATA_Dir) != FR_OK ) {		// Goto ASA Default directory again
     686:	84 e1       	ldi	r24, 0x14	; 20
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_chdir>
     68e:	81 11       	cpse	r24, r1
     690:	14 c0       	rjmp	.+40     	; 0x6ba <ASA_SDC00_Init+0x88>
			res += 1;
		}
		else {
			ASA_SDC00_ID = ASA_ID;
     692:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <ASA_SDC00_ID>
			ASA_DATA_Dir[0] = '\0';					// While successful goto default dir, reset ASA_DATA_Dir
     696:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ASA_DATA_Dir>

	ASA_SDC00_Select(0);

	_delay_ms(100);

	res = 0;
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <ASA_SDC00_Init+0x8a>
			ASA_DATA_Dir[0] = '\0';					// While successful goto default dir, reset ASA_DATA_Dir
		}
	}
	else
	{
		f_chdir("\\");
     69e:	81 e2       	ldi	r24, 0x21	; 33
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_chdir>
		f_chdir(ASA_DATA_Dir);
     6a6:	84 e1       	ldi	r24, 0x14	; 20
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_chdir>
		ASA_SDC00_ID = ASA_ID;
     6ae:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <ASA_SDC00_ID>
		ASA_DATA_Dir[0] = '\0';						// go to target folder and set default path to root
     6b2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ASA_DATA_Dir>

	ASA_SDC00_Select(0);

	_delay_ms(100);

	res = 0;
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <ASA_SDC00_Init+0x8a>
		f_chdir(ASA_DATA_Dir);
		ASA_SDC00_ID = ASA_ID;
		ASA_DATA_Dir[0] = '\0';						// go to target folder and set default path to root
	}

	ASA_SDC00_Deselect();
     6ba:	c1 e0       	ldi	r28, 0x01	; 1
     6bc:	aa df       	rcall	.-172    	; 0x612 <ASA_SDC00_Deselect>
#ifdef _DEBUG_INFO
	printf("<SDC00_Init> Initialize with result : %d \n", res);
#endif
	return res;
     6be:	8c 2f       	mov	r24, r28
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <ASA_SDC00_Init+0x92>
	{
#ifdef _DEBUG_INFO
		printf("Mount ID<%d> Failed\n", ASA_ID);
#endif
		res = 1;
		return res;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
	ASA_SDC00_Deselect();
#ifdef _DEBUG_INFO
	printf("<SDC00_Init> Initialize with result : %d \n", res);
#endif
	return res;
}
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <ASA_SDC00_set>:

char ASA_SDC00_set(char ASA_ID, char LSByte, char Mask, char shift, char Data)
{
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	c8 2f       	mov	r28, r24
     6d4:	16 2f       	mov	r17, r22
     6d6:	f4 2e       	mov	r15, r20
     6d8:	d2 2f       	mov	r29, r18
	char set_Data = 0;
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
     6da:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <SDC_Init_Success_Flag>
     6de:	81 11       	cpse	r24, r1
     6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <ASA_SDC00_set+0x28>
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
     6e2:	8c 2f       	mov	r24, r28
     6e4:	a6 df       	rcall	.-180    	; 0x632 <ASA_SDC00_Init>
     6e6:	81 11       	cpse	r24, r1
     6e8:	77 c0       	rjmp	.+238    	; 0x7d8 <ASA_SDC00_set+0x110>
		SDC_Init_Success_Flag = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <SDC_Init_Success_Flag>
		else
		return ARSDC_SDC_STATE_ERR;
	}
	if( ASA_SDC00_ID != ASA_ID )	// Not a valid ASA_ID
     6f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ASA_SDC00_ID>
     6f4:	c8 13       	cpse	r28, r24
     6f6:	72 c0       	rjmp	.+228    	; 0x7dc <ASA_SDC00_set+0x114>
	return ARSDC_ID_ERR;
	if( shift > 7 || shift < 0 )	// Not a valid shift value ( 0 <= shift <= 7 )
     6f8:	d8 30       	cpi	r29, 0x08	; 8
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <ASA_SDC00_set+0x36>
     6fc:	71 c0       	rjmp	.+226    	; 0x7e0 <ASA_SDC00_set+0x118>
	return ARSDC_SHIFT_ERR;
	set_Data = (set_Data & (~Mask)) | ((Data<<shift) & Mask);
	ASA_SDC00_Select(ASA_ID);
     6fe:	8c 2f       	mov	r24, r28
     700:	6f df       	rcall	.-290    	; 0x5e0 <ASA_SDC00_Select>
	switch(LSByte)
     702:	18 3c       	cpi	r17, 0xC8	; 200
     704:	09 f0       	breq	.+2      	; 0x708 <ASA_SDC00_set+0x40>
     706:	6e c0       	rjmp	.+220    	; 0x7e4 <ASA_SDC00_set+0x11c>
	{
		case LSBYTE_MODE:
		switch(set_Data)
     708:	40 2f       	mov	r20, r16
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	02 c0       	rjmp	.+4      	; 0x712 <ASA_SDC00_set+0x4a>
     70e:	44 0f       	add	r20, r20
     710:	55 1f       	adc	r21, r21
     712:	da 95       	dec	r29
     714:	e2 f7       	brpl	.-8      	; 0x70e <ASA_SDC00_set+0x46>
     716:	4f 21       	and	r20, r15
     718:	41 30       	cpi	r20, 0x01	; 1
     71a:	91 f0       	breq	.+36     	; 0x740 <ASA_SDC00_set+0x78>
     71c:	1c f4       	brge	.+6      	; 0x724 <ASA_SDC00_set+0x5c>
     71e:	44 23       	and	r20, r20
     720:	31 f0       	breq	.+12     	; 0x72e <ASA_SDC00_set+0x66>
     722:	62 c0       	rjmp	.+196    	; 0x7e8 <ASA_SDC00_set+0x120>
     724:	45 30       	cpi	r20, 0x05	; 5
     726:	e9 f0       	breq	.+58     	; 0x762 <ASA_SDC00_set+0x9a>
     728:	47 30       	cpi	r20, 0x07	; 7
     72a:	a9 f1       	breq	.+106    	; 0x796 <ASA_SDC00_set+0xce>
     72c:	5d c0       	rjmp	.+186    	; 0x7e8 <ASA_SDC00_set+0x120>
		{
			case SDC_FCF_CLOSE:			// Close file
				f_close(&FileObj);
     72e:	89 e5       	ldi	r24, 0x59	; 89
     730:	98 e0       	ldi	r25, 0x08	; 8
     732:	0e 94 2e 1a 	call	0x345c	; 0x345c <f_close>
				SDC_State = 0;
     736:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <SDC_State>
				is_file_extcheck = 0;
     73a:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <is_file_extcheck>
				break;
     73e:	49 c0       	rjmp	.+146    	; 0x7d2 <ASA_SDC00_set+0x10a>

			case SDC_FCF_READ:			// Open File (Read only)
				// Check there is a Closed file state
				if(SDC_State != 0) {
     740:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     744:	81 11       	cpse	r24, r1
     746:	52 c0       	rjmp	.+164    	; 0x7ec <ASA_SDC00_set+0x124>
#endif
					return ARSDC_OPEN_FILE_ERR;
				}

				// TODO: need to make sure there is "FileName already setup"
				if( f_open(&FileObj, FileName, FA_READ) != FR_OK )
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	63 ea       	ldi	r22, 0xA3	; 163
     74c:	78 e0       	ldi	r23, 0x08	; 8
     74e:	89 e5       	ldi	r24, 0x59	; 89
     750:	98 e0       	ldi	r25, 0x08	; 8
     752:	0e 94 f7 14 	call	0x29ee	; 0x29ee <f_open>
     756:	81 11       	cpse	r24, r1
     758:	4b c0       	rjmp	.+150    	; 0x7f0 <ASA_SDC00_set+0x128>
					return ARSDC_OPEN_FILE_ERR;
				SDC_State = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <SDC_State>
				break;
     760:	38 c0       	rjmp	.+112    	; 0x7d2 <ASA_SDC00_set+0x10a>

			case SDC_FCF_OVERWRITE:		// if there is [Open file with override] mode
				// Check there is a Closed file state
				if(SDC_State != 0) {
     762:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     766:	81 11       	cpse	r24, r1
     768:	45 c0       	rjmp	.+138    	; 0x7f4 <ASA_SDC00_set+0x12c>
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
				}
				if( f_open(&FileObj, FileName, FA_CREATE_ALWAYS) != FR_OK )	// force create new file to override
     76a:	48 e0       	ldi	r20, 0x08	; 8
     76c:	63 ea       	ldi	r22, 0xA3	; 163
     76e:	78 e0       	ldi	r23, 0x08	; 8
     770:	89 e5       	ldi	r24, 0x59	; 89
     772:	98 e0       	ldi	r25, 0x08	; 8
     774:	0e 94 f7 14 	call	0x29ee	; 0x29ee <f_open>
     778:	81 11       	cpse	r24, r1
     77a:	3e c0       	rjmp	.+124    	; 0x7f8 <ASA_SDC00_set+0x130>
					return ARSDC_SDC_STATE_ERR;
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
     77c:	42 e0       	ldi	r20, 0x02	; 2
     77e:	63 ea       	ldi	r22, 0xA3	; 163
     780:	78 e0       	ldi	r23, 0x08	; 8
     782:	89 e5       	ldi	r24, 0x59	; 89
     784:	98 e0       	ldi	r25, 0x08	; 8
     786:	0e 94 f7 14 	call	0x29ee	; 0x29ee <f_open>
     78a:	81 11       	cpse	r24, r1
     78c:	37 c0       	rjmp	.+110    	; 0x7fc <ASA_SDC00_set+0x134>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <SDC_State>
				break;
     794:	1e c0       	rjmp	.+60     	; 0x7d2 <ASA_SDC00_set+0x10a>
			case SDC_FCF_CONTINUEWRITE:	// if there is [Open file with append] mode
				// Check there is a Closed file state
				if(SDC_State != 0) {
     796:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     79a:	81 11       	cpse	r24, r1
     79c:	31 c0       	rjmp	.+98     	; 0x800 <ASA_SDC00_set+0x138>
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
				}
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
     79e:	42 e0       	ldi	r20, 0x02	; 2
     7a0:	63 ea       	ldi	r22, 0xA3	; 163
     7a2:	78 e0       	ldi	r23, 0x08	; 8
     7a4:	89 e5       	ldi	r24, 0x59	; 89
     7a6:	98 e0       	ldi	r25, 0x08	; 8
     7a8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <f_open>
     7ac:	81 11       	cpse	r24, r1
     7ae:	2a c0       	rjmp	.+84     	; 0x804 <ASA_SDC00_set+0x13c>
					return ARSDC_SDC_STATE_ERR;
				if( f_lseek(&FileObj, f_size(&FileObj)) != FR_OK )			// set data cursor to EOF to append data
     7b0:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <FileObj+0xa>
     7b4:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <FileObj+0xb>
     7b8:	60 91 65 08 	lds	r22, 0x0865	; 0x800865 <FileObj+0xc>
     7bc:	70 91 66 08 	lds	r23, 0x0866	; 0x800866 <FileObj+0xd>
     7c0:	89 e5       	ldi	r24, 0x59	; 89
     7c2:	98 e0       	ldi	r25, 0x08	; 8
     7c4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <f_lseek>
     7c8:	81 11       	cpse	r24, r1
     7ca:	1e c0       	rjmp	.+60     	; 0x808 <ASA_SDC00_set+0x140>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <SDC_State>
		return ARSDC_LSBYTE_ERR;
		break;

	}

	ASA_SDC00_Deselect();
     7d2:	1f df       	rcall	.-450    	; 0x612 <ASA_SDC00_Deselect>

	return ARSDC_OK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	19 c0       	rjmp	.+50     	; 0x80a <ASA_SDC00_set+0x142>
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
		SDC_Init_Success_Flag = 1;
		else
		return ARSDC_SDC_STATE_ERR;
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	17 c0       	rjmp	.+46     	; 0x80a <ASA_SDC00_set+0x142>
	}
	if( ASA_SDC00_ID != ASA_ID )	// Not a valid ASA_ID
	return ARSDC_ID_ERR;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	15 c0       	rjmp	.+42     	; 0x80a <ASA_SDC00_set+0x142>
	if( shift > 7 || shift < 0 )	// Not a valid shift value ( 0 <= shift <= 7 )
	return ARSDC_SHIFT_ERR;
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	13 c0       	rjmp	.+38     	; 0x80a <ASA_SDC00_set+0x142>
			default:	// Multiple command, command error
				return ARSDC_MUTI_SET_ERR;
		}
		break;
		default:	// LSByte error, not list on the register table
		return ARSDC_LSBYTE_ERR;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	11 c0       	rjmp	.+34     	; 0x80a <ASA_SDC00_set+0x142>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
				break;

			default:	// Multiple command, command error
				return ARSDC_MUTI_SET_ERR;
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     7ec:	86 e0       	ldi	r24, 0x06	; 6
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <ASA_SDC00_set+0x142>
				}

				// TODO: need to make sure there is "FileName already setup"
				if( f_open(&FileObj, FileName, FA_READ) != FR_OK )
					return ARSDC_OPEN_FILE_ERR;
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	0b c0       	rjmp	.+22     	; 0x80a <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	09 c0       	rjmp	.+18     	; 0x80a <ASA_SDC00_set+0x142>
				}
				if( f_open(&FileObj, FileName, FA_CREATE_ALWAYS) != FR_OK )	// force create new file to override
					return ARSDC_SDC_STATE_ERR;
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <ASA_SDC00_set+0x142>
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
					return ARSDC_SDC_STATE_ERR;
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	03 c0       	rjmp	.+6      	; 0x80a <ASA_SDC00_set+0x142>
				}
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
					return ARSDC_SDC_STATE_ERR;
     804:	87 e0       	ldi	r24, 0x07	; 7
     806:	01 c0       	rjmp	.+2      	; 0x80a <ASA_SDC00_set+0x142>
				if( f_lseek(&FileObj, f_size(&FileObj)) != FR_OK )			// set data cursor to EOF to append data
					return ARSDC_SDC_STATE_ERR;
     808:	87 e0       	ldi	r24, 0x07	; 7
	}

	ASA_SDC00_Deselect();

	return ARSDC_OK;
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	08 95       	ret

00000816 <ASA_SDC00_put>:

char ASA_SDC00_put(char ASA_ID, char LSByte, char Bytes, void *Data_p)
{
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <ASA_SDC00_put+0x10>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	f8 2e       	mov	r15, r24
     82c:	16 2f       	mov	r17, r22
     82e:	04 2f       	mov	r16, r20
     830:	69 01       	movw	r12, r18
	FRESULT res;
	unsigned int WriteBytes;

	if( LSByte == 200 )					// set File control flag register
     832:	68 3c       	cpi	r22, 0xC8	; 200
     834:	39 f4       	brne	.+14     	; 0x844 <ASA_SDC00_put+0x2e>
		return ASA_SDC00_set(ASA_ID, LSByte, 0xFF, 0x00, (char)((char*)Data_p)[0]);
     836:	f9 01       	movw	r30, r18
     838:	00 81       	ld	r16, Z
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	4f ef       	ldi	r20, 0xFF	; 255
     83e:	68 ec       	ldi	r22, 0xC8	; 200
     840:	43 df       	rcall	.-378    	; 0x6c8 <ASA_SDC00_set>
     842:	f7 c0       	rjmp	.+494    	; 0xa32 <ASA_SDC00_put+0x21c>

	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
     844:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <SDC_Init_Success_Flag>
     848:	81 11       	cpse	r24, r1
     84a:	07 c0       	rjmp	.+14     	; 0x85a <ASA_SDC00_put+0x44>
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
     84c:	8f 2d       	mov	r24, r15
     84e:	f1 de       	rcall	.-542    	; 0x632 <ASA_SDC00_Init>
     850:	81 11       	cpse	r24, r1
     852:	bf c0       	rjmp	.+382    	; 0x9d2 <ASA_SDC00_put+0x1bc>
		SDC_Init_Success_Flag = 1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <SDC_Init_Success_Flag>
		else
		return ARSDC_SDC_STATE_ERR;
	}
	if( ASA_SDC00_ID != ASA_ID )
     85a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ASA_SDC00_ID>
     85e:	f8 12       	cpse	r15, r24
     860:	ba c0       	rjmp	.+372    	; 0x9d6 <ASA_SDC00_put+0x1c0>
		return ARSDC_ID_ERR;
	if( LSByte == 0 )
     862:	11 11       	cpse	r17, r1
     864:	03 c0       	rjmp	.+6      	; 0x86c <ASA_SDC00_put+0x56>
		if( Bytes > 64 || Bytes < 0 )
     866:	01 34       	cpi	r16, 0x41	; 65
     868:	08 f0       	brcs	.+2      	; 0x86c <ASA_SDC00_put+0x56>
			return ARSDC_BYTES_ERR;

	ASA_SDC00_Select(ASA_ID);
     86a:	b7 c0       	rjmp	.+366    	; 0x9da <ASA_SDC00_put+0x1c4>
     86c:	8f 2d       	mov	r24, r15
     86e:	b8 de       	rcall	.-656    	; 0x5e0 <ASA_SDC00_Select>
	static char name_buffer[8];
	static char name_ext_buffer[3];
#ifdef _DEBUG_INFO
	printf("<State> SDC status: %d\n", SDC_State);
#endif
	switch(SDC_State)
     870:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	09 f4       	brne	.+2      	; 0x87a <ASA_SDC00_put+0x64>
     878:	b2 c0       	rjmp	.+356    	; 0x9de <ASA_SDC00_put+0x1c8>
     87a:	20 f0       	brcs	.+8      	; 0x884 <ASA_SDC00_put+0x6e>
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	09 f4       	brne	.+2      	; 0x882 <ASA_SDC00_put+0x6c>
     880:	50 c0       	rjmp	.+160    	; 0x922 <ASA_SDC00_put+0x10c>
     882:	5e c0       	rjmp	.+188    	; 0x940 <ASA_SDC00_put+0x12a>
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
     884:	10 34       	cpi	r17, 0x40	; 64
     886:	69 f0       	breq	.+26     	; 0x8a2 <ASA_SDC00_put+0x8c>
     888:	18 34       	cpi	r17, 0x48	; 72
     88a:	09 f0       	breq	.+2      	; 0x88e <ASA_SDC00_put+0x78>
     88c:	aa c0       	rjmp	.+340    	; 0x9e2 <ASA_SDC00_put+0x1cc>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     88e:	f6 01       	movw	r30, r12
     890:	20 81       	ld	r18, Z
     892:	22 23       	and	r18, r18
     894:	b1 f1       	breq	.+108    	; 0x902 <ASA_SDC00_put+0xec>
     896:	80 2f       	mov	r24, r16
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	09 f0       	breq	.+2      	; 0x8a0 <ASA_SDC00_put+0x8a>
     89e:	b8 c0       	rjmp	.+368    	; 0xa10 <ASA_SDC00_put+0x1fa>
     8a0:	33 c0       	rjmp	.+102    	; 0x908 <ASA_SDC00_put+0xf2>
				for(int i=0; i<SZ_NAME_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Namebuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte 7
					if(((char*)Data_p)[i] == '\0' || i ==(SZ_NAME_BUF-1) || i== Bytes) {
     8a2:	f6 01       	movw	r30, r12
     8a4:	20 81       	ld	r18, Z
     8a6:	22 23       	and	r18, r18
     8a8:	81 f0       	breq	.+32     	; 0x8ca <ASA_SDC00_put+0xb4>
     8aa:	80 2f       	mov	r24, r16
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <ASA_SDC00_put+0x9e>
     8b2:	a5 c0       	rjmp	.+330    	; 0x9fe <ASA_SDC00_put+0x1e8>
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <ASA_SDC00_put+0xba>
     8b6:	41 91       	ld	r20, Z+
     8b8:	44 23       	and	r20, r20
     8ba:	61 f0       	breq	.+24     	; 0x8d4 <ASA_SDC00_put+0xbe>
     8bc:	27 30       	cpi	r18, 0x07	; 7
     8be:	31 05       	cpc	r19, r1
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <ASA_SDC00_put+0xbe>
     8c2:	82 17       	cp	r24, r18
     8c4:	93 07       	cpc	r25, r19
     8c6:	59 f4       	brne	.+22     	; 0x8de <ASA_SDC00_put+0xc8>
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <ASA_SDC00_put+0xbe>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <ASA_SDC00_put+0xbe>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
						name_buffer[i] = '\0';
     8d4:	f9 01       	movw	r30, r18
     8d6:	e5 53       	subi	r30, 0x35	; 53
     8d8:	fc 4f       	sbci	r31, 0xFC	; 252
     8da:	10 82       	st	Z, r1
						break;
     8dc:	88 c0       	rjmp	.+272    	; 0x9ee <ASA_SDC00_put+0x1d8>
					}
					name_buffer[i] = ((char*)Data_p)[i];
     8de:	4d 93       	st	X+, r20
	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
			case LSBYTE_NAME_BUF:
				for(int i=0; i<SZ_NAME_BUF; i++) {
     8e0:	2f 5f       	subi	r18, 0xFF	; 255
     8e2:	3f 4f       	sbci	r19, 0xFF	; 255
     8e4:	28 30       	cpi	r18, 0x08	; 8
     8e6:	31 05       	cpc	r19, r1
     8e8:	31 f7       	brne	.-52     	; 0x8b6 <ASA_SDC00_put+0xa0>
     8ea:	81 c0       	rjmp	.+258    	; 0x9ee <ASA_SDC00_put+0x1d8>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	10 c0       	rjmp	.+32     	; 0x912 <ASA_SDC00_put+0xfc>
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0d c0       	rjmp	.+26     	; 0x912 <ASA_SDC00_put+0xfc>
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     8f8:	02 97       	sbiw	r24, 0x02	; 2
     8fa:	81 f4       	brne	.+32     	; 0x91c <ASA_SDC00_put+0x106>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 c0       	rjmp	.+16     	; 0x912 <ASA_SDC00_put+0xfc>
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	05 c0       	rjmp	.+10     	; 0x912 <ASA_SDC00_put+0xfc>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <ASA_SDC00_put+0xfc>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
						name_ext_buffer[i] = '\0';
     912:	fc 01       	movw	r30, r24
     914:	e8 53       	subi	r30, 0x38	; 56
     916:	fc 4f       	sbci	r31, 0xFC	; 252
     918:	10 82       	st	Z, r1
						break;
     91a:	69 c0       	rjmp	.+210    	; 0x9ee <ASA_SDC00_put+0x1d8>
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     91c:	20 93 ca 03 	sts	0x03CA, r18	; 0x8003ca <name_ext_buffer.2193+0x2>
     920:	66 c0       	rjmp	.+204    	; 0x9ee <ASA_SDC00_put+0x1d8>
			break;
		case 1:	// If current is at Opened file mode (Read Only)
			return ARSDC_READ_SETTING;
			break;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			if( LSByte == 0 ) {
     922:	11 11       	cpse	r17, r1
     924:	86 c0       	rjmp	.+268    	; 0xa32 <ASA_SDC00_put+0x21c>
					if((i+1)%8 == 0) {
						printf("\n");
					}
				}
#endif
				res = f_write(&FileObj, Data_p, Bytes, &WriteBytes);
     926:	40 2f       	mov	r20, r16
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	9e 01       	movw	r18, r28
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	b6 01       	movw	r22, r12
     932:	89 e5       	ldi	r24, 0x59	; 89
     934:	98 e0       	ldi	r25, 0x08	; 8
     936:	0e 94 0b 18 	call	0x3016	; 0x3016 <f_write>
				if( res ) {
     93a:	81 11       	cpse	r24, r1
     93c:	54 c0       	rjmp	.+168    	; 0x9e6 <ASA_SDC00_put+0x1d0>
			else
				return ARSDC_LSBYTE_ERR;
			break;
	}

	ASA_SDC00_Deselect();
     93e:	57 c0       	rjmp	.+174    	; 0x9ee <ASA_SDC00_put+0x1d8>
     940:	68 de       	rcall	.-816    	; 0x612 <ASA_SDC00_Deselect>

	// While in closed file mode, then update full filename
	if(SDC_State == 0) {
     942:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     946:	81 11       	cpse	r24, r1
     948:	50 c0       	rjmp	.+160    	; 0x9ea <ASA_SDC00_put+0x1d4>
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
			if(name_buffer[i] == '\0') {
     94a:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <name_buffer.2192>
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <ASA_SDC00_put+0x13e>
     952:	6f c0       	rjmp	.+222    	; 0xa32 <ASA_SDC00_put+0x21c>
     954:	ec ec       	ldi	r30, 0xCC	; 204
     956:	f3 e0       	ldi	r31, 0x03	; 3
	printf("name_buffer = %s\n", name_buffer);
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	30 e0       	ldi	r19, 0x00	; 0
			if(name_buffer[i] == '\0') {
     95c:	81 91       	ld	r24, Z+
     95e:	81 11       	cpse	r24, r1
     960:	04 c0       	rjmp	.+8      	; 0x96a <ASA_SDC00_put+0x154>
				sz_name_buffer = i;
     962:	42 2f       	mov	r20, r18
				break;
			}
		}

		if(sz_name_buffer > 0) {
     964:	12 16       	cp	r1, r18
     966:	44 f0       	brlt	.+16     	; 0x978 <ASA_SDC00_put+0x162>
     968:	64 c0       	rjmp	.+200    	; 0xa32 <ASA_SDC00_put+0x21c>
	printf("name_buffer = %s\n", name_buffer);
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	28 30       	cpi	r18, 0x08	; 8
     970:	31 05       	cpc	r19, r1
     972:	a1 f7       	brne	.-24     	; 0x95c <ASA_SDC00_put+0x146>
#endif
		}

	}

	return 0;
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	5d c0       	rjmp	.+186    	; 0xa32 <ASA_SDC00_put+0x21c>
				break;
			}
		}

		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
     978:	02 2e       	mov	r0, r18
     97a:	00 0c       	add	r0, r0
     97c:	33 0b       	sbc	r19, r19
     97e:	12 16       	cp	r1, r18
     980:	13 06       	cpc	r1, r19
     982:	7c f4       	brge	.+30     	; 0x9a2 <ASA_SDC00_put+0x18c>
     984:	eb ec       	ldi	r30, 0xCB	; 203
     986:	f3 e0       	ldi	r31, 0x03	; 3
     988:	a3 ea       	ldi	r26, 0xA3	; 163
     98a:	b8 e0       	ldi	r27, 0x08	; 8
     98c:	64 2f       	mov	r22, r20
     98e:	04 2e       	mov	r0, r20
     990:	00 0c       	add	r0, r0
     992:	77 0b       	sbc	r23, r23
     994:	65 53       	subi	r22, 0x35	; 53
     996:	7c 4f       	sbci	r23, 0xFC	; 252
				FileName[i] = name_buffer[i];
     998:	91 91       	ld	r25, Z+
     99a:	9d 93       	st	X+, r25
				break;
			}
		}

		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
     99c:	6e 17       	cp	r22, r30
     99e:	7f 07       	cpc	r23, r31
     9a0:	d9 f7       	brne	.-10     	; 0x998 <ASA_SDC00_put+0x182>
				FileName[i] = name_buffer[i];
			}
			FileName[sz_name_buffer] = '.';
     9a2:	9e e2       	ldi	r25, 0x2E	; 46
     9a4:	f9 01       	movw	r30, r18
     9a6:	ed 55       	subi	r30, 0x5D	; 93
     9a8:	f7 4f       	sbci	r31, 0xF7	; 247
     9aa:	90 83       	st	Z, r25
     9ac:	a8 ec       	ldi	r26, 0xC8	; 200
     9ae:	b3 e0       	ldi	r27, 0x03	; 3
     9b0:	e4 2f       	mov	r30, r20
     9b2:	44 0f       	add	r20, r20
     9b4:	ff 0b       	sbc	r31, r31
     9b6:	ec 55       	subi	r30, 0x5C	; 92
     9b8:	f7 4f       	sbci	r31, 0xF7	; 247
     9ba:	4b ec       	ldi	r20, 0xCB	; 203
     9bc:	53 e0       	ldi	r21, 0x03	; 3
			for(int i=0; i<3; i++) {
				FileName[sz_name_buffer+1+i] = name_ext_buffer[i];
     9be:	9d 91       	ld	r25, X+
     9c0:	91 93       	st	Z+, r25
		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
				FileName[i] = name_buffer[i];
			}
			FileName[sz_name_buffer] = '.';
			for(int i=0; i<3; i++) {
     9c2:	4a 17       	cp	r20, r26
     9c4:	5b 07       	cpc	r21, r27
     9c6:	d9 f7       	brne	.-10     	; 0x9be <ASA_SDC00_put+0x1a8>
				FileName[sz_name_buffer+1+i] = name_ext_buffer[i];
			}
			FileName[sz_name_buffer+4] = '\0';
     9c8:	f9 01       	movw	r30, r18
     9ca:	ed 55       	subi	r30, 0x5D	; 93
     9cc:	f7 4f       	sbci	r31, 0xF7	; 247
     9ce:	14 82       	std	Z+4, r1	; 0x04
     9d0:	30 c0       	rjmp	.+96     	; 0xa32 <ASA_SDC00_put+0x21c>
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
		SDC_Init_Success_Flag = 1;
		else
		return ARSDC_SDC_STATE_ERR;
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	2e c0       	rjmp	.+92     	; 0xa32 <ASA_SDC00_put+0x21c>
	}
	if( ASA_SDC00_ID != ASA_ID )
		return ARSDC_ID_ERR;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	2c c0       	rjmp	.+88     	; 0xa32 <ASA_SDC00_put+0x21c>
	if( LSByte == 0 )
		if( Bytes > 64 || Bytes < 0 )
			return ARSDC_BYTES_ERR;
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	2a c0       	rjmp	.+84     	; 0xa32 <ASA_SDC00_put+0x21c>
			default:
				return ARSDC_NO_OPEN_FILE;
			}
			break;
		case 1:	// If current is at Opened file mode (Read Only)
			return ARSDC_READ_SETTING;
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	28 c0       	rjmp	.+80     	; 0xa32 <ASA_SDC00_put+0x21c>
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
				}
				break;
			default:
				return ARSDC_NO_OPEN_FILE;
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	26 c0       	rjmp	.+76     	; 0xa32 <ASA_SDC00_put+0x21c>
				res = f_write(&FileObj, Data_p, Bytes, &WriteBytes);
				if( res ) {
#ifdef _DEBUG_INFO
					printf("<FAT Write> write fail errorcode: %d\n", res);
#endif
					return ARSDC_SDC_STATE_ERR;
     9e6:	87 e0       	ldi	r24, 0x07	; 7
#endif
		}

	}

	return 0;
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <ASA_SDC00_put+0x21c>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
			else
				return ARSDC_LSBYTE_ERR;
			break;
	}

	ASA_SDC00_Deselect();
     9ec:	22 c0       	rjmp	.+68     	; 0xa32 <ASA_SDC00_put+0x21c>
     9ee:	11 de       	rcall	.-990    	; 0x612 <ASA_SDC00_Deselect>

	// While in closed file mode, then update full filename
	if(SDC_State == 0) {
     9f0:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <ASA_SDC00_put+0x1e4>
     9f8:	a8 cf       	rjmp	.-176    	; 0x94a <ASA_SDC00_put+0x134>
#endif
		}

	}

	return 0;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	1a c0       	rjmp	.+52     	; 0xa32 <ASA_SDC00_put+0x21c>
					// Copy each byte until EOF or At byte 7
					if(((char*)Data_p)[i] == '\0' || i ==(SZ_NAME_BUF-1) || i== Bytes) {
						name_buffer[i] = '\0';
						break;
					}
					name_buffer[i] = ((char*)Data_p)[i];
     9fe:	20 93 cb 03 	sts	0x03CB, r18	; 0x8003cb <name_buffer.2192>
     a02:	f6 01       	movw	r30, r12
     a04:	31 96       	adiw	r30, 0x01	; 1
     a06:	ac ec       	ldi	r26, 0xCC	; 204
     a08:	b3 e0       	ldi	r27, 0x03	; 3
	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
			case LSBYTE_NAME_BUF:
				for(int i=0; i<SZ_NAME_BUF; i++) {
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	53 cf       	rjmp	.-346    	; 0x8b6 <ASA_SDC00_put+0xa0>
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
						name_ext_buffer[i] = '\0';
						break;
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     a10:	20 93 c8 03 	sts	0x03C8, r18	; 0x8003c8 <name_ext_buffer.2193>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     a14:	f6 01       	movw	r30, r12
     a16:	21 81       	ldd	r18, Z+1	; 0x01
     a18:	22 23       	and	r18, r18
     a1a:	09 f4       	brne	.+2      	; 0xa1e <ASA_SDC00_put+0x208>
     a1c:	67 cf       	rjmp	.-306    	; 0x8ec <ASA_SDC00_put+0xd6>
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	91 05       	cpc	r25, r1
     a22:	09 f4       	brne	.+2      	; 0xa26 <ASA_SDC00_put+0x210>
     a24:	74 cf       	rjmp	.-280    	; 0x90e <ASA_SDC00_put+0xf8>
						name_ext_buffer[i] = '\0';
						break;
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     a26:	20 93 c9 03 	sts	0x03C9, r18	; 0x8003c9 <name_ext_buffer.2193+0x1>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     a2a:	22 81       	ldd	r18, Z+2	; 0x02
     a2c:	21 11       	cpse	r18, r1
     a2e:	64 cf       	rjmp	.-312    	; 0x8f8 <ASA_SDC00_put+0xe2>
     a30:	60 cf       	rjmp	.-320    	; 0x8f2 <ASA_SDC00_put+0xdc>
		}

	}

	return 0;
}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <check_info>:
	ASA_SDC00_Deselect();

	return 0;
}

FRESULT check_info(char* file_name, FILINFO* p_fno) {
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	64 97       	sbiw	r28, 0x14	; 20
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	7b 01       	movw	r14, r22

	char file_path[20];

	sprintf(file_path,"/%s/%s", "ASA_DATA", file_name);
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	83 e2       	ldi	r24, 0x23	; 35
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	8c e2       	ldi	r24, 0x2C	; 44
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	8e 01       	movw	r16, r28
     a7a:	0f 5f       	subi	r16, 0xFF	; 255
     a7c:	1f 4f       	sbci	r17, 0xFF	; 255
     a7e:	1f 93       	push	r17
     a80:	0f 93       	push	r16
     a82:	0e 94 17 34 	call	0x682e	; 0x682e <sprintf>
#ifdef _DEBUG_INFO
	printf("Check info for '%s'...\n", file_path);
#endif

	// Check for file
	fr = f_stat(file_path, p_fno);
     a86:	b7 01       	movw	r22, r14
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <f_stat>
		default:
		printf("An error occurred. (%d)\n", fr);
	}
#endif

	return fr;
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
}
     a98:	64 96       	adiw	r28, 0x14	; 20
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	08 95       	ret

00000ab2 <ASA_SDC00_get>:

	return 0;
}

char ASA_SDC00_get(char ASA_ID, char LSByte, char Bytes, void *Data_p)
{
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <ASA_SDC00_get+0xe>
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
	unsigned int ReadBytes;
	char* p_data = Data_p;
	static FILINFO fno;

	if( SDC_Init_Success_Flag == 0 )			// Check there is Initialized
     ac4:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <SDC_Init_Success_Flag>
     ac8:	99 23       	and	r25, r25
     aca:	09 f4       	brne	.+2      	; 0xace <ASA_SDC00_get+0x1c>
     acc:	88 c0       	rjmp	.+272    	; 0xbde <ASA_SDC00_get+0x12c>
		return ARSDC_SDC_STATE_ERR;
	if( ASA_SDC00_ID != ASA_ID )
     ace:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ASA_SDC00_ID>
     ad2:	98 13       	cpse	r25, r24
     ad4:	86 c0       	rjmp	.+268    	; 0xbe2 <ASA_SDC00_get+0x130>
		return ARSDC_ID_ERR;
	// TODO: Modify valid LSByte section
	//if( LSByte > 101 || LSByte < 100 )
	//return ARSDC_LSBYTE_ERR;
	if( LSByte == LSBYTE_DATA_SWAP_BUF )
     ad6:	61 11       	cpse	r22, r1
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <ASA_SDC00_get+0x2e>
		if( Bytes > 64 || Bytes < 0 )
     ada:	41 34       	cpi	r20, 0x41	; 65
     adc:	08 f0       	brcs	.+2      	; 0xae0 <ASA_SDC00_get+0x2e>
     ade:	83 c0       	rjmp	.+262    	; 0xbe6 <ASA_SDC00_get+0x134>
     ae0:	79 01       	movw	r14, r18
     ae2:	04 2f       	mov	r16, r20
     ae4:	16 2f       	mov	r17, r22
			return ARSDC_BYTES_ERR;

	ASA_SDC00_Select(ASA_ID);
     ae6:	89 2f       	mov	r24, r25
     ae8:	7b dd       	rcall	.-1290   	; 0x5e0 <ASA_SDC00_Select>

	switch(SDC_State)
     aea:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <SDC_State>
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	39 f0       	breq	.+14     	; 0xb00 <ASA_SDC00_get+0x4e>
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <ASA_SDC00_get+0x44>
     af4:	7a c0       	rjmp	.+244    	; 0xbea <ASA_SDC00_get+0x138>
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	09 f0       	breq	.+2      	; 0xafc <ASA_SDC00_get+0x4a>
     afa:	6f c0       	rjmp	.+222    	; 0xbda <ASA_SDC00_get+0x128>
			}

			// Successful operate
			return 0;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			return ARSDC_WRITE_SETTING;
     afc:	8c e0       	ldi	r24, 0x0C	; 12
     afe:	7e c0       	rjmp	.+252    	; 0xbfc <ASA_SDC00_get+0x14a>
			return ARSDC_NO_OPEN_FILE;
			break;
		case 1:	// If current is at Opened file mode (Read Only)

			// Check there is same file that was Checked
			if(!is_file_extcheck) {
     b00:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <is_file_extcheck>
     b04:	81 11       	cpse	r24, r1
     b06:	0a c0       	rjmp	.+20     	; 0xb1c <ASA_SDC00_get+0x6a>
				// Fetch file information first
				if(check_info(FileName, &fno) != FR_OK)
     b08:	62 eb       	ldi	r22, 0xB2	; 178
     b0a:	73 e0       	ldi	r23, 0x03	; 3
     b0c:	83 ea       	ldi	r24, 0xA3	; 163
     b0e:	98 e0       	ldi	r25, 0x08	; 8
     b10:	9a df       	rcall	.-204    	; 0xa46 <check_info>
     b12:	81 11       	cpse	r24, r1
     b14:	6c c0       	rjmp	.+216    	; 0xbee <ASA_SDC00_get+0x13c>
					return ARSDC_OPEN_FILE_ERR;
				else
					// Mark that the file was Checked
					is_file_extcheck = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <is_file_extcheck>
			}

			switch(LSByte) {
     b1c:	1c 34       	cpi	r17, 0x4C	; 76
     b1e:	49 f1       	breq	.+82     	; 0xb72 <ASA_SDC00_get+0xc0>
     b20:	28 f4       	brcc	.+10     	; 0xb2c <ASA_SDC00_get+0x7a>
     b22:	11 23       	and	r17, r17
     b24:	49 f0       	breq	.+18     	; 0xb38 <ASA_SDC00_get+0x86>
     b26:	1b 34       	cpi	r17, 0x4B	; 75
     b28:	c1 f1       	breq	.+112    	; 0xb9a <ASA_SDC00_get+0xe8>
     b2a:	63 c0       	rjmp	.+198    	; 0xbf2 <ASA_SDC00_get+0x140>
     b2c:	1e 34       	cpi	r17, 0x4E	; 78
     b2e:	59 f1       	breq	.+86     	; 0xb86 <ASA_SDC00_get+0xd4>
     b30:	12 35       	cpi	r17, 0x52	; 82
     b32:	09 f4       	brne	.+2      	; 0xb36 <ASA_SDC00_get+0x84>
     b34:	40 c0       	rjmp	.+128    	; 0xbb6 <ASA_SDC00_get+0x104>
     b36:	5d c0       	rjmp	.+186    	; 0xbf2 <ASA_SDC00_get+0x140>
			case LSBYTE_DATA_SWAP_BUF:
				if(f_read(&FileObj, p_data, Bytes, &ReadBytes) != FR_OK)
     b38:	10 e0       	ldi	r17, 0x00	; 0
     b3a:	9e 01       	movw	r18, r28
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	a8 01       	movw	r20, r16
     b42:	b7 01       	movw	r22, r14
     b44:	89 e5       	ldi	r24, 0x59	; 89
     b46:	98 e0       	ldi	r25, 0x08	; 8
     b48:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <f_read>
     b4c:	81 11       	cpse	r24, r1
     b4e:	53 c0       	rjmp	.+166    	; 0xbf6 <ASA_SDC00_get+0x144>
					return ARSDC_SDC_STATE_ERR;
				if(ReadBytes < Bytes) {								// While read bytes less than user setting,
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	80 17       	cp	r24, r16
     b56:	91 07       	cpc	r25, r17
     b58:	38 f4       	brcc	.+14     	; 0xb68 <ASA_SDC00_get+0xb6>
					((char*) p_data)[(int)Bytes-1] = ReadBytes; 	// then record received bytes at last byte in buffer
     b5a:	f7 01       	movw	r30, r14
     b5c:	e0 0f       	add	r30, r16
     b5e:	f1 1f       	adc	r31, r17
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	80 83       	st	Z, r24
					return ARSDC_DATA_NUM_ENOUGH;
     b64:	8e e0       	ldi	r24, 0x0E	; 14
     b66:	4a c0       	rjmp	.+148    	; 0xbfc <ASA_SDC00_get+0x14a>
				}
				if(ReadBytes == 0) {
     b68:	89 2b       	or	r24, r25
     b6a:	09 f4       	brne	.+2      	; 0xb6e <ASA_SDC00_get+0xbc>
     b6c:	46 c0       	rjmp	.+140    	; 0xbfa <ASA_SDC00_get+0x148>
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	45 c0       	rjmp	.+138    	; 0xbfc <ASA_SDC00_get+0x14a>
				break;
			case LSBYTE_ATTR_TIME:
#ifdef _DEBUG_INFO
				printf("<temp Raw data> fno.ftime = %x\n", fno.ftime);
#endif
				p_data[0] = (uint8_t)(fno.ftime);
     b72:	e2 eb       	ldi	r30, 0xB2	; 178
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	86 81       	ldd	r24, Z+6	; 0x06
     b78:	d7 01       	movw	r26, r14
     b7a:	8c 93       	st	X, r24
				p_data[1] = (uint8_t)(fno.ftime >> 8);
     b7c:	87 81       	ldd	r24, Z+7	; 0x07
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	8c 93       	st	X, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     b82:	80 e0       	ldi	r24, 0x00	; 0
				p_data[1] = (uint8_t)(fno.ftime >> 8);
#ifdef _DEBUG_INFO
				printf("<temp Raw data> p_data[0] = %x\n", p_data[0]);
				printf("<temp Raw data> p_data[1] = %x\n", p_data[1]);
#endif
				break;
     b84:	3b c0       	rjmp	.+118    	; 0xbfc <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_DATE:
#ifdef _DEBUG_INFO
				printf("<temp Raw data> fno.fdate = %x\n", fno.fdate);
#endif
				p_data[0] = (uint8_t)(fno.fdate);
     b86:	e2 eb       	ldi	r30, 0xB2	; 178
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	d7 01       	movw	r26, r14
     b8e:	8c 93       	st	X, r24
				p_data[1] = (uint8_t)(fno.fdate >> 8);
     b90:	85 81       	ldd	r24, Z+5	; 0x05
     b92:	11 96       	adiw	r26, 0x01	; 1
     b94:	8c 93       	st	X, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     b96:	80 e0       	ldi	r24, 0x00	; 0
				p_data[1] = (uint8_t)(fno.fdate >> 8);
#ifdef _DEBUG_INFO
				printf("<temp Raw data> p_data[0] = %x\n", p_data[0]);
				printf("<temp Raw data> p_data[1] = %x\n", p_data[1]);
#endif
				break;
     b98:	31 c0       	rjmp	.+98     	; 0xbfc <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_ACCESS:
				if(fno.fattrib & AM_RDO)
     b9a:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end+0x8>
     b9e:	80 ff       	sbrs	r24, 0
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <ASA_SDC00_get+0xfa>
					// forbidden writing
					p_data[0] = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	f7 01       	movw	r30, r14
     ba6:	80 83       	st	Z, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	28 c0       	rjmp	.+80     	; 0xbfc <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_ACCESS:
				if(fno.fattrib & AM_RDO)
					// forbidden writing
					p_data[0] = 1;
				else
					p_data[1] = 0;
     bac:	d7 01       	movw	r26, r14
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	1c 92       	st	X, r1
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	23 c0       	rjmp	.+70     	; 0xbfc <ASA_SDC00_get+0x14a>
					p_data[0] = 1;
				else
					p_data[1] = 0;
				break;
			case LSBYTE_FILE_SZ:
				p_data[0] = fno.fsize;
     bb6:	e2 eb       	ldi	r30, 0xB2	; 178
     bb8:	f3 e0       	ldi	r31, 0x03	; 3
     bba:	80 81       	ld	r24, Z
     bbc:	d7 01       	movw	r26, r14
     bbe:	8c 93       	st	X, r24
				p_data[1] = fno.fsize >> 8;
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	11 96       	adiw	r26, 0x01	; 1
     bc4:	8c 93       	st	X, r24
     bc6:	11 97       	sbiw	r26, 0x01	; 1
				p_data[2] = fno.fsize >> 16;
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8c 93       	st	X, r24
     bce:	12 97       	sbiw	r26, 0x02	; 2
				p_data[3] = fno.fsize >> 24;
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	8c 93       	st	X, r24
				break;
			}

			// Successful operate
			return 0;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
			case LSBYTE_FILE_SZ:
				p_data[0] = fno.fsize;
				p_data[1] = fno.fsize >> 8;
				p_data[2] = fno.fsize >> 16;
				p_data[3] = fno.fsize >> 24;
				break;
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <ASA_SDC00_get+0x14a>
			// Successful operate
			return 0;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			return ARSDC_WRITE_SETTING;
		default:
			return ARSDC_LSBYTE_ERR;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0f c0       	rjmp	.+30     	; 0xbfc <ASA_SDC00_get+0x14a>
	unsigned int ReadBytes;
	char* p_data = Data_p;
	static FILINFO fno;

	if( SDC_Init_Success_Flag == 0 )			// Check there is Initialized
		return ARSDC_SDC_STATE_ERR;
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <ASA_SDC00_get+0x14a>
	if( ASA_SDC00_ID != ASA_ID )
		return ARSDC_ID_ERR;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <ASA_SDC00_get+0x14a>
	// TODO: Modify valid LSByte section
	//if( LSByte > 101 || LSByte < 100 )
	//return ARSDC_LSBYTE_ERR;
	if( LSByte == LSBYTE_DATA_SWAP_BUF )
		if( Bytes > 64 || Bytes < 0 )
			return ARSDC_BYTES_ERR;
     be6:	88 e0       	ldi	r24, 0x08	; 8
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <ASA_SDC00_get+0x14a>
	ASA_SDC00_Select(ASA_ID);

	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			return ARSDC_NO_OPEN_FILE;
     bea:	89 e0       	ldi	r24, 0x09	; 9
     bec:	07 c0       	rjmp	.+14     	; 0xbfc <ASA_SDC00_get+0x14a>

			// Check there is same file that was Checked
			if(!is_file_extcheck) {
				// Fetch file information first
				if(check_info(FileName, &fno) != FR_OK)
					return ARSDC_OPEN_FILE_ERR;
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <ASA_SDC00_get+0x14a>
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <ASA_SDC00_get+0x14a>
			}

			switch(LSByte) {
			case LSBYTE_DATA_SWAP_BUF:
				if(f_read(&FileObj, p_data, Bytes, &ReadBytes) != FR_OK)
					return ARSDC_SDC_STATE_ERR;
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <ASA_SDC00_get+0x14a>
				if(ReadBytes < Bytes) {								// While read bytes less than user setting,
					((char*) p_data)[(int)Bytes-1] = ReadBytes; 	// then record received bytes at last byte in buffer
					return ARSDC_DATA_NUM_ENOUGH;
				}
				if(ReadBytes == 0) {
					return ARSDC_NO_DATA_TO_READ;
     bfa:	8d e0       	ldi	r24, 0x0D	; 13
	}

	ASA_SDC00_Deselect();

	return 0;
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     c0e:	81 11       	cpse	r24, r1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
     c12:	0c 94 40 22 	jmp	0x4480	; 0x4480 <mmc_disk_status>
     c16:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     c18:	81 e0       	ldi	r24, 0x01	; 1
}
     c1a:	08 95       	ret

00000c1c <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     c1c:	81 11       	cpse	r24, r1
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
     c20:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <mmc_disk_initialize>
     c24:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     c26:	81 e0       	ldi	r24, 0x01	; 1
}
     c28:	08 95       	ret

00000c2a <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	fb 01       	movw	r30, r22
	switch (pdrv) {
     c30:	81 11       	cpse	r24, r1
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <disk_read+0x18>
     c34:	ba 01       	movw	r22, r20
     c36:	a9 01       	movw	r20, r18
     c38:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     c3a:	98 01       	movw	r18, r16
     c3c:	0e 94 43 22 	call	0x4486	; 0x4486 <mmc_disk_read>
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <disk_read+0x1a>
#endif
	}
	return RES_PARERR;
     c42:	84 e0       	ldi	r24, 0x04	; 4
}
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	fb 01       	movw	r30, r22
	switch (pdrv) {
     c50:	81 11       	cpse	r24, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <disk_write+0x18>
     c54:	ba 01       	movw	r22, r20
     c56:	a9 01       	movw	r20, r18
     c58:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     c5a:	98 01       	movw	r18, r16
     c5c:	0e 94 8d 22 	call	0x451a	; 0x451a <mmc_disk_write>
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <disk_write+0x1a>
#endif
	}
	return RES_PARERR;
     c62:	84 e0       	ldi	r24, 0x04	; 4
}
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     c6a:	81 11       	cpse	r24, r1
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <disk_ioctl+0xe>
     c6e:	86 2f       	mov	r24, r22
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     c70:	ba 01       	movw	r22, r20
     c72:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <mmc_disk_ioctl>
     c76:	08 95       	ret
#endif
	}
	return RES_PARERR;
     c78:	84 e0       	ldi	r24, 0x04	; 4
}
     c7a:	08 95       	ret

00000c7c <ld_dword>:
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
     c7c:	fc 01       	movw	r30, r24
     c7e:	63 81       	ldd	r22, Z+3	; 0x03
     c80:	86 2f       	mov	r24, r22
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ba 2f       	mov	r27, r26
     c8a:	a9 2f       	mov	r26, r25
     c8c:	98 2f       	mov	r25, r24
     c8e:	88 27       	eor	r24, r24
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	82 2b       	or	r24, r18
     c94:	ba 2f       	mov	r27, r26
     c96:	a9 2f       	mov	r26, r25
     c98:	98 2f       	mov	r25, r24
     c9a:	88 27       	eor	r24, r24
     c9c:	21 81       	ldd	r18, Z+1	; 0x01
     c9e:	82 2b       	or	r24, r18
     ca0:	ba 2f       	mov	r27, r26
     ca2:	a9 2f       	mov	r26, r25
     ca4:	98 2f       	mov	r25, r24
     ca6:	88 27       	eor	r24, r24
     ca8:	20 81       	ld	r18, Z
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	62 2b       	or	r22, r18
     cb0:	08 95       	ret

00000cb2 <mem_cpy>:
     cb2:	41 15       	cp	r20, r1
     cb4:	51 05       	cpc	r21, r1
     cb6:	51 f0       	breq	.+20     	; 0xccc <mem_cpy+0x1a>
     cb8:	a6 2f       	mov	r26, r22
     cba:	b7 2f       	mov	r27, r23
     cbc:	fc 01       	movw	r30, r24
     cbe:	48 0f       	add	r20, r24
     cc0:	59 1f       	adc	r21, r25
     cc2:	9d 91       	ld	r25, X+
     cc4:	91 93       	st	Z+, r25
     cc6:	e4 17       	cp	r30, r20
     cc8:	f5 07       	cpc	r31, r21
     cca:	d9 f7       	brne	.-10     	; 0xcc2 <mem_cpy+0x10>
     ccc:	08 95       	ret

00000cce <mem_set>:
     cce:	fc 01       	movw	r30, r24
     cd0:	48 0f       	add	r20, r24
     cd2:	59 1f       	adc	r21, r25
     cd4:	61 93       	st	Z+, r22
     cd6:	e4 17       	cp	r30, r20
     cd8:	f5 07       	cpc	r31, r21
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <mem_set+0x6>
     cdc:	08 95       	ret

00000cde <mem_cmp>:
     cde:	dc 01       	movw	r26, r24
     ce0:	e6 2f       	mov	r30, r22
     ce2:	f7 2f       	mov	r31, r23
     ce4:	8d 91       	ld	r24, X+
     ce6:	21 91       	ld	r18, Z+
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	82 1b       	sub	r24, r18
     cec:	91 09       	sbc	r25, r1
     cee:	41 50       	subi	r20, 0x01	; 1
     cf0:	51 09       	sbc	r21, r1
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <mem_cmp+0x1a>
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	b1 f3       	breq	.-20     	; 0xce4 <mem_cmp+0x6>
     cf8:	08 95       	ret

00000cfa <dbc_2nd>:
     cfa:	80 34       	cpi	r24, 0x40	; 64
     cfc:	58 f0       	brcs	.+22     	; 0xd14 <dbc_2nd+0x1a>
     cfe:	90 e8       	ldi	r25, 0x80	; 128
     d00:	98 0f       	add	r25, r24
     d02:	9d 37       	cpi	r25, 0x7D	; 125
     d04:	50 f0       	brcs	.+20     	; 0xd1a <dbc_2nd+0x20>
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	8f 37       	cpi	r24, 0x7F	; 127
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <dbc_2nd+0x16>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	82 2f       	mov	r24, r18
     d12:	08 95       	ret
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	08 95       	ret

00000d20 <clst2sect>:
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	fc 01       	movw	r30, r24
     d26:	9a 01       	movw	r18, r20
     d28:	ab 01       	movw	r20, r22
     d2a:	22 50       	subi	r18, 0x02	; 2
     d2c:	31 09       	sbc	r19, r1
     d2e:	41 09       	sbc	r20, r1
     d30:	51 09       	sbc	r21, r1
     d32:	87 89       	ldd	r24, Z+23	; 0x17
     d34:	90 8d       	ldd	r25, Z+24	; 0x18
     d36:	a1 8d       	ldd	r26, Z+25	; 0x19
     d38:	b2 8d       	ldd	r27, Z+26	; 0x1a
     d3a:	02 97       	sbiw	r24, 0x02	; 2
     d3c:	a1 09       	sbc	r26, r1
     d3e:	b1 09       	sbc	r27, r1
     d40:	28 17       	cp	r18, r24
     d42:	39 07       	cpc	r19, r25
     d44:	4a 07       	cpc	r20, r26
     d46:	5b 07       	cpc	r21, r27
     d48:	68 f4       	brcc	.+26     	; 0xd64 <clst2sect+0x44>
     d4a:	a1 85       	ldd	r26, Z+9	; 0x09
     d4c:	b2 85       	ldd	r27, Z+10	; 0x0a
     d4e:	0e 94 37 32 	call	0x646e	; 0x646e <__muluhisi3>
     d52:	03 a5       	ldd	r16, Z+43	; 0x2b
     d54:	14 a5       	ldd	r17, Z+44	; 0x2c
     d56:	25 a5       	ldd	r18, Z+45	; 0x2d
     d58:	36 a5       	ldd	r19, Z+46	; 0x2e
     d5a:	60 0f       	add	r22, r16
     d5c:	71 1f       	adc	r23, r17
     d5e:	82 1f       	adc	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <clst2sect+0x4a>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <get_fileinfo>:
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	fb 01       	movw	r30, r22
     d7c:	11 86       	std	Z+9, r1	; 0x09
     d7e:	8e 89       	ldd	r24, Y+22	; 0x16
     d80:	9f 89       	ldd	r25, Y+23	; 0x17
     d82:	a8 8d       	ldd	r26, Y+24	; 0x18
     d84:	b9 8d       	ldd	r27, Y+25	; 0x19
     d86:	89 2b       	or	r24, r25
     d88:	8a 2b       	or	r24, r26
     d8a:	8b 2b       	or	r24, r27
     d8c:	09 f4       	brne	.+2      	; 0xd90 <get_fileinfo+0x20>
     d8e:	41 c0       	rjmp	.+130    	; 0xe12 <get_fileinfo+0xa2>
     d90:	e0 e0       	ldi	r30, 0x00	; 0
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	1e e2       	ldi	r17, 0x2E	; 46
     d9a:	85 ee       	ldi	r24, 0xE5	; 229
     d9c:	a9 01       	movw	r20, r18
     d9e:	4f 5f       	subi	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	aa 8d       	ldd	r26, Y+26	; 0x1a
     da4:	bb 8d       	ldd	r27, Y+27	; 0x1b
     da6:	a2 0f       	add	r26, r18
     da8:	b3 1f       	adc	r27, r19
     daa:	9c 91       	ld	r25, X
     dac:	90 32       	cpi	r25, 0x20	; 32
     dae:	91 f0       	breq	.+36     	; 0xdd4 <get_fileinfo+0x64>
     db0:	95 30       	cpi	r25, 0x05	; 5
     db2:	09 f4       	brne	.+2      	; 0xdb6 <get_fileinfo+0x46>
     db4:	98 2f       	mov	r25, r24
     db6:	49 30       	cpi	r20, 0x09	; 9
     db8:	51 05       	cpc	r21, r1
     dba:	31 f4       	brne	.+12     	; 0xdc8 <get_fileinfo+0x58>
     dbc:	db 01       	movw	r26, r22
     dbe:	ae 0f       	add	r26, r30
     dc0:	bf 1f       	adc	r27, r31
     dc2:	19 96       	adiw	r26, 0x09	; 9
     dc4:	1c 93       	st	X, r17
     dc6:	31 96       	adiw	r30, 0x01	; 1
     dc8:	db 01       	movw	r26, r22
     dca:	ae 0f       	add	r26, r30
     dcc:	bf 1f       	adc	r27, r31
     dce:	19 96       	adiw	r26, 0x09	; 9
     dd0:	9c 93       	st	X, r25
     dd2:	31 96       	adiw	r30, 0x01	; 1
     dd4:	9a 01       	movw	r18, r20
     dd6:	4b 30       	cpi	r20, 0x0B	; 11
     dd8:	51 05       	cpc	r21, r1
     dda:	01 f7       	brne	.-64     	; 0xd9c <get_fileinfo+0x2c>
     ddc:	8b 01       	movw	r16, r22
     dde:	e6 0f       	add	r30, r22
     de0:	f7 1f       	adc	r31, r23
     de2:	11 86       	std	Z+9, r1	; 0x09
     de4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     de6:	fb 8d       	ldd	r31, Y+27	; 0x1b
     de8:	83 85       	ldd	r24, Z+11	; 0x0b
     dea:	fb 01       	movw	r30, r22
     dec:	80 87       	std	Z+8, r24	; 0x08
     dee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     df0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     df2:	4c 96       	adiw	r24, 0x1c	; 28
     df4:	43 df       	rcall	.-378    	; 0xc7c <ld_dword>
     df6:	f8 01       	movw	r30, r16
     df8:	60 83       	st	Z, r22
     dfa:	71 83       	std	Z+1, r23	; 0x01
     dfc:	82 83       	std	Z+2, r24	; 0x02
     dfe:	93 83       	std	Z+3, r25	; 0x03
     e00:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e02:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e04:	46 96       	adiw	r24, 0x16	; 22
     e06:	3a df       	rcall	.-396    	; 0xc7c <ld_dword>
     e08:	f8 01       	movw	r30, r16
     e0a:	77 83       	std	Z+7, r23	; 0x07
     e0c:	66 83       	std	Z+6, r22	; 0x06
     e0e:	95 83       	std	Z+5, r25	; 0x05
     e10:	84 83       	std	Z+4, r24	; 0x04
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <get_ldnumber>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	a8 81       	ld	r26, Y
     e24:	b9 81       	ldd	r27, Y+1	; 0x01
     e26:	10 97       	sbiw	r26, 0x00	; 0
     e28:	39 f1       	breq	.+78     	; 0xe78 <get_ldnumber+0x5c>
     e2a:	4c 91       	ld	r20, X
     e2c:	41 32       	cpi	r20, 0x21	; 33
     e2e:	58 f0       	brcs	.+22     	; 0xe46 <get_ldnumber+0x2a>
     e30:	4a 33       	cpi	r20, 0x3A	; 58
     e32:	59 f1       	breq	.+86     	; 0xe8a <get_ldnumber+0x6e>
     e34:	fd 01       	movw	r30, r26
     e36:	31 96       	adiw	r30, 0x01	; 1
     e38:	9f 01       	movw	r18, r30
     e3a:	91 91       	ld	r25, Z+
     e3c:	91 32       	cpi	r25, 0x21	; 33
     e3e:	28 f0       	brcs	.+10     	; 0xe4a <get_ldnumber+0x2e>
     e40:	9a 33       	cpi	r25, 0x3A	; 58
     e42:	d1 f7       	brne	.-12     	; 0xe38 <get_ldnumber+0x1c>
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <get_ldnumber+0x32>
     e46:	94 2f       	mov	r25, r20
     e48:	9d 01       	movw	r18, r26
     e4a:	9a 33       	cpi	r25, 0x3A	; 58
     e4c:	89 f4       	brne	.+34     	; 0xe70 <get_ldnumber+0x54>
     e4e:	cd 01       	movw	r24, r26
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	28 17       	cp	r18, r24
     e54:	39 07       	cpc	r19, r25
     e56:	99 f4       	brne	.+38     	; 0xe7e <get_ldnumber+0x62>
     e58:	80 ed       	ldi	r24, 0xD0	; 208
     e5a:	84 0f       	add	r24, r20
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	90 f4       	brcc	.+36     	; 0xe84 <get_ldnumber+0x68>
     e60:	24 2f       	mov	r18, r20
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	c9 01       	movw	r24, r18
     e66:	c0 97       	sbiw	r24, 0x30	; 48
     e68:	12 96       	adiw	r26, 0x02	; 2
     e6a:	b9 83       	std	Y+1, r27	; 0x01
     e6c:	a8 83       	st	Y, r26
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <get_ldnumber+0x72>
     e70:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <CurrVol>
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0b c0       	rjmp	.+22     	; 0xe8e <get_ldnumber+0x72>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <get_ldnumber+0x72>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <get_ldnumber+0x72>
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <get_ldnumber+0x72>
     e8a:	9d 01       	movw	r18, r26
     e8c:	e0 cf       	rjmp	.-64     	; 0xe4e <get_ldnumber+0x32>
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <validate>:
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	8b 01       	movw	r16, r22
     ea0:	89 2b       	or	r24, r25
     ea2:	d9 f0       	breq	.+54     	; 0xeda <validate+0x46>
     ea4:	e8 81       	ld	r30, Y
     ea6:	f9 81       	ldd	r31, Y+1	; 0x01
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	b9 f0       	breq	.+46     	; 0xeda <validate+0x46>
     eac:	80 81       	ld	r24, Z
     eae:	88 23       	and	r24, r24
     eb0:	a1 f0       	breq	.+40     	; 0xeda <validate+0x46>
     eb2:	2a 81       	ldd	r18, Y+2	; 0x02
     eb4:	3b 81       	ldd	r19, Y+3	; 0x03
     eb6:	85 81       	ldd	r24, Z+5	; 0x05
     eb8:	96 81       	ldd	r25, Z+6	; 0x06
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	69 f4       	brne	.+26     	; 0xeda <validate+0x46>
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	a5 de       	rcall	.-694    	; 0xc0e <disk_status>
     ec4:	80 fd       	sbrc	r24, 0
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <validate+0x46>
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <validate+0x3e>
     eca:	f8 01       	movw	r30, r16
     ecc:	31 83       	std	Z+1, r19	; 0x01
     ece:	20 83       	st	Z, r18
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <validate+0x4e>
     ed2:	28 81       	ld	r18, Y
     ed4:	39 81       	ldd	r19, Y+1	; 0x01
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	f8 cf       	rjmp	.-16     	; 0xeca <validate+0x36>
     eda:	89 e0       	ldi	r24, 0x09	; 9
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f4 cf       	rjmp	.-24     	; 0xeca <validate+0x36>
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <sync_window>:
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	fc 01       	movw	r30, r24
     f02:	23 81       	ldd	r18, Z+3	; 0x03
     f04:	22 23       	and	r18, r18
     f06:	c1 f1       	breq	.+112    	; 0xf78 <sync_window+0x8c>
     f08:	ec 01       	movw	r28, r24
     f0a:	7c 01       	movw	r14, r24
     f0c:	f3 e3       	ldi	r31, 0x33	; 51
     f0e:	ef 0e       	add	r14, r31
     f10:	f1 1c       	adc	r15, r1
     f12:	2f a5       	ldd	r18, Y+47	; 0x2f
     f14:	38 a9       	ldd	r19, Y+48	; 0x30
     f16:	49 a9       	ldd	r20, Y+49	; 0x31
     f18:	5a a9       	ldd	r21, Y+50	; 0x32
     f1a:	01 e0       	ldi	r16, 0x01	; 1
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	b7 01       	movw	r22, r14
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	93 de       	rcall	.-730    	; 0xc4a <disk_write>
     f24:	81 11       	cpse	r24, r1
     f26:	2a c0       	rjmp	.+84     	; 0xf7c <sync_window+0x90>
     f28:	1b 82       	std	Y+3, r1	; 0x03
     f2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     f2c:	18 a9       	ldd	r17, Y+48	; 0x30
     f2e:	29 a9       	ldd	r18, Y+49	; 0x31
     f30:	3a a9       	ldd	r19, Y+50	; 0x32
     f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f36:	ad 8d       	ldd	r26, Y+29	; 0x1d
     f38:	be 8d       	ldd	r27, Y+30	; 0x1e
     f3a:	8b a0       	ldd	r8, Y+35	; 0x23
     f3c:	9c a0       	ldd	r9, Y+36	; 0x24
     f3e:	ad a0       	ldd	r10, Y+37	; 0x25
     f40:	be a0       	ldd	r11, Y+38	; 0x26
     f42:	b9 01       	movw	r22, r18
     f44:	a8 01       	movw	r20, r16
     f46:	48 19       	sub	r20, r8
     f48:	59 09       	sbc	r21, r9
     f4a:	6a 09       	sbc	r22, r10
     f4c:	7b 09       	sbc	r23, r11
     f4e:	48 17       	cp	r20, r24
     f50:	59 07       	cpc	r21, r25
     f52:	6a 07       	cpc	r22, r26
     f54:	7b 07       	cpc	r23, r27
     f56:	a0 f4       	brcc	.+40     	; 0xf80 <sync_window+0x94>
     f58:	6a 81       	ldd	r22, Y+2	; 0x02
     f5a:	62 30       	cpi	r22, 0x02	; 2
     f5c:	99 f4       	brne	.+38     	; 0xf84 <sync_window+0x98>
     f5e:	a9 01       	movw	r20, r18
     f60:	98 01       	movw	r18, r16
     f62:	28 0f       	add	r18, r24
     f64:	39 1f       	adc	r19, r25
     f66:	4a 1f       	adc	r20, r26
     f68:	5b 1f       	adc	r21, r27
     f6a:	01 e0       	ldi	r16, 0x01	; 1
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	b7 01       	movw	r22, r14
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	6b de       	rcall	.-810    	; 0xc4a <disk_write>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <sync_window+0x9a>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <sync_window+0x9a>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <sync_window+0x9a>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <sync_window+0x9a>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	08 95       	ret

00000f9c <move_window>:
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	4a 01       	movw	r8, r20
     fb2:	5b 01       	movw	r10, r22
     fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb6:	98 a9       	ldd	r25, Y+48	; 0x30
     fb8:	a9 a9       	ldd	r26, Y+49	; 0x31
     fba:	ba a9       	ldd	r27, Y+50	; 0x32
     fbc:	84 17       	cp	r24, r20
     fbe:	95 07       	cpc	r25, r21
     fc0:	a6 07       	cpc	r26, r22
     fc2:	b7 07       	cpc	r27, r23
     fc4:	d9 f0       	breq	.+54     	; 0xffc <move_window+0x60>
     fc6:	ce 01       	movw	r24, r28
     fc8:	91 df       	rcall	.-222    	; 0xeec <sync_window>
     fca:	f8 2e       	mov	r15, r24
     fcc:	81 11       	cpse	r24, r1
     fce:	17 c0       	rjmp	.+46     	; 0xffe <move_window+0x62>
     fd0:	01 e0       	ldi	r16, 0x01	; 1
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	a5 01       	movw	r20, r10
     fd6:	94 01       	movw	r18, r8
     fd8:	be 01       	movw	r22, r28
     fda:	6d 5c       	subi	r22, 0xCD	; 205
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	24 de       	rcall	.-952    	; 0xc2a <disk_read>
     fe2:	88 23       	and	r24, r24
     fe4:	31 f0       	breq	.+12     	; 0xff2 <move_window+0x56>
     fe6:	ff 24       	eor	r15, r15
     fe8:	f3 94       	inc	r15
     fea:	88 24       	eor	r8, r8
     fec:	8a 94       	dec	r8
     fee:	98 2c       	mov	r9, r8
     ff0:	54 01       	movw	r10, r8
     ff2:	8f a6       	std	Y+47, r8	; 0x2f
     ff4:	98 aa       	std	Y+48, r9	; 0x30
     ff6:	a9 aa       	std	Y+49, r10	; 0x31
     ff8:	ba aa       	std	Y+50, r11	; 0x32
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <move_window+0x62>
     ffc:	f1 2c       	mov	r15, r1
     ffe:	8f 2d       	mov	r24, r15
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	08 95       	ret

00001014 <dir_clear>:
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	7c 01       	movw	r14, r24
    102e:	4a 01       	movw	r8, r20
    1030:	5b 01       	movw	r10, r22
    1032:	5c df       	rcall	.-328    	; 0xeec <sync_window>
    1034:	81 11       	cpse	r24, r1
    1036:	3e c0       	rjmp	.+124    	; 0x10b4 <dir_clear+0xa0>
    1038:	b5 01       	movw	r22, r10
    103a:	a4 01       	movw	r20, r8
    103c:	c7 01       	movw	r24, r14
    103e:	70 de       	rcall	.-800    	; 0xd20 <clst2sect>
    1040:	4b 01       	movw	r8, r22
    1042:	5c 01       	movw	r10, r24
    1044:	f7 01       	movw	r30, r14
    1046:	67 a7       	std	Z+47, r22	; 0x2f
    1048:	70 ab       	std	Z+48, r23	; 0x30
    104a:	81 ab       	std	Z+49, r24	; 0x31
    104c:	92 ab       	std	Z+50, r25	; 0x32
    104e:	67 01       	movw	r12, r14
    1050:	f3 e3       	ldi	r31, 0x33	; 51
    1052:	cf 0e       	add	r12, r31
    1054:	d1 1c       	adc	r13, r1
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	52 e0       	ldi	r21, 0x02	; 2
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	c6 01       	movw	r24, r12
    1060:	36 de       	rcall	.-916    	; 0xcce <mem_set>
    1062:	f7 01       	movw	r30, r14
    1064:	81 85       	ldd	r24, Z+9	; 0x09
    1066:	92 85       	ldd	r25, Z+10	; 0x0a
    1068:	89 2b       	or	r24, r25
    106a:	59 f4       	brne	.+22     	; 0x1082 <dir_clear+0x6e>
    106c:	c0 e0       	ldi	r28, 0x00	; 0
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	18 c0       	rjmp	.+48     	; 0x10a2 <dir_clear+0x8e>
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	f7 01       	movw	r30, r14
    1076:	81 85       	ldd	r24, Z+9	; 0x09
    1078:	92 85       	ldd	r25, Z+10	; 0x0a
    107a:	c8 17       	cp	r28, r24
    107c:	d9 07       	cpc	r29, r25
    107e:	18 f0       	brcs	.+6      	; 0x1086 <dir_clear+0x72>
    1080:	10 c0       	rjmp	.+32     	; 0x10a2 <dir_clear+0x8e>
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	01 e0       	ldi	r16, 0x01	; 1
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	a5 01       	movw	r20, r10
    108c:	94 01       	movw	r18, r8
    108e:	2c 0f       	add	r18, r28
    1090:	3d 1f       	adc	r19, r29
    1092:	41 1d       	adc	r20, r1
    1094:	51 1d       	adc	r21, r1
    1096:	b6 01       	movw	r22, r12
    1098:	f7 01       	movw	r30, r14
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	d6 dd       	rcall	.-1108   	; 0xc4a <disk_write>
    109e:	88 23       	and	r24, r24
    10a0:	41 f3       	breq	.-48     	; 0x1072 <dir_clear+0x5e>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	f7 01       	movw	r30, r14
    10a6:	21 85       	ldd	r18, Z+9	; 0x09
    10a8:	32 85       	ldd	r19, Z+10	; 0x0a
    10aa:	2c 17       	cp	r18, r28
    10ac:	3d 07       	cpc	r19, r29
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <dir_clear+0xa2>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <dir_clear+0xa2>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	08 95       	ret

000010d0 <sync_fs>:
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
    10de:	06 df       	rcall	.-500    	; 0xeec <sync_window>
    10e0:	98 2f       	mov	r25, r24
    10e2:	81 11       	cpse	r24, r1
    10e4:	5f c0       	rjmp	.+190    	; 0x11a4 <__stack+0xa5>
    10e6:	88 81       	ld	r24, Y
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	09 f0       	breq	.+2      	; 0x10ee <sync_fs+0x1e>
    10ec:	52 c0       	rjmp	.+164    	; 0x1192 <__stack+0x93>
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <sync_fs+0x26>
    10f4:	4e c0       	rjmp	.+156    	; 0x1192 <__stack+0x93>
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	52 e0       	ldi	r21, 0x02	; 2
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	7e 01       	movw	r14, r28
    1100:	83 e3       	ldi	r24, 0x33	; 51
    1102:	e8 0e       	add	r14, r24
    1104:	f1 1c       	adc	r15, r1
    1106:	c7 01       	movw	r24, r14
    1108:	e2 dd       	rcall	.-1084   	; 0xcce <mem_set>
    110a:	85 e5       	ldi	r24, 0x55	; 85
    110c:	fe 01       	movw	r30, r28
    110e:	ef 5c       	subi	r30, 0xCF	; 207
    1110:	fd 4f       	sbci	r31, 0xFD	; 253
    1112:	80 83       	st	Z, r24
    1114:	8a ea       	ldi	r24, 0xAA	; 170
    1116:	31 96       	adiw	r30, 0x01	; 1
    1118:	80 83       	st	Z, r24
    111a:	82 e5       	ldi	r24, 0x52	; 82
    111c:	8b ab       	std	Y+51, r24	; 0x33
    111e:	8c ab       	std	Y+52, r24	; 0x34
    1120:	81 e6       	ldi	r24, 0x61	; 97
    1122:	8d ab       	std	Y+53, r24	; 0x35
    1124:	91 e4       	ldi	r25, 0x41	; 65
    1126:	9e ab       	std	Y+54, r25	; 0x36
    1128:	22 e7       	ldi	r18, 0x72	; 114
    112a:	7b 97       	sbiw	r30, 0x1b	; 27
    112c:	20 83       	st	Z, r18
    112e:	31 96       	adiw	r30, 0x01	; 1
    1130:	20 83       	st	Z, r18
    1132:	31 96       	adiw	r30, 0x01	; 1
    1134:	90 83       	st	Z, r25
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	80 83       	st	Z, r24
    113a:	3f 85       	ldd	r19, Y+15	; 0x0f
    113c:	28 89       	ldd	r18, Y+16	; 0x10
    113e:	99 89       	ldd	r25, Y+17	; 0x11
    1140:	8a 89       	ldd	r24, Y+18	; 0x12
    1142:	31 96       	adiw	r30, 0x01	; 1
    1144:	30 83       	st	Z, r19
    1146:	31 96       	adiw	r30, 0x01	; 1
    1148:	20 83       	st	Z, r18
    114a:	31 96       	adiw	r30, 0x01	; 1
    114c:	90 83       	st	Z, r25
    114e:	31 96       	adiw	r30, 0x01	; 1
    1150:	80 83       	st	Z, r24
    1152:	3b 85       	ldd	r19, Y+11	; 0x0b
    1154:	2c 85       	ldd	r18, Y+12	; 0x0c
    1156:	9d 85       	ldd	r25, Y+13	; 0x0d
    1158:	8e 85       	ldd	r24, Y+14	; 0x0e
    115a:	31 96       	adiw	r30, 0x01	; 1
    115c:	30 83       	st	Z, r19
    115e:	31 96       	adiw	r30, 0x01	; 1
    1160:	20 83       	st	Z, r18
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	90 83       	st	Z, r25
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	80 83       	st	Z, r24
    116a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    116c:	98 a1       	ldd	r25, Y+32	; 0x20
    116e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1170:	ba a1       	ldd	r27, Y+34	; 0x22
    1172:	9c 01       	movw	r18, r24
    1174:	ad 01       	movw	r20, r26
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	4f 4f       	sbci	r20, 0xFF	; 255
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	2f a7       	std	Y+47, r18	; 0x2f
    1180:	38 ab       	std	Y+48, r19	; 0x30
    1182:	49 ab       	std	Y+49, r20	; 0x31
    1184:	5a ab       	std	Y+50, r21	; 0x32
    1186:	01 e0       	ldi	r16, 0x01	; 1
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	b7 01       	movw	r22, r14
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	5d dd       	rcall	.-1350   	; 0xc4a <disk_write>
    1190:	1c 82       	std	Y+4, r1	; 0x04
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	67 dd       	rcall	.-1330   	; 0xc6a <disk_ioctl>
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	81 11       	cpse	r24, r1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <__stack+0xa5>
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	89 2f       	mov	r24, r25
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret

000011b4 <put_fat>:
    11b4:	2f 92       	push	r2
    11b6:	3f 92       	push	r3
    11b8:	4f 92       	push	r4
    11ba:	5f 92       	push	r5
    11bc:	6f 92       	push	r6
    11be:	7f 92       	push	r7
    11c0:	8f 92       	push	r8
    11c2:	9f 92       	push	r9
    11c4:	af 92       	push	r10
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	42 30       	cpi	r20, 0x02	; 2
    11da:	51 05       	cpc	r21, r1
    11dc:	61 05       	cpc	r22, r1
    11de:	71 05       	cpc	r23, r1
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <put_fat+0x30>
    11e2:	cc c0       	rjmp	.+408    	; 0x137c <put_fat+0x1c8>
    11e4:	fc 01       	movw	r30, r24
    11e6:	c7 88       	ldd	r12, Z+23	; 0x17
    11e8:	d0 8c       	ldd	r13, Z+24	; 0x18
    11ea:	e1 8c       	ldd	r14, Z+25	; 0x19
    11ec:	f2 8c       	ldd	r15, Z+26	; 0x1a
    11ee:	4c 15       	cp	r20, r12
    11f0:	5d 05       	cpc	r21, r13
    11f2:	6e 05       	cpc	r22, r14
    11f4:	7f 05       	cpc	r23, r15
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <put_fat+0x46>
    11f8:	c3 c0       	rjmp	.+390    	; 0x1380 <put_fat+0x1cc>
    11fa:	28 01       	movw	r4, r16
    11fc:	39 01       	movw	r6, r18
    11fe:	6a 01       	movw	r12, r20
    1200:	7b 01       	movw	r14, r22
    1202:	ec 01       	movw	r28, r24
    1204:	80 81       	ld	r24, Z
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	09 f4       	brne	.+2      	; 0x120c <put_fat+0x58>
    120a:	61 c0       	rjmp	.+194    	; 0x12ce <put_fat+0x11a>
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	09 f4       	brne	.+2      	; 0x1212 <put_fat+0x5e>
    1210:	7e c0       	rjmp	.+252    	; 0x130e <put_fat+0x15a>
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <put_fat+0x64>
    1216:	b6 c0       	rjmp	.+364    	; 0x1384 <put_fat+0x1d0>
    1218:	5a 01       	movw	r10, r20
    121a:	b6 94       	lsr	r11
    121c:	a7 94       	ror	r10
    121e:	a4 0e       	add	r10, r20
    1220:	b5 1e       	adc	r11, r21
    1222:	c5 01       	movw	r24, r10
    1224:	89 2f       	mov	r24, r25
    1226:	99 27       	eor	r25, r25
    1228:	86 95       	lsr	r24
    122a:	43 a1       	ldd	r20, Z+35	; 0x23
    122c:	54 a1       	ldd	r21, Z+36	; 0x24
    122e:	65 a1       	ldd	r22, Z+37	; 0x25
    1230:	76 a1       	ldd	r23, Z+38	; 0x26
    1232:	48 0f       	add	r20, r24
    1234:	59 1f       	adc	r21, r25
    1236:	61 1d       	adc	r22, r1
    1238:	71 1d       	adc	r23, r1
    123a:	cf 01       	movw	r24, r30
    123c:	af de       	rcall	.-674    	; 0xf9c <move_window>
    123e:	18 2f       	mov	r17, r24
    1240:	81 11       	cpse	r24, r1
    1242:	c0 c0       	rjmp	.+384    	; 0x13c4 <put_fat+0x210>
    1244:	1e 01       	movw	r2, r28
    1246:	f3 e3       	ldi	r31, 0x33	; 51
    1248:	2f 0e       	add	r2, r31
    124a:	31 1c       	adc	r3, r1
    124c:	45 01       	movw	r8, r10
    124e:	2f ef       	ldi	r18, 0xFF	; 255
    1250:	82 1a       	sub	r8, r18
    1252:	92 0a       	sbc	r9, r18
    1254:	31 e0       	ldi	r19, 0x01	; 1
    1256:	b3 22       	and	r11, r19
    1258:	f1 01       	movw	r30, r2
    125a:	ea 0d       	add	r30, r10
    125c:	fb 1d       	adc	r31, r11
    125e:	c0 fe       	sbrs	r12, 0
    1260:	1d c0       	rjmp	.+58     	; 0x129c <put_fat+0xe8>
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	2f 70       	andi	r18, 0x0F	; 15
    1268:	30 e1       	ldi	r19, 0x10	; 16
    126a:	43 9e       	mul	r4, r19
    126c:	c0 01       	movw	r24, r0
    126e:	11 24       	eor	r1, r1
    1270:	82 2b       	or	r24, r18
    1272:	80 83       	st	Z, r24
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	4b a1       	ldd	r20, Y+35	; 0x23
    127a:	5c a1       	ldd	r21, Y+36	; 0x24
    127c:	6d a1       	ldd	r22, Y+37	; 0x25
    127e:	7e a1       	ldd	r23, Y+38	; 0x26
    1280:	c4 01       	movw	r24, r8
    1282:	89 2f       	mov	r24, r25
    1284:	99 27       	eor	r25, r25
    1286:	86 95       	lsr	r24
    1288:	48 0f       	add	r20, r24
    128a:	59 1f       	adc	r21, r25
    128c:	61 1d       	adc	r22, r1
    128e:	71 1d       	adc	r23, r1
    1290:	ce 01       	movw	r24, r28
    1292:	84 de       	rcall	.-760    	; 0xf9c <move_window>
    1294:	88 23       	and	r24, r24
    1296:	09 f4       	brne	.+2      	; 0x129a <put_fat+0xe6>
    1298:	7b c0       	rjmp	.+246    	; 0x1390 <put_fat+0x1dc>
    129a:	76 c0       	rjmp	.+236    	; 0x1388 <put_fat+0x1d4>
    129c:	40 82       	st	Z, r4
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	4b a1       	ldd	r20, Y+35	; 0x23
    12a4:	5c a1       	ldd	r21, Y+36	; 0x24
    12a6:	6d a1       	ldd	r22, Y+37	; 0x25
    12a8:	7e a1       	ldd	r23, Y+38	; 0x26
    12aa:	c4 01       	movw	r24, r8
    12ac:	89 2f       	mov	r24, r25
    12ae:	99 27       	eor	r25, r25
    12b0:	86 95       	lsr	r24
    12b2:	48 0f       	add	r20, r24
    12b4:	59 1f       	adc	r21, r25
    12b6:	61 1d       	adc	r22, r1
    12b8:	71 1d       	adc	r23, r1
    12ba:	ce 01       	movw	r24, r28
    12bc:	6f de       	rcall	.-802    	; 0xf9c <move_window>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <put_fat+0x110>
    12c2:	74 c0       	rjmp	.+232    	; 0x13ac <put_fat+0x1f8>
    12c4:	63 c0       	rjmp	.+198    	; 0x138c <put_fat+0x1d8>
    12c6:	40 82       	st	Z, r4
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	7b c0       	rjmp	.+246    	; 0x13c4 <put_fat+0x210>
    12ce:	45 2f       	mov	r20, r21
    12d0:	56 2f       	mov	r21, r22
    12d2:	67 2f       	mov	r22, r23
    12d4:	77 27       	eor	r23, r23
    12d6:	83 a1       	ldd	r24, Z+35	; 0x23
    12d8:	94 a1       	ldd	r25, Z+36	; 0x24
    12da:	a5 a1       	ldd	r26, Z+37	; 0x25
    12dc:	b6 a1       	ldd	r27, Z+38	; 0x26
    12de:	48 0f       	add	r20, r24
    12e0:	59 1f       	adc	r21, r25
    12e2:	6a 1f       	adc	r22, r26
    12e4:	7b 1f       	adc	r23, r27
    12e6:	cf 01       	movw	r24, r30
    12e8:	59 de       	rcall	.-846    	; 0xf9c <move_window>
    12ea:	18 2f       	mov	r17, r24
    12ec:	81 11       	cpse	r24, r1
    12ee:	6a c0       	rjmp	.+212    	; 0x13c4 <put_fat+0x210>
    12f0:	fe 01       	movw	r30, r28
    12f2:	f3 96       	adiw	r30, 0x33	; 51
    12f4:	cc 0c       	add	r12, r12
    12f6:	dd 1c       	adc	r13, r13
    12f8:	e8 94       	clt
    12fa:	c0 f8       	bld	r12, 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	d8 22       	and	r13, r24
    1300:	ec 0d       	add	r30, r12
    1302:	fd 1d       	adc	r31, r13
    1304:	40 82       	st	Z, r4
    1306:	51 82       	std	Z+1, r5	; 0x01
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	5b c0       	rjmp	.+182    	; 0x13c4 <put_fat+0x210>
    130e:	83 a1       	ldd	r24, Z+35	; 0x23
    1310:	94 a1       	ldd	r25, Z+36	; 0x24
    1312:	a5 a1       	ldd	r26, Z+37	; 0x25
    1314:	b6 a1       	ldd	r27, Z+38	; 0x26
    1316:	68 94       	set
    1318:	16 f8       	bld	r1, 6
    131a:	76 95       	lsr	r23
    131c:	67 95       	ror	r22
    131e:	57 95       	ror	r21
    1320:	47 95       	ror	r20
    1322:	16 94       	lsr	r1
    1324:	d1 f7       	brne	.-12     	; 0x131a <put_fat+0x166>
    1326:	48 0f       	add	r20, r24
    1328:	59 1f       	adc	r21, r25
    132a:	6a 1f       	adc	r22, r26
    132c:	7b 1f       	adc	r23, r27
    132e:	cf 01       	movw	r24, r30
    1330:	35 de       	rcall	.-918    	; 0xf9c <move_window>
    1332:	18 2f       	mov	r17, r24
    1334:	81 11       	cpse	r24, r1
    1336:	46 c0       	rjmp	.+140    	; 0x13c4 <put_fat+0x210>
    1338:	ef e0       	ldi	r30, 0x0F	; 15
    133a:	7e 22       	and	r7, r30
    133c:	ce 01       	movw	r24, r28
    133e:	c3 96       	adiw	r24, 0x33	; 51
    1340:	cc 0c       	add	r12, r12
    1342:	dd 1c       	adc	r13, r13
    1344:	cc 0c       	add	r12, r12
    1346:	dd 1c       	adc	r13, r13
    1348:	fc ef       	ldi	r31, 0xFC	; 252
    134a:	cf 22       	and	r12, r31
    134c:	f1 e0       	ldi	r31, 0x01	; 1
    134e:	df 22       	and	r13, r31
    1350:	c8 0e       	add	r12, r24
    1352:	d9 1e       	adc	r13, r25
    1354:	c6 01       	movw	r24, r12
    1356:	92 dc       	rcall	.-1756   	; 0xc7c <ld_dword>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	88 27       	eor	r24, r24
    135e:	99 27       	eor	r25, r25
    1360:	aa 27       	eor	r26, r26
    1362:	b0 7f       	andi	r27, 0xF0	; 240
    1364:	48 2a       	or	r4, r24
    1366:	59 2a       	or	r5, r25
    1368:	6a 2a       	or	r6, r26
    136a:	7b 2a       	or	r7, r27
    136c:	f6 01       	movw	r30, r12
    136e:	40 82       	st	Z, r4
    1370:	51 82       	std	Z+1, r5	; 0x01
    1372:	62 82       	std	Z+2, r6	; 0x02
    1374:	73 82       	std	Z+3, r7	; 0x03
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	24 c0       	rjmp	.+72     	; 0x13c4 <put_fat+0x210>
    137c:	12 e0       	ldi	r17, 0x02	; 2
    137e:	22 c0       	rjmp	.+68     	; 0x13c4 <put_fat+0x210>
    1380:	12 e0       	ldi	r17, 0x02	; 2
    1382:	20 c0       	rjmp	.+64     	; 0x13c4 <put_fat+0x210>
    1384:	12 e0       	ldi	r17, 0x02	; 2
    1386:	1e c0       	rjmp	.+60     	; 0x13c4 <put_fat+0x210>
    1388:	18 2f       	mov	r17, r24
    138a:	1c c0       	rjmp	.+56     	; 0x13c4 <put_fat+0x210>
    138c:	18 2f       	mov	r17, r24
    138e:	1a c0       	rjmp	.+52     	; 0x13c4 <put_fat+0x210>
    1390:	f1 e0       	ldi	r31, 0x01	; 1
    1392:	9f 22       	and	r9, r31
    1394:	f1 01       	movw	r30, r2
    1396:	e8 0d       	add	r30, r8
    1398:	f9 1d       	adc	r31, r9
    139a:	68 94       	set
    139c:	13 f8       	bld	r1, 3
    139e:	76 94       	lsr	r7
    13a0:	67 94       	ror	r6
    13a2:	57 94       	ror	r5
    13a4:	47 94       	ror	r4
    13a6:	16 94       	lsr	r1
    13a8:	d1 f7       	brne	.-12     	; 0x139e <put_fat+0x1ea>
    13aa:	8d cf       	rjmp	.-230    	; 0x12c6 <put_fat+0x112>
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	92 22       	and	r9, r18
    13b0:	f1 01       	movw	r30, r2
    13b2:	e8 0d       	add	r30, r8
    13b4:	f9 1d       	adc	r31, r9
    13b6:	90 81       	ld	r25, Z
    13b8:	90 7f       	andi	r25, 0xF0	; 240
    13ba:	85 2d       	mov	r24, r5
    13bc:	8f 70       	andi	r24, 0x0F	; 15
    13be:	49 2e       	mov	r4, r25
    13c0:	48 2a       	or	r4, r24
    13c2:	81 cf       	rjmp	.-254    	; 0x12c6 <put_fat+0x112>
    13c4:	81 2f       	mov	r24, r17
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	3f 90       	pop	r3
    13e8:	2f 90       	pop	r2
    13ea:	08 95       	ret

000013ec <st_clust>:
    13ec:	fb 01       	movw	r30, r22
    13ee:	22 8f       	std	Z+26, r18	; 0x1a
    13f0:	33 8f       	std	Z+27, r19	; 0x1b
    13f2:	dc 01       	movw	r26, r24
    13f4:	8c 91       	ld	r24, X
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	29 f4       	brne	.+10     	; 0x1404 <st_clust+0x18>
    13fa:	ca 01       	movw	r24, r20
    13fc:	aa 27       	eor	r26, r26
    13fe:	bb 27       	eor	r27, r27
    1400:	84 8b       	std	Z+20, r24	; 0x14
    1402:	95 8b       	std	Z+21, r25	; 0x15
    1404:	08 95       	ret

00001406 <get_fat>:
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	42 30       	cpi	r20, 0x02	; 2
    141c:	51 05       	cpc	r21, r1
    141e:	61 05       	cpc	r22, r1
    1420:	71 05       	cpc	r23, r1
    1422:	08 f4       	brcc	.+2      	; 0x1426 <get_fat+0x20>
    1424:	a1 c0       	rjmp	.+322    	; 0x1568 <get_fat+0x162>
    1426:	fc 01       	movw	r30, r24
    1428:	c0 81       	ld	r28, Z
    142a:	d1 81       	ldd	r29, Z+1	; 0x01
    142c:	8f 89       	ldd	r24, Y+23	; 0x17
    142e:	98 8d       	ldd	r25, Y+24	; 0x18
    1430:	a9 8d       	ldd	r26, Y+25	; 0x19
    1432:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1434:	48 17       	cp	r20, r24
    1436:	59 07       	cpc	r21, r25
    1438:	6a 07       	cpc	r22, r26
    143a:	7b 07       	cpc	r23, r27
    143c:	08 f0       	brcs	.+2      	; 0x1440 <get_fat+0x3a>
    143e:	99 c0       	rjmp	.+306    	; 0x1572 <get_fat+0x16c>
    1440:	6a 01       	movw	r12, r20
    1442:	7b 01       	movw	r14, r22
    1444:	88 81       	ld	r24, Y
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	09 f4       	brne	.+2      	; 0x144c <get_fat+0x46>
    144a:	4b c0       	rjmp	.+150    	; 0x14e2 <get_fat+0xdc>
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	09 f4       	brne	.+2      	; 0x1452 <get_fat+0x4c>
    1450:	69 c0       	rjmp	.+210    	; 0x1524 <get_fat+0x11e>
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	09 f0       	breq	.+2      	; 0x1458 <get_fat+0x52>
    1456:	92 c0       	rjmp	.+292    	; 0x157c <get_fat+0x176>
    1458:	8a 01       	movw	r16, r20
    145a:	16 95       	lsr	r17
    145c:	07 95       	ror	r16
    145e:	04 0f       	add	r16, r20
    1460:	15 1f       	adc	r17, r21
    1462:	c8 01       	movw	r24, r16
    1464:	89 2f       	mov	r24, r25
    1466:	99 27       	eor	r25, r25
    1468:	86 95       	lsr	r24
    146a:	4b a1       	ldd	r20, Y+35	; 0x23
    146c:	5c a1       	ldd	r21, Y+36	; 0x24
    146e:	6d a1       	ldd	r22, Y+37	; 0x25
    1470:	7e a1       	ldd	r23, Y+38	; 0x26
    1472:	48 0f       	add	r20, r24
    1474:	59 1f       	adc	r21, r25
    1476:	61 1d       	adc	r22, r1
    1478:	71 1d       	adc	r23, r1
    147a:	ce 01       	movw	r24, r28
    147c:	8f dd       	rcall	.-1250   	; 0xf9c <move_window>
    147e:	81 11       	cpse	r24, r1
    1480:	82 c0       	rjmp	.+260    	; 0x1586 <get_fat+0x180>
    1482:	58 01       	movw	r10, r16
    1484:	ff ef       	ldi	r31, 0xFF	; 255
    1486:	af 1a       	sub	r10, r31
    1488:	bf 0a       	sbc	r11, r31
    148a:	11 70       	andi	r17, 0x01	; 1
    148c:	fe 01       	movw	r30, r28
    148e:	e0 0f       	add	r30, r16
    1490:	f1 1f       	adc	r31, r17
    1492:	13 a9       	ldd	r17, Z+51	; 0x33
    1494:	c5 01       	movw	r24, r10
    1496:	89 2f       	mov	r24, r25
    1498:	99 27       	eor	r25, r25
    149a:	86 95       	lsr	r24
    149c:	4b a1       	ldd	r20, Y+35	; 0x23
    149e:	5c a1       	ldd	r21, Y+36	; 0x24
    14a0:	6d a1       	ldd	r22, Y+37	; 0x25
    14a2:	7e a1       	ldd	r23, Y+38	; 0x26
    14a4:	48 0f       	add	r20, r24
    14a6:	59 1f       	adc	r21, r25
    14a8:	61 1d       	adc	r22, r1
    14aa:	71 1d       	adc	r23, r1
    14ac:	ce 01       	movw	r24, r28
    14ae:	76 dd       	rcall	.-1300   	; 0xf9c <move_window>
    14b0:	81 11       	cpse	r24, r1
    14b2:	6d c0       	rjmp	.+218    	; 0x158e <get_fat+0x188>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	b8 22       	and	r11, r24
    14b8:	ca 0d       	add	r28, r10
    14ba:	db 1d       	adc	r29, r11
    14bc:	8b a9       	ldd	r24, Y+51	; 0x33
    14be:	61 2f       	mov	r22, r17
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	78 2b       	or	r23, r24
    14c4:	c0 fe       	sbrs	r12, 0
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <get_fat+0xd4>
    14c8:	72 95       	swap	r23
    14ca:	62 95       	swap	r22
    14cc:	6f 70       	andi	r22, 0x0F	; 15
    14ce:	67 27       	eor	r22, r23
    14d0:	7f 70       	andi	r23, 0x0F	; 15
    14d2:	67 27       	eor	r22, r23
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	65 c0       	rjmp	.+202    	; 0x15a4 <get_fat+0x19e>
    14da:	7f 70       	andi	r23, 0x0F	; 15
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	61 c0       	rjmp	.+194    	; 0x15a4 <get_fat+0x19e>
    14e2:	45 2f       	mov	r20, r21
    14e4:	56 2f       	mov	r21, r22
    14e6:	67 2f       	mov	r22, r23
    14e8:	77 27       	eor	r23, r23
    14ea:	8b a1       	ldd	r24, Y+35	; 0x23
    14ec:	9c a1       	ldd	r25, Y+36	; 0x24
    14ee:	ad a1       	ldd	r26, Y+37	; 0x25
    14f0:	be a1       	ldd	r27, Y+38	; 0x26
    14f2:	48 0f       	add	r20, r24
    14f4:	59 1f       	adc	r21, r25
    14f6:	6a 1f       	adc	r22, r26
    14f8:	7b 1f       	adc	r23, r27
    14fa:	ce 01       	movw	r24, r28
    14fc:	4f dd       	rcall	.-1378   	; 0xf9c <move_window>
    14fe:	81 11       	cpse	r24, r1
    1500:	4a c0       	rjmp	.+148    	; 0x1596 <get_fat+0x190>
    1502:	e3 96       	adiw	r28, 0x33	; 51
    1504:	a6 01       	movw	r20, r12
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	4e 7f       	andi	r20, 0xFE	; 254
    150c:	51 70       	andi	r21, 0x01	; 1
    150e:	c4 0f       	add	r28, r20
    1510:	d5 1f       	adc	r29, r21
    1512:	69 81       	ldd	r22, Y+1	; 0x01
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	76 2f       	mov	r23, r22
    1518:	66 27       	eor	r22, r22
    151a:	88 81       	ld	r24, Y
    151c:	68 2b       	or	r22, r24
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	40 c0       	rjmp	.+128    	; 0x15a4 <get_fat+0x19e>
    1524:	8b a1       	ldd	r24, Y+35	; 0x23
    1526:	9c a1       	ldd	r25, Y+36	; 0x24
    1528:	ad a1       	ldd	r26, Y+37	; 0x25
    152a:	be a1       	ldd	r27, Y+38	; 0x26
    152c:	68 94       	set
    152e:	16 f8       	bld	r1, 6
    1530:	76 95       	lsr	r23
    1532:	67 95       	ror	r22
    1534:	57 95       	ror	r21
    1536:	47 95       	ror	r20
    1538:	16 94       	lsr	r1
    153a:	d1 f7       	brne	.-12     	; 0x1530 <get_fat+0x12a>
    153c:	48 0f       	add	r20, r24
    153e:	59 1f       	adc	r21, r25
    1540:	6a 1f       	adc	r22, r26
    1542:	7b 1f       	adc	r23, r27
    1544:	ce 01       	movw	r24, r28
    1546:	2a dd       	rcall	.-1452   	; 0xf9c <move_window>
    1548:	81 11       	cpse	r24, r1
    154a:	29 c0       	rjmp	.+82     	; 0x159e <get_fat+0x198>
    154c:	e3 96       	adiw	r28, 0x33	; 51
    154e:	a6 01       	movw	r20, r12
    1550:	44 0f       	add	r20, r20
    1552:	55 1f       	adc	r21, r21
    1554:	44 0f       	add	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	ca 01       	movw	r24, r20
    155a:	8c 7f       	andi	r24, 0xFC	; 252
    155c:	91 70       	andi	r25, 0x01	; 1
    155e:	8c 0f       	add	r24, r28
    1560:	9d 1f       	adc	r25, r29
    1562:	8c db       	rcall	.-2280   	; 0xc7c <ld_dword>
    1564:	9f 70       	andi	r25, 0x0F	; 15
    1566:	1e c0       	rjmp	.+60     	; 0x15a4 <get_fat+0x19e>
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	19 c0       	rjmp	.+50     	; 0x15a4 <get_fat+0x19e>
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <get_fat+0x19e>
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <get_fat+0x19e>
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f ef       	ldi	r23, 0xFF	; 255
    158a:	cb 01       	movw	r24, r22
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <get_fat+0x19e>
    158e:	6f ef       	ldi	r22, 0xFF	; 255
    1590:	7f ef       	ldi	r23, 0xFF	; 255
    1592:	cb 01       	movw	r24, r22
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <get_fat+0x19e>
    1596:	6f ef       	ldi	r22, 0xFF	; 255
    1598:	7f ef       	ldi	r23, 0xFF	; 255
    159a:	cb 01       	movw	r24, r22
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <get_fat+0x19e>
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	7f ef       	ldi	r23, 0xFF	; 255
    15a2:	cb 01       	movw	r24, r22
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	08 95       	ret

000015ba <dir_sdi>:
    15ba:	4f 92       	push	r4
    15bc:	5f 92       	push	r5
    15be:	6f 92       	push	r6
    15c0:	7f 92       	push	r7
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	ec 01       	movw	r28, r24
    15dc:	6a 01       	movw	r12, r20
    15de:	7b 01       	movw	r14, r22
    15e0:	41 15       	cp	r20, r1
    15e2:	51 05       	cpc	r21, r1
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	68 07       	cpc	r22, r24
    15e8:	71 05       	cpc	r23, r1
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <dir_sdi+0x34>
    15ec:	b1 c0       	rjmp	.+354    	; 0x1750 <dir_sdi+0x196>
    15ee:	db 01       	movw	r26, r22
    15f0:	ca 01       	movw	r24, r20
    15f2:	8f 71       	andi	r24, 0x1F	; 31
    15f4:	99 27       	eor	r25, r25
    15f6:	aa 27       	eor	r26, r26
    15f8:	bb 27       	eor	r27, r27
    15fa:	89 2b       	or	r24, r25
    15fc:	8a 2b       	or	r24, r26
    15fe:	8b 2b       	or	r24, r27
    1600:	09 f0       	breq	.+2      	; 0x1604 <dir_sdi+0x4a>
    1602:	a8 c0       	rjmp	.+336    	; 0x1754 <dir_sdi+0x19a>
    1604:	08 81       	ld	r16, Y
    1606:	19 81       	ldd	r17, Y+1	; 0x01
    1608:	4e 87       	std	Y+14, r20	; 0x0e
    160a:	5f 87       	std	Y+15, r21	; 0x0f
    160c:	68 8b       	std	Y+16, r22	; 0x10
    160e:	79 8b       	std	Y+17, r23	; 0x11
    1610:	8e 80       	ldd	r8, Y+6	; 0x06
    1612:	9f 80       	ldd	r9, Y+7	; 0x07
    1614:	a8 84       	ldd	r10, Y+8	; 0x08
    1616:	b9 84       	ldd	r11, Y+9	; 0x09
    1618:	81 14       	cp	r8, r1
    161a:	91 04       	cpc	r9, r1
    161c:	a1 04       	cpc	r10, r1
    161e:	b1 04       	cpc	r11, r1
    1620:	61 f5       	brne	.+88     	; 0x167a <dir_sdi+0xc0>
    1622:	f8 01       	movw	r30, r16
    1624:	80 81       	ld	r24, Z
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	40 f0       	brcs	.+16     	; 0x163a <dir_sdi+0x80>
    162a:	87 a1       	ldd	r24, Z+39	; 0x27
    162c:	90 a5       	ldd	r25, Z+40	; 0x28
    162e:	a1 a5       	ldd	r26, Z+41	; 0x29
    1630:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	a1 05       	cpc	r26, r1
    1636:	b1 05       	cpc	r27, r1
    1638:	f1 f4       	brne	.+60     	; 0x1676 <dir_sdi+0xbc>
    163a:	f8 01       	movw	r30, r16
    163c:	87 81       	ldd	r24, Z+7	; 0x07
    163e:	90 85       	ldd	r25, Z+8	; 0x08
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	b7 01       	movw	r22, r14
    1646:	a6 01       	movw	r20, r12
    1648:	68 94       	set
    164a:	14 f8       	bld	r1, 4
    164c:	76 95       	lsr	r23
    164e:	67 95       	ror	r22
    1650:	57 95       	ror	r21
    1652:	47 95       	ror	r20
    1654:	16 94       	lsr	r1
    1656:	d1 f7       	brne	.-12     	; 0x164c <dir_sdi+0x92>
    1658:	48 17       	cp	r20, r24
    165a:	59 07       	cpc	r21, r25
    165c:	6a 07       	cpc	r22, r26
    165e:	7b 07       	cpc	r23, r27
    1660:	08 f0       	brcs	.+2      	; 0x1664 <dir_sdi+0xaa>
    1662:	7a c0       	rjmp	.+244    	; 0x1758 <dir_sdi+0x19e>
    1664:	87 a1       	ldd	r24, Z+39	; 0x27
    1666:	90 a5       	ldd	r25, Z+40	; 0x28
    1668:	a1 a5       	ldd	r26, Z+41	; 0x29
    166a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    166c:	8e 8b       	std	Y+22, r24	; 0x16
    166e:	9f 8b       	std	Y+23, r25	; 0x17
    1670:	a8 8f       	std	Y+24, r26	; 0x18
    1672:	b9 8f       	std	Y+25, r27	; 0x19
    1674:	44 c0       	rjmp	.+136    	; 0x16fe <dir_sdi+0x144>
    1676:	4c 01       	movw	r8, r24
    1678:	5d 01       	movw	r10, r26
    167a:	f8 01       	movw	r30, r16
    167c:	41 84       	ldd	r4, Z+9	; 0x09
    167e:	52 84       	ldd	r5, Z+10	; 0x0a
    1680:	61 2c       	mov	r6, r1
    1682:	71 2c       	mov	r7, r1
    1684:	03 2e       	mov	r0, r19
    1686:	39 e0       	ldi	r19, 0x09	; 9
    1688:	44 0c       	add	r4, r4
    168a:	55 1c       	adc	r5, r5
    168c:	66 1c       	adc	r6, r6
    168e:	77 1c       	adc	r7, r7
    1690:	3a 95       	dec	r19
    1692:	d1 f7       	brne	.-12     	; 0x1688 <dir_sdi+0xce>
    1694:	30 2d       	mov	r19, r0
    1696:	c4 14       	cp	r12, r4
    1698:	d5 04       	cpc	r13, r5
    169a:	e6 04       	cpc	r14, r6
    169c:	f7 04       	cpc	r15, r7
    169e:	38 f1       	brcs	.+78     	; 0x16ee <dir_sdi+0x134>
    16a0:	b5 01       	movw	r22, r10
    16a2:	a4 01       	movw	r20, r8
    16a4:	ce 01       	movw	r24, r28
    16a6:	af de       	rcall	.-674    	; 0x1406 <get_fat>
    16a8:	4b 01       	movw	r8, r22
    16aa:	5c 01       	movw	r10, r24
    16ac:	6f 3f       	cpi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	8f 4f       	sbci	r24, 0xFF	; 255
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <dir_sdi+0xfe>
    16b6:	52 c0       	rjmp	.+164    	; 0x175c <dir_sdi+0x1a2>
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	88 16       	cp	r8, r24
    16bc:	91 04       	cpc	r9, r1
    16be:	a1 04       	cpc	r10, r1
    16c0:	b1 04       	cpc	r11, r1
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <dir_sdi+0x10c>
    16c4:	4d c0       	rjmp	.+154    	; 0x1760 <dir_sdi+0x1a6>
    16c6:	f8 01       	movw	r30, r16
    16c8:	87 89       	ldd	r24, Z+23	; 0x17
    16ca:	90 8d       	ldd	r25, Z+24	; 0x18
    16cc:	a1 8d       	ldd	r26, Z+25	; 0x19
    16ce:	b2 8d       	ldd	r27, Z+26	; 0x1a
    16d0:	88 16       	cp	r8, r24
    16d2:	99 06       	cpc	r9, r25
    16d4:	aa 06       	cpc	r10, r26
    16d6:	bb 06       	cpc	r11, r27
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <dir_sdi+0x122>
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <dir_sdi+0x1aa>
    16dc:	c4 18       	sub	r12, r4
    16de:	d5 08       	sbc	r13, r5
    16e0:	e6 08       	sbc	r14, r6
    16e2:	f7 08       	sbc	r15, r7
    16e4:	c4 14       	cp	r12, r4
    16e6:	d5 04       	cpc	r13, r5
    16e8:	e6 04       	cpc	r14, r6
    16ea:	f7 04       	cpc	r15, r7
    16ec:	c8 f6       	brcc	.-78     	; 0x16a0 <dir_sdi+0xe6>
    16ee:	b5 01       	movw	r22, r10
    16f0:	a4 01       	movw	r20, r8
    16f2:	c8 01       	movw	r24, r16
    16f4:	15 db       	rcall	.-2518   	; 0xd20 <clst2sect>
    16f6:	6e 8b       	std	Y+22, r22	; 0x16
    16f8:	7f 8b       	std	Y+23, r23	; 0x17
    16fa:	88 8f       	std	Y+24, r24	; 0x18
    16fc:	99 8f       	std	Y+25, r25	; 0x19
    16fe:	8a 8a       	std	Y+18, r8	; 0x12
    1700:	9b 8a       	std	Y+19, r9	; 0x13
    1702:	ac 8a       	std	Y+20, r10	; 0x14
    1704:	bd 8a       	std	Y+21, r11	; 0x15
    1706:	8e 89       	ldd	r24, Y+22	; 0x16
    1708:	9f 89       	ldd	r25, Y+23	; 0x17
    170a:	a8 8d       	ldd	r26, Y+24	; 0x18
    170c:	b9 8d       	ldd	r27, Y+25	; 0x19
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	a1 05       	cpc	r26, r1
    1712:	b1 05       	cpc	r27, r1
    1714:	49 f1       	breq	.+82     	; 0x1768 <dir_sdi+0x1ae>
    1716:	b7 01       	movw	r22, r14
    1718:	a6 01       	movw	r20, r12
    171a:	03 2e       	mov	r0, r19
    171c:	39 e0       	ldi	r19, 0x09	; 9
    171e:	76 95       	lsr	r23
    1720:	67 95       	ror	r22
    1722:	57 95       	ror	r21
    1724:	47 95       	ror	r20
    1726:	3a 95       	dec	r19
    1728:	d1 f7       	brne	.-12     	; 0x171e <dir_sdi+0x164>
    172a:	30 2d       	mov	r19, r0
    172c:	84 0f       	add	r24, r20
    172e:	95 1f       	adc	r25, r21
    1730:	a6 1f       	adc	r26, r22
    1732:	b7 1f       	adc	r27, r23
    1734:	8e 8b       	std	Y+22, r24	; 0x16
    1736:	9f 8b       	std	Y+23, r25	; 0x17
    1738:	a8 8f       	std	Y+24, r26	; 0x18
    173a:	b9 8f       	std	Y+25, r27	; 0x19
    173c:	0d 5c       	subi	r16, 0xCD	; 205
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	f1 e0       	ldi	r31, 0x01	; 1
    1742:	df 22       	and	r13, r31
    1744:	c0 0e       	add	r12, r16
    1746:	d1 1e       	adc	r13, r17
    1748:	db 8e       	std	Y+27, r13	; 0x1b
    174a:	ca 8e       	std	Y+26, r12	; 0x1a
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0d c0       	rjmp	.+26     	; 0x176a <dir_sdi+0x1b0>
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	0b c0       	rjmp	.+22     	; 0x176a <dir_sdi+0x1b0>
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	09 c0       	rjmp	.+18     	; 0x176a <dir_sdi+0x1b0>
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	07 c0       	rjmp	.+14     	; 0x176a <dir_sdi+0x1b0>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	05 c0       	rjmp	.+10     	; 0x176a <dir_sdi+0x1b0>
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	03 c0       	rjmp	.+6      	; 0x176a <dir_sdi+0x1b0>
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	01 c0       	rjmp	.+2      	; 0x176a <dir_sdi+0x1b0>
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	08 95       	ret

0000178c <create_chain>:
    178c:	4f 92       	push	r4
    178e:	5f 92       	push	r5
    1790:	6f 92       	push	r6
    1792:	7f 92       	push	r7
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	8c 01       	movw	r16, r24
    17ae:	2a 01       	movw	r4, r20
    17b0:	3b 01       	movw	r6, r22
    17b2:	fc 01       	movw	r30, r24
    17b4:	c0 81       	ld	r28, Z
    17b6:	d1 81       	ldd	r29, Z+1	; 0x01
    17b8:	41 15       	cp	r20, r1
    17ba:	51 05       	cpc	r21, r1
    17bc:	61 05       	cpc	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	c9 f4       	brne	.+50     	; 0x17f4 <create_chain+0x68>
    17c2:	8b 84       	ldd	r8, Y+11	; 0x0b
    17c4:	9c 84       	ldd	r9, Y+12	; 0x0c
    17c6:	ad 84       	ldd	r10, Y+13	; 0x0d
    17c8:	be 84       	ldd	r11, Y+14	; 0x0e
    17ca:	81 14       	cp	r8, r1
    17cc:	91 04       	cpc	r9, r1
    17ce:	a1 04       	cpc	r10, r1
    17d0:	b1 04       	cpc	r11, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <create_chain+0x4a>
    17d4:	1d c1       	rjmp	.+570    	; 0x1a10 <create_chain+0x284>
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	98 8d       	ldd	r25, Y+24	; 0x18
    17da:	a9 8d       	ldd	r26, Y+25	; 0x19
    17dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17de:	88 16       	cp	r8, r24
    17e0:	99 06       	cpc	r9, r25
    17e2:	aa 06       	cpc	r10, r26
    17e4:	bb 06       	cpc	r11, r27
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <create_chain+0x5e>
    17e8:	17 c1       	rjmp	.+558    	; 0x1a18 <create_chain+0x28c>
    17ea:	81 2c       	mov	r8, r1
    17ec:	91 2c       	mov	r9, r1
    17ee:	54 01       	movw	r10, r8
    17f0:	83 94       	inc	r8
    17f2:	12 c1       	rjmp	.+548    	; 0x1a18 <create_chain+0x28c>
    17f4:	08 de       	rcall	.-1008   	; 0x1406 <get_fat>
    17f6:	62 30       	cpi	r22, 0x02	; 2
    17f8:	71 05       	cpc	r23, r1
    17fa:	81 05       	cpc	r24, r1
    17fc:	91 05       	cpc	r25, r1
    17fe:	08 f4       	brcc	.+2      	; 0x1802 <create_chain+0x76>
    1800:	cf c0       	rjmp	.+414    	; 0x19a0 <create_chain+0x214>
    1802:	6f 3f       	cpi	r22, 0xFF	; 255
    1804:	ff ef       	ldi	r31, 0xFF	; 255
    1806:	7f 07       	cpc	r23, r31
    1808:	8f 07       	cpc	r24, r31
    180a:	9f 07       	cpc	r25, r31
    180c:	09 f4       	brne	.+2      	; 0x1810 <create_chain+0x84>
    180e:	cd c0       	rjmp	.+410    	; 0x19aa <create_chain+0x21e>
    1810:	cf 88       	ldd	r12, Y+23	; 0x17
    1812:	d8 8c       	ldd	r13, Y+24	; 0x18
    1814:	e9 8c       	ldd	r14, Y+25	; 0x19
    1816:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1818:	6c 15       	cp	r22, r12
    181a:	7d 05       	cpc	r23, r13
    181c:	8e 05       	cpc	r24, r14
    181e:	9f 05       	cpc	r25, r15
    1820:	08 f0       	brcs	.+2      	; 0x1824 <create_chain+0x98>
    1822:	e5 c0       	rjmp	.+458    	; 0x19ee <create_chain+0x262>
    1824:	03 c1       	rjmp	.+518    	; 0x1a2c <create_chain+0x2a0>
    1826:	73 01       	movw	r14, r6
    1828:	62 01       	movw	r12, r4
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	c2 1a       	sub	r12, r18
    182e:	d2 0a       	sbc	r13, r18
    1830:	e2 0a       	sbc	r14, r18
    1832:	f2 0a       	sbc	r15, r18
    1834:	8f 89       	ldd	r24, Y+23	; 0x17
    1836:	98 8d       	ldd	r25, Y+24	; 0x18
    1838:	a9 8d       	ldd	r26, Y+25	; 0x19
    183a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    183c:	c8 16       	cp	r12, r24
    183e:	d9 06       	cpc	r13, r25
    1840:	ea 06       	cpc	r14, r26
    1842:	fb 06       	cpc	r15, r27
    1844:	28 f0       	brcs	.+10     	; 0x1850 <create_chain+0xc4>
    1846:	c1 2c       	mov	r12, r1
    1848:	d1 2c       	mov	r13, r1
    184a:	76 01       	movw	r14, r12
    184c:	68 94       	set
    184e:	c1 f8       	bld	r12, 1
    1850:	b7 01       	movw	r22, r14
    1852:	a6 01       	movw	r20, r12
    1854:	c8 01       	movw	r24, r16
    1856:	d7 dd       	rcall	.-1106   	; 0x1406 <get_fat>
    1858:	61 30       	cpi	r22, 0x01	; 1
    185a:	71 05       	cpc	r23, r1
    185c:	81 05       	cpc	r24, r1
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <create_chain+0xd8>
    1862:	a7 c0       	rjmp	.+334    	; 0x19b2 <create_chain+0x226>
    1864:	6f 3f       	cpi	r22, 0xFF	; 255
    1866:	ef ef       	ldi	r30, 0xFF	; 255
    1868:	7e 07       	cpc	r23, r30
    186a:	8e 07       	cpc	r24, r30
    186c:	9e 07       	cpc	r25, r30
    186e:	09 f4       	brne	.+2      	; 0x1872 <create_chain+0xe6>
    1870:	a5 c0       	rjmp	.+330    	; 0x19bc <create_chain+0x230>
    1872:	67 2b       	or	r22, r23
    1874:	68 2b       	or	r22, r24
    1876:	69 2b       	or	r22, r25
    1878:	b1 f0       	breq	.+44     	; 0x18a6 <create_chain+0x11a>
    187a:	8b 84       	ldd	r8, Y+11	; 0x0b
    187c:	9c 84       	ldd	r9, Y+12	; 0x0c
    187e:	ad 84       	ldd	r10, Y+13	; 0x0d
    1880:	be 84       	ldd	r11, Y+14	; 0x0e
    1882:	f2 e0       	ldi	r31, 0x02	; 2
    1884:	8f 16       	cp	r8, r31
    1886:	91 04       	cpc	r9, r1
    1888:	a1 04       	cpc	r10, r1
    188a:	b1 04       	cpc	r11, r1
    188c:	08 f4       	brcc	.+2      	; 0x1890 <create_chain+0x104>
    188e:	ba c0       	rjmp	.+372    	; 0x1a04 <create_chain+0x278>
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	a9 8d       	ldd	r26, Y+25	; 0x19
    1896:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1898:	88 16       	cp	r8, r24
    189a:	99 06       	cpc	r9, r25
    189c:	aa 06       	cpc	r10, r26
    189e:	bb 06       	cpc	r11, r27
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <create_chain+0x118>
    18a2:	b3 c0       	rjmp	.+358    	; 0x1a0a <create_chain+0x27e>
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <create_chain+0x128>
    18a6:	c1 14       	cp	r12, r1
    18a8:	d1 04       	cpc	r13, r1
    18aa:	e1 04       	cpc	r14, r1
    18ac:	f1 04       	cpc	r15, r1
    18ae:	c9 f5       	brne	.+114    	; 0x1922 <create_chain+0x196>
    18b0:	53 01       	movw	r10, r6
    18b2:	42 01       	movw	r8, r4
    18b4:	75 01       	movw	r14, r10
    18b6:	64 01       	movw	r12, r8
    18b8:	2f ef       	ldi	r18, 0xFF	; 255
    18ba:	c2 1a       	sub	r12, r18
    18bc:	d2 0a       	sbc	r13, r18
    18be:	e2 0a       	sbc	r14, r18
    18c0:	f2 0a       	sbc	r15, r18
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	a9 8d       	ldd	r26, Y+25	; 0x19
    18c8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18ca:	c8 16       	cp	r12, r24
    18cc:	d9 06       	cpc	r13, r25
    18ce:	ea 06       	cpc	r14, r26
    18d0:	fb 06       	cpc	r15, r27
    18d2:	60 f0       	brcs	.+24     	; 0x18ec <create_chain+0x160>
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	88 16       	cp	r8, r24
    18d8:	91 04       	cpc	r9, r1
    18da:	a1 04       	cpc	r10, r1
    18dc:	b1 04       	cpc	r11, r1
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <create_chain+0x156>
    18e0:	71 c0       	rjmp	.+226    	; 0x19c4 <create_chain+0x238>
    18e2:	c1 2c       	mov	r12, r1
    18e4:	d1 2c       	mov	r13, r1
    18e6:	76 01       	movw	r14, r12
    18e8:	68 94       	set
    18ea:	c1 f8       	bld	r12, 1
    18ec:	b7 01       	movw	r22, r14
    18ee:	a6 01       	movw	r20, r12
    18f0:	c8 01       	movw	r24, r16
    18f2:	89 dd       	rcall	.-1262   	; 0x1406 <get_fat>
    18f4:	61 15       	cp	r22, r1
    18f6:	71 05       	cpc	r23, r1
    18f8:	81 05       	cpc	r24, r1
    18fa:	91 05       	cpc	r25, r1
    18fc:	91 f0       	breq	.+36     	; 0x1922 <create_chain+0x196>
    18fe:	61 30       	cpi	r22, 0x01	; 1
    1900:	71 05       	cpc	r23, r1
    1902:	81 05       	cpc	r24, r1
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <create_chain+0x17e>
    1908:	61 c0       	rjmp	.+194    	; 0x19cc <create_chain+0x240>
    190a:	6f 3f       	cpi	r22, 0xFF	; 255
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	09 f4       	brne	.+2      	; 0x1916 <create_chain+0x18a>
    1914:	60 c0       	rjmp	.+192    	; 0x19d6 <create_chain+0x24a>
    1916:	c8 14       	cp	r12, r8
    1918:	d9 04       	cpc	r13, r9
    191a:	ea 04       	cpc	r14, r10
    191c:	fb 04       	cpc	r15, r11
    191e:	61 f6       	brne	.-104    	; 0x18b8 <create_chain+0x12c>
    1920:	5e c0       	rjmp	.+188    	; 0x19de <create_chain+0x252>
    1922:	0f ef       	ldi	r16, 0xFF	; 255
    1924:	1f ef       	ldi	r17, 0xFF	; 255
    1926:	98 01       	movw	r18, r16
    1928:	b7 01       	movw	r22, r14
    192a:	a6 01       	movw	r20, r12
    192c:	ce 01       	movw	r24, r28
    192e:	42 dc       	rcall	.-1916   	; 0x11b4 <put_fat>
    1930:	81 11       	cpse	r24, r1
    1932:	2f c0       	rjmp	.+94     	; 0x1992 <create_chain+0x206>
    1934:	41 14       	cp	r4, r1
    1936:	51 04       	cpc	r5, r1
    1938:	61 04       	cpc	r6, r1
    193a:	71 04       	cpc	r7, r1
    193c:	41 f0       	breq	.+16     	; 0x194e <create_chain+0x1c2>
    193e:	97 01       	movw	r18, r14
    1940:	86 01       	movw	r16, r12
    1942:	b3 01       	movw	r22, r6
    1944:	a2 01       	movw	r20, r4
    1946:	ce 01       	movw	r24, r28
    1948:	35 dc       	rcall	.-1942   	; 0x11b4 <put_fat>
    194a:	81 11       	cpse	r24, r1
    194c:	22 c0       	rjmp	.+68     	; 0x1992 <create_chain+0x206>
    194e:	cb 86       	std	Y+11, r12	; 0x0b
    1950:	dc 86       	std	Y+12, r13	; 0x0c
    1952:	ed 86       	std	Y+13, r14	; 0x0d
    1954:	fe 86       	std	Y+14, r15	; 0x0e
    1956:	4f 85       	ldd	r20, Y+15	; 0x0f
    1958:	58 89       	ldd	r21, Y+16	; 0x10
    195a:	69 89       	ldd	r22, Y+17	; 0x11
    195c:	7a 89       	ldd	r23, Y+18	; 0x12
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	a9 8d       	ldd	r26, Y+25	; 0x19
    1964:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1966:	02 97       	sbiw	r24, 0x02	; 2
    1968:	a1 09       	sbc	r26, r1
    196a:	b1 09       	sbc	r27, r1
    196c:	84 17       	cp	r24, r20
    196e:	95 07       	cpc	r25, r21
    1970:	a6 07       	cpc	r26, r22
    1972:	b7 07       	cpc	r27, r23
    1974:	40 f0       	brcs	.+16     	; 0x1986 <create_chain+0x1fa>
    1976:	41 50       	subi	r20, 0x01	; 1
    1978:	51 09       	sbc	r21, r1
    197a:	61 09       	sbc	r22, r1
    197c:	71 09       	sbc	r23, r1
    197e:	4f 87       	std	Y+15, r20	; 0x0f
    1980:	58 8b       	std	Y+16, r21	; 0x10
    1982:	69 8b       	std	Y+17, r22	; 0x11
    1984:	7a 8b       	std	Y+18, r23	; 0x12
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	8c 83       	std	Y+4, r24	; 0x04
    198c:	c7 01       	movw	r24, r14
    198e:	b6 01       	movw	r22, r12
    1990:	4d c0       	rjmp	.+154    	; 0x1a2c <create_chain+0x2a0>
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	41 f1       	breq	.+80     	; 0x19e6 <create_chain+0x25a>
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	46 c0       	rjmp	.+140    	; 0x1a2c <create_chain+0x2a0>
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	41 c0       	rjmp	.+130    	; 0x1a2c <create_chain+0x2a0>
    19aa:	6f ef       	ldi	r22, 0xFF	; 255
    19ac:	7f ef       	ldi	r23, 0xFF	; 255
    19ae:	cb 01       	movw	r24, r22
    19b0:	3d c0       	rjmp	.+122    	; 0x1a2c <create_chain+0x2a0>
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	38 c0       	rjmp	.+112    	; 0x1a2c <create_chain+0x2a0>
    19bc:	6f ef       	ldi	r22, 0xFF	; 255
    19be:	7f ef       	ldi	r23, 0xFF	; 255
    19c0:	cb 01       	movw	r24, r22
    19c2:	34 c0       	rjmp	.+104    	; 0x1a2c <create_chain+0x2a0>
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	cb 01       	movw	r24, r22
    19ca:	30 c0       	rjmp	.+96     	; 0x1a2c <create_chain+0x2a0>
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	2b c0       	rjmp	.+86     	; 0x1a2c <create_chain+0x2a0>
    19d6:	6f ef       	ldi	r22, 0xFF	; 255
    19d8:	7f ef       	ldi	r23, 0xFF	; 255
    19da:	cb 01       	movw	r24, r22
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <create_chain+0x2a0>
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	cb 01       	movw	r24, r22
    19e4:	23 c0       	rjmp	.+70     	; 0x1a2c <create_chain+0x2a0>
    19e6:	6f ef       	ldi	r22, 0xFF	; 255
    19e8:	7f ef       	ldi	r23, 0xFF	; 255
    19ea:	cb 01       	movw	r24, r22
    19ec:	1f c0       	rjmp	.+62     	; 0x1a2c <create_chain+0x2a0>
    19ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    19f0:	78 89       	ldd	r23, Y+16	; 0x10
    19f2:	89 89       	ldd	r24, Y+17	; 0x11
    19f4:	9a 89       	ldd	r25, Y+18	; 0x12
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	81 05       	cpc	r24, r1
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <create_chain+0x276>
    1a00:	12 cf       	rjmp	.-476    	; 0x1826 <create_chain+0x9a>
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <create_chain+0x2a0>
    1a04:	53 01       	movw	r10, r6
    1a06:	42 01       	movw	r8, r4
    1a08:	55 cf       	rjmp	.-342    	; 0x18b4 <create_chain+0x128>
    1a0a:	53 01       	movw	r10, r6
    1a0c:	42 01       	movw	r8, r4
    1a0e:	52 cf       	rjmp	.-348    	; 0x18b4 <create_chain+0x128>
    1a10:	81 2c       	mov	r8, r1
    1a12:	91 2c       	mov	r9, r1
    1a14:	54 01       	movw	r10, r8
    1a16:	83 94       	inc	r8
    1a18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a1a:	78 89       	ldd	r23, Y+16	; 0x10
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a20:	61 15       	cp	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	81 05       	cpc	r24, r1
    1a26:	91 05       	cpc	r25, r1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <create_chain+0x2a0>
    1a2a:	44 cf       	rjmp	.-376    	; 0x18b4 <create_chain+0x128>
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	bf 90       	pop	r11
    1a3e:	af 90       	pop	r10
    1a40:	9f 90       	pop	r9
    1a42:	8f 90       	pop	r8
    1a44:	7f 90       	pop	r7
    1a46:	6f 90       	pop	r6
    1a48:	5f 90       	pop	r5
    1a4a:	4f 90       	pop	r4
    1a4c:	08 95       	ret

00001a4e <remove_chain>:
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	5c 01       	movw	r10, r24
    1a6c:	6a 01       	movw	r12, r20
    1a6e:	7b 01       	movw	r14, r22
    1a70:	b9 01       	movw	r22, r18
    1a72:	a8 01       	movw	r20, r16
    1a74:	22 e0       	ldi	r18, 0x02	; 2
    1a76:	c2 16       	cp	r12, r18
    1a78:	d1 04       	cpc	r13, r1
    1a7a:	e1 04       	cpc	r14, r1
    1a7c:	f1 04       	cpc	r15, r1
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <remove_chain+0x34>
    1a80:	60 c0       	rjmp	.+192    	; 0x1b42 <remove_chain+0xf4>
    1a82:	fc 01       	movw	r30, r24
    1a84:	c0 81       	ld	r28, Z
    1a86:	d1 81       	ldd	r29, Z+1	; 0x01
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a8e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a90:	c8 16       	cp	r12, r24
    1a92:	d9 06       	cpc	r13, r25
    1a94:	ea 06       	cpc	r14, r26
    1a96:	fb 06       	cpc	r15, r27
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <remove_chain+0x4e>
    1a9a:	55 c0       	rjmp	.+170    	; 0x1b46 <remove_chain+0xf8>
    1a9c:	41 15       	cp	r20, r1
    1a9e:	51 05       	cpc	r21, r1
    1aa0:	61 05       	cpc	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <remove_chain+0x66>
    1aa6:	0f ef       	ldi	r16, 0xFF	; 255
    1aa8:	1f ef       	ldi	r17, 0xFF	; 255
    1aaa:	98 01       	movw	r18, r16
    1aac:	ce 01       	movw	r24, r28
    1aae:	82 db       	rcall	.-2300   	; 0x11b4 <put_fat>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	50 c0       	rjmp	.+160    	; 0x1b54 <remove_chain+0x106>
    1ab4:	b7 01       	movw	r22, r14
    1ab6:	a6 01       	movw	r20, r12
    1ab8:	c5 01       	movw	r24, r10
    1aba:	a5 dc       	rcall	.-1718   	; 0x1406 <get_fat>
    1abc:	2b 01       	movw	r4, r22
    1abe:	3c 01       	movw	r6, r24
    1ac0:	61 15       	cp	r22, r1
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	81 05       	cpc	r24, r1
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <remove_chain+0x7e>
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <remove_chain+0xfc>
    1acc:	61 30       	cpi	r22, 0x01	; 1
    1ace:	71 05       	cpc	r23, r1
    1ad0:	81 05       	cpc	r24, r1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	e1 f1       	breq	.+120    	; 0x1b4e <remove_chain+0x100>
    1ad6:	6f 3f       	cpi	r22, 0xFF	; 255
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	c9 f1       	breq	.+114    	; 0x1b52 <remove_chain+0x104>
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	98 01       	movw	r18, r16
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	a6 01       	movw	r20, r12
    1aea:	ce 01       	movw	r24, r28
    1aec:	63 db       	rcall	.-2362   	; 0x11b4 <put_fat>
    1aee:	81 11       	cpse	r24, r1
    1af0:	31 c0       	rjmp	.+98     	; 0x1b54 <remove_chain+0x106>
    1af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af4:	98 89       	ldd	r25, Y+16	; 0x10
    1af6:	a9 89       	ldd	r26, Y+17	; 0x11
    1af8:	ba 89       	ldd	r27, Y+18	; 0x12
    1afa:	4f 89       	ldd	r20, Y+23	; 0x17
    1afc:	58 8d       	ldd	r21, Y+24	; 0x18
    1afe:	69 8d       	ldd	r22, Y+25	; 0x19
    1b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b02:	6a 01       	movw	r12, r20
    1b04:	7b 01       	movw	r14, r22
    1b06:	e2 e0       	ldi	r30, 0x02	; 2
    1b08:	ce 1a       	sub	r12, r30
    1b0a:	d1 08       	sbc	r13, r1
    1b0c:	e1 08       	sbc	r14, r1
    1b0e:	f1 08       	sbc	r15, r1
    1b10:	8c 15       	cp	r24, r12
    1b12:	9d 05       	cpc	r25, r13
    1b14:	ae 05       	cpc	r26, r14
    1b16:	bf 05       	cpc	r27, r15
    1b18:	50 f4       	brcc	.+20     	; 0x1b2e <remove_chain+0xe0>
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	8f 87       	std	Y+15, r24	; 0x0f
    1b22:	98 8b       	std	Y+16, r25	; 0x10
    1b24:	a9 8b       	std	Y+17, r26	; 0x11
    1b26:	ba 8b       	std	Y+18, r27	; 0x12
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	8c 83       	std	Y+4, r24	; 0x04
    1b2e:	73 01       	movw	r14, r6
    1b30:	62 01       	movw	r12, r4
    1b32:	44 16       	cp	r4, r20
    1b34:	55 06       	cpc	r5, r21
    1b36:	66 06       	cpc	r6, r22
    1b38:	77 06       	cpc	r7, r23
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <remove_chain+0xf0>
    1b3c:	bb cf       	rjmp	.-138    	; 0x1ab4 <remove_chain+0x66>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <remove_chain+0x106>
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <remove_chain+0x106>
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <remove_chain+0x106>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <remove_chain+0x106>
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <remove_chain+0x106>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	7f 90       	pop	r7
    1b6a:	6f 90       	pop	r6
    1b6c:	5f 90       	pop	r5
    1b6e:	4f 90       	pop	r4
    1b70:	08 95       	ret

00001b72 <dir_next>:
    1b72:	4f 92       	push	r4
    1b74:	5f 92       	push	r5
    1b76:	6f 92       	push	r6
    1b78:	7f 92       	push	r7
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	8b 01       	movw	r16, r22
    1b90:	fc 01       	movw	r30, r24
    1b92:	46 89       	ldd	r20, Z+22	; 0x16
    1b94:	57 89       	ldd	r21, Z+23	; 0x17
    1b96:	60 8d       	ldd	r22, Z+24	; 0x18
    1b98:	71 8d       	ldd	r23, Z+25	; 0x19
    1b9a:	41 15       	cp	r20, r1
    1b9c:	51 05       	cpc	r21, r1
    1b9e:	61 05       	cpc	r22, r1
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <dir_next+0x34>
    1ba4:	be c0       	rjmp	.+380    	; 0x1d22 <dir_next+0x1b0>
    1ba6:	c6 84       	ldd	r12, Z+14	; 0x0e
    1ba8:	d7 84       	ldd	r13, Z+15	; 0x0f
    1baa:	e0 88       	ldd	r14, Z+16	; 0x10
    1bac:	f1 88       	ldd	r15, Z+17	; 0x11
    1bae:	f0 e2       	ldi	r31, 0x20	; 32
    1bb0:	cf 0e       	add	r12, r31
    1bb2:	d1 1c       	adc	r13, r1
    1bb4:	e1 1c       	adc	r14, r1
    1bb6:	f1 1c       	adc	r15, r1
    1bb8:	c1 14       	cp	r12, r1
    1bba:	d1 04       	cpc	r13, r1
    1bbc:	20 e2       	ldi	r18, 0x20	; 32
    1bbe:	e2 06       	cpc	r14, r18
    1bc0:	f1 04       	cpc	r15, r1
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <dir_next+0x54>
    1bc4:	b0 c0       	rjmp	.+352    	; 0x1d26 <dir_next+0x1b4>
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	a8 80       	ld	r10, Y
    1bca:	b9 80       	ldd	r11, Y+1	; 0x01
    1bcc:	d7 01       	movw	r26, r14
    1bce:	c6 01       	movw	r24, r12
    1bd0:	91 70       	andi	r25, 0x01	; 1
    1bd2:	aa 27       	eor	r26, r26
    1bd4:	bb 27       	eor	r27, r27
    1bd6:	89 2b       	or	r24, r25
    1bd8:	8a 2b       	or	r24, r26
    1bda:	8b 2b       	or	r24, r27
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <dir_next+0x6e>
    1bde:	92 c0       	rjmp	.+292    	; 0x1d04 <dir_next+0x192>
    1be0:	4f 5f       	subi	r20, 0xFF	; 255
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
    1be4:	6f 4f       	sbci	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	4e 8b       	std	Y+22, r20	; 0x16
    1bea:	5f 8b       	std	Y+23, r21	; 0x17
    1bec:	68 8f       	std	Y+24, r22	; 0x18
    1bee:	79 8f       	std	Y+25, r23	; 0x19
    1bf0:	4a 89       	ldd	r20, Y+18	; 0x12
    1bf2:	5b 89       	ldd	r21, Y+19	; 0x13
    1bf4:	6c 89       	ldd	r22, Y+20	; 0x14
    1bf6:	7d 89       	ldd	r23, Y+21	; 0x15
    1bf8:	41 15       	cp	r20, r1
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	d9 f4       	brne	.+54     	; 0x1c38 <dir_next+0xc6>
    1c02:	f5 01       	movw	r30, r10
    1c04:	87 81       	ldd	r24, Z+7	; 0x07
    1c06:	90 85       	ldd	r25, Z+8	; 0x08
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	a6 01       	movw	r20, r12
    1c10:	68 94       	set
    1c12:	14 f8       	bld	r1, 4
    1c14:	76 95       	lsr	r23
    1c16:	67 95       	ror	r22
    1c18:	57 95       	ror	r21
    1c1a:	47 95       	ror	r20
    1c1c:	16 94       	lsr	r1
    1c1e:	d1 f7       	brne	.-12     	; 0x1c14 <dir_next+0xa2>
    1c20:	48 17       	cp	r20, r24
    1c22:	59 07       	cpc	r21, r25
    1c24:	6a 07       	cpc	r22, r26
    1c26:	7b 07       	cpc	r23, r27
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <dir_next+0xba>
    1c2a:	6c c0       	rjmp	.+216    	; 0x1d04 <dir_next+0x192>
    1c2c:	1e 8a       	std	Y+22, r1	; 0x16
    1c2e:	1f 8a       	std	Y+23, r1	; 0x17
    1c30:	18 8e       	std	Y+24, r1	; 0x18
    1c32:	19 8e       	std	Y+25, r1	; 0x19
    1c34:	84 e0       	ldi	r24, 0x04	; 4
    1c36:	84 c0       	rjmp	.+264    	; 0x1d40 <dir_next+0x1ce>
    1c38:	f5 01       	movw	r30, r10
    1c3a:	81 85       	ldd	r24, Z+9	; 0x09
    1c3c:	92 85       	ldd	r25, Z+10	; 0x0a
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	26 01       	movw	r4, r12
    1c46:	37 01       	movw	r6, r14
    1c48:	03 2e       	mov	r0, r19
    1c4a:	39 e0       	ldi	r19, 0x09	; 9
    1c4c:	76 94       	lsr	r7
    1c4e:	67 94       	ror	r6
    1c50:	57 94       	ror	r5
    1c52:	47 94       	ror	r4
    1c54:	3a 95       	dec	r19
    1c56:	d1 f7       	brne	.-12     	; 0x1c4c <dir_next+0xda>
    1c58:	30 2d       	mov	r19, r0
    1c5a:	84 21       	and	r24, r4
    1c5c:	95 21       	and	r25, r5
    1c5e:	a6 21       	and	r26, r6
    1c60:	b7 21       	and	r27, r7
    1c62:	89 2b       	or	r24, r25
    1c64:	8a 2b       	or	r24, r26
    1c66:	8b 2b       	or	r24, r27
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <dir_next+0xfa>
    1c6a:	4c c0       	rjmp	.+152    	; 0x1d04 <dir_next+0x192>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	cb db       	rcall	.-2154   	; 0x1406 <get_fat>
    1c70:	2b 01       	movw	r4, r22
    1c72:	3c 01       	movw	r6, r24
    1c74:	62 30       	cpi	r22, 0x02	; 2
    1c76:	71 05       	cpc	r23, r1
    1c78:	81 05       	cpc	r24, r1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	08 f4       	brcc	.+2      	; 0x1c80 <dir_next+0x10e>
    1c7e:	55 c0       	rjmp	.+170    	; 0x1d2a <dir_next+0x1b8>
    1c80:	6f 3f       	cpi	r22, 0xFF	; 255
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	8f 4f       	sbci	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <dir_next+0x11a>
    1c8a:	51 c0       	rjmp	.+162    	; 0x1d2e <dir_next+0x1bc>
    1c8c:	f5 01       	movw	r30, r10
    1c8e:	87 89       	ldd	r24, Z+23	; 0x17
    1c90:	90 8d       	ldd	r25, Z+24	; 0x18
    1c92:	a1 8d       	ldd	r26, Z+25	; 0x19
    1c94:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1c96:	48 16       	cp	r4, r24
    1c98:	59 06       	cpc	r5, r25
    1c9a:	6a 06       	cpc	r6, r26
    1c9c:	7b 06       	cpc	r7, r27
    1c9e:	30 f1       	brcs	.+76     	; 0x1cec <dir_next+0x17a>
    1ca0:	01 2b       	or	r16, r17
    1ca2:	31 f4       	brne	.+12     	; 0x1cb0 <dir_next+0x13e>
    1ca4:	1e 8a       	std	Y+22, r1	; 0x16
    1ca6:	1f 8a       	std	Y+23, r1	; 0x17
    1ca8:	18 8e       	std	Y+24, r1	; 0x18
    1caa:	19 8e       	std	Y+25, r1	; 0x19
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	48 c0       	rjmp	.+144    	; 0x1d40 <dir_next+0x1ce>
    1cb0:	4a 89       	ldd	r20, Y+18	; 0x12
    1cb2:	5b 89       	ldd	r21, Y+19	; 0x13
    1cb4:	6c 89       	ldd	r22, Y+20	; 0x14
    1cb6:	7d 89       	ldd	r23, Y+21	; 0x15
    1cb8:	ce 01       	movw	r24, r28
    1cba:	68 dd       	rcall	.-1328   	; 0x178c <create_chain>
    1cbc:	2b 01       	movw	r4, r22
    1cbe:	3c 01       	movw	r6, r24
    1cc0:	61 15       	cp	r22, r1
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	81 05       	cpc	r24, r1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	a1 f1       	breq	.+104    	; 0x1d32 <dir_next+0x1c0>
    1cca:	61 30       	cpi	r22, 0x01	; 1
    1ccc:	71 05       	cpc	r23, r1
    1cce:	81 05       	cpc	r24, r1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	89 f1       	breq	.+98     	; 0x1d36 <dir_next+0x1c4>
    1cd4:	6f 3f       	cpi	r22, 0xFF	; 255
    1cd6:	2f ef       	ldi	r18, 0xFF	; 255
    1cd8:	72 07       	cpc	r23, r18
    1cda:	82 07       	cpc	r24, r18
    1cdc:	92 07       	cpc	r25, r18
    1cde:	69 f1       	breq	.+90     	; 0x1d3a <dir_next+0x1c8>
    1ce0:	ab 01       	movw	r20, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	c5 01       	movw	r24, r10
    1ce6:	96 d9       	rcall	.-3284   	; 0x1014 <dir_clear>
    1ce8:	81 11       	cpse	r24, r1
    1cea:	29 c0       	rjmp	.+82     	; 0x1d3e <dir_next+0x1cc>
    1cec:	4a 8a       	std	Y+18, r4	; 0x12
    1cee:	5b 8a       	std	Y+19, r5	; 0x13
    1cf0:	6c 8a       	std	Y+20, r6	; 0x14
    1cf2:	7d 8a       	std	Y+21, r7	; 0x15
    1cf4:	b3 01       	movw	r22, r6
    1cf6:	a2 01       	movw	r20, r4
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	12 d8       	rcall	.-4060   	; 0xd20 <clst2sect>
    1cfc:	6e 8b       	std	Y+22, r22	; 0x16
    1cfe:	7f 8b       	std	Y+23, r23	; 0x17
    1d00:	88 8f       	std	Y+24, r24	; 0x18
    1d02:	99 8f       	std	Y+25, r25	; 0x19
    1d04:	ce 86       	std	Y+14, r12	; 0x0e
    1d06:	df 86       	std	Y+15, r13	; 0x0f
    1d08:	e8 8a       	std	Y+16, r14	; 0x10
    1d0a:	f9 8a       	std	Y+17, r15	; 0x11
    1d0c:	83 e3       	ldi	r24, 0x33	; 51
    1d0e:	a8 0e       	add	r10, r24
    1d10:	b1 1c       	adc	r11, r1
    1d12:	e1 e0       	ldi	r30, 0x01	; 1
    1d14:	de 22       	and	r13, r30
    1d16:	ca 0c       	add	r12, r10
    1d18:	db 1c       	adc	r13, r11
    1d1a:	db 8e       	std	Y+27, r13	; 0x1b
    1d1c:	ca 8e       	std	Y+26, r12	; 0x1a
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <dir_next+0x1ce>
    1d22:	84 e0       	ldi	r24, 0x04	; 4
    1d24:	0d c0       	rjmp	.+26     	; 0x1d40 <dir_next+0x1ce>
    1d26:	84 e0       	ldi	r24, 0x04	; 4
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <dir_next+0x1ce>
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <dir_next+0x1ce>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <dir_next+0x1ce>
    1d32:	87 e0       	ldi	r24, 0x07	; 7
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <dir_next+0x1ce>
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <dir_next+0x1ce>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <dir_next+0x1ce>
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	bf 90       	pop	r11
    1d52:	af 90       	pop	r10
    1d54:	7f 90       	pop	r7
    1d56:	6f 90       	pop	r6
    1d58:	5f 90       	pop	r5
    1d5a:	4f 90       	pop	r4
    1d5c:	08 95       	ret

00001d5e <dir_alloc>:
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	ec 01       	movw	r28, r24
    1d70:	6b 01       	movw	r12, r22
    1d72:	e8 80       	ld	r14, Y
    1d74:	f9 80       	ldd	r15, Y+1	; 0x01
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	ba 01       	movw	r22, r20
    1d7c:	1e dc       	rcall	.-1988   	; 0x15ba <dir_sdi>
    1d7e:	81 11       	cpse	r24, r1
    1d80:	1f c0       	rjmp	.+62     	; 0x1dc0 <dir_alloc+0x62>
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	4e 89       	ldd	r20, Y+22	; 0x16
    1d88:	5f 89       	ldd	r21, Y+23	; 0x17
    1d8a:	68 8d       	ldd	r22, Y+24	; 0x18
    1d8c:	79 8d       	ldd	r23, Y+25	; 0x19
    1d8e:	c7 01       	movw	r24, r14
    1d90:	05 d9       	rcall	.-3574   	; 0xf9c <move_window>
    1d92:	81 11       	cpse	r24, r1
    1d94:	15 c0       	rjmp	.+42     	; 0x1dc0 <dir_alloc+0x62>
    1d96:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d98:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1d9a:	90 81       	ld	r25, Z
    1d9c:	95 3e       	cpi	r25, 0xE5	; 229
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <dir_alloc+0x46>
    1da0:	91 11       	cpse	r25, r1
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <dir_alloc+0x52>
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	0c 15       	cp	r16, r12
    1daa:	1d 05       	cpc	r17, r13
    1dac:	19 f4       	brne	.+6      	; 0x1db4 <dir_alloc+0x56>
    1dae:	0b c0       	rjmp	.+22     	; 0x1dc6 <dir_alloc+0x68>
    1db0:	00 e0       	ldi	r16, 0x00	; 0
    1db2:	10 e0       	ldi	r17, 0x00	; 0
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	ce 01       	movw	r24, r28
    1dba:	db de       	rcall	.-586    	; 0x1b72 <dir_next>
    1dbc:	88 23       	and	r24, r24
    1dbe:	19 f3       	breq	.-58     	; 0x1d86 <dir_alloc+0x28>
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <dir_alloc+0x68>
    1dc4:	87 e0       	ldi	r24, 0x07	; 7
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <dir_register>:
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	e8 80       	ld	r14, Y
    1de6:	f9 80       	ldd	r15, Y+1	; 0x01
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	b8 df       	rcall	.-144    	; 0x1d5e <dir_alloc>
    1dee:	18 2f       	mov	r17, r24
    1df0:	81 11       	cpse	r24, r1
    1df2:	1d c0       	rjmp	.+58     	; 0x1e2e <dir_register+0x56>
    1df4:	4e 89       	ldd	r20, Y+22	; 0x16
    1df6:	5f 89       	ldd	r21, Y+23	; 0x17
    1df8:	68 8d       	ldd	r22, Y+24	; 0x18
    1dfa:	79 8d       	ldd	r23, Y+25	; 0x19
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	ce d8       	rcall	.-3684   	; 0xf9c <move_window>
    1e00:	18 2f       	mov	r17, r24
    1e02:	81 11       	cpse	r24, r1
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <dir_register+0x56>
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e12:	0e 94 67 06 	call	0xcce	; 0xcce <mem_set>
    1e16:	be 01       	movw	r22, r28
    1e18:	64 5e       	subi	r22, 0xE4	; 228
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	4b e0       	ldi	r20, 0x0B	; 11
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e24:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	83 83       	std	Z+3, r24	; 0x03
    1e2e:	81 2f       	mov	r24, r17
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	ff 90       	pop	r15
    1e38:	ef 90       	pop	r14
    1e3a:	08 95       	ret

00001e3c <check_fs>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	ec 01       	movw	r28, r24
    1e42:	1b 82       	std	Y+3, r1	; 0x03
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	9f ef       	ldi	r25, 0xFF	; 255
    1e48:	dc 01       	movw	r26, r24
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	a9 ab       	std	Y+49, r26	; 0x31
    1e50:	ba ab       	std	Y+50, r27	; 0x32
    1e52:	ce 01       	movw	r24, r28
    1e54:	a3 d8       	rcall	.-3770   	; 0xf9c <move_window>
    1e56:	81 11       	cpse	r24, r1
    1e58:	2d c0       	rjmp	.+90     	; 0x1eb4 <check_fs+0x78>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ee 5c       	subi	r30, 0xCE	; 206
    1e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e60:	80 81       	ld	r24, Z
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	98 2f       	mov	r25, r24
    1e66:	88 27       	eor	r24, r24
    1e68:	31 97       	sbiw	r30, 0x01	; 1
    1e6a:	20 81       	ld	r18, Z
    1e6c:	82 2b       	or	r24, r18
    1e6e:	85 35       	cpi	r24, 0x55	; 85
    1e70:	9a 4a       	sbci	r25, 0xAA	; 170
    1e72:	11 f5       	brne	.+68     	; 0x1eb8 <check_fs+0x7c>
    1e74:	8b a9       	ldd	r24, Y+51	; 0x33
    1e76:	89 3e       	cpi	r24, 0xE9	; 233
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <check_fs+0x48>
    1e7a:	8b 3e       	cpi	r24, 0xEB	; 235
    1e7c:	f9 f4       	brne	.+62     	; 0x1ebc <check_fs+0x80>
    1e7e:	8d a9       	ldd	r24, Y+53	; 0x35
    1e80:	80 39       	cpi	r24, 0x90	; 144
    1e82:	f1 f4       	brne	.+60     	; 0x1ec0 <check_fs+0x84>
    1e84:	43 e0       	ldi	r20, 0x03	; 3
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	63 e3       	ldi	r22, 0x33	; 51
    1e8a:	71 e0       	ldi	r23, 0x01	; 1
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	87 59       	subi	r24, 0x97	; 151
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	0e 94 6f 06 	call	0xcde	; 0xcde <mem_cmp>
    1e96:	89 2b       	or	r24, r25
    1e98:	a9 f0       	breq	.+42     	; 0x1ec4 <check_fs+0x88>
    1e9a:	45 e0       	ldi	r20, 0x05	; 5
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	67 e3       	ldi	r22, 0x37	; 55
    1ea0:	71 e0       	ldi	r23, 0x01	; 1
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	8b 57       	subi	r24, 0x7B	; 123
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	0e 94 6f 06 	call	0xcde	; 0xcde <mem_cmp>
    1eac:	89 2b       	or	r24, r25
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <check_fs+0x8c>
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <check_fs+0x8e>
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <check_fs+0x8e>
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	07 c0       	rjmp	.+14     	; 0x1eca <check_fs+0x8e>
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <check_fs+0x8e>
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <check_fs+0x8e>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	01 c0       	rjmp	.+2      	; 0x1eca <check_fs+0x8e>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	08 95       	ret

00001ed0 <find_volume>:
    1ed0:	2f 92       	push	r2
    1ed2:	3f 92       	push	r3
    1ed4:	4f 92       	push	r4
    1ed6:	5f 92       	push	r5
    1ed8:	6f 92       	push	r6
    1eda:	7f 92       	push	r7
    1edc:	8f 92       	push	r8
    1ede:	9f 92       	push	r9
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	6e 97       	sbiw	r28, 0x1e	; 30
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	6b 01       	movw	r12, r22
    1f06:	b4 2e       	mov	r11, r20
    1f08:	db 01       	movw	r26, r22
    1f0a:	1d 92       	st	X+, r1
    1f0c:	1c 92       	st	X, r1
    1f0e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <get_ldnumber>
    1f12:	7c 01       	movw	r14, r24
    1f14:	99 23       	and	r25, r25
    1f16:	0c f4       	brge	.+2      	; 0x1f1a <find_volume+0x4a>
    1f18:	4e c2       	rjmp	.+1180   	; 0x23b6 <find_volume+0x4e6>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	e7 52       	subi	r30, 0x27	; 39
    1f22:	fc 4f       	sbci	r31, 0xFC	; 252
    1f24:	00 81       	ld	r16, Z
    1f26:	11 81       	ldd	r17, Z+1	; 0x01
    1f28:	01 15       	cp	r16, r1
    1f2a:	11 05       	cpc	r17, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <find_volume+0x60>
    1f2e:	45 c2       	rjmp	.+1162   	; 0x23ba <find_volume+0x4ea>
    1f30:	f6 01       	movw	r30, r12
    1f32:	11 83       	std	Z+1, r17	; 0x01
    1f34:	00 83       	st	Z, r16
    1f36:	fb 2d       	mov	r31, r11
    1f38:	fe 7f       	andi	r31, 0xFE	; 254
    1f3a:	bf 2e       	mov	r11, r31
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	8c 91       	ld	r24, X
    1f40:	88 23       	and	r24, r24
    1f42:	69 f0       	breq	.+26     	; 0x1f5e <find_volume+0x8e>
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	8c 91       	ld	r24, X
    1f48:	0e 94 07 06 	call	0xc0e	; 0xc0e <disk_status>
    1f4c:	80 fd       	sbrc	r24, 0
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <find_volume+0x8e>
    1f50:	bb 20       	and	r11, r11
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <find_volume+0x86>
    1f54:	34 c2       	rjmp	.+1128   	; 0x23be <find_volume+0x4ee>
    1f56:	82 ff       	sbrs	r24, 2
    1f58:	34 c2       	rjmp	.+1128   	; 0x23c2 <find_volume+0x4f2>
    1f5a:	8a e0       	ldi	r24, 0x0A	; 10
    1f5c:	e7 c2       	rjmp	.+1486   	; 0x252c <find_volume+0x65c>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	10 82       	st	Z, r1
    1f62:	e1 82       	std	Z+1, r14	; 0x01
    1f64:	8e 2d       	mov	r24, r14
    1f66:	0e 94 0e 06 	call	0xc1c	; 0xc1c <disk_initialize>
    1f6a:	80 fd       	sbrc	r24, 0
    1f6c:	2c c2       	rjmp	.+1112   	; 0x23c6 <find_volume+0x4f6>
    1f6e:	bb 20       	and	r11, r11
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <find_volume+0xa4>
    1f72:	4f c2       	rjmp	.+1182   	; 0x2412 <find_volume+0x542>
    1f74:	82 fd       	sbrc	r24, 2
    1f76:	29 c2       	rjmp	.+1106   	; 0x23ca <find_volume+0x4fa>
    1f78:	4c c2       	rjmp	.+1176   	; 0x2412 <find_volume+0x542>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	34 97       	sbiw	r30, 0x04	; 4
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <find_volume+0xbc>
    1f84:	c7 01       	movw	r24, r14
    1f86:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <find_volume+0xc4>
    1f8c:	64 2d       	mov	r22, r4
    1f8e:	75 2d       	mov	r23, r5
    1f90:	86 2d       	mov	r24, r6
    1f92:	97 2d       	mov	r25, r7
    1f94:	d6 01       	movw	r26, r12
    1f96:	6d 93       	st	X+, r22
    1f98:	7d 93       	st	X+, r23
    1f9a:	8d 93       	st	X+, r24
    1f9c:	9d 93       	st	X+, r25
    1f9e:	6d 01       	movw	r12, r26
    1fa0:	b0 e1       	ldi	r27, 0x10	; 16
    1fa2:	eb 0e       	add	r14, r27
    1fa4:	f1 1c       	adc	r15, r1
    1fa6:	e8 14       	cp	r14, r8
    1fa8:	f9 04       	cpc	r15, r9
    1faa:	39 f7       	brne	.-50     	; 0x1f7a <find_volume+0xaa>
    1fac:	4e 01       	movw	r8, r28
    1fae:	e1 e1       	ldi	r30, 0x11	; 17
    1fb0:	8e 0e       	add	r8, r30
    1fb2:	91 1c       	adc	r9, r1
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f3 e0       	ldi	r31, 0x03	; 3
    1fb8:	7f 2e       	mov	r7, r31
    1fba:	f0 2d       	mov	r31, r0
    1fbc:	d5 01       	movw	r26, r10
    1fbe:	cd 90       	ld	r12, X+
    1fc0:	dd 90       	ld	r13, X+
    1fc2:	ed 90       	ld	r14, X+
    1fc4:	fd 90       	ld	r15, X+
    1fc6:	5d 01       	movw	r10, r26
    1fc8:	c1 14       	cp	r12, r1
    1fca:	d1 04       	cpc	r13, r1
    1fcc:	e1 04       	cpc	r14, r1
    1fce:	f1 04       	cpc	r15, r1
    1fd0:	39 f0       	breq	.+14     	; 0x1fe0 <find_volume+0x110>
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	a6 01       	movw	r20, r12
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	31 df       	rcall	.-414    	; 0x1e3c <check_fs>
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	10 f4       	brcc	.+4      	; 0x1fe2 <find_volume+0x112>
    1fde:	34 c2       	rjmp	.+1128   	; 0x2448 <find_volume+0x578>
    1fe0:	87 2d       	mov	r24, r7
    1fe2:	a8 14       	cp	r10, r8
    1fe4:	b9 04       	cpc	r11, r9
    1fe6:	51 f7       	brne	.-44     	; 0x1fbc <find_volume+0xec>
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <find_volume+0x120>
    1fea:	c1 2c       	mov	r12, r1
    1fec:	d1 2c       	mov	r13, r1
    1fee:	76 01       	movw	r14, r12
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <find_volume+0x126>
    1ff4:	ec c1       	rjmp	.+984    	; 0x23ce <find_volume+0x4fe>
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <find_volume+0x12c>
    1ffa:	eb c1       	rjmp	.+982    	; 0x23d2 <find_volume+0x502>
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	87 ad       	ldd	r24, Z+63	; 0x3f
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	98 2f       	mov	r25, r24
    2004:	88 27       	eor	r24, r24
    2006:	26 ad       	ldd	r18, Z+62	; 0x3e
    2008:	82 2b       	or	r24, r18
    200a:	81 15       	cp	r24, r1
    200c:	92 40       	sbci	r25, 0x02	; 2
    200e:	09 f0       	breq	.+2      	; 0x2012 <find_volume+0x142>
    2010:	e2 c1       	rjmp	.+964    	; 0x23d6 <find_volume+0x506>
    2012:	f8 01       	movw	r30, r16
    2014:	e6 5b       	subi	r30, 0xB6	; 182
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	40 80       	ld	r4, Z
    201a:	51 2c       	mov	r5, r1
    201c:	54 2c       	mov	r5, r4
    201e:	44 24       	eor	r4, r4
    2020:	31 97       	sbiw	r30, 0x01	; 1
    2022:	80 81       	ld	r24, Z
    2024:	48 2a       	or	r4, r24
    2026:	61 2c       	mov	r6, r1
    2028:	71 2c       	mov	r7, r1
    202a:	41 14       	cp	r4, r1
    202c:	51 04       	cpc	r5, r1
    202e:	61 04       	cpc	r6, r1
    2030:	71 04       	cpc	r7, r1
    2032:	39 f4       	brne	.+14     	; 0x2042 <find_volume+0x172>
    2034:	c8 01       	movw	r24, r16
    2036:	89 5a       	subi	r24, 0xA9	; 169
    2038:	9f 4f       	sbci	r25, 0xFF	; 255
    203a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    203e:	2b 01       	movw	r4, r22
    2040:	3c 01       	movw	r6, r24
    2042:	d8 01       	movw	r26, r16
    2044:	5b 96       	adiw	r26, 0x1b	; 27
    2046:	4d 92       	st	X+, r4
    2048:	5d 92       	st	X+, r5
    204a:	6d 92       	st	X+, r6
    204c:	7c 92       	st	X, r7
    204e:	5e 97       	sbiw	r26, 0x1e	; 30
    2050:	f8 01       	movw	r30, r16
    2052:	ed 5b       	subi	r30, 0xBD	; 189
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	b0 81       	ld	r27, Z
    2058:	b9 8b       	std	Y+17, r27	; 0x11
    205a:	f8 01       	movw	r30, r16
    205c:	b2 83       	std	Z+2, r27	; 0x02
    205e:	8b 2f       	mov	r24, r27
    2060:	81 50       	subi	r24, 0x01	; 1
    2062:	82 30       	cpi	r24, 0x02	; 2
    2064:	08 f0       	brcs	.+2      	; 0x2068 <find_volume+0x198>
    2066:	b9 c1       	rjmp	.+882    	; 0x23da <find_volume+0x50a>
    2068:	e0 5c       	subi	r30, 0xC0	; 192
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	30 81       	ld	r19, Z
    206e:	3e 8f       	std	Y+30, r19	; 0x1e
    2070:	83 2f       	mov	r24, r19
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	d8 01       	movw	r26, r16
    2076:	1a 96       	adiw	r26, 0x0a	; 10
    2078:	9c 93       	st	X, r25
    207a:	8e 93       	st	-X, r24
    207c:	19 97       	sbiw	r26, 0x09	; 9
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	09 f4       	brne	.+2      	; 0x2084 <find_volume+0x1b4>
    2082:	ad c1       	rjmp	.+858    	; 0x23de <find_volume+0x50e>
    2084:	9c 01       	movw	r18, r24
    2086:	21 50       	subi	r18, 0x01	; 1
    2088:	31 09       	sbc	r19, r1
    208a:	82 23       	and	r24, r18
    208c:	93 23       	and	r25, r19
    208e:	89 2b       	or	r24, r25
    2090:	09 f0       	breq	.+2      	; 0x2094 <find_volume+0x1c4>
    2092:	a7 c1       	rjmp	.+846    	; 0x23e2 <find_volume+0x512>
    2094:	35 96       	adiw	r30, 0x05	; 5
    2096:	80 81       	ld	r24, Z
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	98 2f       	mov	r25, r24
    209c:	88 27       	eor	r24, r24
    209e:	31 97       	sbiw	r30, 0x01	; 1
    20a0:	20 81       	ld	r18, Z
    20a2:	1c 01       	movw	r2, r24
    20a4:	22 2a       	or	r2, r18
    20a6:	f8 01       	movw	r30, r16
    20a8:	30 86       	std	Z+8, r3	; 0x08
    20aa:	27 82       	std	Z+7, r2	; 0x07
    20ac:	c1 01       	movw	r24, r2
    20ae:	8f 70       	andi	r24, 0x0F	; 15
    20b0:	99 27       	eor	r25, r25
    20b2:	89 2b       	or	r24, r25
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <find_volume+0x1e8>
    20b6:	97 c1       	rjmp	.+814    	; 0x23e6 <find_volume+0x516>
    20b8:	e9 5b       	subi	r30, 0xB9	; 185
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 80       	ld	r8, Z
    20be:	91 2c       	mov	r9, r1
    20c0:	98 2c       	mov	r9, r8
    20c2:	88 24       	eor	r8, r8
    20c4:	31 97       	sbiw	r30, 0x01	; 1
    20c6:	80 81       	ld	r24, Z
    20c8:	88 2a       	or	r8, r24
    20ca:	a1 2c       	mov	r10, r1
    20cc:	b1 2c       	mov	r11, r1
    20ce:	81 14       	cp	r8, r1
    20d0:	91 04       	cpc	r9, r1
    20d2:	a1 04       	cpc	r10, r1
    20d4:	b1 04       	cpc	r11, r1
    20d6:	39 f4       	brne	.+14     	; 0x20e6 <find_volume+0x216>
    20d8:	c8 01       	movw	r24, r16
    20da:	8d 5a       	subi	r24, 0xAD	; 173
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    20e2:	4b 01       	movw	r8, r22
    20e4:	5c 01       	movw	r10, r24
    20e6:	f8 01       	movw	r30, r16
    20e8:	ee 5b       	subi	r30, 0xBE	; 190
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	e0 81       	ld	r30, Z
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	fe 2f       	mov	r31, r30
    20f2:	ee 27       	eor	r30, r30
    20f4:	d8 01       	movw	r26, r16
    20f6:	af 5b       	subi	r26, 0xBF	; 191
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	8c 91       	ld	r24, X
    20fc:	e8 2b       	or	r30, r24
    20fe:	30 97       	sbiw	r30, 0x00	; 0
    2100:	09 f4       	brne	.+2      	; 0x2104 <find_volume+0x234>
    2102:	73 c1       	rjmp	.+742    	; 0x23ea <find_volume+0x51a>
    2104:	29 89       	ldd	r18, Y+17	; 0x11
    2106:	a2 2f       	mov	r26, r18
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	a3 01       	movw	r20, r6
    210c:	92 01       	movw	r18, r4
    210e:	0e 94 37 32 	call	0x646e	; 0x646e <__muluhisi3>
    2112:	6a 8f       	std	Y+26, r22	; 0x1a
    2114:	7b 8f       	std	Y+27, r23	; 0x1b
    2116:	8c 8f       	std	Y+28, r24	; 0x1c
    2118:	9d 8f       	std	Y+29, r25	; 0x1d
    211a:	cf 01       	movw	r24, r30
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	8e 8b       	std	Y+22, r24	; 0x16
    2122:	9f 8b       	std	Y+23, r25	; 0x17
    2124:	a8 8f       	std	Y+24, r26	; 0x18
    2126:	b9 8f       	std	Y+25, r27	; 0x19
    2128:	c1 01       	movw	r24, r2
    212a:	92 95       	swap	r25
    212c:	82 95       	swap	r24
    212e:	8f 70       	andi	r24, 0x0F	; 15
    2130:	89 27       	eor	r24, r25
    2132:	9f 70       	andi	r25, 0x0F	; 15
    2134:	89 27       	eor	r24, r25
    2136:	2e 89       	ldd	r18, Y+22	; 0x16
    2138:	3f 89       	ldd	r19, Y+23	; 0x17
    213a:	48 8d       	ldd	r20, Y+24	; 0x18
    213c:	59 8d       	ldd	r21, Y+25	; 0x19
    213e:	28 0f       	add	r18, r24
    2140:	39 1f       	adc	r19, r25
    2142:	41 1d       	adc	r20, r1
    2144:	51 1d       	adc	r21, r1
    2146:	da 01       	movw	r26, r20
    2148:	c9 01       	movw	r24, r18
    214a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    214c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    214e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2150:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2152:	28 0f       	add	r18, r24
    2154:	39 1f       	adc	r19, r25
    2156:	4a 1f       	adc	r20, r26
    2158:	5b 1f       	adc	r21, r27
    215a:	2a 8b       	std	Y+18, r18	; 0x12
    215c:	3b 8b       	std	Y+19, r19	; 0x13
    215e:	4c 8b       	std	Y+20, r20	; 0x14
    2160:	5d 8b       	std	Y+21, r21	; 0x15
    2162:	82 16       	cp	r8, r18
    2164:	93 06       	cpc	r9, r19
    2166:	a4 06       	cpc	r10, r20
    2168:	b5 06       	cpc	r11, r21
    216a:	08 f4       	brcc	.+2      	; 0x216e <find_volume+0x29e>
    216c:	40 c1       	rjmp	.+640    	; 0x23ee <find_volume+0x51e>
    216e:	c5 01       	movw	r24, r10
    2170:	b4 01       	movw	r22, r8
    2172:	62 1b       	sub	r22, r18
    2174:	73 0b       	sbc	r23, r19
    2176:	84 0b       	sbc	r24, r20
    2178:	95 0b       	sbc	r25, r21
    217a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    217c:	2a 2f       	mov	r18, r26
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	0e 94 0c 32 	call	0x6418	; 0x6418 <__udivmodsi4>
    2188:	da 01       	movw	r26, r20
    218a:	c9 01       	movw	r24, r18
    218c:	21 15       	cp	r18, r1
    218e:	31 05       	cpc	r19, r1
    2190:	41 05       	cpc	r20, r1
    2192:	51 05       	cpc	r21, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <find_volume+0x2c8>
    2196:	2d c1       	rjmp	.+602    	; 0x23f2 <find_volume+0x522>
    2198:	26 3f       	cpi	r18, 0xF6	; 246
    219a:	ef ef       	ldi	r30, 0xFF	; 255
    219c:	3e 07       	cpc	r19, r30
    219e:	4e 07       	cpc	r20, r30
    21a0:	ef e0       	ldi	r30, 0x0F	; 15
    21a2:	5e 07       	cpc	r21, r30
    21a4:	18 f4       	brcc	.+6      	; 0x21ac <find_volume+0x2dc>
    21a6:	f3 e0       	ldi	r31, 0x03	; 3
    21a8:	f9 8b       	std	Y+17, r31	; 0x11
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <find_volume+0x2de>
    21ac:	19 8a       	std	Y+17, r1	; 0x11
    21ae:	86 3f       	cpi	r24, 0xF6	; 246
    21b0:	6f ef       	ldi	r22, 0xFF	; 255
    21b2:	96 07       	cpc	r25, r22
    21b4:	a1 05       	cpc	r26, r1
    21b6:	b1 05       	cpc	r27, r1
    21b8:	10 f4       	brcc	.+4      	; 0x21be <find_volume+0x2ee>
    21ba:	e2 e0       	ldi	r30, 0x02	; 2
    21bc:	e9 8b       	std	Y+17, r30	; 0x11
    21be:	86 3f       	cpi	r24, 0xF6	; 246
    21c0:	9f 40       	sbci	r25, 0x0F	; 15
    21c2:	a1 05       	cpc	r26, r1
    21c4:	b1 05       	cpc	r27, r1
    21c6:	08 f4       	brcc	.+2      	; 0x21ca <find_volume+0x2fa>
    21c8:	83 c1       	rjmp	.+774    	; 0x24d0 <find_volume+0x600>
    21ca:	69 89       	ldd	r22, Y+17	; 0x11
    21cc:	66 23       	and	r22, r22
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <find_volume+0x302>
    21d0:	12 c1       	rjmp	.+548    	; 0x23f6 <find_volume+0x526>
    21d2:	49 01       	movw	r8, r18
    21d4:	5a 01       	movw	r10, r20
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	88 0e       	add	r8, r24
    21da:	91 1c       	adc	r9, r1
    21dc:	a1 1c       	adc	r10, r1
    21de:	b1 1c       	adc	r11, r1
    21e0:	d8 01       	movw	r26, r16
    21e2:	57 96       	adiw	r26, 0x17	; 23
    21e4:	8d 92       	st	X+, r8
    21e6:	9d 92       	st	X+, r9
    21e8:	ad 92       	st	X+, r10
    21ea:	bc 92       	st	X, r11
    21ec:	5a 97       	sbiw	r26, 0x1a	; 26
    21ee:	f8 01       	movw	r30, r16
    21f0:	c7 8e       	std	Z+31, r12	; 0x1f
    21f2:	d0 a2       	std	Z+32, r13	; 0x20
    21f4:	e1 a2       	std	Z+33, r14	; 0x21
    21f6:	f2 a2       	std	Z+34, r15	; 0x22
    21f8:	8e 89       	ldd	r24, Y+22	; 0x16
    21fa:	9f 89       	ldd	r25, Y+23	; 0x17
    21fc:	a8 8d       	ldd	r26, Y+24	; 0x18
    21fe:	b9 8d       	ldd	r27, Y+25	; 0x19
    2200:	8c 0d       	add	r24, r12
    2202:	9d 1d       	adc	r25, r13
    2204:	ae 1d       	adc	r26, r14
    2206:	bf 1d       	adc	r27, r15
    2208:	83 a3       	std	Z+35, r24	; 0x23
    220a:	94 a3       	std	Z+36, r25	; 0x24
    220c:	a5 a3       	std	Z+37, r26	; 0x25
    220e:	b6 a3       	std	Z+38, r27	; 0x26
    2210:	4a 89       	ldd	r20, Y+18	; 0x12
    2212:	5b 89       	ldd	r21, Y+19	; 0x13
    2214:	6c 89       	ldd	r22, Y+20	; 0x14
    2216:	7d 89       	ldd	r23, Y+21	; 0x15
    2218:	4c 0d       	add	r20, r12
    221a:	5d 1d       	adc	r21, r13
    221c:	6e 1d       	adc	r22, r14
    221e:	7f 1d       	adc	r23, r15
    2220:	43 a7       	std	Z+43, r20	; 0x2b
    2222:	54 a7       	std	Z+44, r21	; 0x2c
    2224:	65 a7       	std	Z+45, r22	; 0x2d
    2226:	76 a7       	std	Z+46, r23	; 0x2e
    2228:	f9 89       	ldd	r31, Y+17	; 0x11
    222a:	f3 30       	cpi	r31, 0x03	; 3
    222c:	d1 f5       	brne	.+116    	; 0x22a2 <find_volume+0x3d2>
    222e:	f8 01       	movw	r30, r16
    2230:	e2 5a       	subi	r30, 0xA2	; 162
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 2f       	mov	r25, r24
    223a:	88 27       	eor	r24, r24
    223c:	31 97       	sbiw	r30, 0x01	; 1
    223e:	20 81       	ld	r18, Z
    2240:	82 2b       	or	r24, r18
    2242:	89 2b       	or	r24, r25
    2244:	09 f0       	breq	.+2      	; 0x2248 <find_volume+0x378>
    2246:	d9 c0       	rjmp	.+434    	; 0x23fa <find_volume+0x52a>
    2248:	23 28       	or	r2, r3
    224a:	09 f0       	breq	.+2      	; 0x224e <find_volume+0x37e>
    224c:	d8 c0       	rjmp	.+432    	; 0x23fe <find_volume+0x52e>
    224e:	c8 01       	movw	r24, r16
    2250:	81 5a       	subi	r24, 0xA1	; 161
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    2258:	d8 01       	movw	r26, r16
    225a:	97 96       	adiw	r26, 0x27	; 39
    225c:	6d 93       	st	X+, r22
    225e:	7d 93       	st	X+, r23
    2260:	8d 93       	st	X+, r24
    2262:	9c 93       	st	X, r25
    2264:	9a 97       	sbiw	r26, 0x2a	; 42
    2266:	88 0c       	add	r8, r8
    2268:	99 1c       	adc	r9, r9
    226a:	aa 1c       	adc	r10, r10
    226c:	bb 1c       	adc	r11, r11
    226e:	88 0c       	add	r8, r8
    2270:	99 1c       	adc	r9, r9
    2272:	aa 1c       	adc	r10, r10
    2274:	bb 1c       	adc	r11, r11
    2276:	bf ef       	ldi	r27, 0xFF	; 255
    2278:	8b 0e       	add	r8, r27
    227a:	b1 e0       	ldi	r27, 0x01	; 1
    227c:	9b 1e       	adc	r9, r27
    227e:	a1 1c       	adc	r10, r1
    2280:	b1 1c       	adc	r11, r1
    2282:	07 2e       	mov	r0, r23
    2284:	79 e0       	ldi	r23, 0x09	; 9
    2286:	b6 94       	lsr	r11
    2288:	a7 94       	ror	r10
    228a:	97 94       	ror	r9
    228c:	87 94       	ror	r8
    228e:	7a 95       	dec	r23
    2290:	d1 f7       	brne	.-12     	; 0x2286 <find_volume+0x3b6>
    2292:	70 2d       	mov	r23, r0
    2294:	48 14       	cp	r4, r8
    2296:	59 04       	cpc	r5, r9
    2298:	6a 04       	cpc	r6, r10
    229a:	7b 04       	cpc	r7, r11
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <find_volume+0x3d0>
    229e:	b1 c0       	rjmp	.+354    	; 0x2402 <find_volume+0x532>
    22a0:	fc c0       	rjmp	.+504    	; 0x249a <find_volume+0x5ca>
    22a2:	23 28       	or	r2, r3
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <find_volume+0x3d8>
    22a6:	af c0       	rjmp	.+350    	; 0x2406 <find_volume+0x536>
    22a8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    22aa:	3b 8d       	ldd	r19, Y+27	; 0x1b
    22ac:	4c 8d       	ldd	r20, Y+28	; 0x1c
    22ae:	5d 8d       	ldd	r21, Y+29	; 0x1d
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
    22b4:	a4 1f       	adc	r26, r20
    22b6:	b5 1f       	adc	r27, r21
    22b8:	f8 01       	movw	r30, r16
    22ba:	87 a3       	std	Z+39, r24	; 0x27
    22bc:	90 a7       	std	Z+40, r25	; 0x28
    22be:	a1 a7       	std	Z+41, r26	; 0x29
    22c0:	b2 a7       	std	Z+42, r27	; 0x2a
    22c2:	f9 89       	ldd	r31, Y+17	; 0x11
    22c4:	f2 30       	cpi	r31, 0x02	; 2
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <find_volume+0x402>
    22c8:	88 0c       	add	r8, r8
    22ca:	99 1c       	adc	r9, r9
    22cc:	aa 1c       	adc	r10, r10
    22ce:	bb 1c       	adc	r11, r11
    22d0:	ce c0       	rjmp	.+412    	; 0x246e <find_volume+0x59e>
    22d2:	a3 e0       	ldi	r26, 0x03	; 3
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	a5 01       	movw	r20, r10
    22d8:	94 01       	movw	r18, r8
    22da:	0e 94 37 32 	call	0x646e	; 0x646e <__muluhisi3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	b6 95       	lsr	r27
    22e4:	a7 95       	ror	r26
    22e6:	97 95       	ror	r25
    22e8:	87 95       	ror	r24
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	82 22       	and	r8, r18
    22ee:	99 24       	eor	r9, r9
    22f0:	aa 24       	eor	r10, r10
    22f2:	bb 24       	eor	r11, r11
    22f4:	88 0e       	add	r8, r24
    22f6:	99 1e       	adc	r9, r25
    22f8:	aa 1e       	adc	r10, r26
    22fa:	bb 1e       	adc	r11, r27
    22fc:	b8 c0       	rjmp	.+368    	; 0x246e <find_volume+0x59e>
    22fe:	b7 01       	movw	r22, r14
    2300:	a6 01       	movw	r20, r12
    2302:	4f 5f       	subi	r20, 0xFF	; 255
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	6f 4f       	sbci	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	c8 01       	movw	r24, r16
    230c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    2310:	81 11       	cpse	r24, r1
    2312:	39 c0       	rjmp	.+114    	; 0x2386 <find_volume+0x4b6>
    2314:	d8 01       	movw	r26, r16
    2316:	14 96       	adiw	r26, 0x04	; 4
    2318:	1c 92       	st	X, r1
    231a:	f8 01       	movw	r30, r16
    231c:	ee 5c       	subi	r30, 0xCE	; 206
    231e:	fd 4f       	sbci	r31, 0xFD	; 253
    2320:	80 81       	ld	r24, Z
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	98 2f       	mov	r25, r24
    2326:	88 27       	eor	r24, r24
    2328:	31 97       	sbiw	r30, 0x01	; 1
    232a:	20 81       	ld	r18, Z
    232c:	82 2b       	or	r24, r18
    232e:	85 35       	cpi	r24, 0x55	; 85
    2330:	9a 4a       	sbci	r25, 0xAA	; 170
    2332:	49 f5       	brne	.+82     	; 0x2386 <find_volume+0x4b6>
    2334:	c8 01       	movw	r24, r16
    2336:	c3 96       	adiw	r24, 0x33	; 51
    2338:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    233c:	62 35       	cpi	r22, 0x52	; 82
    233e:	72 45       	sbci	r23, 0x52	; 82
    2340:	81 46       	sbci	r24, 0x61	; 97
    2342:	91 44       	sbci	r25, 0x41	; 65
    2344:	01 f5       	brne	.+64     	; 0x2386 <find_volume+0x4b6>
    2346:	c8 01       	movw	r24, r16
    2348:	89 5e       	subi	r24, 0xE9	; 233
    234a:	9d 4f       	sbci	r25, 0xFD	; 253
    234c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    2350:	62 37       	cpi	r22, 0x72	; 114
    2352:	72 47       	sbci	r23, 0x72	; 114
    2354:	81 44       	sbci	r24, 0x41	; 65
    2356:	91 46       	sbci	r25, 0x61	; 97
    2358:	b1 f4       	brne	.+44     	; 0x2386 <find_volume+0x4b6>
    235a:	c8 01       	movw	r24, r16
    235c:	85 5e       	subi	r24, 0xE5	; 229
    235e:	9d 4f       	sbci	r25, 0xFD	; 253
    2360:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    2364:	d8 01       	movw	r26, r16
    2366:	1f 96       	adiw	r26, 0x0f	; 15
    2368:	6d 93       	st	X+, r22
    236a:	7d 93       	st	X+, r23
    236c:	8d 93       	st	X+, r24
    236e:	9c 93       	st	X, r25
    2370:	52 97       	sbiw	r26, 0x12	; 18
    2372:	c8 01       	movw	r24, r16
    2374:	81 5e       	subi	r24, 0xE1	; 225
    2376:	9d 4f       	sbci	r25, 0xFD	; 253
    2378:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    237c:	f8 01       	movw	r30, r16
    237e:	63 87       	std	Z+11, r22	; 0x0b
    2380:	74 87       	std	Z+12, r23	; 0x0c
    2382:	85 87       	std	Z+13, r24	; 0x0d
    2384:	96 87       	std	Z+14, r25	; 0x0e
    2386:	e9 89       	ldd	r30, Y+17	; 0x11
    2388:	d8 01       	movw	r26, r16
    238a:	ec 93       	st	X, r30
    238c:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Fsid>
    2390:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Fsid+0x1>
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <Fsid+0x1>
    239a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <Fsid>
    239e:	16 96       	adiw	r26, 0x06	; 6
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
    23a4:	15 97       	sbiw	r26, 0x05	; 5
    23a6:	53 96       	adiw	r26, 0x13	; 19
    23a8:	1d 92       	st	X+, r1
    23aa:	1d 92       	st	X+, r1
    23ac:	1d 92       	st	X+, r1
    23ae:	1c 92       	st	X, r1
    23b0:	56 97       	sbiw	r26, 0x16	; 22
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	bb c0       	rjmp	.+374    	; 0x252c <find_volume+0x65c>
    23b6:	8b e0       	ldi	r24, 0x0B	; 11
    23b8:	b9 c0       	rjmp	.+370    	; 0x252c <find_volume+0x65c>
    23ba:	8c e0       	ldi	r24, 0x0C	; 12
    23bc:	b7 c0       	rjmp	.+366    	; 0x252c <find_volume+0x65c>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	b5 c0       	rjmp	.+362    	; 0x252c <find_volume+0x65c>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	b3 c0       	rjmp	.+358    	; 0x252c <find_volume+0x65c>
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	b1 c0       	rjmp	.+354    	; 0x252c <find_volume+0x65c>
    23ca:	8a e0       	ldi	r24, 0x0A	; 10
    23cc:	af c0       	rjmp	.+350    	; 0x252c <find_volume+0x65c>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	ad c0       	rjmp	.+346    	; 0x252c <find_volume+0x65c>
    23d2:	8d e0       	ldi	r24, 0x0D	; 13
    23d4:	ab c0       	rjmp	.+342    	; 0x252c <find_volume+0x65c>
    23d6:	8d e0       	ldi	r24, 0x0D	; 13
    23d8:	a9 c0       	rjmp	.+338    	; 0x252c <find_volume+0x65c>
    23da:	8d e0       	ldi	r24, 0x0D	; 13
    23dc:	a7 c0       	rjmp	.+334    	; 0x252c <find_volume+0x65c>
    23de:	8d e0       	ldi	r24, 0x0D	; 13
    23e0:	a5 c0       	rjmp	.+330    	; 0x252c <find_volume+0x65c>
    23e2:	8d e0       	ldi	r24, 0x0D	; 13
    23e4:	a3 c0       	rjmp	.+326    	; 0x252c <find_volume+0x65c>
    23e6:	8d e0       	ldi	r24, 0x0D	; 13
    23e8:	a1 c0       	rjmp	.+322    	; 0x252c <find_volume+0x65c>
    23ea:	8d e0       	ldi	r24, 0x0D	; 13
    23ec:	9f c0       	rjmp	.+318    	; 0x252c <find_volume+0x65c>
    23ee:	8d e0       	ldi	r24, 0x0D	; 13
    23f0:	9d c0       	rjmp	.+314    	; 0x252c <find_volume+0x65c>
    23f2:	8d e0       	ldi	r24, 0x0D	; 13
    23f4:	9b c0       	rjmp	.+310    	; 0x252c <find_volume+0x65c>
    23f6:	8d e0       	ldi	r24, 0x0D	; 13
    23f8:	99 c0       	rjmp	.+306    	; 0x252c <find_volume+0x65c>
    23fa:	8d e0       	ldi	r24, 0x0D	; 13
    23fc:	97 c0       	rjmp	.+302    	; 0x252c <find_volume+0x65c>
    23fe:	8d e0       	ldi	r24, 0x0D	; 13
    2400:	95 c0       	rjmp	.+298    	; 0x252c <find_volume+0x65c>
    2402:	8d e0       	ldi	r24, 0x0D	; 13
    2404:	93 c0       	rjmp	.+294    	; 0x252c <find_volume+0x65c>
    2406:	8d e0       	ldi	r24, 0x0D	; 13
    2408:	91 c0       	rjmp	.+290    	; 0x252c <find_volume+0x65c>
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	8f c0       	rjmp	.+286    	; 0x252c <find_volume+0x65c>
    240e:	8d e0       	ldi	r24, 0x0D	; 13
    2410:	8d c0       	rjmp	.+282    	; 0x252c <find_volume+0x65c>
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	ba 01       	movw	r22, r20
    2418:	c8 01       	movw	r24, r16
    241a:	10 dd       	rcall	.-1504   	; 0x1e3c <check_fs>
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	09 f0       	breq	.+2      	; 0x2422 <find_volume+0x552>
    2420:	e4 cd       	rjmp	.-1080   	; 0x1fea <find_volume+0x11a>
    2422:	fe 01       	movw	r30, r28
    2424:	31 96       	adiw	r30, 0x01	; 1
    2426:	5f 01       	movw	r10, r30
    2428:	78 01       	movw	r14, r16
    242a:	f7 e0       	ldi	r31, 0x07	; 7
    242c:	ef 1a       	sub	r14, r31
    242e:	fe ef       	ldi	r31, 0xFE	; 254
    2430:	ff 0a       	sbc	r15, r31
    2432:	48 01       	movw	r8, r16
    2434:	27 ec       	ldi	r18, 0xC7	; 199
    2436:	82 1a       	sub	r8, r18
    2438:	2d ef       	ldi	r18, 0xFD	; 253
    243a:	92 0a       	sbc	r9, r18
    243c:	65 01       	movw	r12, r10
    243e:	41 2c       	mov	r4, r1
    2440:	51 2c       	mov	r5, r1
    2442:	61 2c       	mov	r6, r1
    2444:	71 2c       	mov	r7, r1
    2446:	99 cd       	rjmp	.-1230   	; 0x1f7a <find_volume+0xaa>
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	09 f0       	breq	.+2      	; 0x244e <find_volume+0x57e>
    244c:	d7 cd       	rjmp	.-1106   	; 0x1ffc <find_volume+0x12c>
    244e:	dd cf       	rjmp	.-70     	; 0x240a <find_volume+0x53a>
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	9f ef       	ldi	r25, 0xFF	; 255
    2454:	dc 01       	movw	r26, r24
    2456:	f8 01       	movw	r30, r16
    2458:	87 87       	std	Z+15, r24	; 0x0f
    245a:	90 8b       	std	Z+16, r25	; 0x10
    245c:	a1 8b       	std	Z+17, r26	; 0x11
    245e:	b2 8b       	std	Z+18, r27	; 0x12
    2460:	83 87       	std	Z+11, r24	; 0x0b
    2462:	94 87       	std	Z+12, r25	; 0x0c
    2464:	a5 87       	std	Z+13, r26	; 0x0d
    2466:	b6 87       	std	Z+14, r27	; 0x0e
    2468:	80 e8       	ldi	r24, 0x80	; 128
    246a:	84 83       	std	Z+4, r24	; 0x04
    246c:	8c cf       	rjmp	.-232    	; 0x2386 <find_volume+0x4b6>
    246e:	ff ef       	ldi	r31, 0xFF	; 255
    2470:	8f 0e       	add	r8, r31
    2472:	f1 e0       	ldi	r31, 0x01	; 1
    2474:	9f 1e       	adc	r9, r31
    2476:	a1 1c       	adc	r10, r1
    2478:	b1 1c       	adc	r11, r1
    247a:	07 2e       	mov	r0, r23
    247c:	79 e0       	ldi	r23, 0x09	; 9
    247e:	b6 94       	lsr	r11
    2480:	a7 94       	ror	r10
    2482:	97 94       	ror	r9
    2484:	87 94       	ror	r8
    2486:	7a 95       	dec	r23
    2488:	d1 f7       	brne	.-12     	; 0x247e <find_volume+0x5ae>
    248a:	70 2d       	mov	r23, r0
    248c:	48 14       	cp	r4, r8
    248e:	59 04       	cpc	r5, r9
    2490:	6a 04       	cpc	r6, r10
    2492:	7b 04       	cpc	r7, r11
    2494:	08 f4       	brcc	.+2      	; 0x2498 <find_volume+0x5c8>
    2496:	bb cf       	rjmp	.-138    	; 0x240e <find_volume+0x53e>
    2498:	db cf       	rjmp	.-74     	; 0x2450 <find_volume+0x580>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	9f ef       	ldi	r25, 0xFF	; 255
    249e:	dc 01       	movw	r26, r24
    24a0:	f8 01       	movw	r30, r16
    24a2:	87 87       	std	Z+15, r24	; 0x0f
    24a4:	90 8b       	std	Z+16, r25	; 0x10
    24a6:	a1 8b       	std	Z+17, r26	; 0x11
    24a8:	b2 8b       	std	Z+18, r27	; 0x12
    24aa:	83 87       	std	Z+11, r24	; 0x0b
    24ac:	94 87       	std	Z+12, r25	; 0x0c
    24ae:	a5 87       	std	Z+13, r26	; 0x0d
    24b0:	b6 87       	std	Z+14, r27	; 0x0e
    24b2:	80 e8       	ldi	r24, 0x80	; 128
    24b4:	84 83       	std	Z+4, r24	; 0x04
    24b6:	ec 59       	subi	r30, 0x9C	; 156
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	98 2f       	mov	r25, r24
    24c0:	88 27       	eor	r24, r24
    24c2:	31 97       	sbiw	r30, 0x01	; 1
    24c4:	20 81       	ld	r18, Z
    24c6:	82 2b       	or	r24, r18
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	09 f0       	breq	.+2      	; 0x24ce <find_volume+0x5fe>
    24cc:	5c cf       	rjmp	.-328    	; 0x2386 <find_volume+0x4b6>
    24ce:	17 cf       	rjmp	.-466    	; 0x22fe <find_volume+0x42e>
    24d0:	49 01       	movw	r8, r18
    24d2:	5a 01       	movw	r10, r20
    24d4:	f2 e0       	ldi	r31, 0x02	; 2
    24d6:	8f 0e       	add	r8, r31
    24d8:	91 1c       	adc	r9, r1
    24da:	a1 1c       	adc	r10, r1
    24dc:	b1 1c       	adc	r11, r1
    24de:	d8 01       	movw	r26, r16
    24e0:	57 96       	adiw	r26, 0x17	; 23
    24e2:	8d 92       	st	X+, r8
    24e4:	9d 92       	st	X+, r9
    24e6:	ad 92       	st	X+, r10
    24e8:	bc 92       	st	X, r11
    24ea:	5a 97       	sbiw	r26, 0x1a	; 26
    24ec:	f8 01       	movw	r30, r16
    24ee:	c7 8e       	std	Z+31, r12	; 0x1f
    24f0:	d0 a2       	std	Z+32, r13	; 0x20
    24f2:	e1 a2       	std	Z+33, r14	; 0x21
    24f4:	f2 a2       	std	Z+34, r15	; 0x22
    24f6:	8e 89       	ldd	r24, Y+22	; 0x16
    24f8:	9f 89       	ldd	r25, Y+23	; 0x17
    24fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    24fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    24fe:	8c 0d       	add	r24, r12
    2500:	9d 1d       	adc	r25, r13
    2502:	ae 1d       	adc	r26, r14
    2504:	bf 1d       	adc	r27, r15
    2506:	83 a3       	std	Z+35, r24	; 0x23
    2508:	94 a3       	std	Z+36, r25	; 0x24
    250a:	a5 a3       	std	Z+37, r26	; 0x25
    250c:	b6 a3       	std	Z+38, r27	; 0x26
    250e:	2a 89       	ldd	r18, Y+18	; 0x12
    2510:	3b 89       	ldd	r19, Y+19	; 0x13
    2512:	4c 89       	ldd	r20, Y+20	; 0x14
    2514:	5d 89       	ldd	r21, Y+21	; 0x15
    2516:	c2 0e       	add	r12, r18
    2518:	d3 1e       	adc	r13, r19
    251a:	e4 1e       	adc	r14, r20
    251c:	f5 1e       	adc	r15, r21
    251e:	c3 a6       	std	Z+43, r12	; 0x2b
    2520:	d4 a6       	std	Z+44, r13	; 0x2c
    2522:	e5 a6       	std	Z+45, r14	; 0x2d
    2524:	f6 a6       	std	Z+46, r15	; 0x2e
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	f9 8b       	std	Y+17, r31	; 0x11
    252a:	bb ce       	rjmp	.-650    	; 0x22a2 <find_volume+0x3d2>
    252c:	6e 96       	adiw	r28, 0x1e	; 30
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	9f 90       	pop	r9
    254e:	8f 90       	pop	r8
    2550:	7f 90       	pop	r7
    2552:	6f 90       	pop	r6
    2554:	5f 90       	pop	r5
    2556:	4f 90       	pop	r4
    2558:	3f 90       	pop	r3
    255a:	2f 90       	pop	r2
    255c:	08 95       	ret

0000255e <ld_clust>:
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	dc 01       	movw	r26, r24
    2564:	fb 01       	movw	r30, r22
    2566:	93 8d       	ldd	r25, Z+27	; 0x1b
    2568:	69 2f       	mov	r22, r25
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	76 2f       	mov	r23, r22
    256e:	66 27       	eor	r22, r22
    2570:	82 8d       	ldd	r24, Z+26	; 0x1a
    2572:	68 2b       	or	r22, r24
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	2c 91       	ld	r18, X
    257a:	23 30       	cpi	r18, 0x03	; 3
    257c:	79 f4       	brne	.+30     	; 0x259c <ld_clust+0x3e>
    257e:	05 89       	ldd	r16, Z+21	; 0x15
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	10 2f       	mov	r17, r16
    2584:	00 27       	eor	r16, r16
    2586:	24 89       	ldd	r18, Z+20	; 0x14
    2588:	02 2b       	or	r16, r18
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	98 01       	movw	r18, r16
    2590:	11 27       	eor	r17, r17
    2592:	00 27       	eor	r16, r16
    2594:	60 2b       	or	r22, r16
    2596:	71 2b       	or	r23, r17
    2598:	82 2b       	or	r24, r18
    259a:	93 2b       	or	r25, r19
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <follow_path>:
    25a2:	2f 92       	push	r2
    25a4:	3f 92       	push	r3
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	27 97       	sbiw	r28, 0x07	; 7
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	7b 01       	movw	r14, r22
    25dc:	dc 01       	movw	r26, r24
    25de:	2d 90       	ld	r2, X+
    25e0:	3c 90       	ld	r3, X
    25e2:	fb 01       	movw	r30, r22
    25e4:	80 81       	ld	r24, Z
    25e6:	8f 32       	cpi	r24, 0x2F	; 47
    25e8:	11 f4       	brne	.+4      	; 0x25ee <follow_path+0x4c>
    25ea:	f7 01       	movw	r30, r14
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <follow_path+0x68>
    25ee:	8c 35       	cpi	r24, 0x5C	; 92
    25f0:	e1 f3       	breq	.-8      	; 0x25ea <follow_path+0x48>
    25f2:	f1 01       	movw	r30, r2
    25f4:	83 89       	ldd	r24, Z+19	; 0x13
    25f6:	94 89       	ldd	r25, Z+20	; 0x14
    25f8:	a5 89       	ldd	r26, Z+21	; 0x15
    25fa:	b6 89       	ldd	r27, Z+22	; 0x16
    25fc:	e9 81       	ldd	r30, Y+1	; 0x01
    25fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2600:	86 83       	std	Z+6, r24	; 0x06
    2602:	97 83       	std	Z+7, r25	; 0x07
    2604:	a0 87       	std	Z+8, r26	; 0x08
    2606:	b1 87       	std	Z+9, r27	; 0x09
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <follow_path+0x86>
    260a:	7f 01       	movw	r14, r30
    260c:	81 91       	ld	r24, Z+
    260e:	8f 32       	cpi	r24, 0x2F	; 47
    2610:	e1 f3       	breq	.-8      	; 0x260a <follow_path+0x68>
    2612:	8c 35       	cpi	r24, 0x5C	; 92
    2614:	d1 f3       	breq	.-12     	; 0x260a <follow_path+0x68>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	dc 01       	movw	r26, r24
    261c:	16 96       	adiw	r26, 0x06	; 6
    261e:	1d 92       	st	X+, r1
    2620:	1d 92       	st	X+, r1
    2622:	1d 92       	st	X+, r1
    2624:	1c 92       	st	X, r1
    2626:	19 97       	sbiw	r26, 0x09	; 9
    2628:	f7 01       	movw	r30, r14
    262a:	80 81       	ld	r24, Z
    262c:	80 32       	cpi	r24, 0x20	; 32
    262e:	70 f4       	brcc	.+28     	; 0x264c <follow_path+0xaa>
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	a9 81       	ldd	r26, Y+1	; 0x01
    2634:	ba 81       	ldd	r27, Y+2	; 0x02
    2636:	97 96       	adiw	r26, 0x27	; 39
    2638:	8c 93       	st	X, r24
    263a:	97 97       	sbiw	r26, 0x27	; 39
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	ba 01       	movw	r22, r20
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <dir_sdi>
    2648:	18 2f       	mov	r17, r24
    264a:	72 c1       	rjmp	.+740    	; 0x2930 <follow_path+0x38e>
    264c:	49 80       	ldd	r4, Y+1	; 0x01
    264e:	5a 80       	ldd	r5, Y+2	; 0x02
    2650:	bc e1       	ldi	r27, 0x1C	; 28
    2652:	4b 0e       	add	r4, r27
    2654:	51 1c       	adc	r5, r1
    2656:	0f 2e       	mov	r0, r31
    2658:	fb e0       	ldi	r31, 0x0B	; 11
    265a:	7f 2e       	mov	r7, r31
    265c:	f0 2d       	mov	r31, r0
    265e:	0f 2e       	mov	r0, r31
    2660:	fe e2       	ldi	r31, 0x2E	; 46
    2662:	6f 2e       	mov	r6, r31
    2664:	f0 2d       	mov	r31, r0
    2666:	7d 82       	std	Y+5, r7	; 0x05
    2668:	1e 82       	std	Y+6, r1	; 0x06
    266a:	f1 01       	movw	r30, r2
    266c:	f3 96       	adiw	r30, 0x33	; 51
    266e:	fc 83       	std	Y+4, r31	; 0x04
    2670:	eb 83       	std	Y+3, r30	; 0x03
    2672:	47 2d       	mov	r20, r7
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	60 e2       	ldi	r22, 0x20	; 32
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	c2 01       	movw	r24, r4
    267c:	0e 94 67 06 	call	0xcce	; 0xcce <mem_set>
    2680:	d7 01       	movw	r26, r14
    2682:	8c 91       	ld	r24, X
    2684:	8e 32       	cpi	r24, 0x2E	; 46
    2686:	11 f5       	brne	.+68     	; 0x26cc <follow_path+0x12a>
    2688:	e9 81       	ldd	r30, Y+1	; 0x01
    268a:	fa 81       	ldd	r31, Y+2	; 0x02
    268c:	64 8e       	std	Z+28, r6	; 0x1c
    268e:	11 96       	adiw	r26, 0x01	; 1
    2690:	8c 91       	ld	r24, X
    2692:	11 97       	sbiw	r26, 0x01	; 1
    2694:	8e 32       	cpi	r24, 0x2E	; 46
    2696:	49 f4       	brne	.+18     	; 0x26aa <follow_path+0x108>
    2698:	65 8e       	std	Z+29, r6	; 0x1d
    269a:	12 96       	adiw	r26, 0x02	; 2
    269c:	8c 91       	ld	r24, X
    269e:	8e 32       	cpi	r24, 0x2E	; 46
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <follow_path+0x102>
    26a2:	91 c0       	rjmp	.+290    	; 0x27c6 <follow_path+0x224>
    26a4:	23 e0       	ldi	r18, 0x03	; 3
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <follow_path+0x10c>
    26aa:	22 e0       	ldi	r18, 0x02	; 2
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	8f 32       	cpi	r24, 0x2F	; 47
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <follow_path+0x112>
    26b2:	e6 c0       	rjmp	.+460    	; 0x2880 <follow_path+0x2de>
    26b4:	8c 35       	cpi	r24, 0x5C	; 92
    26b6:	09 f4       	brne	.+2      	; 0x26ba <follow_path+0x118>
    26b8:	e3 c0       	rjmp	.+454    	; 0x2880 <follow_path+0x2de>
    26ba:	81 32       	cpi	r24, 0x21	; 33
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <follow_path+0x11e>
    26be:	e4 c0       	rjmp	.+456    	; 0x2888 <follow_path+0x2e6>
    26c0:	05 c1       	rjmp	.+522    	; 0x28cc <follow_path+0x32a>
    26c2:	a9 81       	ldd	r26, Y+1	; 0x01
    26c4:	ba 81       	ldd	r27, Y+2	; 0x02
    26c6:	97 96       	adiw	r26, 0x27	; 39
    26c8:	8c 93       	st	X, r24
    26ca:	02 c1       	rjmp	.+516    	; 0x28d0 <follow_path+0x32e>
    26cc:	a1 2c       	mov	r10, r1
    26ce:	b1 2c       	mov	r11, r1
    26d0:	00 e0       	ldi	r16, 0x00	; 0
    26d2:	10 e0       	ldi	r17, 0x00	; 0
    26d4:	68 94       	set
    26d6:	cc 24       	eor	r12, r12
    26d8:	c3 f8       	bld	r12, 3
    26da:	d1 2c       	mov	r13, r1
    26dc:	98 01       	movw	r18, r16
    26de:	2f 5f       	subi	r18, 0xFF	; 255
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	f7 01       	movw	r30, r14
    26e4:	e0 0f       	add	r30, r16
    26e6:	f1 1f       	adc	r31, r17
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 83       	std	Y+7, r24	; 0x07
    26ec:	81 32       	cpi	r24, 0x21	; 33
    26ee:	08 f4       	brcc	.+2      	; 0x26f2 <follow_path+0x150>
    26f0:	4f c0       	rjmp	.+158    	; 0x2790 <follow_path+0x1ee>
    26f2:	8f 32       	cpi	r24, 0x2F	; 47
    26f4:	11 f0       	breq	.+4      	; 0x26fa <follow_path+0x158>
    26f6:	8c 35       	cpi	r24, 0x5C	; 92
    26f8:	69 f4       	brne	.+26     	; 0x2714 <follow_path+0x172>
    26fa:	9f 80       	ldd	r9, Y+7	; 0x07
    26fc:	f7 01       	movw	r30, r14
    26fe:	e2 0f       	add	r30, r18
    2700:	f3 1f       	adc	r31, r19
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <follow_path+0x166>
    2704:	2f 5f       	subi	r18, 0xFF	; 255
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	81 91       	ld	r24, Z+
    270a:	8f 32       	cpi	r24, 0x2F	; 47
    270c:	d9 f3       	breq	.-10     	; 0x2704 <follow_path+0x162>
    270e:	8c 35       	cpi	r24, 0x5C	; 92
    2710:	c9 f3       	breq	.-14     	; 0x2704 <follow_path+0x162>
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <follow_path+0x1f0>
    2714:	ff 81       	ldd	r31, Y+7	; 0x07
    2716:	fe 32       	cpi	r31, 0x2E	; 46
    2718:	09 f4       	brne	.+2      	; 0x271c <follow_path+0x17a>
    271a:	fe c0       	rjmp	.+508    	; 0x2918 <follow_path+0x376>
    271c:	ac 14       	cp	r10, r12
    271e:	bd 04       	cpc	r11, r13
    2720:	08 f0       	brcs	.+2      	; 0x2724 <follow_path+0x182>
    2722:	d4 c0       	rjmp	.+424    	; 0x28cc <follow_path+0x32a>
    2724:	f1 38       	cpi	r31, 0x81	; 129
    2726:	08 f4       	brcc	.+2      	; 0x272a <follow_path+0x188>
    2728:	c0 c0       	rjmp	.+384    	; 0x28aa <follow_path+0x308>
    272a:	f0 3a       	cpi	r31, 0xA0	; 160
    272c:	08 f4       	brcc	.+2      	; 0x2730 <follow_path+0x18e>
    272e:	b0 c0       	rjmp	.+352    	; 0x2890 <follow_path+0x2ee>
    2730:	8f 2f       	mov	r24, r31
    2732:	80 5e       	subi	r24, 0xE0	; 224
    2734:	8d 31       	cpi	r24, 0x1D	; 29
    2736:	08 f4       	brcc	.+2      	; 0x273a <follow_path+0x198>
    2738:	ab c0       	rjmp	.+342    	; 0x2890 <follow_path+0x2ee>
    273a:	b7 c0       	rjmp	.+366    	; 0x28aa <follow_path+0x308>
    273c:	c6 01       	movw	r24, r12
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	a8 16       	cp	r10, r24
    2742:	b9 06       	cpc	r11, r25
    2744:	08 f0       	brcs	.+2      	; 0x2748 <follow_path+0x1a6>
    2746:	c2 c0       	rjmp	.+388    	; 0x28cc <follow_path+0x32a>
    2748:	f2 01       	movw	r30, r4
    274a:	ea 0d       	add	r30, r10
    274c:	fb 1d       	adc	r31, r11
    274e:	8f 81       	ldd	r24, Y+7	; 0x07
    2750:	80 83       	st	Z, r24
    2752:	f5 01       	movw	r30, r10
    2754:	31 96       	adiw	r30, 0x01	; 1
    2756:	e4 0d       	add	r30, r4
    2758:	f5 1d       	adc	r31, r5
    275a:	92 e0       	ldi	r25, 0x02	; 2
    275c:	a9 0e       	add	r10, r25
    275e:	b1 1c       	adc	r11, r1
    2760:	80 82       	st	Z, r8
    2762:	bc cf       	rjmp	.-136    	; 0x26dc <follow_path+0x13a>
    2764:	81 91       	ld	r24, Z+
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <follow_path+0x1ca>
    276a:	a9 c0       	rjmp	.+338    	; 0x28be <follow_path+0x31c>
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	48 17       	cp	r20, r24
    2770:	59 07       	cpc	r21, r25
    2772:	c1 f7       	brne	.-16     	; 0x2764 <follow_path+0x1c2>
    2774:	28 c0       	rjmp	.+80     	; 0x27c6 <follow_path+0x224>
    2776:	af 81       	ldd	r26, Y+7	; 0x07
    2778:	a0 52       	subi	r26, 0x20	; 32
    277a:	af 83       	std	Y+7, r26	; 0x07
    277c:	f2 01       	movw	r30, r4
    277e:	ea 0d       	add	r30, r10
    2780:	fb 1d       	adc	r31, r11
    2782:	bf 81       	ldd	r27, Y+7	; 0x07
    2784:	b0 83       	st	Z, r27
    2786:	f5 01       	movw	r30, r10
    2788:	31 96       	adiw	r30, 0x01	; 1
    278a:	5f 01       	movw	r10, r30
    278c:	89 01       	movw	r16, r18
    278e:	a6 cf       	rjmp	.-180    	; 0x26dc <follow_path+0x13a>
    2790:	9f 80       	ldd	r9, Y+7	; 0x07
    2792:	ab 28       	or	r10, r11
    2794:	09 f4       	brne	.+2      	; 0x2798 <follow_path+0x1f6>
    2796:	9a c0       	rjmp	.+308    	; 0x28cc <follow_path+0x32a>
    2798:	a9 81       	ldd	r26, Y+1	; 0x01
    279a:	ba 81       	ldd	r27, Y+2	; 0x02
    279c:	5c 96       	adiw	r26, 0x1c	; 28
    279e:	8c 91       	ld	r24, X
    27a0:	5c 97       	sbiw	r26, 0x1c	; 28
    27a2:	85 3e       	cpi	r24, 0xE5	; 229
    27a4:	19 f4       	brne	.+6      	; 0x27ac <follow_path+0x20a>
    27a6:	e5 e0       	ldi	r30, 0x05	; 5
    27a8:	5c 96       	adiw	r26, 0x1c	; 28
    27aa:	ec 93       	st	X, r30
    27ac:	f0 e2       	ldi	r31, 0x20	; 32
    27ae:	f9 15       	cp	r31, r9
    27b0:	10 f4       	brcc	.+4      	; 0x27b6 <follow_path+0x214>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <follow_path+0x216>
    27b6:	84 e0       	ldi	r24, 0x04	; 4
    27b8:	e2 0e       	add	r14, r18
    27ba:	f3 1e       	adc	r15, r19
    27bc:	a9 81       	ldd	r26, Y+1	; 0x01
    27be:	ba 81       	ldd	r27, Y+2	; 0x02
    27c0:	97 96       	adiw	r26, 0x27	; 39
    27c2:	8c 93       	st	X, r24
    27c4:	85 c0       	rjmp	.+266    	; 0x28d0 <follow_path+0x32e>
    27c6:	16 e0       	ldi	r17, 0x06	; 6
    27c8:	b3 c0       	rjmp	.+358    	; 0x2930 <follow_path+0x38e>
    27ca:	a9 81       	ldd	r26, Y+1	; 0x01
    27cc:	ba 81       	ldd	r27, Y+2	; 0x02
    27ce:	56 96       	adiw	r26, 0x16	; 22
    27d0:	4d 91       	ld	r20, X+
    27d2:	5d 91       	ld	r21, X+
    27d4:	6d 91       	ld	r22, X+
    27d6:	7c 91       	ld	r23, X
    27d8:	59 97       	sbiw	r26, 0x19	; 25
    27da:	c6 01       	movw	r24, r12
    27dc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    27e0:	18 2f       	mov	r17, r24
    27e2:	81 11       	cpse	r24, r1
    27e4:	85 c0       	rjmp	.+266    	; 0x28f0 <follow_path+0x34e>
    27e6:	a9 81       	ldd	r26, Y+1	; 0x01
    27e8:	ba 81       	ldd	r27, Y+2	; 0x02
    27ea:	5a 96       	adiw	r26, 0x1a	; 26
    27ec:	ed 91       	ld	r30, X+
    27ee:	fc 91       	ld	r31, X
    27f0:	5b 97       	sbiw	r26, 0x1b	; 27
    27f2:	80 81       	ld	r24, Z
    27f4:	88 23       	and	r24, r24
    27f6:	09 f4       	brne	.+2      	; 0x27fa <follow_path+0x258>
    27f8:	83 c0       	rjmp	.+262    	; 0x2900 <follow_path+0x35e>
    27fa:	03 85       	ldd	r16, Z+11	; 0x0b
    27fc:	80 2f       	mov	r24, r16
    27fe:	8f 73       	andi	r24, 0x3F	; 63
    2800:	14 96       	adiw	r26, 0x04	; 4
    2802:	8c 93       	st	X, r24
    2804:	83 85       	ldd	r24, Z+11	; 0x0b
    2806:	83 fd       	sbrc	r24, 3
    2808:	09 c0       	rjmp	.+18     	; 0x281c <follow_path+0x27a>
    280a:	47 2d       	mov	r20, r7
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	b2 01       	movw	r22, r4
    2810:	cf 01       	movw	r24, r30
    2812:	0e 94 6f 06 	call	0xcde	; 0xcde <mem_cmp>
    2816:	89 2b       	or	r24, r25
    2818:	09 f4       	brne	.+2      	; 0x281c <follow_path+0x27a>
    281a:	76 c0       	rjmp	.+236    	; 0x2908 <follow_path+0x366>
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	a6 d9       	rcall	.-3252   	; 0x1b72 <dir_next>
    2826:	18 2f       	mov	r17, r24
    2828:	88 23       	and	r24, r24
    282a:	79 f2       	breq	.-98     	; 0x27ca <follow_path+0x228>
    282c:	61 c0       	rjmp	.+194    	; 0x28f0 <follow_path+0x34e>
    282e:	85 ff       	sbrs	r24, 5
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <follow_path+0x2a2>
    2832:	82 ff       	sbrs	r24, 2
    2834:	1e cf       	rjmp	.-452    	; 0x2672 <follow_path+0xd0>
    2836:	80 e8       	ldi	r24, 0x80	; 128
    2838:	a9 81       	ldd	r26, Y+1	; 0x01
    283a:	ba 81       	ldd	r27, Y+2	; 0x02
    283c:	97 96       	adiw	r26, 0x27	; 39
    283e:	8c 93       	st	X, r24
    2840:	10 e0       	ldi	r17, 0x00	; 0
    2842:	76 c0       	rjmp	.+236    	; 0x2930 <follow_path+0x38e>
    2844:	82 fd       	sbrc	r24, 2
    2846:	18 c0       	rjmp	.+48     	; 0x2878 <follow_path+0x2d6>
    2848:	15 e0       	ldi	r17, 0x05	; 5
    284a:	72 c0       	rjmp	.+228    	; 0x2930 <follow_path+0x38e>
    284c:	04 ff       	sbrs	r16, 4
    284e:	16 c0       	rjmp	.+44     	; 0x287c <follow_path+0x2da>
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	66 85       	ldd	r22, Z+14	; 0x0e
    2856:	77 85       	ldd	r23, Z+15	; 0x0f
    2858:	71 70       	andi	r23, 0x01	; 1
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	68 0f       	add	r22, r24
    2860:	79 1f       	adc	r23, r25
    2862:	c1 01       	movw	r24, r2
    2864:	7c de       	rcall	.-776    	; 0x255e <ld_clust>
    2866:	a9 81       	ldd	r26, Y+1	; 0x01
    2868:	ba 81       	ldd	r27, Y+2	; 0x02
    286a:	16 96       	adiw	r26, 0x06	; 6
    286c:	6d 93       	st	X+, r22
    286e:	7d 93       	st	X+, r23
    2870:	8d 93       	st	X+, r24
    2872:	9c 93       	st	X, r25
    2874:	19 97       	sbiw	r26, 0x09	; 9
    2876:	fd ce       	rjmp	.-518    	; 0x2672 <follow_path+0xd0>
    2878:	14 e0       	ldi	r17, 0x04	; 4
    287a:	5a c0       	rjmp	.+180    	; 0x2930 <follow_path+0x38e>
    287c:	15 e0       	ldi	r17, 0x05	; 5
    287e:	58 c0       	rjmp	.+176    	; 0x2930 <follow_path+0x38e>
    2880:	e2 0e       	add	r14, r18
    2882:	f3 1e       	adc	r15, r19
    2884:	80 e2       	ldi	r24, 0x20	; 32
    2886:	1d cf       	rjmp	.-454    	; 0x26c2 <follow_path+0x120>
    2888:	e2 0e       	add	r14, r18
    288a:	f3 1e       	adc	r15, r19
    288c:	84 e2       	ldi	r24, 0x24	; 36
    288e:	19 cf       	rjmp	.-462    	; 0x26c2 <follow_path+0x120>
    2890:	0e 5f       	subi	r16, 0xFE	; 254
    2892:	1f 4f       	sbci	r17, 0xFF	; 255
    2894:	f7 01       	movw	r30, r14
    2896:	e2 0f       	add	r30, r18
    2898:	f3 1f       	adc	r31, r19
    289a:	80 80       	ld	r8, Z
    289c:	88 2d       	mov	r24, r8
    289e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <dbc_2nd>
    28a2:	89 2b       	or	r24, r25
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <follow_path+0x306>
    28a6:	4a cf       	rjmp	.-364    	; 0x273c <follow_path+0x19a>
    28a8:	11 c0       	rjmp	.+34     	; 0x28cc <follow_path+0x32a>
    28aa:	bf 81       	ldd	r27, Y+7	; 0x07
    28ac:	4b 2f       	mov	r20, r27
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	42 32       	cpi	r20, 0x22	; 34
    28b2:	51 05       	cpc	r21, r1
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <follow_path+0x316>
    28b6:	87 cf       	rjmp	.-242    	; 0x27c6 <follow_path+0x224>
    28b8:	ee e3       	ldi	r30, 0x3E	; 62
    28ba:	f1 e0       	ldi	r31, 0x01	; 1
    28bc:	53 cf       	rjmp	.-346    	; 0x2764 <follow_path+0x1c2>
    28be:	ef 81       	ldd	r30, Y+7	; 0x07
    28c0:	8e 2f       	mov	r24, r30
    28c2:	81 56       	subi	r24, 0x61	; 97
    28c4:	8a 31       	cpi	r24, 0x1A	; 26
    28c6:	08 f4       	brcc	.+2      	; 0x28ca <follow_path+0x328>
    28c8:	56 cf       	rjmp	.-340    	; 0x2776 <follow_path+0x1d4>
    28ca:	58 cf       	rjmp	.-336    	; 0x277c <follow_path+0x1da>
    28cc:	16 e0       	ldi	r17, 0x06	; 6
    28ce:	30 c0       	rjmp	.+96     	; 0x2930 <follow_path+0x38e>
    28d0:	a9 81       	ldd	r26, Y+1	; 0x01
    28d2:	ba 81       	ldd	r27, Y+2	; 0x02
    28d4:	cd 90       	ld	r12, X+
    28d6:	dc 90       	ld	r13, X
    28d8:	11 97       	sbiw	r26, 0x01	; 1
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	ba 01       	movw	r22, r20
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <dir_sdi>
    28e6:	18 2f       	mov	r17, r24
    28e8:	88 23       	and	r24, r24
    28ea:	09 f4       	brne	.+2      	; 0x28ee <follow_path+0x34c>
    28ec:	6e cf       	rjmp	.-292    	; 0x27ca <follow_path+0x228>
    28ee:	00 c0       	rjmp	.+0      	; 0x28f0 <follow_path+0x34e>
    28f0:	a9 81       	ldd	r26, Y+1	; 0x01
    28f2:	ba 81       	ldd	r27, Y+2	; 0x02
    28f4:	97 96       	adiw	r26, 0x27	; 39
    28f6:	8c 91       	ld	r24, X
    28f8:	14 30       	cpi	r17, 0x04	; 4
    28fa:	09 f4       	brne	.+2      	; 0x28fe <follow_path+0x35c>
    28fc:	98 cf       	rjmp	.-208    	; 0x282e <follow_path+0x28c>
    28fe:	18 c0       	rjmp	.+48     	; 0x2930 <follow_path+0x38e>
    2900:	e9 81       	ldd	r30, Y+1	; 0x01
    2902:	fa 81       	ldd	r31, Y+2	; 0x02
    2904:	87 a1       	ldd	r24, Z+39	; 0x27
    2906:	93 cf       	rjmp	.-218    	; 0x282e <follow_path+0x28c>
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	dc 01       	movw	r26, r24
    290e:	97 96       	adiw	r26, 0x27	; 39
    2910:	8c 91       	ld	r24, X
    2912:	82 ff       	sbrs	r24, 2
    2914:	9b cf       	rjmp	.-202    	; 0x284c <follow_path+0x2aa>
    2916:	0c c0       	rjmp	.+24     	; 0x2930 <follow_path+0x38e>
    2918:	bb e0       	ldi	r27, 0x0B	; 11
    291a:	cb 16       	cp	r12, r27
    291c:	d1 04       	cpc	r13, r1
    291e:	b1 f2       	breq	.-84     	; 0x28cc <follow_path+0x32a>
    2920:	89 01       	movw	r16, r18
    2922:	68 94       	set
    2924:	aa 24       	eor	r10, r10
    2926:	a3 f8       	bld	r10, 3
    2928:	b1 2c       	mov	r11, r1
    292a:	cd 80       	ldd	r12, Y+5	; 0x05
    292c:	de 80       	ldd	r13, Y+6	; 0x06
    292e:	d6 ce       	rjmp	.-596    	; 0x26dc <follow_path+0x13a>
    2930:	81 2f       	mov	r24, r17
    2932:	27 96       	adiw	r28, 0x07	; 7
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	9f 90       	pop	r9
    2954:	8f 90       	pop	r8
    2956:	7f 90       	pop	r7
    2958:	6f 90       	pop	r6
    295a:	5f 90       	pop	r5
    295c:	4f 90       	pop	r4
    295e:	3f 90       	pop	r3
    2960:	2f 90       	pop	r2
    2962:	08 95       	ret

00002964 <f_mount>:
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	00 d0       	rcall	.+0      	; 0x296c <f_mount+0x8>
    296c:	00 d0       	rcall	.+0      	; 0x296e <f_mount+0xa>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <f_mount+0xc>
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	7e 83       	std	Y+6, r23	; 0x06
    297a:	6d 83       	std	Y+5, r22	; 0x05
    297c:	14 2f       	mov	r17, r20
    297e:	7a 83       	std	Y+2, r23	; 0x02
    2980:	69 83       	std	Y+1, r22	; 0x01
    2982:	ce 01       	movw	r24, r28
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	0e 94 0e 07 	call	0xe1c	; 0xe1c <get_ldnumber>
    298a:	99 23       	and	r25, r25
    298c:	1c f1       	brlt	.+70     	; 0x29d4 <f_mount+0x70>
    298e:	fc 01       	movw	r30, r24
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	e7 52       	subi	r30, 0x27	; 39
    2996:	fc 4f       	sbci	r31, 0xFC	; 252
    2998:	01 90       	ld	r0, Z+
    299a:	f0 81       	ld	r31, Z
    299c:	e0 2d       	mov	r30, r0
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <f_mount+0x40>
    29a2:	10 82       	st	Z, r1
    29a4:	eb 81       	ldd	r30, Y+3	; 0x03
    29a6:	fc 81       	ldd	r31, Y+4	; 0x04
    29a8:	30 97       	sbiw	r30, 0x00	; 0
    29aa:	09 f0       	breq	.+2      	; 0x29ae <f_mount+0x4a>
    29ac:	10 82       	st	Z, r1
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	fc 01       	movw	r30, r24
    29b4:	e7 52       	subi	r30, 0x27	; 39
    29b6:	fc 4f       	sbci	r31, 0xFC	; 252
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	11 23       	and	r17, r17
    29c2:	51 f0       	breq	.+20     	; 0x29d8 <f_mount+0x74>
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	be 01       	movw	r22, r28
    29c8:	6d 5f       	subi	r22, 0xFD	; 253
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	ce 01       	movw	r24, r28
    29ce:	05 96       	adiw	r24, 0x05	; 5
    29d0:	7f da       	rcall	.-2818   	; 0x1ed0 <find_volume>
    29d2:	03 c0       	rjmp	.+6      	; 0x29da <f_mount+0x76>
    29d4:	8b e0       	ldi	r24, 0x0B	; 11
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <f_mount+0x76>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	26 96       	adiw	r28, 0x06	; 6
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	08 95       	ret

000029ee <f_open>:
    29ee:	2f 92       	push	r2
    29f0:	3f 92       	push	r3
    29f2:	4f 92       	push	r4
    29f4:	5f 92       	push	r5
    29f6:	6f 92       	push	r6
    29f8:	7f 92       	push	r7
    29fa:	8f 92       	push	r8
    29fc:	9f 92       	push	r9
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	ac 97       	sbiw	r28, 0x2c	; 44
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	7c a7       	std	Y+44, r23	; 0x2c
    2a24:	6b a7       	std	Y+43, r22	; 0x2b
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <f_open+0x3e>
    2a2a:	18 c1       	rjmp	.+560    	; 0x2c5c <f_open+0x26e>
    2a2c:	14 2f       	mov	r17, r20
    2a2e:	1c 01       	movw	r2, r24
    2a30:	84 2f       	mov	r24, r20
    2a32:	8f 73       	andi	r24, 0x3F	; 63
    2a34:	d8 2e       	mov	r13, r24
    2a36:	48 2f       	mov	r20, r24
    2a38:	be 01       	movw	r22, r28
    2a3a:	67 5d       	subi	r22, 0xD7	; 215
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	ce 01       	movw	r24, r28
    2a40:	8b 96       	adiw	r24, 0x2b	; 43
    2a42:	46 da       	rcall	.-2932   	; 0x1ed0 <find_volume>
    2a44:	81 11       	cpse	r24, r1
    2a46:	06 c1       	rjmp	.+524    	; 0x2c54 <f_open+0x266>
    2a48:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	6b a5       	ldd	r22, Y+43	; 0x2b
    2a52:	7c a5       	ldd	r23, Y+44	; 0x2c
    2a54:	ce 01       	movw	r24, r28
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	a4 dd       	rcall	.-1208   	; 0x25a2 <follow_path>
    2a5a:	81 11       	cpse	r24, r1
    2a5c:	01 c1       	rjmp	.+514    	; 0x2c60 <f_open+0x272>
    2a5e:	88 a5       	ldd	r24, Y+40	; 0x28
    2a60:	88 23       	and	r24, r24
    2a62:	0c f0       	brlt	.+2      	; 0x2a66 <f_open+0x78>
    2a64:	06 c1       	rjmp	.+524    	; 0x2c72 <f_open+0x284>
    2a66:	00 c1       	rjmp	.+512    	; 0x2c68 <f_open+0x27a>
    2a68:	84 30       	cpi	r24, 0x04	; 4
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <f_open+0x80>
    2a6c:	29 c1       	rjmp	.+594    	; 0x2cc0 <f_open+0x2d2>
    2a6e:	ce 01       	movw	r24, r28
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	b2 d9       	rcall	.-3228   	; 0x1dd8 <dir_register>
    2a74:	9d 2d       	mov	r25, r13
    2a76:	98 60       	ori	r25, 0x08	; 8
    2a78:	d9 2e       	mov	r13, r25
    2a7a:	88 23       	and	r24, r24
    2a7c:	39 f0       	breq	.+14     	; 0x2a8c <f_open+0x9e>
    2a7e:	ea c0       	rjmp	.+468    	; 0x2c54 <f_open+0x266>
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	81 71       	andi	r24, 0x11	; 17
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <f_open+0x9a>
    2a86:	43 c1       	rjmp	.+646    	; 0x2d0e <f_open+0x320>
    2a88:	12 fd       	sbrc	r17, 2
    2a8a:	43 c1       	rjmp	.+646    	; 0x2d12 <f_open+0x324>
    2a8c:	d3 fe       	sbrs	r13, 3
    2a8e:	57 c0       	rjmp	.+174    	; 0x2b3e <f_open+0x150>
    2a90:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2a92:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2a94:	a9 a4       	ldd	r10, Y+41	; 0x29
    2a96:	ba a4       	ldd	r11, Y+42	; 0x2a
    2a98:	b8 01       	movw	r22, r16
    2a9a:	c5 01       	movw	r24, r10
    2a9c:	60 dd       	rcall	.-1344   	; 0x255e <ld_clust>
    2a9e:	2b 01       	movw	r4, r22
    2aa0:	3c 01       	movw	r6, r24
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	16 86       	std	Z+14, r1	; 0x0e
    2aa6:	17 86       	std	Z+15, r1	; 0x0f
    2aa8:	81 e2       	ldi	r24, 0x21	; 33
    2aaa:	80 8b       	std	Z+16, r24	; 0x10
    2aac:	88 e4       	ldi	r24, 0x48	; 72
    2aae:	81 8b       	std	Z+17, r24	; 0x11
    2ab0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2ab2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2ab4:	80 e2       	ldi	r24, 0x20	; 32
    2ab6:	83 87       	std	Z+11, r24	; 0x0b
    2ab8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2aba:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	a9 01       	movw	r20, r18
    2ac2:	c5 01       	movw	r24, r10
    2ac4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <st_clust>
    2ac8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2aca:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2acc:	14 8e       	std	Z+28, r1	; 0x1c
    2ace:	15 8e       	std	Z+29, r1	; 0x1d
    2ad0:	16 8e       	std	Z+30, r1	; 0x1e
    2ad2:	17 8e       	std	Z+31, r1	; 0x1f
    2ad4:	e9 a5       	ldd	r30, Y+41	; 0x29
    2ad6:	fa a5       	ldd	r31, Y+42	; 0x2a
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	83 83       	std	Z+3, r24	; 0x03
    2adc:	41 14       	cp	r4, r1
    2ade:	51 04       	cpc	r5, r1
    2ae0:	61 04       	cpc	r6, r1
    2ae2:	71 04       	cpc	r7, r1
    2ae4:	49 f1       	breq	.+82     	; 0x2b38 <f_open+0x14a>
    2ae6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ae8:	90 a8       	ldd	r9, Z+48	; 0x30
    2aea:	a1 a8       	ldd	r10, Z+49	; 0x31
    2aec:	b2 a8       	ldd	r11, Z+50	; 0x32
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	98 01       	movw	r18, r16
    2af4:	b3 01       	movw	r22, r6
    2af6:	a2 01       	movw	r20, r4
    2af8:	ce 01       	movw	r24, r28
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <remove_chain>
    2b00:	81 11       	cpse	r24, r1
    2b02:	a8 c0       	rjmp	.+336    	; 0x2c54 <f_open+0x266>
    2b04:	b5 01       	movw	r22, r10
    2b06:	a4 01       	movw	r20, r8
    2b08:	89 a5       	ldd	r24, Y+41	; 0x29
    2b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b0c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    2b10:	e9 a5       	ldd	r30, Y+41	; 0x29
    2b12:	fa a5       	ldd	r31, Y+42	; 0x2a
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	49 1a       	sub	r4, r25
    2b18:	51 08       	sbc	r5, r1
    2b1a:	61 08       	sbc	r6, r1
    2b1c:	71 08       	sbc	r7, r1
    2b1e:	43 86       	std	Z+11, r4	; 0x0b
    2b20:	54 86       	std	Z+12, r5	; 0x0c
    2b22:	65 86       	std	Z+13, r6	; 0x0d
    2b24:	76 86       	std	Z+14, r7	; 0x0e
    2b26:	88 23       	and	r24, r24
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <f_open+0x14a>
    2b2a:	94 c0       	rjmp	.+296    	; 0x2c54 <f_open+0x266>
    2b2c:	11 ff       	sbrs	r17, 1
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <f_open+0x146>
    2b30:	80 fd       	sbrc	r24, 0
    2b32:	f1 c0       	rjmp	.+482    	; 0x2d16 <f_open+0x328>
    2b34:	13 ff       	sbrs	r17, 3
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <f_open+0x150>
    2b38:	ed 2d       	mov	r30, r13
    2b3a:	e0 64       	ori	r30, 0x40	; 64
    2b3c:	de 2e       	mov	r13, r30
    2b3e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2b40:	fa a5       	ldd	r31, Y+42	; 0x2a
    2b42:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b44:	90 a9       	ldd	r25, Z+48	; 0x30
    2b46:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b48:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b4a:	f1 01       	movw	r30, r2
    2b4c:	84 8f       	std	Z+28, r24	; 0x1c
    2b4e:	95 8f       	std	Z+29, r25	; 0x1d
    2b50:	a6 8f       	std	Z+30, r26	; 0x1e
    2b52:	b7 8f       	std	Z+31, r27	; 0x1f
    2b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b58:	91 a3       	std	Z+33, r25	; 0x21
    2b5a:	80 a3       	std	Z+32, r24	; 0x20
    2b5c:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2b5e:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2b60:	09 a5       	ldd	r16, Y+41	; 0x29
    2b62:	1a a5       	ldd	r17, Y+42	; 0x2a
    2b64:	b5 01       	movw	r22, r10
    2b66:	c8 01       	movw	r24, r16
    2b68:	fa dc       	rcall	.-1548   	; 0x255e <ld_clust>
    2b6a:	2b 01       	movw	r4, r22
    2b6c:	3c 01       	movw	r6, r24
    2b6e:	f1 01       	movw	r30, r2
    2b70:	66 83       	std	Z+6, r22	; 0x06
    2b72:	77 83       	std	Z+7, r23	; 0x07
    2b74:	80 87       	std	Z+8, r24	; 0x08
    2b76:	91 87       	std	Z+9, r25	; 0x09
    2b78:	c5 01       	movw	r24, r10
    2b7a:	4c 96       	adiw	r24, 0x1c	; 28
    2b7c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ld_dword>
    2b80:	4b 01       	movw	r8, r22
    2b82:	5c 01       	movw	r10, r24
    2b84:	f1 01       	movw	r30, r2
    2b86:	62 87       	std	Z+10, r22	; 0x0a
    2b88:	73 87       	std	Z+11, r23	; 0x0b
    2b8a:	84 87       	std	Z+12, r24	; 0x0c
    2b8c:	95 87       	std	Z+13, r25	; 0x0d
    2b8e:	11 83       	std	Z+1, r17	; 0x01
    2b90:	00 83       	st	Z, r16
    2b92:	f8 01       	movw	r30, r16
    2b94:	85 81       	ldd	r24, Z+5	; 0x05
    2b96:	96 81       	ldd	r25, Z+6	; 0x06
    2b98:	f1 01       	movw	r30, r2
    2b9a:	93 83       	std	Z+3, r25	; 0x03
    2b9c:	82 83       	std	Z+2, r24	; 0x02
    2b9e:	d6 86       	std	Z+14, r13	; 0x0e
    2ba0:	17 86       	std	Z+15, r1	; 0x0f
    2ba2:	10 8e       	std	Z+24, r1	; 0x18
    2ba4:	11 8e       	std	Z+25, r1	; 0x19
    2ba6:	12 8e       	std	Z+26, r1	; 0x1a
    2ba8:	13 8e       	std	Z+27, r1	; 0x1b
    2baa:	10 8a       	std	Z+16, r1	; 0x10
    2bac:	11 8a       	std	Z+17, r1	; 0x11
    2bae:	12 8a       	std	Z+18, r1	; 0x12
    2bb0:	13 8a       	std	Z+19, r1	; 0x13
    2bb2:	d5 fe       	sbrs	r13, 5
    2bb4:	82 c0       	rjmp	.+260    	; 0x2cba <f_open+0x2cc>
    2bb6:	81 14       	cp	r8, r1
    2bb8:	91 04       	cpc	r9, r1
    2bba:	a1 04       	cpc	r10, r1
    2bbc:	b1 04       	cpc	r11, r1
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <f_open+0x1d4>
    2bc0:	7c c0       	rjmp	.+248    	; 0x2cba <f_open+0x2cc>
    2bc2:	80 8a       	std	Z+16, r8	; 0x10
    2bc4:	91 8a       	std	Z+17, r9	; 0x11
    2bc6:	a2 8a       	std	Z+18, r10	; 0x12
    2bc8:	b3 8a       	std	Z+19, r11	; 0x13
    2bca:	f8 01       	movw	r30, r16
    2bcc:	81 85       	ldd	r24, Z+9	; 0x09
    2bce:	92 85       	ldd	r25, Z+10	; 0x0a
    2bd0:	a0 e0       	ldi	r26, 0x00	; 0
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	6c 01       	movw	r12, r24
    2bd6:	7d 01       	movw	r14, r26
    2bd8:	0b 2e       	mov	r0, r27
    2bda:	b9 e0       	ldi	r27, 0x09	; 9
    2bdc:	cc 0c       	add	r12, r12
    2bde:	dd 1c       	adc	r13, r13
    2be0:	ee 1c       	adc	r14, r14
    2be2:	ff 1c       	adc	r15, r15
    2be4:	ba 95       	dec	r27
    2be6:	d1 f7       	brne	.-12     	; 0x2bdc <f_open+0x1ee>
    2be8:	b0 2d       	mov	r27, r0
    2bea:	c8 14       	cp	r12, r8
    2bec:	d9 04       	cpc	r13, r9
    2bee:	ea 04       	cpc	r14, r10
    2bf0:	fb 04       	cpc	r15, r11
    2bf2:	08 f0       	brcs	.+2      	; 0x2bf6 <f_open+0x208>
    2bf4:	50 c0       	rjmp	.+160    	; 0x2c96 <f_open+0x2a8>
    2bf6:	b3 01       	movw	r22, r6
    2bf8:	a2 01       	movw	r20, r4
    2bfa:	c1 01       	movw	r24, r2
    2bfc:	0e 94 03 0a 	call	0x1406	; 0x1406 <get_fat>
    2c00:	2b 01       	movw	r4, r22
    2c02:	3c 01       	movw	r6, r24
    2c04:	62 30       	cpi	r22, 0x02	; 2
    2c06:	71 05       	cpc	r23, r1
    2c08:	81 05       	cpc	r24, r1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	08 f0       	brcs	.+2      	; 0x2c10 <f_open+0x222>
    2c0e:	78 c0       	rjmp	.+240    	; 0x2d00 <f_open+0x312>
    2c10:	66 c0       	rjmp	.+204    	; 0x2cde <f_open+0x2f0>
    2c12:	b3 01       	movw	r22, r6
    2c14:	a2 01       	movw	r20, r4
    2c16:	89 a5       	ldd	r24, Y+41	; 0x29
    2c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1a:	0e 94 90 06 	call	0xd20	; 0xd20 <clst2sect>
    2c1e:	61 15       	cp	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	81 05       	cpc	r24, r1
    2c24:	91 05       	cpc	r25, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <f_open+0x23c>
    2c28:	46 c0       	rjmp	.+140    	; 0x2cb6 <f_open+0x2c8>
    2c2a:	07 2e       	mov	r0, r23
    2c2c:	79 e0       	ldi	r23, 0x09	; 9
    2c2e:	b6 94       	lsr	r11
    2c30:	a7 94       	ror	r10
    2c32:	97 94       	ror	r9
    2c34:	87 94       	ror	r8
    2c36:	7a 95       	dec	r23
    2c38:	d1 f7       	brne	.-12     	; 0x2c2e <f_open+0x240>
    2c3a:	70 2d       	mov	r23, r0
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	88 0d       	add	r24, r8
    2c42:	99 1d       	adc	r25, r9
    2c44:	aa 1d       	adc	r26, r10
    2c46:	bb 1d       	adc	r27, r11
    2c48:	f1 01       	movw	r30, r2
    2c4a:	80 8f       	std	Z+24, r24	; 0x18
    2c4c:	91 8f       	std	Z+25, r25	; 0x19
    2c4e:	a2 8f       	std	Z+26, r26	; 0x1a
    2c50:	b3 8f       	std	Z+27, r27	; 0x1b
    2c52:	33 c0       	rjmp	.+102    	; 0x2cba <f_open+0x2cc>
    2c54:	f1 01       	movw	r30, r2
    2c56:	11 82       	std	Z+1, r1	; 0x01
    2c58:	10 82       	st	Z, r1
    2c5a:	61 c0       	rjmp	.+194    	; 0x2d1e <f_open+0x330>
    2c5c:	89 e0       	ldi	r24, 0x09	; 9
    2c5e:	5f c0       	rjmp	.+190    	; 0x2d1e <f_open+0x330>
    2c60:	41 2f       	mov	r20, r17
    2c62:	4c 71       	andi	r20, 0x1C	; 28
    2c64:	59 f0       	breq	.+22     	; 0x2c7c <f_open+0x28e>
    2c66:	00 cf       	rjmp	.-512    	; 0x2a68 <f_open+0x7a>
    2c68:	41 2f       	mov	r20, r17
    2c6a:	4c 71       	andi	r20, 0x1C	; 28
    2c6c:	41 f5       	brne	.+80     	; 0x2cbe <f_open+0x2d0>
    2c6e:	86 e0       	ldi	r24, 0x06	; 6
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <f_open+0x28e>
    2c72:	81 2f       	mov	r24, r17
    2c74:	8c 71       	andi	r24, 0x1C	; 28
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <f_open+0x28c>
    2c78:	03 cf       	rjmp	.-506    	; 0x2a80 <f_open+0x92>
    2c7a:	26 c0       	rjmp	.+76     	; 0x2cc8 <f_open+0x2da>
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	ea cf       	rjmp	.-44     	; 0x2c54 <f_open+0x266>
    2c80:	6d cf       	rjmp	.-294    	; 0x2b5c <f_open+0x16e>
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	9f ef       	ldi	r25, 0xFF	; 255
    2c86:	dc 01       	movw	r26, r24
    2c88:	f1 01       	movw	r30, r2
    2c8a:	84 8b       	std	Z+20, r24	; 0x14
    2c8c:	95 8b       	std	Z+21, r25	; 0x15
    2c8e:	a6 8b       	std	Z+22, r26	; 0x16
    2c90:	b7 8b       	std	Z+23, r27	; 0x17
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	df cf       	rjmp	.-66     	; 0x2c54 <f_open+0x266>
    2c96:	f1 01       	movw	r30, r2
    2c98:	44 8a       	std	Z+20, r4	; 0x14
    2c9a:	55 8a       	std	Z+21, r5	; 0x15
    2c9c:	66 8a       	std	Z+22, r6	; 0x16
    2c9e:	77 8a       	std	Z+23, r7	; 0x17
    2ca0:	d5 01       	movw	r26, r10
    2ca2:	c4 01       	movw	r24, r8
    2ca4:	91 70       	andi	r25, 0x01	; 1
    2ca6:	aa 27       	eor	r26, r26
    2ca8:	bb 27       	eor	r27, r27
    2caa:	89 2b       	or	r24, r25
    2cac:	8a 2b       	or	r24, r26
    2cae:	8b 2b       	or	r24, r27
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <f_open+0x2c6>
    2cb2:	af cf       	rjmp	.-162    	; 0x2c12 <f_open+0x224>
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <f_open+0x2cc>
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	cd cf       	rjmp	.-102    	; 0x2c54 <f_open+0x266>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	30 c0       	rjmp	.+96     	; 0x2d1e <f_open+0x330>
    2cbe:	86 e0       	ldi	r24, 0x06	; 6
    2cc0:	fd 2d       	mov	r31, r13
    2cc2:	f8 60       	ori	r31, 0x08	; 8
    2cc4:	df 2e       	mov	r13, r31
    2cc6:	da cf       	rjmp	.-76     	; 0x2c7c <f_open+0x28e>
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	84 fd       	sbrc	r24, 4
    2ccc:	26 c0       	rjmp	.+76     	; 0x2d1a <f_open+0x32c>
    2cce:	2e cf       	rjmp	.-420    	; 0x2b2c <f_open+0x13e>
    2cd0:	f1 01       	movw	r30, r2
    2cd2:	44 8a       	std	Z+20, r4	; 0x14
    2cd4:	55 8a       	std	Z+21, r5	; 0x15
    2cd6:	66 8a       	std	Z+22, r6	; 0x16
    2cd8:	77 8a       	std	Z+23, r7	; 0x17
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	bb cf       	rjmp	.-138    	; 0x2c54 <f_open+0x266>
    2cde:	6f 3f       	cpi	r22, 0xFF	; 255
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	69 f2       	breq	.-102    	; 0x2c82 <f_open+0x294>
    2ce8:	f3 cf       	rjmp	.-26     	; 0x2cd0 <f_open+0x2e2>
    2cea:	8c 18       	sub	r8, r12
    2cec:	9d 08       	sbc	r9, r13
    2cee:	ae 08       	sbc	r10, r14
    2cf0:	bf 08       	sbc	r11, r15
    2cf2:	c8 14       	cp	r12, r8
    2cf4:	d9 04       	cpc	r13, r9
    2cf6:	ea 04       	cpc	r14, r10
    2cf8:	fb 04       	cpc	r15, r11
    2cfa:	08 f4       	brcc	.+2      	; 0x2cfe <f_open+0x310>
    2cfc:	7c cf       	rjmp	.-264    	; 0x2bf6 <f_open+0x208>
    2cfe:	cb cf       	rjmp	.-106    	; 0x2c96 <f_open+0x2a8>
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	48 16       	cp	r4, r24
    2d04:	58 06       	cpc	r5, r24
    2d06:	68 06       	cpc	r6, r24
    2d08:	78 06       	cpc	r7, r24
    2d0a:	79 f7       	brne	.-34     	; 0x2cea <f_open+0x2fc>
    2d0c:	ba cf       	rjmp	.-140    	; 0x2c82 <f_open+0x294>
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	a1 cf       	rjmp	.-190    	; 0x2c54 <f_open+0x266>
    2d12:	88 e0       	ldi	r24, 0x08	; 8
    2d14:	9f cf       	rjmp	.-194    	; 0x2c54 <f_open+0x266>
    2d16:	87 e0       	ldi	r24, 0x07	; 7
    2d18:	9d cf       	rjmp	.-198    	; 0x2c54 <f_open+0x266>
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	9b cf       	rjmp	.-202    	; 0x2c54 <f_open+0x266>
    2d1e:	ac 96       	adiw	r28, 0x2c	; 44
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	df 90       	pop	r13
    2d38:	cf 90       	pop	r12
    2d3a:	bf 90       	pop	r11
    2d3c:	af 90       	pop	r10
    2d3e:	9f 90       	pop	r9
    2d40:	8f 90       	pop	r8
    2d42:	7f 90       	pop	r7
    2d44:	6f 90       	pop	r6
    2d46:	5f 90       	pop	r5
    2d48:	4f 90       	pop	r4
    2d4a:	3f 90       	pop	r3
    2d4c:	2f 90       	pop	r2
    2d4e:	08 95       	ret

00002d50 <f_read>:
    2d50:	2f 92       	push	r2
    2d52:	3f 92       	push	r3
    2d54:	4f 92       	push	r4
    2d56:	5f 92       	push	r5
    2d58:	6f 92       	push	r6
    2d5a:	7f 92       	push	r7
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <f_read+0x26>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <f_read+0x28>
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <f_read+0x2a>
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	7c 01       	movw	r14, r24
    2d80:	3b 01       	movw	r6, r22
    2d82:	5a 01       	movw	r10, r20
    2d84:	49 01       	movw	r8, r18
    2d86:	f9 01       	movw	r30, r18
    2d88:	11 82       	std	Z+1, r1	; 0x01
    2d8a:	10 82       	st	Z, r1
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	fe 82       	std	Y+6, r15	; 0x06
    2d90:	be 01       	movw	r22, r28
    2d92:	6f 5f       	subi	r22, 0xFF	; 255
    2d94:	7f 4f       	sbci	r23, 0xFF	; 255
    2d96:	0e 94 4a 07 	call	0xe94	; 0xe94 <validate>
    2d9a:	81 11       	cpse	r24, r1
    2d9c:	23 c1       	rjmp	.+582    	; 0x2fe4 <f_read+0x294>
    2d9e:	f7 01       	movw	r30, r14
    2da0:	87 85       	ldd	r24, Z+15	; 0x0f
    2da2:	81 11       	cpse	r24, r1
    2da4:	1f c1       	rjmp	.+574    	; 0x2fe4 <f_read+0x294>
    2da6:	86 85       	ldd	r24, Z+14	; 0x0e
    2da8:	80 ff       	sbrs	r24, 0
    2daa:	19 c1       	rjmp	.+562    	; 0x2fde <f_read+0x28e>
    2dac:	82 85       	ldd	r24, Z+10	; 0x0a
    2dae:	93 85       	ldd	r25, Z+11	; 0x0b
    2db0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2db2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2db4:	40 89       	ldd	r20, Z+16	; 0x10
    2db6:	51 89       	ldd	r21, Z+17	; 0x11
    2db8:	62 89       	ldd	r22, Z+18	; 0x12
    2dba:	73 89       	ldd	r23, Z+19	; 0x13
    2dbc:	84 1b       	sub	r24, r20
    2dbe:	95 0b       	sbc	r25, r21
    2dc0:	a6 0b       	sbc	r26, r22
    2dc2:	b7 0b       	sbc	r27, r23
    2dc4:	a5 01       	movw	r20, r10
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	84 17       	cp	r24, r20
    2dcc:	95 07       	cpc	r25, r21
    2dce:	a6 07       	cpc	r26, r22
    2dd0:	b7 07       	cpc	r27, r23
    2dd2:	08 f4       	brcc	.+2      	; 0x2dd6 <f_read+0x86>
    2dd4:	5c 01       	movw	r10, r24
    2dd6:	a1 14       	cp	r10, r1
    2dd8:	b1 04       	cpc	r11, r1
    2dda:	09 f4       	brne	.+2      	; 0x2dde <f_read+0x8e>
    2ddc:	02 c1       	rjmp	.+516    	; 0x2fe2 <f_read+0x292>
    2dde:	f7 01       	movw	r30, r14
    2de0:	80 89       	ldd	r24, Z+16	; 0x10
    2de2:	91 89       	ldd	r25, Z+17	; 0x11
    2de4:	a2 89       	ldd	r26, Z+18	; 0x12
    2de6:	b3 89       	ldd	r27, Z+19	; 0x13
    2de8:	ac 01       	movw	r20, r24
    2dea:	bd 01       	movw	r22, r26
    2dec:	51 70       	andi	r21, 0x01	; 1
    2dee:	66 27       	eor	r22, r22
    2df0:	77 27       	eor	r23, r23
    2df2:	45 2b       	or	r20, r21
    2df4:	46 2b       	or	r20, r22
    2df6:	47 2b       	or	r20, r23
    2df8:	09 f0       	breq	.+2      	; 0x2dfc <f_read+0xac>
    2dfa:	a9 c0       	rjmp	.+338    	; 0x2f4e <f_read+0x1fe>
    2dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    2e00:	01 85       	ldd	r16, Z+9	; 0x09
    2e02:	12 85       	ldd	r17, Z+10	; 0x0a
    2e04:	01 50       	subi	r16, 0x01	; 1
    2e06:	11 09       	sbc	r17, r1
    2e08:	ac 01       	movw	r20, r24
    2e0a:	bd 01       	movw	r22, r26
    2e0c:	03 2e       	mov	r0, r19
    2e0e:	39 e0       	ldi	r19, 0x09	; 9
    2e10:	76 95       	lsr	r23
    2e12:	67 95       	ror	r22
    2e14:	57 95       	ror	r21
    2e16:	47 95       	ror	r20
    2e18:	3a 95       	dec	r19
    2e1a:	d1 f7       	brne	.-12     	; 0x2e10 <f_read+0xc0>
    2e1c:	30 2d       	mov	r19, r0
    2e1e:	04 23       	and	r16, r20
    2e20:	15 23       	and	r17, r21
    2e22:	01 15       	cp	r16, r1
    2e24:	11 05       	cpc	r17, r1
    2e26:	59 f5       	brne	.+86     	; 0x2e7e <f_read+0x12e>
    2e28:	89 2b       	or	r24, r25
    2e2a:	8a 2b       	or	r24, r26
    2e2c:	8b 2b       	or	r24, r27
    2e2e:	31 f4       	brne	.+12     	; 0x2e3c <f_read+0xec>
    2e30:	f7 01       	movw	r30, r14
    2e32:	66 81       	ldd	r22, Z+6	; 0x06
    2e34:	77 81       	ldd	r23, Z+7	; 0x07
    2e36:	80 85       	ldd	r24, Z+8	; 0x08
    2e38:	91 85       	ldd	r25, Z+9	; 0x09
    2e3a:	09 c0       	rjmp	.+18     	; 0x2e4e <f_read+0xfe>
    2e3c:	f7 01       	movw	r30, r14
    2e3e:	44 89       	ldd	r20, Z+20	; 0x14
    2e40:	55 89       	ldd	r21, Z+21	; 0x15
    2e42:	66 89       	ldd	r22, Z+22	; 0x16
    2e44:	77 89       	ldd	r23, Z+23	; 0x17
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	0e 94 03 0a 	call	0x1406	; 0x1406 <get_fat>
    2e4e:	62 30       	cpi	r22, 0x02	; 2
    2e50:	71 05       	cpc	r23, r1
    2e52:	81 05       	cpc	r24, r1
    2e54:	91 05       	cpc	r25, r1
    2e56:	20 f4       	brcc	.+8      	; 0x2e60 <f_read+0x110>
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	f7 01       	movw	r30, r14
    2e5c:	87 87       	std	Z+15, r24	; 0x0f
    2e5e:	c2 c0       	rjmp	.+388    	; 0x2fe4 <f_read+0x294>
    2e60:	6f 3f       	cpi	r22, 0xFF	; 255
    2e62:	ff ef       	ldi	r31, 0xFF	; 255
    2e64:	7f 07       	cpc	r23, r31
    2e66:	8f 07       	cpc	r24, r31
    2e68:	9f 07       	cpc	r25, r31
    2e6a:	21 f4       	brne	.+8      	; 0x2e74 <f_read+0x124>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	f7 01       	movw	r30, r14
    2e70:	87 87       	std	Z+15, r24	; 0x0f
    2e72:	b8 c0       	rjmp	.+368    	; 0x2fe4 <f_read+0x294>
    2e74:	f7 01       	movw	r30, r14
    2e76:	64 8b       	std	Z+20, r22	; 0x14
    2e78:	75 8b       	std	Z+21, r23	; 0x15
    2e7a:	86 8b       	std	Z+22, r24	; 0x16
    2e7c:	97 8b       	std	Z+23, r25	; 0x17
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	f7 01       	movw	r30, r14
    2e88:	44 89       	ldd	r20, Z+20	; 0x14
    2e8a:	55 89       	ldd	r21, Z+21	; 0x15
    2e8c:	66 89       	ldd	r22, Z+22	; 0x16
    2e8e:	77 89       	ldd	r23, Z+23	; 0x17
    2e90:	0e 94 90 06 	call	0xd20	; 0xd20 <clst2sect>
    2e94:	61 15       	cp	r22, r1
    2e96:	71 05       	cpc	r23, r1
    2e98:	81 05       	cpc	r24, r1
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	21 f4       	brne	.+8      	; 0x2ea6 <f_read+0x156>
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	87 87       	std	Z+15, r24	; 0x0f
    2ea4:	9f c0       	rjmp	.+318    	; 0x2fe4 <f_read+0x294>
    2ea6:	1b 01       	movw	r2, r22
    2ea8:	2c 01       	movw	r4, r24
    2eaa:	20 0e       	add	r2, r16
    2eac:	31 1e       	adc	r3, r17
    2eae:	41 1c       	adc	r4, r1
    2eb0:	51 1c       	adc	r5, r1
    2eb2:	65 01       	movw	r12, r10
    2eb4:	cd 2c       	mov	r12, r13
    2eb6:	dd 24       	eor	r13, r13
    2eb8:	c6 94       	lsr	r12
    2eba:	c1 14       	cp	r12, r1
    2ebc:	d1 04       	cpc	r13, r1
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <f_read+0x172>
    2ec0:	41 c0       	rjmp	.+130    	; 0x2f44 <f_read+0x1f4>
    2ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec6:	81 85       	ldd	r24, Z+9	; 0x09
    2ec8:	92 85       	ldd	r25, Z+10	; 0x0a
    2eca:	98 01       	movw	r18, r16
    2ecc:	2c 0d       	add	r18, r12
    2ece:	3d 1d       	adc	r19, r13
    2ed0:	82 17       	cp	r24, r18
    2ed2:	93 07       	cpc	r25, r19
    2ed4:	18 f4       	brcc	.+6      	; 0x2edc <f_read+0x18c>
    2ed6:	6c 01       	movw	r12, r24
    2ed8:	c0 1a       	sub	r12, r16
    2eda:	d1 0a       	sbc	r13, r17
    2edc:	86 01       	movw	r16, r12
    2ede:	a2 01       	movw	r20, r4
    2ee0:	91 01       	movw	r18, r2
    2ee2:	b3 01       	movw	r22, r6
    2ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee8:	81 81       	ldd	r24, Z+1	; 0x01
    2eea:	0e 94 15 06 	call	0xc2a	; 0xc2a <disk_read>
    2eee:	88 23       	and	r24, r24
    2ef0:	21 f0       	breq	.+8      	; 0x2efa <f_read+0x1aa>
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	87 87       	std	Z+15, r24	; 0x0f
    2ef8:	75 c0       	rjmp	.+234    	; 0x2fe4 <f_read+0x294>
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	83 81       	ldd	r24, Z+3	; 0x03
    2f00:	88 23       	and	r24, r24
    2f02:	e1 f0       	breq	.+56     	; 0x2f3c <f_read+0x1ec>
    2f04:	87 a5       	ldd	r24, Z+47	; 0x2f
    2f06:	90 a9       	ldd	r25, Z+48	; 0x30
    2f08:	a1 a9       	ldd	r26, Z+49	; 0x31
    2f0a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2f0c:	82 19       	sub	r24, r2
    2f0e:	93 09       	sbc	r25, r3
    2f10:	a4 09       	sbc	r26, r4
    2f12:	b5 09       	sbc	r27, r5
    2f14:	a6 01       	movw	r20, r12
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	84 17       	cp	r24, r20
    2f1c:	95 07       	cpc	r25, r21
    2f1e:	a6 07       	cpc	r26, r22
    2f20:	b7 07       	cpc	r27, r23
    2f22:	60 f4       	brcc	.+24     	; 0x2f3c <f_read+0x1ec>
    2f24:	bf 01       	movw	r22, r30
    2f26:	6d 5c       	subi	r22, 0xCD	; 205
    2f28:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2a:	98 2f       	mov	r25, r24
    2f2c:	88 27       	eor	r24, r24
    2f2e:	99 0f       	add	r25, r25
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	52 e0       	ldi	r21, 0x02	; 2
    2f34:	86 0d       	add	r24, r6
    2f36:	97 1d       	adc	r25, r7
    2f38:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
    2f3c:	dc 2c       	mov	r13, r12
    2f3e:	cc 24       	eor	r12, r12
    2f40:	dd 0c       	add	r13, r13
    2f42:	2f c0       	rjmp	.+94     	; 0x2fa2 <f_read+0x252>
    2f44:	f7 01       	movw	r30, r14
    2f46:	20 8e       	std	Z+24, r2	; 0x18
    2f48:	31 8e       	std	Z+25, r3	; 0x19
    2f4a:	42 8e       	std	Z+26, r4	; 0x1a
    2f4c:	53 8e       	std	Z+27, r5	; 0x1b
    2f4e:	f7 01       	movw	r30, r14
    2f50:	80 89       	ldd	r24, Z+16	; 0x10
    2f52:	91 89       	ldd	r25, Z+17	; 0x11
    2f54:	91 70       	andi	r25, 0x01	; 1
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	32 e0       	ldi	r19, 0x02	; 2
    2f5a:	69 01       	movw	r12, r18
    2f5c:	c8 1a       	sub	r12, r24
    2f5e:	d9 0a       	sbc	r13, r25
    2f60:	ac 14       	cp	r10, r12
    2f62:	bd 04       	cpc	r11, r13
    2f64:	08 f4       	brcc	.+2      	; 0x2f68 <f_read+0x218>
    2f66:	65 01       	movw	r12, r10
    2f68:	f7 01       	movw	r30, r14
    2f6a:	40 8d       	ldd	r20, Z+24	; 0x18
    2f6c:	51 8d       	ldd	r21, Z+25	; 0x19
    2f6e:	62 8d       	ldd	r22, Z+26	; 0x1a
    2f70:	73 8d       	ldd	r23, Z+27	; 0x1b
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    2f7a:	88 23       	and	r24, r24
    2f7c:	21 f0       	breq	.+8      	; 0x2f86 <f_read+0x236>
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	f7 01       	movw	r30, r14
    2f82:	87 87       	std	Z+15, r24	; 0x0f
    2f84:	2f c0       	rjmp	.+94     	; 0x2fe4 <f_read+0x294>
    2f86:	69 81       	ldd	r22, Y+1	; 0x01
    2f88:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8a:	6d 5c       	subi	r22, 0xCD	; 205
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	f7 01       	movw	r30, r14
    2f90:	80 89       	ldd	r24, Z+16	; 0x10
    2f92:	91 89       	ldd	r25, Z+17	; 0x11
    2f94:	91 70       	andi	r25, 0x01	; 1
    2f96:	68 0f       	add	r22, r24
    2f98:	79 1f       	adc	r23, r25
    2f9a:	a6 01       	movw	r20, r12
    2f9c:	c3 01       	movw	r24, r6
    2f9e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
    2fa2:	ac 18       	sub	r10, r12
    2fa4:	bd 08       	sbc	r11, r13
    2fa6:	f4 01       	movw	r30, r8
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	8c 0d       	add	r24, r12
    2fae:	9d 1d       	adc	r25, r13
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    2fb4:	6c 0c       	add	r6, r12
    2fb6:	7d 1c       	adc	r7, r13
    2fb8:	f7 01       	movw	r30, r14
    2fba:	80 89       	ldd	r24, Z+16	; 0x10
    2fbc:	91 89       	ldd	r25, Z+17	; 0x11
    2fbe:	a2 89       	ldd	r26, Z+18	; 0x12
    2fc0:	b3 89       	ldd	r27, Z+19	; 0x13
    2fc2:	8c 0d       	add	r24, r12
    2fc4:	9d 1d       	adc	r25, r13
    2fc6:	a1 1d       	adc	r26, r1
    2fc8:	b1 1d       	adc	r27, r1
    2fca:	80 8b       	std	Z+16, r24	; 0x10
    2fcc:	91 8b       	std	Z+17, r25	; 0x11
    2fce:	a2 8b       	std	Z+18, r26	; 0x12
    2fd0:	b3 8b       	std	Z+19, r27	; 0x13
    2fd2:	a1 14       	cp	r10, r1
    2fd4:	b1 04       	cpc	r11, r1
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <f_read+0x28a>
    2fd8:	02 cf       	rjmp	.-508    	; 0x2dde <f_read+0x8e>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <f_read+0x294>
    2fde:	87 e0       	ldi	r24, 0x07	; 7
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <f_read+0x294>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	26 96       	adiw	r28, 0x06	; 6
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	ff 90       	pop	r15
    2ffa:	ef 90       	pop	r14
    2ffc:	df 90       	pop	r13
    2ffe:	cf 90       	pop	r12
    3000:	bf 90       	pop	r11
    3002:	af 90       	pop	r10
    3004:	9f 90       	pop	r9
    3006:	8f 90       	pop	r8
    3008:	7f 90       	pop	r7
    300a:	6f 90       	pop	r6
    300c:	5f 90       	pop	r5
    300e:	4f 90       	pop	r4
    3010:	3f 90       	pop	r3
    3012:	2f 90       	pop	r2
    3014:	08 95       	ret

00003016 <f_write>:
    3016:	2f 92       	push	r2
    3018:	3f 92       	push	r3
    301a:	4f 92       	push	r4
    301c:	5f 92       	push	r5
    301e:	6f 92       	push	r6
    3020:	7f 92       	push	r7
    3022:	8f 92       	push	r8
    3024:	9f 92       	push	r9
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	00 d0       	rcall	.+0      	; 0x303c <f_write+0x26>
    303c:	00 d0       	rcall	.+0      	; 0x303e <f_write+0x28>
    303e:	00 d0       	rcall	.+0      	; 0x3040 <f_write+0x2a>
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	7c 01       	movw	r14, r24
    3046:	3b 01       	movw	r6, r22
    3048:	5a 01       	movw	r10, r20
    304a:	49 01       	movw	r8, r18
    304c:	f9 01       	movw	r30, r18
    304e:	11 82       	std	Z+1, r1	; 0x01
    3050:	10 82       	st	Z, r1
    3052:	8d 83       	std	Y+5, r24	; 0x05
    3054:	fe 82       	std	Y+6, r15	; 0x06
    3056:	be 01       	movw	r22, r28
    3058:	6f 5f       	subi	r22, 0xFF	; 255
    305a:	7f 4f       	sbci	r23, 0xFF	; 255
    305c:	0e 94 4a 07 	call	0xe94	; 0xe94 <validate>
    3060:	81 11       	cpse	r24, r1
    3062:	8d c1       	rjmp	.+794    	; 0x337e <f_write+0x368>
    3064:	f7 01       	movw	r30, r14
    3066:	87 85       	ldd	r24, Z+15	; 0x0f
    3068:	81 11       	cpse	r24, r1
    306a:	89 c1       	rjmp	.+786    	; 0x337e <f_write+0x368>
    306c:	86 85       	ldd	r24, Z+14	; 0x0e
    306e:	81 ff       	sbrs	r24, 1
    3070:	85 c1       	rjmp	.+778    	; 0x337c <f_write+0x366>
    3072:	80 89       	ldd	r24, Z+16	; 0x10
    3074:	91 89       	ldd	r25, Z+17	; 0x11
    3076:	a2 89       	ldd	r26, Z+18	; 0x12
    3078:	b3 89       	ldd	r27, Z+19	; 0x13
    307a:	ac 01       	movw	r20, r24
    307c:	bd 01       	movw	r22, r26
    307e:	4a 0d       	add	r20, r10
    3080:	5b 1d       	adc	r21, r11
    3082:	61 1d       	adc	r22, r1
    3084:	71 1d       	adc	r23, r1
    3086:	48 17       	cp	r20, r24
    3088:	59 07       	cpc	r21, r25
    308a:	6a 07       	cpc	r22, r26
    308c:	7b 07       	cpc	r23, r27
    308e:	18 f4       	brcc	.+6      	; 0x3096 <f_write+0x80>
    3090:	5c 01       	movw	r10, r24
    3092:	a0 94       	com	r10
    3094:	b0 94       	com	r11
    3096:	a1 14       	cp	r10, r1
    3098:	b1 04       	cpc	r11, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <f_write+0x88>
    309c:	69 c1       	rjmp	.+722    	; 0x3370 <f_write+0x35a>
    309e:	f7 01       	movw	r30, r14
    30a0:	80 89       	ldd	r24, Z+16	; 0x10
    30a2:	91 89       	ldd	r25, Z+17	; 0x11
    30a4:	a2 89       	ldd	r26, Z+18	; 0x12
    30a6:	b3 89       	ldd	r27, Z+19	; 0x13
    30a8:	ac 01       	movw	r20, r24
    30aa:	bd 01       	movw	r22, r26
    30ac:	51 70       	andi	r21, 0x01	; 1
    30ae:	66 27       	eor	r22, r22
    30b0:	77 27       	eor	r23, r23
    30b2:	45 2b       	or	r20, r21
    30b4:	46 2b       	or	r20, r22
    30b6:	47 2b       	or	r20, r23
    30b8:	09 f0       	breq	.+2      	; 0x30bc <f_write+0xa6>
    30ba:	00 c1       	rjmp	.+512    	; 0x32bc <f_write+0x2a6>
    30bc:	e9 81       	ldd	r30, Y+1	; 0x01
    30be:	fa 81       	ldd	r31, Y+2	; 0x02
    30c0:	01 85       	ldd	r16, Z+9	; 0x09
    30c2:	12 85       	ldd	r17, Z+10	; 0x0a
    30c4:	01 50       	subi	r16, 0x01	; 1
    30c6:	11 09       	sbc	r17, r1
    30c8:	ac 01       	movw	r20, r24
    30ca:	bd 01       	movw	r22, r26
    30cc:	03 2e       	mov	r0, r19
    30ce:	39 e0       	ldi	r19, 0x09	; 9
    30d0:	76 95       	lsr	r23
    30d2:	67 95       	ror	r22
    30d4:	57 95       	ror	r21
    30d6:	47 95       	ror	r20
    30d8:	3a 95       	dec	r19
    30da:	d1 f7       	brne	.-12     	; 0x30d0 <f_write+0xba>
    30dc:	30 2d       	mov	r19, r0
    30de:	04 23       	and	r16, r20
    30e0:	15 23       	and	r17, r21
    30e2:	01 15       	cp	r16, r1
    30e4:	11 05       	cpc	r17, r1
    30e6:	09 f0       	breq	.+2      	; 0x30ea <f_write+0xd4>
    30e8:	49 c0       	rjmp	.+146    	; 0x317c <f_write+0x166>
    30ea:	89 2b       	or	r24, r25
    30ec:	8a 2b       	or	r24, r26
    30ee:	8b 2b       	or	r24, r27
    30f0:	91 f4       	brne	.+36     	; 0x3116 <f_write+0x100>
    30f2:	f7 01       	movw	r30, r14
    30f4:	66 81       	ldd	r22, Z+6	; 0x06
    30f6:	77 81       	ldd	r23, Z+7	; 0x07
    30f8:	80 85       	ldd	r24, Z+8	; 0x08
    30fa:	91 85       	ldd	r25, Z+9	; 0x09
    30fc:	61 15       	cp	r22, r1
    30fe:	71 05       	cpc	r23, r1
    3100:	81 05       	cpc	r24, r1
    3102:	91 05       	cpc	r25, r1
    3104:	b9 f4       	brne	.+46     	; 0x3134 <f_write+0x11e>
    3106:	40 e0       	ldi	r20, 0x00	; 0
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	ba 01       	movw	r22, r20
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	0e 94 c6 0b 	call	0x178c	; 0x178c <create_chain>
    3114:	09 c0       	rjmp	.+18     	; 0x3128 <f_write+0x112>
    3116:	f7 01       	movw	r30, r14
    3118:	44 89       	ldd	r20, Z+20	; 0x14
    311a:	55 89       	ldd	r21, Z+21	; 0x15
    311c:	66 89       	ldd	r22, Z+22	; 0x16
    311e:	77 89       	ldd	r23, Z+23	; 0x17
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	0e 94 c6 0b 	call	0x178c	; 0x178c <create_chain>
    3128:	61 15       	cp	r22, r1
    312a:	71 05       	cpc	r23, r1
    312c:	81 05       	cpc	r24, r1
    312e:	91 05       	cpc	r25, r1
    3130:	09 f4       	brne	.+2      	; 0x3134 <f_write+0x11e>
    3132:	1e c1       	rjmp	.+572    	; 0x3370 <f_write+0x35a>
    3134:	61 30       	cpi	r22, 0x01	; 1
    3136:	71 05       	cpc	r23, r1
    3138:	81 05       	cpc	r24, r1
    313a:	91 05       	cpc	r25, r1
    313c:	21 f4       	brne	.+8      	; 0x3146 <f_write+0x130>
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	f7 01       	movw	r30, r14
    3142:	87 87       	std	Z+15, r24	; 0x0f
    3144:	1c c1       	rjmp	.+568    	; 0x337e <f_write+0x368>
    3146:	6f 3f       	cpi	r22, 0xFF	; 255
    3148:	ff ef       	ldi	r31, 0xFF	; 255
    314a:	7f 07       	cpc	r23, r31
    314c:	8f 07       	cpc	r24, r31
    314e:	9f 07       	cpc	r25, r31
    3150:	21 f4       	brne	.+8      	; 0x315a <f_write+0x144>
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	f7 01       	movw	r30, r14
    3156:	87 87       	std	Z+15, r24	; 0x0f
    3158:	12 c1       	rjmp	.+548    	; 0x337e <f_write+0x368>
    315a:	f7 01       	movw	r30, r14
    315c:	64 8b       	std	Z+20, r22	; 0x14
    315e:	75 8b       	std	Z+21, r23	; 0x15
    3160:	86 8b       	std	Z+22, r24	; 0x16
    3162:	97 8b       	std	Z+23, r25	; 0x17
    3164:	26 81       	ldd	r18, Z+6	; 0x06
    3166:	37 81       	ldd	r19, Z+7	; 0x07
    3168:	40 85       	ldd	r20, Z+8	; 0x08
    316a:	51 85       	ldd	r21, Z+9	; 0x09
    316c:	23 2b       	or	r18, r19
    316e:	24 2b       	or	r18, r20
    3170:	25 2b       	or	r18, r21
    3172:	21 f4       	brne	.+8      	; 0x317c <f_write+0x166>
    3174:	66 83       	std	Z+6, r22	; 0x06
    3176:	77 83       	std	Z+7, r23	; 0x07
    3178:	80 87       	std	Z+8, r24	; 0x08
    317a:	91 87       	std	Z+9, r25	; 0x09
    317c:	29 81       	ldd	r18, Y+1	; 0x01
    317e:	3a 81       	ldd	r19, Y+2	; 0x02
    3180:	f9 01       	movw	r30, r18
    3182:	47 a5       	ldd	r20, Z+47	; 0x2f
    3184:	50 a9       	ldd	r21, Z+48	; 0x30
    3186:	61 a9       	ldd	r22, Z+49	; 0x31
    3188:	72 a9       	ldd	r23, Z+50	; 0x32
    318a:	f7 01       	movw	r30, r14
    318c:	80 8d       	ldd	r24, Z+24	; 0x18
    318e:	91 8d       	ldd	r25, Z+25	; 0x19
    3190:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3192:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3194:	48 17       	cp	r20, r24
    3196:	59 07       	cpc	r21, r25
    3198:	6a 07       	cpc	r22, r26
    319a:	7b 07       	cpc	r23, r27
    319c:	49 f4       	brne	.+18     	; 0x31b0 <f_write+0x19a>
    319e:	c9 01       	movw	r24, r18
    31a0:	0e 94 76 07 	call	0xeec	; 0xeec <sync_window>
    31a4:	88 23       	and	r24, r24
    31a6:	21 f0       	breq	.+8      	; 0x31b0 <f_write+0x19a>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	f7 01       	movw	r30, r14
    31ac:	87 87       	std	Z+15, r24	; 0x0f
    31ae:	e7 c0       	rjmp	.+462    	; 0x337e <f_write+0x368>
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
    31b8:	f7 01       	movw	r30, r14
    31ba:	44 89       	ldd	r20, Z+20	; 0x14
    31bc:	55 89       	ldd	r21, Z+21	; 0x15
    31be:	66 89       	ldd	r22, Z+22	; 0x16
    31c0:	77 89       	ldd	r23, Z+23	; 0x17
    31c2:	0e 94 90 06 	call	0xd20	; 0xd20 <clst2sect>
    31c6:	61 15       	cp	r22, r1
    31c8:	71 05       	cpc	r23, r1
    31ca:	81 05       	cpc	r24, r1
    31cc:	91 05       	cpc	r25, r1
    31ce:	21 f4       	brne	.+8      	; 0x31d8 <f_write+0x1c2>
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	f7 01       	movw	r30, r14
    31d4:	87 87       	std	Z+15, r24	; 0x0f
    31d6:	d3 c0       	rjmp	.+422    	; 0x337e <f_write+0x368>
    31d8:	1b 01       	movw	r2, r22
    31da:	2c 01       	movw	r4, r24
    31dc:	20 0e       	add	r2, r16
    31de:	31 1e       	adc	r3, r17
    31e0:	41 1c       	adc	r4, r1
    31e2:	51 1c       	adc	r5, r1
    31e4:	65 01       	movw	r12, r10
    31e6:	cd 2c       	mov	r12, r13
    31e8:	dd 24       	eor	r13, r13
    31ea:	c6 94       	lsr	r12
    31ec:	c1 14       	cp	r12, r1
    31ee:	d1 04       	cpc	r13, r1
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <f_write+0x1de>
    31f2:	41 c0       	rjmp	.+130    	; 0x3276 <f_write+0x260>
    31f4:	eb 81       	ldd	r30, Y+3	; 0x03
    31f6:	fc 81       	ldd	r31, Y+4	; 0x04
    31f8:	81 85       	ldd	r24, Z+9	; 0x09
    31fa:	92 85       	ldd	r25, Z+10	; 0x0a
    31fc:	98 01       	movw	r18, r16
    31fe:	2c 0d       	add	r18, r12
    3200:	3d 1d       	adc	r19, r13
    3202:	82 17       	cp	r24, r18
    3204:	93 07       	cpc	r25, r19
    3206:	18 f4       	brcc	.+6      	; 0x320e <f_write+0x1f8>
    3208:	6c 01       	movw	r12, r24
    320a:	c0 1a       	sub	r12, r16
    320c:	d1 0a       	sbc	r13, r17
    320e:	86 01       	movw	r16, r12
    3210:	a2 01       	movw	r20, r4
    3212:	91 01       	movw	r18, r2
    3214:	b3 01       	movw	r22, r6
    3216:	eb 81       	ldd	r30, Y+3	; 0x03
    3218:	fc 81       	ldd	r31, Y+4	; 0x04
    321a:	81 81       	ldd	r24, Z+1	; 0x01
    321c:	0e 94 25 06 	call	0xc4a	; 0xc4a <disk_write>
    3220:	88 23       	and	r24, r24
    3222:	21 f0       	breq	.+8      	; 0x322c <f_write+0x216>
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	f7 01       	movw	r30, r14
    3228:	87 87       	std	Z+15, r24	; 0x0f
    322a:	a9 c0       	rjmp	.+338    	; 0x337e <f_write+0x368>
    322c:	e9 81       	ldd	r30, Y+1	; 0x01
    322e:	fa 81       	ldd	r31, Y+2	; 0x02
    3230:	47 a5       	ldd	r20, Z+47	; 0x2f
    3232:	50 a9       	ldd	r21, Z+48	; 0x30
    3234:	61 a9       	ldd	r22, Z+49	; 0x31
    3236:	72 a9       	ldd	r23, Z+50	; 0x32
    3238:	42 19       	sub	r20, r2
    323a:	53 09       	sbc	r21, r3
    323c:	64 09       	sbc	r22, r4
    323e:	75 09       	sbc	r23, r5
    3240:	c6 01       	movw	r24, r12
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	48 17       	cp	r20, r24
    3248:	59 07       	cpc	r21, r25
    324a:	6a 07       	cpc	r22, r26
    324c:	7b 07       	cpc	r23, r27
    324e:	78 f4       	brcc	.+30     	; 0x326e <f_write+0x258>
    3250:	54 2f       	mov	r21, r20
    3252:	44 27       	eor	r20, r20
    3254:	55 0f       	add	r21, r21
    3256:	b3 01       	movw	r22, r6
    3258:	64 0f       	add	r22, r20
    325a:	75 1f       	adc	r23, r21
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	52 e0       	ldi	r21, 0x02	; 2
    3260:	cf 01       	movw	r24, r30
    3262:	c3 96       	adiw	r24, 0x33	; 51
    3264:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
    3268:	e9 81       	ldd	r30, Y+1	; 0x01
    326a:	fa 81       	ldd	r31, Y+2	; 0x02
    326c:	13 82       	std	Z+3, r1	; 0x03
    326e:	dc 2c       	mov	r13, r12
    3270:	cc 24       	eor	r12, r12
    3272:	dd 0c       	add	r13, r13
    3274:	51 c0       	rjmp	.+162    	; 0x3318 <f_write+0x302>
    3276:	f7 01       	movw	r30, r14
    3278:	40 89       	ldd	r20, Z+16	; 0x10
    327a:	51 89       	ldd	r21, Z+17	; 0x11
    327c:	62 89       	ldd	r22, Z+18	; 0x12
    327e:	73 89       	ldd	r23, Z+19	; 0x13
    3280:	82 85       	ldd	r24, Z+10	; 0x0a
    3282:	93 85       	ldd	r25, Z+11	; 0x0b
    3284:	a4 85       	ldd	r26, Z+12	; 0x0c
    3286:	b5 85       	ldd	r27, Z+13	; 0x0d
    3288:	48 17       	cp	r20, r24
    328a:	59 07       	cpc	r21, r25
    328c:	6a 07       	cpc	r22, r26
    328e:	7b 07       	cpc	r23, r27
    3290:	80 f0       	brcs	.+32     	; 0x32b2 <f_write+0x29c>
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	0e 94 76 07 	call	0xeec	; 0xeec <sync_window>
    329a:	88 23       	and	r24, r24
    329c:	21 f0       	breq	.+8      	; 0x32a6 <f_write+0x290>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	f7 01       	movw	r30, r14
    32a2:	87 87       	std	Z+15, r24	; 0x0f
    32a4:	6c c0       	rjmp	.+216    	; 0x337e <f_write+0x368>
    32a6:	e9 81       	ldd	r30, Y+1	; 0x01
    32a8:	fa 81       	ldd	r31, Y+2	; 0x02
    32aa:	27 a6       	std	Z+47, r2	; 0x2f
    32ac:	30 aa       	std	Z+48, r3	; 0x30
    32ae:	41 aa       	std	Z+49, r4	; 0x31
    32b0:	52 aa       	std	Z+50, r5	; 0x32
    32b2:	f7 01       	movw	r30, r14
    32b4:	20 8e       	std	Z+24, r2	; 0x18
    32b6:	31 8e       	std	Z+25, r3	; 0x19
    32b8:	42 8e       	std	Z+26, r4	; 0x1a
    32ba:	53 8e       	std	Z+27, r5	; 0x1b
    32bc:	f7 01       	movw	r30, r14
    32be:	80 89       	ldd	r24, Z+16	; 0x10
    32c0:	91 89       	ldd	r25, Z+17	; 0x11
    32c2:	91 70       	andi	r25, 0x01	; 1
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	32 e0       	ldi	r19, 0x02	; 2
    32c8:	69 01       	movw	r12, r18
    32ca:	c8 1a       	sub	r12, r24
    32cc:	d9 0a       	sbc	r13, r25
    32ce:	ac 14       	cp	r10, r12
    32d0:	bd 04       	cpc	r11, r13
    32d2:	08 f4       	brcc	.+2      	; 0x32d6 <f_write+0x2c0>
    32d4:	65 01       	movw	r12, r10
    32d6:	f7 01       	movw	r30, r14
    32d8:	40 8d       	ldd	r20, Z+24	; 0x18
    32da:	51 8d       	ldd	r21, Z+25	; 0x19
    32dc:	62 8d       	ldd	r22, Z+26	; 0x1a
    32de:	73 8d       	ldd	r23, Z+27	; 0x1b
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    32e8:	88 23       	and	r24, r24
    32ea:	21 f0       	breq	.+8      	; 0x32f4 <f_write+0x2de>
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	f7 01       	movw	r30, r14
    32f0:	87 87       	std	Z+15, r24	; 0x0f
    32f2:	45 c0       	rjmp	.+138    	; 0x337e <f_write+0x368>
    32f4:	29 81       	ldd	r18, Y+1	; 0x01
    32f6:	3a 81       	ldd	r19, Y+2	; 0x02
    32f8:	2d 5c       	subi	r18, 0xCD	; 205
    32fa:	3f 4f       	sbci	r19, 0xFF	; 255
    32fc:	f7 01       	movw	r30, r14
    32fe:	80 89       	ldd	r24, Z+16	; 0x10
    3300:	91 89       	ldd	r25, Z+17	; 0x11
    3302:	91 70       	andi	r25, 0x01	; 1
    3304:	a6 01       	movw	r20, r12
    3306:	b3 01       	movw	r22, r6
    3308:	82 0f       	add	r24, r18
    330a:	93 1f       	adc	r25, r19
    330c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
    3310:	e9 81       	ldd	r30, Y+1	; 0x01
    3312:	fa 81       	ldd	r31, Y+2	; 0x02
    3314:	21 e0       	ldi	r18, 0x01	; 1
    3316:	23 83       	std	Z+3, r18	; 0x03
    3318:	ac 18       	sub	r10, r12
    331a:	bd 08       	sbc	r11, r13
    331c:	f4 01       	movw	r30, r8
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	8c 0d       	add	r24, r12
    3324:	9d 1d       	adc	r25, r13
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	80 83       	st	Z, r24
    332a:	6c 0c       	add	r6, r12
    332c:	7d 1c       	adc	r7, r13
    332e:	f7 01       	movw	r30, r14
    3330:	80 89       	ldd	r24, Z+16	; 0x10
    3332:	91 89       	ldd	r25, Z+17	; 0x11
    3334:	a2 89       	ldd	r26, Z+18	; 0x12
    3336:	b3 89       	ldd	r27, Z+19	; 0x13
    3338:	8c 0d       	add	r24, r12
    333a:	9d 1d       	adc	r25, r13
    333c:	a1 1d       	adc	r26, r1
    333e:	b1 1d       	adc	r27, r1
    3340:	80 8b       	std	Z+16, r24	; 0x10
    3342:	91 8b       	std	Z+17, r25	; 0x11
    3344:	a2 8b       	std	Z+18, r26	; 0x12
    3346:	b3 8b       	std	Z+19, r27	; 0x13
    3348:	42 85       	ldd	r20, Z+10	; 0x0a
    334a:	53 85       	ldd	r21, Z+11	; 0x0b
    334c:	64 85       	ldd	r22, Z+12	; 0x0c
    334e:	75 85       	ldd	r23, Z+13	; 0x0d
    3350:	48 17       	cp	r20, r24
    3352:	59 07       	cpc	r21, r25
    3354:	6a 07       	cpc	r22, r26
    3356:	7b 07       	cpc	r23, r27
    3358:	10 f4       	brcc	.+4      	; 0x335e <f_write+0x348>
    335a:	ac 01       	movw	r20, r24
    335c:	bd 01       	movw	r22, r26
    335e:	f7 01       	movw	r30, r14
    3360:	42 87       	std	Z+10, r20	; 0x0a
    3362:	53 87       	std	Z+11, r21	; 0x0b
    3364:	64 87       	std	Z+12, r22	; 0x0c
    3366:	75 87       	std	Z+13, r23	; 0x0d
    3368:	a1 14       	cp	r10, r1
    336a:	b1 04       	cpc	r11, r1
    336c:	09 f0       	breq	.+2      	; 0x3370 <f_write+0x35a>
    336e:	97 ce       	rjmp	.-722    	; 0x309e <f_write+0x88>
    3370:	f7 01       	movw	r30, r14
    3372:	86 85       	ldd	r24, Z+14	; 0x0e
    3374:	80 64       	ori	r24, 0x40	; 64
    3376:	86 87       	std	Z+14, r24	; 0x0e
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	01 c0       	rjmp	.+2      	; 0x337e <f_write+0x368>
    337c:	87 e0       	ldi	r24, 0x07	; 7
    337e:	26 96       	adiw	r28, 0x06	; 6
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	ff 90       	pop	r15
    3394:	ef 90       	pop	r14
    3396:	df 90       	pop	r13
    3398:	cf 90       	pop	r12
    339a:	bf 90       	pop	r11
    339c:	af 90       	pop	r10
    339e:	9f 90       	pop	r9
    33a0:	8f 90       	pop	r8
    33a2:	7f 90       	pop	r7
    33a4:	6f 90       	pop	r6
    33a6:	5f 90       	pop	r5
    33a8:	4f 90       	pop	r4
    33aa:	3f 90       	pop	r3
    33ac:	2f 90       	pop	r2
    33ae:	08 95       	ret

000033b0 <f_sync>:
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	00 d0       	rcall	.+0      	; 0x33be <f_sync+0xe>
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	8c 01       	movw	r16, r24
    33c4:	be 01       	movw	r22, r28
    33c6:	6f 5f       	subi	r22, 0xFF	; 255
    33c8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ca:	0e 94 4a 07 	call	0xe94	; 0xe94 <validate>
    33ce:	81 11       	cpse	r24, r1
    33d0:	3c c0       	rjmp	.+120    	; 0x344a <f_sync+0x9a>
    33d2:	f8 01       	movw	r30, r16
    33d4:	96 85       	ldd	r25, Z+14	; 0x0e
    33d6:	96 ff       	sbrs	r25, 6
    33d8:	38 c0       	rjmp	.+112    	; 0x344a <f_sync+0x9a>
    33da:	44 8d       	ldd	r20, Z+28	; 0x1c
    33dc:	55 8d       	ldd	r21, Z+29	; 0x1d
    33de:	66 8d       	ldd	r22, Z+30	; 0x1e
    33e0:	77 8d       	ldd	r23, Z+31	; 0x1f
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	9a 81       	ldd	r25, Y+2	; 0x02
    33e6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <move_window>
    33ea:	81 11       	cpse	r24, r1
    33ec:	2e c0       	rjmp	.+92     	; 0x344a <f_sync+0x9a>
    33ee:	f8 01       	movw	r30, r16
    33f0:	e0 a0       	ldd	r14, Z+32	; 0x20
    33f2:	f1 a0       	ldd	r15, Z+33	; 0x21
    33f4:	f7 01       	movw	r30, r14
    33f6:	83 85       	ldd	r24, Z+11	; 0x0b
    33f8:	80 62       	ori	r24, 0x20	; 32
    33fa:	83 87       	std	Z+11, r24	; 0x0b
    33fc:	f8 01       	movw	r30, r16
    33fe:	26 81       	ldd	r18, Z+6	; 0x06
    3400:	37 81       	ldd	r19, Z+7	; 0x07
    3402:	40 85       	ldd	r20, Z+8	; 0x08
    3404:	51 85       	ldd	r21, Z+9	; 0x09
    3406:	b7 01       	movw	r22, r14
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <st_clust>
    3410:	f8 01       	movw	r30, r16
    3412:	32 85       	ldd	r19, Z+10	; 0x0a
    3414:	23 85       	ldd	r18, Z+11	; 0x0b
    3416:	94 85       	ldd	r25, Z+12	; 0x0c
    3418:	85 85       	ldd	r24, Z+13	; 0x0d
    341a:	f7 01       	movw	r30, r14
    341c:	34 8f       	std	Z+28, r19	; 0x1c
    341e:	25 8f       	std	Z+29, r18	; 0x1d
    3420:	96 8f       	std	Z+30, r25	; 0x1e
    3422:	87 8f       	std	Z+31, r24	; 0x1f
    3424:	16 8a       	std	Z+22, r1	; 0x16
    3426:	17 8a       	std	Z+23, r1	; 0x17
    3428:	81 e2       	ldi	r24, 0x21	; 33
    342a:	80 8f       	std	Z+24, r24	; 0x18
    342c:	88 e4       	ldi	r24, 0x48	; 72
    342e:	81 8f       	std	Z+25, r24	; 0x19
    3430:	12 8a       	std	Z+18, r1	; 0x12
    3432:	13 8a       	std	Z+19, r1	; 0x13
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	21 e0       	ldi	r18, 0x01	; 1
    343a:	fc 01       	movw	r30, r24
    343c:	23 83       	std	Z+3, r18	; 0x03
    343e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <sync_fs>
    3442:	f8 01       	movw	r30, r16
    3444:	96 85       	ldd	r25, Z+14	; 0x0e
    3446:	9f 7b       	andi	r25, 0xBF	; 191
    3448:	96 87       	std	Z+14, r25	; 0x0e
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	08 95       	ret

0000345c <f_close>:
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	00 d0       	rcall	.+0      	; 0x3466 <f_close+0xa>
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	8c 01       	movw	r16, r24
    346c:	a1 df       	rcall	.-190    	; 0x33b0 <f_sync>
    346e:	81 11       	cpse	r24, r1
    3470:	0b c0       	rjmp	.+22     	; 0x3488 <f_close+0x2c>
    3472:	be 01       	movw	r22, r28
    3474:	6f 5f       	subi	r22, 0xFF	; 255
    3476:	7f 4f       	sbci	r23, 0xFF	; 255
    3478:	c8 01       	movw	r24, r16
    347a:	0e 94 4a 07 	call	0xe94	; 0xe94 <validate>
    347e:	81 11       	cpse	r24, r1
    3480:	03 c0       	rjmp	.+6      	; 0x3488 <f_close+0x2c>
    3482:	f8 01       	movw	r30, r16
    3484:	11 82       	std	Z+1, r1	; 0x01
    3486:	10 82       	st	Z, r1
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	08 95       	ret

00003496 <f_chdir>:
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	1f 93       	push	r17
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	ac 97       	sbiw	r28, 0x2c	; 44
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	9c a7       	std	Y+44, r25	; 0x2c
    34b2:	8b a7       	std	Y+43, r24	; 0x2b
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	be 01       	movw	r22, r28
    34b8:	67 5d       	subi	r22, 0xD7	; 215
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	ce 01       	movw	r24, r28
    34be:	8b 96       	adiw	r24, 0x2b	; 43
    34c0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <find_volume>
    34c4:	18 2f       	mov	r17, r24
    34c6:	81 11       	cpse	r24, r1
    34c8:	2e c0       	rjmp	.+92     	; 0x3526 <f_chdir+0x90>
    34ca:	89 a5       	ldd	r24, Y+41	; 0x29
    34cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	6b a5       	ldd	r22, Y+43	; 0x2b
    34d4:	7c a5       	ldd	r23, Y+44	; 0x2c
    34d6:	ce 01       	movw	r24, r28
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	63 d8       	rcall	.-3898   	; 0x25a2 <follow_path>
    34dc:	18 2f       	mov	r17, r24
    34de:	81 11       	cpse	r24, r1
    34e0:	1d c0       	rjmp	.+58     	; 0x351c <f_chdir+0x86>
    34e2:	88 a5       	ldd	r24, Y+40	; 0x28
    34e4:	88 23       	and	r24, r24
    34e6:	5c f4       	brge	.+22     	; 0x34fe <f_chdir+0x68>
    34e8:	e9 a5       	ldd	r30, Y+41	; 0x29
    34ea:	fa a5       	ldd	r31, Y+42	; 0x2a
    34ec:	8f 81       	ldd	r24, Y+7	; 0x07
    34ee:	98 85       	ldd	r25, Y+8	; 0x08
    34f0:	a9 85       	ldd	r26, Y+9	; 0x09
    34f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    34f4:	83 8b       	std	Z+19, r24	; 0x13
    34f6:	94 8b       	std	Z+20, r25	; 0x14
    34f8:	a5 8b       	std	Z+21, r26	; 0x15
    34fa:	b6 8b       	std	Z+22, r27	; 0x16
    34fc:	14 c0       	rjmp	.+40     	; 0x3526 <f_chdir+0x90>
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	84 ff       	sbrs	r24, 4
    3502:	10 c0       	rjmp	.+32     	; 0x3524 <f_chdir+0x8e>
    3504:	e9 a4       	ldd	r14, Y+41	; 0x29
    3506:	fa a4       	ldd	r15, Y+42	; 0x2a
    3508:	6b 8d       	ldd	r22, Y+27	; 0x1b
    350a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    350c:	c7 01       	movw	r24, r14
    350e:	27 d8       	rcall	.-4018   	; 0x255e <ld_clust>
    3510:	f7 01       	movw	r30, r14
    3512:	63 8b       	std	Z+19, r22	; 0x13
    3514:	74 8b       	std	Z+20, r23	; 0x14
    3516:	85 8b       	std	Z+21, r24	; 0x15
    3518:	96 8b       	std	Z+22, r25	; 0x16
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <f_chdir+0x90>
    351c:	84 30       	cpi	r24, 0x04	; 4
    351e:	19 f4       	brne	.+6      	; 0x3526 <f_chdir+0x90>
    3520:	15 e0       	ldi	r17, 0x05	; 5
    3522:	01 c0       	rjmp	.+2      	; 0x3526 <f_chdir+0x90>
    3524:	15 e0       	ldi	r17, 0x05	; 5
    3526:	81 2f       	mov	r24, r17
    3528:	ac 96       	adiw	r28, 0x2c	; 44
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	ff 90       	pop	r15
    353c:	ef 90       	pop	r14
    353e:	08 95       	ret

00003540 <f_lseek>:
    3540:	2f 92       	push	r2
    3542:	3f 92       	push	r3
    3544:	4f 92       	push	r4
    3546:	5f 92       	push	r5
    3548:	6f 92       	push	r6
    354a:	7f 92       	push	r7
    354c:	8f 92       	push	r8
    354e:	9f 92       	push	r9
    3550:	af 92       	push	r10
    3552:	bf 92       	push	r11
    3554:	cf 92       	push	r12
    3556:	df 92       	push	r13
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	00 d0       	rcall	.+0      	; 0x3566 <f_lseek+0x26>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <f_lseek+0x28>
    3568:	00 d0       	rcall	.+0      	; 0x356a <f_lseek+0x2a>
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	8c 01       	movw	r16, r24
    3570:	6a 01       	movw	r12, r20
    3572:	7b 01       	movw	r14, r22
    3574:	78 2e       	mov	r7, r24
    3576:	61 2e       	mov	r6, r17
    3578:	be 01       	movw	r22, r28
    357a:	6f 5f       	subi	r22, 0xFF	; 255
    357c:	7f 4f       	sbci	r23, 0xFF	; 255
    357e:	0e 94 4a 07 	call	0xe94	; 0xe94 <validate>
    3582:	81 11       	cpse	r24, r1
    3584:	76 c1       	rjmp	.+748    	; 0x3872 <f_lseek+0x332>
    3586:	d8 01       	movw	r26, r16
    3588:	1f 96       	adiw	r26, 0x0f	; 15
    358a:	8c 91       	ld	r24, X
    358c:	1f 97       	sbiw	r26, 0x0f	; 15
    358e:	81 11       	cpse	r24, r1
    3590:	70 c1       	rjmp	.+736    	; 0x3872 <f_lseek+0x332>
    3592:	1a 96       	adiw	r26, 0x0a	; 10
    3594:	8d 91       	ld	r24, X+
    3596:	9d 91       	ld	r25, X+
    3598:	0d 90       	ld	r0, X+
    359a:	bc 91       	ld	r27, X
    359c:	a0 2d       	mov	r26, r0
    359e:	8c 15       	cp	r24, r12
    35a0:	9d 05       	cpc	r25, r13
    35a2:	ae 05       	cpc	r26, r14
    35a4:	bf 05       	cpc	r27, r15
    35a6:	30 f4       	brcc	.+12     	; 0x35b4 <f_lseek+0x74>
    35a8:	f8 01       	movw	r30, r16
    35aa:	26 85       	ldd	r18, Z+14	; 0x0e
    35ac:	21 fd       	sbrc	r18, 1
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <f_lseek+0x74>
    35b0:	6c 01       	movw	r12, r24
    35b2:	7d 01       	movw	r14, r26
    35b4:	f8 01       	movw	r30, r16
    35b6:	80 89       	ldd	r24, Z+16	; 0x10
    35b8:	91 89       	ldd	r25, Z+17	; 0x11
    35ba:	a2 89       	ldd	r26, Z+18	; 0x12
    35bc:	b3 89       	ldd	r27, Z+19	; 0x13
    35be:	10 8a       	std	Z+16, r1	; 0x10
    35c0:	11 8a       	std	Z+17, r1	; 0x11
    35c2:	12 8a       	std	Z+18, r1	; 0x12
    35c4:	13 8a       	std	Z+19, r1	; 0x13
    35c6:	c1 14       	cp	r12, r1
    35c8:	d1 04       	cpc	r13, r1
    35ca:	e1 04       	cpc	r14, r1
    35cc:	f1 04       	cpc	r15, r1
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <f_lseek+0x92>
    35d0:	4b c1       	rjmp	.+662    	; 0x3868 <f_lseek+0x328>
    35d2:	e9 81       	ldd	r30, Y+1	; 0x01
    35d4:	fa 81       	ldd	r31, Y+2	; 0x02
    35d6:	81 84       	ldd	r8, Z+9	; 0x09
    35d8:	92 84       	ldd	r9, Z+10	; 0x0a
    35da:	a1 2c       	mov	r10, r1
    35dc:	b1 2c       	mov	r11, r1
    35de:	07 2e       	mov	r0, r23
    35e0:	79 e0       	ldi	r23, 0x09	; 9
    35e2:	88 0c       	add	r8, r8
    35e4:	99 1c       	adc	r9, r9
    35e6:	aa 1c       	adc	r10, r10
    35e8:	bb 1c       	adc	r11, r11
    35ea:	7a 95       	dec	r23
    35ec:	d1 f7       	brne	.-12     	; 0x35e2 <f_lseek+0xa2>
    35ee:	70 2d       	mov	r23, r0
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	a1 05       	cpc	r26, r1
    35f4:	b1 05       	cpc	r27, r1
    35f6:	e9 f1       	breq	.+122    	; 0x3672 <f_lseek+0x132>
    35f8:	1c 01       	movw	r2, r24
    35fa:	2d 01       	movw	r4, r26
    35fc:	f1 e0       	ldi	r31, 0x01	; 1
    35fe:	2f 1a       	sub	r2, r31
    3600:	31 08       	sbc	r3, r1
    3602:	41 08       	sbc	r4, r1
    3604:	51 08       	sbc	r5, r1
    3606:	c7 01       	movw	r24, r14
    3608:	b6 01       	movw	r22, r12
    360a:	61 50       	subi	r22, 0x01	; 1
    360c:	71 09       	sbc	r23, r1
    360e:	81 09       	sbc	r24, r1
    3610:	91 09       	sbc	r25, r1
    3612:	a5 01       	movw	r20, r10
    3614:	94 01       	movw	r18, r8
    3616:	0e 94 0c 32 	call	0x6418	; 0x6418 <__udivmodsi4>
    361a:	2b 83       	std	Y+3, r18	; 0x03
    361c:	3c 83       	std	Y+4, r19	; 0x04
    361e:	4d 83       	std	Y+5, r20	; 0x05
    3620:	5e 83       	std	Y+6, r21	; 0x06
    3622:	c2 01       	movw	r24, r4
    3624:	b1 01       	movw	r22, r2
    3626:	a5 01       	movw	r20, r10
    3628:	94 01       	movw	r18, r8
    362a:	0e 94 0c 32 	call	0x6418	; 0x6418 <__udivmodsi4>
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	ad 81       	ldd	r26, Y+5	; 0x05
    3634:	be 81       	ldd	r27, Y+6	; 0x06
    3636:	82 17       	cp	r24, r18
    3638:	93 07       	cpc	r25, r19
    363a:	a4 07       	cpc	r26, r20
    363c:	b5 07       	cpc	r27, r21
    363e:	c8 f0       	brcs	.+50     	; 0x3672 <f_lseek+0x132>
    3640:	88 27       	eor	r24, r24
    3642:	99 27       	eor	r25, r25
    3644:	dc 01       	movw	r26, r24
    3646:	88 19       	sub	r24, r8
    3648:	99 09       	sbc	r25, r9
    364a:	aa 09       	sbc	r26, r10
    364c:	bb 09       	sbc	r27, r11
    364e:	82 21       	and	r24, r2
    3650:	93 21       	and	r25, r3
    3652:	a4 21       	and	r26, r4
    3654:	b5 21       	and	r27, r5
    3656:	f8 01       	movw	r30, r16
    3658:	80 8b       	std	Z+16, r24	; 0x10
    365a:	91 8b       	std	Z+17, r25	; 0x11
    365c:	a2 8b       	std	Z+18, r26	; 0x12
    365e:	b3 8b       	std	Z+19, r27	; 0x13
    3660:	c8 1a       	sub	r12, r24
    3662:	d9 0a       	sbc	r13, r25
    3664:	ea 0a       	sbc	r14, r26
    3666:	fb 0a       	sbc	r15, r27
    3668:	44 89       	ldd	r20, Z+20	; 0x14
    366a:	55 89       	ldd	r21, Z+21	; 0x15
    366c:	66 89       	ldd	r22, Z+22	; 0x16
    366e:	77 89       	ldd	r23, Z+23	; 0x17
    3670:	34 c0       	rjmp	.+104    	; 0x36da <f_lseek+0x19a>
    3672:	d8 01       	movw	r26, r16
    3674:	16 96       	adiw	r26, 0x06	; 6
    3676:	4d 91       	ld	r20, X+
    3678:	5d 91       	ld	r21, X+
    367a:	6d 91       	ld	r22, X+
    367c:	7c 91       	ld	r23, X
    367e:	19 97       	sbiw	r26, 0x09	; 9
    3680:	41 15       	cp	r20, r1
    3682:	51 05       	cpc	r21, r1
    3684:	61 05       	cpc	r22, r1
    3686:	71 05       	cpc	r23, r1
    3688:	09 f5       	brne	.+66     	; 0x36cc <f_lseek+0x18c>
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	ba 01       	movw	r22, r20
    3690:	c8 01       	movw	r24, r16
    3692:	0e 94 c6 0b 	call	0x178c	; 0x178c <create_chain>
    3696:	ab 01       	movw	r20, r22
    3698:	bc 01       	movw	r22, r24
    369a:	41 30       	cpi	r20, 0x01	; 1
    369c:	51 05       	cpc	r21, r1
    369e:	61 05       	cpc	r22, r1
    36a0:	71 05       	cpc	r23, r1
    36a2:	21 f4       	brne	.+8      	; 0x36ac <f_lseek+0x16c>
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	f8 01       	movw	r30, r16
    36a8:	87 87       	std	Z+15, r24	; 0x0f
    36aa:	e3 c0       	rjmp	.+454    	; 0x3872 <f_lseek+0x332>
    36ac:	4f 3f       	cpi	r20, 0xFF	; 255
    36ae:	ff ef       	ldi	r31, 0xFF	; 255
    36b0:	5f 07       	cpc	r21, r31
    36b2:	6f 07       	cpc	r22, r31
    36b4:	7f 07       	cpc	r23, r31
    36b6:	29 f4       	brne	.+10     	; 0x36c2 <f_lseek+0x182>
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	d8 01       	movw	r26, r16
    36bc:	1f 96       	adiw	r26, 0x0f	; 15
    36be:	8c 93       	st	X, r24
    36c0:	d8 c0       	rjmp	.+432    	; 0x3872 <f_lseek+0x332>
    36c2:	f8 01       	movw	r30, r16
    36c4:	46 83       	std	Z+6, r20	; 0x06
    36c6:	57 83       	std	Z+7, r21	; 0x07
    36c8:	60 87       	std	Z+8, r22	; 0x08
    36ca:	71 87       	std	Z+9, r23	; 0x09
    36cc:	d8 01       	movw	r26, r16
    36ce:	54 96       	adiw	r26, 0x14	; 20
    36d0:	4d 93       	st	X+, r20
    36d2:	5d 93       	st	X+, r21
    36d4:	6d 93       	st	X+, r22
    36d6:	7c 93       	st	X, r23
    36d8:	57 97       	sbiw	r26, 0x17	; 23
    36da:	41 15       	cp	r20, r1
    36dc:	51 05       	cpc	r21, r1
    36de:	61 05       	cpc	r22, r1
    36e0:	71 05       	cpc	r23, r1
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <f_lseek+0x1a6>
    36e4:	8a c0       	rjmp	.+276    	; 0x37fa <f_lseek+0x2ba>
    36e6:	8c 14       	cp	r8, r12
    36e8:	9d 04       	cpc	r9, r13
    36ea:	ae 04       	cpc	r10, r14
    36ec:	bf 04       	cpc	r11, r15
    36ee:	08 f0       	brcs	.+2      	; 0x36f2 <f_lseek+0x1b2>
    36f0:	52 c0       	rjmp	.+164    	; 0x3796 <f_lseek+0x256>
    36f2:	c8 18       	sub	r12, r8
    36f4:	d9 08       	sbc	r13, r9
    36f6:	ea 08       	sbc	r14, r10
    36f8:	fb 08       	sbc	r15, r11
    36fa:	f8 01       	movw	r30, r16
    36fc:	80 89       	ldd	r24, Z+16	; 0x10
    36fe:	91 89       	ldd	r25, Z+17	; 0x11
    3700:	a2 89       	ldd	r26, Z+18	; 0x12
    3702:	b3 89       	ldd	r27, Z+19	; 0x13
    3704:	88 0d       	add	r24, r8
    3706:	99 1d       	adc	r25, r9
    3708:	aa 1d       	adc	r26, r10
    370a:	bb 1d       	adc	r27, r11
    370c:	80 8b       	std	Z+16, r24	; 0x10
    370e:	91 8b       	std	Z+17, r25	; 0x11
    3710:	a2 8b       	std	Z+18, r26	; 0x12
    3712:	b3 8b       	std	Z+19, r27	; 0x13
    3714:	86 85       	ldd	r24, Z+14	; 0x0e
    3716:	81 ff       	sbrs	r24, 1
    3718:	0c c0       	rjmp	.+24     	; 0x3732 <f_lseek+0x1f2>
    371a:	87 2d       	mov	r24, r7
    371c:	96 2d       	mov	r25, r6
    371e:	0e 94 c6 0b 	call	0x178c	; 0x178c <create_chain>
    3722:	ab 01       	movw	r20, r22
    3724:	bc 01       	movw	r22, r24
    3726:	41 15       	cp	r20, r1
    3728:	51 05       	cpc	r21, r1
    372a:	61 05       	cpc	r22, r1
    372c:	71 05       	cpc	r23, r1
    372e:	39 f4       	brne	.+14     	; 0x373e <f_lseek+0x1fe>
    3730:	68 c0       	rjmp	.+208    	; 0x3802 <f_lseek+0x2c2>
    3732:	87 2d       	mov	r24, r7
    3734:	96 2d       	mov	r25, r6
    3736:	0e 94 03 0a 	call	0x1406	; 0x1406 <get_fat>
    373a:	ab 01       	movw	r20, r22
    373c:	bc 01       	movw	r22, r24
    373e:	4f 3f       	cpi	r20, 0xFF	; 255
    3740:	ff ef       	ldi	r31, 0xFF	; 255
    3742:	5f 07       	cpc	r21, r31
    3744:	6f 07       	cpc	r22, r31
    3746:	7f 07       	cpc	r23, r31
    3748:	29 f4       	brne	.+10     	; 0x3754 <f_lseek+0x214>
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	d8 01       	movw	r26, r16
    374e:	1f 96       	adiw	r26, 0x0f	; 15
    3750:	8c 93       	st	X, r24
    3752:	8f c0       	rjmp	.+286    	; 0x3872 <f_lseek+0x332>
    3754:	42 30       	cpi	r20, 0x02	; 2
    3756:	51 05       	cpc	r21, r1
    3758:	61 05       	cpc	r22, r1
    375a:	71 05       	cpc	r23, r1
    375c:	58 f0       	brcs	.+22     	; 0x3774 <f_lseek+0x234>
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	87 89       	ldd	r24, Z+23	; 0x17
    3764:	90 8d       	ldd	r25, Z+24	; 0x18
    3766:	a1 8d       	ldd	r26, Z+25	; 0x19
    3768:	b2 8d       	ldd	r27, Z+26	; 0x1a
    376a:	48 17       	cp	r20, r24
    376c:	59 07       	cpc	r21, r25
    376e:	6a 07       	cpc	r22, r26
    3770:	7b 07       	cpc	r23, r27
    3772:	20 f0       	brcs	.+8      	; 0x377c <f_lseek+0x23c>
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	f8 01       	movw	r30, r16
    3778:	87 87       	std	Z+15, r24	; 0x0f
    377a:	7b c0       	rjmp	.+246    	; 0x3872 <f_lseek+0x332>
    377c:	d8 01       	movw	r26, r16
    377e:	54 96       	adiw	r26, 0x14	; 20
    3780:	4d 93       	st	X+, r20
    3782:	5d 93       	st	X+, r21
    3784:	6d 93       	st	X+, r22
    3786:	7c 93       	st	X, r23
    3788:	57 97       	sbiw	r26, 0x17	; 23
    378a:	8c 14       	cp	r8, r12
    378c:	9d 04       	cpc	r9, r13
    378e:	ae 04       	cpc	r10, r14
    3790:	bf 04       	cpc	r11, r15
    3792:	08 f4       	brcc	.+2      	; 0x3796 <f_lseek+0x256>
    3794:	ae cf       	rjmp	.-164    	; 0x36f2 <f_lseek+0x1b2>
    3796:	f8 01       	movw	r30, r16
    3798:	80 89       	ldd	r24, Z+16	; 0x10
    379a:	91 89       	ldd	r25, Z+17	; 0x11
    379c:	a2 89       	ldd	r26, Z+18	; 0x12
    379e:	b3 89       	ldd	r27, Z+19	; 0x13
    37a0:	8c 0d       	add	r24, r12
    37a2:	9d 1d       	adc	r25, r13
    37a4:	ae 1d       	adc	r26, r14
    37a6:	bf 1d       	adc	r27, r15
    37a8:	80 8b       	std	Z+16, r24	; 0x10
    37aa:	91 8b       	std	Z+17, r25	; 0x11
    37ac:	a2 8b       	std	Z+18, r26	; 0x12
    37ae:	b3 8b       	std	Z+19, r27	; 0x13
    37b0:	d7 01       	movw	r26, r14
    37b2:	c6 01       	movw	r24, r12
    37b4:	91 70       	andi	r25, 0x01	; 1
    37b6:	aa 27       	eor	r26, r26
    37b8:	bb 27       	eor	r27, r27
    37ba:	89 2b       	or	r24, r25
    37bc:	8a 2b       	or	r24, r26
    37be:	8b 2b       	or	r24, r27
    37c0:	21 f1       	breq	.+72     	; 0x380a <f_lseek+0x2ca>
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	0e 94 90 06 	call	0xd20	; 0xd20 <clst2sect>
    37ca:	61 15       	cp	r22, r1
    37cc:	71 05       	cpc	r23, r1
    37ce:	81 05       	cpc	r24, r1
    37d0:	91 05       	cpc	r25, r1
    37d2:	29 f4       	brne	.+10     	; 0x37de <f_lseek+0x29e>
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	d8 01       	movw	r26, r16
    37d8:	1f 96       	adiw	r26, 0x0f	; 15
    37da:	8c 93       	st	X, r24
    37dc:	4a c0       	rjmp	.+148    	; 0x3872 <f_lseek+0x332>
    37de:	0b 2e       	mov	r0, r27
    37e0:	b9 e0       	ldi	r27, 0x09	; 9
    37e2:	f6 94       	lsr	r15
    37e4:	e7 94       	ror	r14
    37e6:	d7 94       	ror	r13
    37e8:	c7 94       	ror	r12
    37ea:	ba 95       	dec	r27
    37ec:	d1 f7       	brne	.-12     	; 0x37e2 <f_lseek+0x2a2>
    37ee:	b0 2d       	mov	r27, r0
    37f0:	c6 0e       	add	r12, r22
    37f2:	d7 1e       	adc	r13, r23
    37f4:	e8 1e       	adc	r14, r24
    37f6:	f9 1e       	adc	r15, r25
    37f8:	0b c0       	rjmp	.+22     	; 0x3810 <f_lseek+0x2d0>
    37fa:	c1 2c       	mov	r12, r1
    37fc:	d1 2c       	mov	r13, r1
    37fe:	76 01       	movw	r14, r12
    3800:	07 c0       	rjmp	.+14     	; 0x3810 <f_lseek+0x2d0>
    3802:	c1 2c       	mov	r12, r1
    3804:	d1 2c       	mov	r13, r1
    3806:	76 01       	movw	r14, r12
    3808:	03 c0       	rjmp	.+6      	; 0x3810 <f_lseek+0x2d0>
    380a:	c1 2c       	mov	r12, r1
    380c:	d1 2c       	mov	r13, r1
    380e:	76 01       	movw	r14, r12
    3810:	f8 01       	movw	r30, r16
    3812:	80 89       	ldd	r24, Z+16	; 0x10
    3814:	91 89       	ldd	r25, Z+17	; 0x11
    3816:	a2 89       	ldd	r26, Z+18	; 0x12
    3818:	b3 89       	ldd	r27, Z+19	; 0x13
    381a:	42 85       	ldd	r20, Z+10	; 0x0a
    381c:	53 85       	ldd	r21, Z+11	; 0x0b
    381e:	64 85       	ldd	r22, Z+12	; 0x0c
    3820:	75 85       	ldd	r23, Z+13	; 0x0d
    3822:	48 17       	cp	r20, r24
    3824:	59 07       	cpc	r21, r25
    3826:	6a 07       	cpc	r22, r26
    3828:	7b 07       	cpc	r23, r27
    382a:	38 f4       	brcc	.+14     	; 0x383a <f_lseek+0x2fa>
    382c:	82 87       	std	Z+10, r24	; 0x0a
    382e:	93 87       	std	Z+11, r25	; 0x0b
    3830:	a4 87       	std	Z+12, r26	; 0x0c
    3832:	b5 87       	std	Z+13, r27	; 0x0d
    3834:	26 85       	ldd	r18, Z+14	; 0x0e
    3836:	20 64       	ori	r18, 0x40	; 64
    3838:	26 87       	std	Z+14, r18	; 0x0e
    383a:	91 70       	andi	r25, 0x01	; 1
    383c:	aa 27       	eor	r26, r26
    383e:	bb 27       	eor	r27, r27
    3840:	89 2b       	or	r24, r25
    3842:	8a 2b       	or	r24, r26
    3844:	8b 2b       	or	r24, r27
    3846:	91 f0       	breq	.+36     	; 0x386c <f_lseek+0x32c>
    3848:	f8 01       	movw	r30, r16
    384a:	80 8d       	ldd	r24, Z+24	; 0x18
    384c:	91 8d       	ldd	r25, Z+25	; 0x19
    384e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3850:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3852:	c8 16       	cp	r12, r24
    3854:	d9 06       	cpc	r13, r25
    3856:	ea 06       	cpc	r14, r26
    3858:	fb 06       	cpc	r15, r27
    385a:	51 f0       	breq	.+20     	; 0x3870 <f_lseek+0x330>
    385c:	c0 8e       	std	Z+24, r12	; 0x18
    385e:	d1 8e       	std	Z+25, r13	; 0x19
    3860:	e2 8e       	std	Z+26, r14	; 0x1a
    3862:	f3 8e       	std	Z+27, r15	; 0x1b
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <f_lseek+0x332>
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	03 c0       	rjmp	.+6      	; 0x3872 <f_lseek+0x332>
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	01 c0       	rjmp	.+2      	; 0x3872 <f_lseek+0x332>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	26 96       	adiw	r28, 0x06	; 6
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	de bf       	out	0x3e, r29	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	df 91       	pop	r29
    3880:	cf 91       	pop	r28
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ff 90       	pop	r15
    3888:	ef 90       	pop	r14
    388a:	df 90       	pop	r13
    388c:	cf 90       	pop	r12
    388e:	bf 90       	pop	r11
    3890:	af 90       	pop	r10
    3892:	9f 90       	pop	r9
    3894:	8f 90       	pop	r8
    3896:	7f 90       	pop	r7
    3898:	6f 90       	pop	r6
    389a:	5f 90       	pop	r5
    389c:	4f 90       	pop	r4
    389e:	3f 90       	pop	r3
    38a0:	2f 90       	pop	r2
    38a2:	08 95       	ret

000038a4 <f_stat>:
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	1f 93       	push	r17
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	aa 97       	sbiw	r28, 0x2a	; 42
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	9a a7       	std	Y+42, r25	; 0x2a
    38c0:	89 a7       	std	Y+41, r24	; 0x29
    38c2:	7b 01       	movw	r14, r22
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	be 01       	movw	r22, r28
    38c8:	6f 5f       	subi	r22, 0xFF	; 255
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	ce 01       	movw	r24, r28
    38ce:	89 96       	adiw	r24, 0x29	; 41
    38d0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <find_volume>
    38d4:	18 2f       	mov	r17, r24
    38d6:	81 11       	cpse	r24, r1
    38d8:	16 c0       	rjmp	.+44     	; 0x3906 <f_stat+0x62>
    38da:	69 a5       	ldd	r22, Y+41	; 0x29
    38dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    38de:	ce 01       	movw	r24, r28
    38e0:	01 96       	adiw	r24, 0x01	; 1
    38e2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <follow_path>
    38e6:	18 2f       	mov	r17, r24
    38e8:	81 11       	cpse	r24, r1
    38ea:	0d c0       	rjmp	.+26     	; 0x3906 <f_stat+0x62>
    38ec:	88 a5       	ldd	r24, Y+40	; 0x28
    38ee:	88 23       	and	r24, r24
    38f0:	4c f0       	brlt	.+18     	; 0x3904 <f_stat+0x60>
    38f2:	e1 14       	cp	r14, r1
    38f4:	f1 04       	cpc	r15, r1
    38f6:	39 f0       	breq	.+14     	; 0x3906 <f_stat+0x62>
    38f8:	b7 01       	movw	r22, r14
    38fa:	ce 01       	movw	r24, r28
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	0e 94 b8 06 	call	0xd70	; 0xd70 <get_fileinfo>
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <f_stat+0x62>
    3904:	16 e0       	ldi	r17, 0x06	; 6
    3906:	81 2f       	mov	r24, r17
    3908:	aa 96       	adiw	r28, 0x2a	; 42
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	1f 91       	pop	r17
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	08 95       	ret

00003920 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    3920:	7f 92       	push	r7
    3922:	8f 92       	push	r8
    3924:	9f 92       	push	r9
    3926:	af 92       	push	r10
    3928:	bf 92       	push	r11
    392a:	cf 92       	push	r12
    392c:	df 92       	push	r13
    392e:	ef 92       	push	r14
    3930:	ff 92       	push	r15
    3932:	0f 93       	push	r16
    3934:	1f 93       	push	r17
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
    393e:	ac 97       	sbiw	r28, 0x2c	; 44
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	9c a7       	std	Y+44, r25	; 0x2c
    394c:	8b a7       	std	Y+43, r24	; 0x2b
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
    394e:	42 e0       	ldi	r20, 0x02	; 2
    3950:	be 01       	movw	r22, r28
    3952:	67 5d       	subi	r22, 0xD7	; 215
    3954:	7f 4f       	sbci	r23, 0xFF	; 255
    3956:	ce 01       	movw	r24, r28
    3958:	8b 96       	adiw	r24, 0x2b	; 43
    395a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <find_volume>
    395e:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    3960:	81 11       	cpse	r24, r1
    3962:	d2 c0       	rjmp	.+420    	; 0x3b08 <f_mkdir+0x1e8>
		dj.obj.fs = fs;
    3964:	89 a5       	ldd	r24, Y+41	; 0x29
    3966:	9a a5       	ldd	r25, Y+42	; 0x2a
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    396c:	6b a5       	ldd	r22, Y+43	; 0x2b
    396e:	7c a5       	ldd	r23, Y+44	; 0x2c
    3970:	ce 01       	movw	r24, r28
    3972:	01 96       	adiw	r24, 0x01	; 1
    3974:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3978:	88 23       	and	r24, r24
    397a:	09 f4       	brne	.+2      	; 0x397e <f_mkdir+0x5e>
    397c:	bf c0       	rjmp	.+382    	; 0x3afc <f_mkdir+0x1dc>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
    397e:	84 30       	cpi	r24, 0x04	; 4
    3980:	09 f0       	breq	.+2      	; 0x3984 <f_mkdir+0x64>
    3982:	c1 c0       	rjmp	.+386    	; 0x3b06 <f_mkdir+0x1e6>
    3984:	88 a5       	ldd	r24, Y+40	; 0x28
    3986:	85 fd       	sbrc	r24, 5
    3988:	bd c0       	rjmp	.+378    	; 0x3b04 <f_mkdir+0x1e4>
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	ba 01       	movw	r22, r20
    3990:	ce 01       	movw	r24, r28
    3992:	01 96       	adiw	r24, 0x01	; 1
    3994:	0e 94 c6 0b 	call	0x178c	; 0x178c <create_chain>
    3998:	4b 01       	movw	r8, r22
    399a:	5c 01       	movw	r10, r24
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    399c:	e9 a5       	ldd	r30, Y+41	; 0x29
    399e:	fa a5       	ldd	r31, Y+42	; 0x2a
    39a0:	41 85       	ldd	r20, Z+9	; 0x09
    39a2:	52 85       	ldd	r21, Z+10	; 0x0a
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	03 2e       	mov	r0, r19
    39aa:	39 e0       	ldi	r19, 0x09	; 9
    39ac:	44 0f       	add	r20, r20
    39ae:	55 1f       	adc	r21, r21
    39b0:	66 1f       	adc	r22, r22
    39b2:	77 1f       	adc	r23, r23
    39b4:	3a 95       	dec	r19
    39b6:	d1 f7       	brne	.-12     	; 0x39ac <f_mkdir+0x8c>
    39b8:	30 2d       	mov	r19, r0
    39ba:	4b 87       	std	Y+11, r20	; 0x0b
    39bc:	5c 87       	std	Y+12, r21	; 0x0c
    39be:	6d 87       	std	Y+13, r22	; 0x0d
    39c0:	7e 87       	std	Y+14, r23	; 0x0e
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    39c2:	81 14       	cp	r8, r1
    39c4:	91 04       	cpc	r9, r1
    39c6:	a1 04       	cpc	r10, r1
    39c8:	b1 04       	cpc	r11, r1
    39ca:	79 f0       	breq	.+30     	; 0x39ea <f_mkdir+0xca>
			if (dcl == 1) res = FR_INT_ERR;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	88 16       	cp	r8, r24
    39d0:	91 04       	cpc	r9, r1
    39d2:	a1 04       	cpc	r10, r1
    39d4:	b1 04       	cpc	r11, r1
    39d6:	09 f4       	brne	.+2      	; 0x39da <f_mkdir+0xba>
    39d8:	84 c0       	rjmp	.+264    	; 0x3ae2 <f_mkdir+0x1c2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    39da:	8f ef       	ldi	r24, 0xFF	; 255
    39dc:	88 16       	cp	r8, r24
    39de:	98 06       	cpc	r9, r24
    39e0:	a8 06       	cpc	r10, r24
    39e2:	b8 06       	cpc	r11, r24
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <f_mkdir+0xc8>
    39e6:	5d c0       	rjmp	.+186    	; 0x3aa2 <f_mkdir+0x182>
    39e8:	04 c0       	rjmp	.+8      	; 0x39f2 <f_mkdir+0xd2>
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    39ea:	0f 2e       	mov	r0, r31
    39ec:	f7 e0       	ldi	r31, 0x07	; 7
    39ee:	ff 2e       	mov	r15, r31
    39f0:	f0 2d       	mov	r31, r0
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    39f2:	f1 10       	cpse	r15, r1
    39f4:	79 c0       	rjmp	.+242    	; 0x3ae8 <f_mkdir+0x1c8>
    39f6:	cf 01       	movw	r24, r30
    39f8:	0e 94 76 07 	call	0xeec	; 0xeec <sync_window>
    39fc:	f8 2e       	mov	r15, r24
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
    39fe:	81 11       	cpse	r24, r1
    3a00:	73 c0       	rjmp	.+230    	; 0x3ae8 <f_mkdir+0x1c8>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    3a02:	b5 01       	movw	r22, r10
    3a04:	a4 01       	movw	r20, r8
    3a06:	89 a5       	ldd	r24, Y+41	; 0x29
    3a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a0a:	0e 94 0a 08 	call	0x1014	; 0x1014 <dir_clear>
    3a0e:	f8 2e       	mov	r15, r24
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
    3a10:	81 11       	cpse	r24, r1
    3a12:	6a c0       	rjmp	.+212    	; 0x3ae8 <f_mkdir+0x1c8>
					dir = fs->win;
    3a14:	e9 a4       	ldd	r14, Y+41	; 0x29
    3a16:	fa a4       	ldd	r15, Y+42	; 0x2a
    3a18:	67 01       	movw	r12, r14
    3a1a:	e3 e3       	ldi	r30, 0x33	; 51
    3a1c:	ce 0e       	add	r12, r30
    3a1e:	d1 1c       	adc	r13, r1
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
    3a20:	4b e0       	ldi	r20, 0x0B	; 11
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	60 e2       	ldi	r22, 0x20	; 32
    3a26:	70 e0       	ldi	r23, 0x00	; 0
    3a28:	c6 01       	movw	r24, r12
    3a2a:	0e 94 67 06 	call	0xcce	; 0xcce <mem_set>
					dir[DIR_Name] = '.';
    3a2e:	0f 2e       	mov	r0, r31
    3a30:	fe e2       	ldi	r31, 0x2E	; 46
    3a32:	7f 2e       	mov	r7, r31
    3a34:	f0 2d       	mov	r31, r0
    3a36:	f7 01       	movw	r30, r14
    3a38:	73 aa       	std	Z+51, r7	; 0x33
					dir[DIR_Attr] = AM_DIR;
    3a3a:	80 e1       	ldi	r24, 0x10	; 16
    3a3c:	86 af       	std	Z+62, r24	; 0x3e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3a3e:	e7 5b       	subi	r30, 0xB7	; 183
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    3a44:	31 96       	adiw	r30, 0x01	; 1
    3a46:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    3a48:	31 96       	adiw	r30, 0x01	; 1
    3a4a:	81 e2       	ldi	r24, 0x21	; 33
    3a4c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    3a4e:	31 96       	adiw	r30, 0x01	; 1
    3a50:	88 e4       	ldi	r24, 0x48	; 72
    3a52:	80 83       	st	Z, r24
					dir = fs->win;
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
    3a54:	a5 01       	movw	r20, r10
    3a56:	94 01       	movw	r18, r8
    3a58:	b6 01       	movw	r22, r12
    3a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a5e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
    3a62:	87 01       	movw	r16, r14
    3a64:	0d 5a       	subi	r16, 0xAD	; 173
    3a66:	1f 4f       	sbci	r17, 0xFF	; 255
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	b6 01       	movw	r22, r12
    3a6e:	c8 01       	movw	r24, r16
    3a70:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    3a74:	f7 01       	movw	r30, r14
    3a76:	ec 5a       	subi	r30, 0xAC	; 172
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	70 82       	st	Z, r7
					st_clust(fs, dir + SZDIRE, pcl);
    3a7c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a7e:	38 85       	ldd	r19, Y+8	; 0x08
    3a80:	49 85       	ldd	r20, Y+9	; 0x09
    3a82:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a84:	b8 01       	movw	r22, r16
    3a86:	89 a5       	ldd	r24, Y+41	; 0x29
    3a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <st_clust>
					fs->wflag = 1;
    3a8e:	e9 a5       	ldd	r30, Y+41	; 0x29
    3a90:	fa a5       	ldd	r31, Y+42	; 0x2a
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_register(&dj);	/* Register the object to the directoy */
    3a96:	ce 01       	movw	r24, r28
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <dir_register>
    3a9e:	f8 2e       	mov	r15, r24
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <f_mkdir+0x186>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3aa2:	ff 24       	eor	r15, r15
    3aa4:	f3 94       	inc	r15
				}
			}
			if (res == FR_OK) {
				res = dir_register(&dj);	/* Register the object to the directoy */
			}
			if (res == FR_OK) {
    3aa6:	f1 10       	cpse	r15, r1
    3aa8:	1f c0       	rjmp	.+62     	; 0x3ae8 <f_mkdir+0x1c8>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    3aaa:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3aac:	fc 8c       	ldd	r15, Y+28	; 0x1c
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3aae:	f7 01       	movw	r30, r14
    3ab0:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    3ab2:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    3ab4:	81 e2       	ldi	r24, 0x21	; 33
    3ab6:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    3ab8:	88 e4       	ldi	r24, 0x48	; 72
    3aba:	81 8f       	std	Z+25, r24	; 0x19
				} else
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
    3abc:	a5 01       	movw	r20, r10
    3abe:	94 01       	movw	r18, r8
    3ac0:	b7 01       	movw	r22, r14
    3ac2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ac6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    3aca:	80 e1       	ldi	r24, 0x10	; 16
    3acc:	f7 01       	movw	r30, r14
    3ace:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    3ad0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ad2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ad4:	21 e0       	ldi	r18, 0x01	; 1
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    3ada:	0e 94 68 08 	call	0x10d0	; 0x10d0 <sync_fs>
    3ade:	f8 2e       	mov	r15, r24
    3ae0:	13 c0       	rjmp	.+38     	; 0x3b08 <f_mkdir+0x1e8>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    3ae2:	68 94       	set
    3ae4:	ff 24       	eor	r15, r15
    3ae6:	f1 f8       	bld	r15, 1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    3ae8:	00 e0       	ldi	r16, 0x00	; 0
    3aea:	10 e0       	ldi	r17, 0x00	; 0
    3aec:	98 01       	movw	r18, r16
    3aee:	b5 01       	movw	r22, r10
    3af0:	a4 01       	movw	r20, r8
    3af2:	ce 01       	movw	r24, r28
    3af4:	01 96       	adiw	r24, 0x01	; 1
    3af6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <remove_chain>
    3afa:	06 c0       	rjmp	.+12     	; 0x3b08 <f_mkdir+0x1e8>
	res = find_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3afc:	68 94       	set
    3afe:	ff 24       	eor	r15, r15
    3b00:	f3 f8       	bld	r15, 3
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <f_mkdir+0x1e8>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
    3b04:	86 e0       	ldi	r24, 0x06	; 6
	res = find_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3b06:	f8 2e       	mov	r15, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3b08:	8f 2d       	mov	r24, r15
    3b0a:	ac 96       	adiw	r28, 0x2c	; 44
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	df 91       	pop	r29
    3b18:	cf 91       	pop	r28
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	df 90       	pop	r13
    3b24:	cf 90       	pop	r12
    3b26:	bf 90       	pop	r11
    3b28:	af 90       	pop	r10
    3b2a:	9f 90       	pop	r9
    3b2c:	8f 90       	pop	r8
    3b2e:	7f 90       	pop	r7
    3b30:	08 95       	ret

00003b32 <setEnableADC>:
		cnt++;
		if(cnt > 10000) {return false;}
	}
    ADCSRA |= (1<<ADIF);
    return true;
}
    3b32:	88 23       	and	r24, r24
    3b34:	11 f0       	breq	.+4      	; 0x3b3a <setEnableADC+0x8>
    3b36:	37 9a       	sbi	0x06, 7	; 6
    3b38:	08 95       	ret
    3b3a:	37 98       	cbi	0x06, 7	; 6
    3b3c:	08 95       	ret

00003b3e <setADCDivision>:
    3b3e:	96 b1       	in	r25, 0x06	; 6
    3b40:	98 7f       	andi	r25, 0xF8	; 248
    3b42:	96 b9       	out	0x06, r25	; 6
    3b44:	80 31       	cpi	r24, 0x10	; 16
    3b46:	b9 f0       	breq	.+46     	; 0x3b76 <setADCDivision+0x38>
    3b48:	38 f4       	brcc	.+14     	; 0x3b58 <setADCDivision+0x1a>
    3b4a:	84 30       	cpi	r24, 0x04	; 4
    3b4c:	71 f0       	breq	.+28     	; 0x3b6a <setADCDivision+0x2c>
    3b4e:	88 30       	cpi	r24, 0x08	; 8
    3b50:	71 f0       	breq	.+28     	; 0x3b6e <setADCDivision+0x30>
    3b52:	82 30       	cpi	r24, 0x02	; 2
    3b54:	f1 f4       	brne	.+60     	; 0x3b92 <setADCDivision+0x54>
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <setADCDivision+0x28>
    3b58:	80 34       	cpi	r24, 0x40	; 64
    3b5a:	99 f0       	breq	.+38     	; 0x3b82 <setADCDivision+0x44>
    3b5c:	80 38       	cpi	r24, 0x80	; 128
    3b5e:	a9 f0       	breq	.+42     	; 0x3b8a <setADCDivision+0x4c>
    3b60:	80 32       	cpi	r24, 0x20	; 32
    3b62:	b9 f4       	brne	.+46     	; 0x3b92 <setADCDivision+0x54>
    3b64:	0a c0       	rjmp	.+20     	; 0x3b7a <setADCDivision+0x3c>
    3b66:	30 9a       	sbi	0x06, 0	; 6
    3b68:	08 95       	ret
    3b6a:	31 9a       	sbi	0x06, 1	; 6
    3b6c:	08 95       	ret
    3b6e:	86 b1       	in	r24, 0x06	; 6
    3b70:	83 60       	ori	r24, 0x03	; 3
    3b72:	86 b9       	out	0x06, r24	; 6
    3b74:	08 95       	ret
    3b76:	32 9a       	sbi	0x06, 2	; 6
    3b78:	08 95       	ret
    3b7a:	86 b1       	in	r24, 0x06	; 6
    3b7c:	85 60       	ori	r24, 0x05	; 5
    3b7e:	86 b9       	out	0x06, r24	; 6
    3b80:	08 95       	ret
    3b82:	86 b1       	in	r24, 0x06	; 6
    3b84:	86 60       	ori	r24, 0x06	; 6
    3b86:	86 b9       	out	0x06, r24	; 6
    3b88:	08 95       	ret
    3b8a:	86 b1       	in	r24, 0x06	; 6
    3b8c:	87 60       	ori	r24, 0x07	; 7
    3b8e:	86 b9       	out	0x06, r24	; 6
    3b90:	08 95       	ret
    3b92:	80 e8       	ldi	r24, 0x80	; 128
    3b94:	91 e0       	ldi	r25, 0x01	; 1
    3b96:	0e 94 e7 33 	call	0x67ce	; 0x67ce <puts>
    3b9a:	86 b1       	in	r24, 0x06	; 6
    3b9c:	83 60       	ori	r24, 0x03	; 3
    3b9e:	86 b9       	out	0x06, r24	; 6
    3ba0:	08 95       	ret

00003ba2 <setFreeRunning>:
    3ba2:	88 23       	and	r24, r24
    3ba4:	11 f0       	breq	.+4      	; 0x3baa <setFreeRunning+0x8>
    3ba6:	35 9a       	sbi	0x06, 5	; 6
    3ba8:	08 95       	ret
    3baa:	35 98       	cbi	0x06, 5	; 6
    3bac:	08 95       	ret

00003bae <setMuxADC>:
    3bae:	97 b1       	in	r25, 0x07	; 7
    3bb0:	90 7e       	andi	r25, 0xE0	; 224
    3bb2:	97 b9       	out	0x07, r25	; 7
    3bb4:	88 30       	cpi	r24, 0x08	; 8
    3bb6:	20 f4       	brcc	.+8      	; 0x3bc0 <setMuxADC+0x12>
    3bb8:	97 b1       	in	r25, 0x07	; 7
    3bba:	89 2b       	or	r24, r25
    3bbc:	87 b9       	out	0x07, r24	; 7
    3bbe:	08 95       	ret
    3bc0:	1f 92       	push	r1
    3bc2:	8f 93       	push	r24
    3bc4:	80 eb       	ldi	r24, 0xB0	; 176
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	9f 93       	push	r25
    3bca:	8f 93       	push	r24
    3bcc:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	08 95       	ret

00003bda <setVoltageRefADC>:
    3bda:	97 b1       	in	r25, 0x07	; 7
    3bdc:	9f 73       	andi	r25, 0x3F	; 63
    3bde:	97 b9       	out	0x07, r25	; 7
    3be0:	27 b1       	in	r18, 0x07	; 7
    3be2:	30 e4       	ldi	r19, 0x40	; 64
    3be4:	83 9f       	mul	r24, r19
    3be6:	c0 01       	movw	r24, r0
    3be8:	11 24       	eor	r1, r1
    3bea:	82 2b       	or	r24, r18
    3bec:	87 b9       	out	0x07, r24	; 7
    3bee:	08 95       	ret

00003bf0 <setupADC3>:
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	a5 df       	rcall	.-182    	; 0x3b3e <setADCDivision>
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	f1 df       	rcall	.-30     	; 0x3bda <setVoltageRefADC>
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	d9 df       	rcall	.-78     	; 0x3bae <setMuxADC>
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	99 cf       	rjmp	.-206    	; 0x3b32 <setEnableADC>
    3c00:	08 95       	ret

00003c02 <setConversion>:
    3c02:	36 9a       	sbi	0x06, 6	; 6
    3c04:	08 95       	ret

00003c06 <setIO>:

void setIO(volatile uint8_t *DDR, uint8_t pinNumber, bool isOutput){
    if(isOutput) *DDR |= (1 << pinNumber);
    3c06:	44 23       	and	r20, r20
    3c08:	61 f0       	breq	.+24     	; 0x3c22 <setIO+0x1c>
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	40 81       	ld	r20, Z
    3c0e:	21 e0       	ldi	r18, 0x01	; 1
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <setIO+0x12>
    3c14:	22 0f       	add	r18, r18
    3c16:	33 1f       	adc	r19, r19
    3c18:	6a 95       	dec	r22
    3c1a:	e2 f7       	brpl	.-8      	; 0x3c14 <setIO+0xe>
    3c1c:	24 2b       	or	r18, r20
    3c1e:	20 83       	st	Z, r18
    3c20:	08 95       	ret
    else *DDR &= ~(1 << pinNumber); 
    3c22:	fc 01       	movw	r30, r24
    3c24:	40 81       	ld	r20, Z
    3c26:	21 e0       	ldi	r18, 0x01	; 1
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <setIO+0x2a>
    3c2c:	22 0f       	add	r18, r18
    3c2e:	33 1f       	adc	r19, r19
    3c30:	6a 95       	dec	r22
    3c32:	e2 f7       	brpl	.-8      	; 0x3c2c <setIO+0x26>
    3c34:	20 95       	com	r18
    3c36:	24 23       	and	r18, r20
    3c38:	20 83       	st	Z, r18
    3c3a:	08 95       	ret

00003c3c <createFile>:
        }
        else{
            return counter;
        }
    }
}
    3c3c:	0f 93       	push	r16
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	eb 01       	movw	r28, r22
    3c44:	9c 01       	movw	r18, r24
    3c46:	48 e0       	ldi	r20, 0x08	; 8
    3c48:	60 e4       	ldi	r22, 0x40	; 64
    3c4a:	84 e0       	ldi	r24, 0x04	; 4
    3c4c:	0e 94 0b 04 	call	0x816	; 0x816 <ASA_SDC00_put>
    3c50:	88 23       	and	r24, r24
    3c52:	61 f0       	breq	.+24     	; 0x3c6c <createFile+0x30>
    3c54:	1f 92       	push	r1
    3c56:	8f 93       	push	r24
    3c58:	8b ee       	ldi	r24, 0xEB	; 235
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	9f 93       	push	r25
    3c5e:	8f 93       	push	r24
    3c60:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	9e 01       	movw	r18, r28
    3c6e:	43 e0       	ldi	r20, 0x03	; 3
    3c70:	68 e4       	ldi	r22, 0x48	; 72
    3c72:	84 e0       	ldi	r24, 0x04	; 4
    3c74:	0e 94 0b 04 	call	0x816	; 0x816 <ASA_SDC00_put>
    3c78:	88 23       	and	r24, r24
    3c7a:	61 f0       	breq	.+24     	; 0x3c94 <createFile+0x58>
    3c7c:	1f 92       	push	r1
    3c7e:	8f 93       	push	r24
    3c80:	89 ef       	ldi	r24, 0xF9	; 249
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	9f 93       	push	r25
    3c86:	8f 93       	push	r24
    3c88:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	05 e0       	ldi	r16, 0x05	; 5
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	47 e0       	ldi	r20, 0x07	; 7
    3c9a:	68 ec       	ldi	r22, 0xC8	; 200
    3c9c:	84 e0       	ldi	r24, 0x04	; 4
    3c9e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ASA_SDC00_set>
    3ca2:	88 23       	and	r24, r24
    3ca4:	61 f0       	breq	.+24     	; 0x3cbe <createFile+0x82>
    3ca6:	1f 92       	push	r1
    3ca8:	8f 93       	push	r24
    3caa:	87 e0       	ldi	r24, 0x07	; 7
    3cac:	92 e0       	ldi	r25, 0x02	; 2
    3cae:	9f 93       	push	r25
    3cb0:	8f 93       	push	r24
    3cb2:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	00 e0       	ldi	r16, 0x00	; 0
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	41 e0       	ldi	r20, 0x01	; 1
    3cc4:	68 ec       	ldi	r22, 0xC8	; 200
    3cc6:	84 e0       	ldi	r24, 0x04	; 4
    3cc8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ASA_SDC00_set>
    3ccc:	88 23       	and	r24, r24
    3cce:	61 f0       	breq	.+24     	; 0x3ce8 <createFile+0xac>
    3cd0:	1f 92       	push	r1
    3cd2:	8f 93       	push	r24
    3cd4:	88 e1       	ldi	r24, 0x18	; 24
    3cd6:	92 e0       	ldi	r25, 0x02	; 2
    3cd8:	9f 93       	push	r25
    3cda:	8f 93       	push	r24
    3cdc:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	0f 91       	pop	r16
    3cee:	08 95       	ret

00003cf0 <initBuffer>:
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	11 82       	std	Z+1, r1	; 0x01
    3cf4:	10 82       	st	Z, r1
    3cf6:	08 95       	ret

00003cf8 <setSDCContinuous>:
    3cf8:	0f 93       	push	r16
    3cfa:	07 e0       	ldi	r16, 0x07	; 7
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	47 e0       	ldi	r20, 0x07	; 7
    3d00:	68 ec       	ldi	r22, 0xC8	; 200
    3d02:	84 e0       	ldi	r24, 0x04	; 4
    3d04:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ASA_SDC00_set>
    3d08:	88 23       	and	r24, r24
    3d0a:	61 f0       	breq	.+24     	; 0x3d24 <setSDCContinuous+0x2c>
    3d0c:	1f 92       	push	r1
    3d0e:	8f 93       	push	r24
    3d10:	87 e0       	ldi	r24, 0x07	; 7
    3d12:	92 e0       	ldi	r25, 0x02	; 2
    3d14:	9f 93       	push	r25
    3d16:	8f 93       	push	r24
    3d18:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 91       	pop	r16
    3d26:	08 95       	ret

00003d28 <setSDCRead>:
    3d28:	0f 93       	push	r16
    3d2a:	01 e0       	ldi	r16, 0x01	; 1
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	43 e0       	ldi	r20, 0x03	; 3
    3d30:	68 ec       	ldi	r22, 0xC8	; 200
    3d32:	84 e0       	ldi	r24, 0x04	; 4
    3d34:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ASA_SDC00_set>
    3d38:	88 23       	and	r24, r24
    3d3a:	61 f0       	breq	.+24     	; 0x3d54 <setSDCRead+0x2c>
    3d3c:	1f 92       	push	r1
    3d3e:	8f 93       	push	r24
    3d40:	87 e0       	ldi	r24, 0x07	; 7
    3d42:	92 e0       	ldi	r25, 0x02	; 2
    3d44:	9f 93       	push	r25
    3d46:	8f 93       	push	r24
    3d48:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	0f 91       	pop	r16
    3d56:	08 95       	ret

00003d58 <getSDCData>:
    3d58:	46 2f       	mov	r20, r22
    3d5a:	9c 01       	movw	r18, r24
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	84 e0       	ldi	r24, 0x04	; 4
    3d60:	0c 94 59 05 	jmp	0xab2	; 0xab2 <ASA_SDC00_get>
    3d64:	08 95       	ret

00003d66 <setSDCWords>:
    3d66:	46 2f       	mov	r20, r22
    3d68:	9c 01       	movw	r18, r24
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	84 e0       	ldi	r24, 0x04	; 4
    3d6e:	0e 94 0b 04 	call	0x816	; 0x816 <ASA_SDC00_put>
    3d72:	88 23       	and	r24, r24
    3d74:	61 f0       	breq	.+24     	; 0x3d8e <setSDCWords+0x28>
    3d76:	1f 92       	push	r1
    3d78:	8f 93       	push	r24
    3d7a:	8b e3       	ldi	r24, 0x3B	; 59
    3d7c:	92 e0       	ldi	r25, 0x02	; 2
    3d7e:	9f 93       	push	r25
    3d80:	8f 93       	push	r24
    3d82:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	08 95       	ret

00003d90 <closeSDC>:
    3d90:	0f 93       	push	r16
    3d92:	00 e0       	ldi	r16, 0x00	; 0
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	68 ec       	ldi	r22, 0xC8	; 200
    3d9a:	84 e0       	ldi	r24, 0x04	; 4
    3d9c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ASA_SDC00_set>
    3da0:	88 23       	and	r24, r24
    3da2:	61 f0       	breq	.+24     	; 0x3dbc <closeSDC+0x2c>
    3da4:	1f 92       	push	r1
    3da6:	8f 93       	push	r24
    3da8:	88 e1       	ldi	r24, 0x18	; 24
    3daa:	92 e0       	ldi	r25, 0x02	; 2
    3dac:	9f 93       	push	r25
    3dae:	8f 93       	push	r24
    3db0:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 91       	pop	r16
    3dbe:	08 95       	ret

00003dc0 <setSDCName>:
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	eb 01       	movw	r28, r22
    3dc6:	9c 01       	movw	r18, r24
    3dc8:	48 e0       	ldi	r20, 0x08	; 8
    3dca:	60 e4       	ldi	r22, 0x40	; 64
    3dcc:	84 e0       	ldi	r24, 0x04	; 4
    3dce:	0e 94 0b 04 	call	0x816	; 0x816 <ASA_SDC00_put>
    3dd2:	88 23       	and	r24, r24
    3dd4:	61 f0       	breq	.+24     	; 0x3dee <setSDCName+0x2e>
    3dd6:	1f 92       	push	r1
    3dd8:	8f 93       	push	r24
    3dda:	89 e6       	ldi	r24, 0x69	; 105
    3ddc:	92 e0       	ldi	r25, 0x02	; 2
    3dde:	9f 93       	push	r25
    3de0:	8f 93       	push	r24
    3de2:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	9e 01       	movw	r18, r28
    3df0:	43 e0       	ldi	r20, 0x03	; 3
    3df2:	68 e4       	ldi	r22, 0x48	; 72
    3df4:	84 e0       	ldi	r24, 0x04	; 4
    3df6:	0e 94 0b 04 	call	0x816	; 0x816 <ASA_SDC00_put>
    3dfa:	88 23       	and	r24, r24
    3dfc:	61 f0       	breq	.+24     	; 0x3e16 <setSDCName+0x56>
    3dfe:	1f 92       	push	r1
    3e00:	8f 93       	push	r24
    3e02:	8d e7       	ldi	r24, 0x7D	; 125
    3e04:	92 e0       	ldi	r25, 0x02	; 2
    3e06:	9f 93       	push	r25
    3e08:	8f 93       	push	r24
    3e0a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	08 95       	ret

00003e1c <getBufferSizeUseCRLF>:

int getBufferSizeUseCRLF(char dataString[]){
    int counter = 0;
    for(int i=0;i<MAX_WORDS_SIZE;i++){
        if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	20 81       	ld	r18, Z
    3e20:	21 11       	cpse	r18, r1
    3e22:	18 c0       	rjmp	.+48     	; 0x3e54 <getBufferSizeUseCRLF+0x38>
        }
    }
}

int getBufferSizeUseCRLF(char dataString[]){
    int counter = 0;
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	12 c0       	rjmp	.+36     	; 0x3e4e <getBufferSizeUseCRLF+0x32>
    for(int i=0;i<MAX_WORDS_SIZE;i++){
        if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
    3e2a:	91 91       	ld	r25, Z+
    3e2c:	99 23       	and	r25, r25
    3e2e:	79 f0       	breq	.+30     	; 0x3e4e <getBufferSizeUseCRLF+0x32>
    3e30:	9a 30       	cpi	r25, 0x0A	; 10
    3e32:	69 f0       	breq	.+26     	; 0x3e4e <getBufferSizeUseCRLF+0x32>
    3e34:	9d 30       	cpi	r25, 0x0D	; 13
    3e36:	59 f0       	breq	.+22     	; 0x3e4e <getBufferSizeUseCRLF+0x32>
            counter++;
    3e38:	2f 5f       	subi	r18, 0xFF	; 255
    3e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    }
}

int getBufferSizeUseCRLF(char dataString[]){
    int counter = 0;
    for(int i=0;i<MAX_WORDS_SIZE;i++){
    3e3c:	20 32       	cpi	r18, 0x20	; 32
    3e3e:	31 05       	cpc	r19, r1
    3e40:	a1 f7       	brne	.-24     	; 0x3e2a <getBufferSizeUseCRLF+0xe>
    3e42:	11 c0       	rjmp	.+34     	; 0x3e66 <getBufferSizeUseCRLF+0x4a>
        }
    }
}

int getBufferSizeUseCRLF(char dataString[]){
    int counter = 0;
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <getBufferSizeUseCRLF+0x32>
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    for(int i=0;i<MAX_WORDS_SIZE;i++){
        if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
            counter++;
        }
        else{
            return counter;
    3e4e:	82 2f       	mov	r24, r18
    3e50:	93 2f       	mov	r25, r19
    3e52:	08 95       	ret
}

int getBufferSizeUseCRLF(char dataString[]){
    int counter = 0;
    for(int i=0;i<MAX_WORDS_SIZE;i++){
        if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
    3e54:	2a 30       	cpi	r18, 0x0A	; 10
    3e56:	b1 f3       	breq	.-20     	; 0x3e44 <getBufferSizeUseCRLF+0x28>
    3e58:	2d 30       	cpi	r18, 0x0D	; 13
    3e5a:	b9 f3       	breq	.-18     	; 0x3e4a <getBufferSizeUseCRLF+0x2e>
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	31 96       	adiw	r30, 0x01	; 1
            counter++;
    3e60:	21 e0       	ldi	r18, 0x01	; 1
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	e2 cf       	rjmp	.-60     	; 0x3e2a <getBufferSizeUseCRLF+0xe>
        }
        else{
            return counter;
        }
    }
}
    3e66:	08 95       	ret

00003e68 <openTimer1B>:
void setTimer2_CompareInterrupt(char OCR_Data, uint16_t prescalerLavel){
    TCCR2 |= 1<<WGM21;    // CTC Mode
    TCCR2 |= getTimer123PrescalerLavel(prescalerLavel);
    TCNT2 = 0;
    OCR2 = OCR_Data;
}
    3e68:	87 b7       	in	r24, 0x37	; 55
    3e6a:	88 60       	ori	r24, 0x08	; 8
    3e6c:	87 bf       	out	0x37, r24	; 55
    3e6e:	78 94       	sei
    3e70:	08 95       	ret

00003e72 <closeTimer1B>:
    3e72:	87 b7       	in	r24, 0x37	; 55
    3e74:	87 7f       	andi	r24, 0xF7	; 247
    3e76:	87 bf       	out	0x37, r24	; 55
    3e78:	f8 94       	cli
    3e7a:	08 95       	ret

00003e7c <getTimer123PrescalerLavel>:
    3e7c:	80 34       	cpi	r24, 0x40	; 64
    3e7e:	91 05       	cpc	r25, r1
    3e80:	89 f0       	breq	.+34     	; 0x3ea4 <getTimer123PrescalerLavel+0x28>
    3e82:	30 f4       	brcc	.+12     	; 0x3e90 <getTimer123PrescalerLavel+0x14>
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	91 05       	cpc	r25, r1
    3e88:	c9 f0       	breq	.+50     	; 0x3ebc <getTimer123PrescalerLavel+0x40>
    3e8a:	08 97       	sbiw	r24, 0x08	; 8
    3e8c:	49 f0       	breq	.+18     	; 0x3ea0 <getTimer123PrescalerLavel+0x24>
    3e8e:	10 c0       	rjmp	.+32     	; 0x3eb0 <getTimer123PrescalerLavel+0x34>
    3e90:	81 15       	cp	r24, r1
    3e92:	21 e0       	ldi	r18, 0x01	; 1
    3e94:	92 07       	cpc	r25, r18
    3e96:	41 f0       	breq	.+16     	; 0x3ea8 <getTimer123PrescalerLavel+0x2c>
    3e98:	81 15       	cp	r24, r1
    3e9a:	94 40       	sbci	r25, 0x04	; 4
    3e9c:	39 f0       	breq	.+14     	; 0x3eac <getTimer123PrescalerLavel+0x30>
    3e9e:	08 c0       	rjmp	.+16     	; 0x3eb0 <getTimer123PrescalerLavel+0x34>
    3ea0:	82 e0       	ldi	r24, 0x02	; 2
    3ea2:	08 95       	ret
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	08 95       	ret
    3ea8:	84 e0       	ldi	r24, 0x04	; 4
    3eaa:	08 95       	ret
    3eac:	85 e0       	ldi	r24, 0x05	; 5
    3eae:	08 95       	ret
    3eb0:	88 e9       	ldi	r24, 0x98	; 152
    3eb2:	92 e0       	ldi	r25, 0x02	; 2
    3eb4:	0e 94 e7 33 	call	0x67ce	; 0x67ce <puts>
    3eb8:	84 e0       	ldi	r24, 0x04	; 4
    3eba:	08 95       	ret
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	08 95       	ret

00003ec0 <setTimer1B_CompareInterrupt>:
}
// ########################################## //

// ########################################## //
// Timer1 16 bits
void setTimer1B_CompareInterrupt(uint16_t OCR_Data, uint16_t prescalerLavel){ 
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
    3ec4:	ec 01       	movw	r28, r24
    TCCR1B |= 1 << WGM12;   // CTC mode
    3ec6:	9e b5       	in	r25, 0x2e	; 46
    3ec8:	98 60       	ori	r25, 0x08	; 8
    3eca:	9e bd       	out	0x2e, r25	; 46
    TCCR1B |= getTimer123PrescalerLavel(prescalerLavel);
    3ecc:	cb 01       	movw	r24, r22
    3ece:	d6 df       	rcall	.-84     	; 0x3e7c <getTimer123PrescalerLavel>
    3ed0:	9e b5       	in	r25, 0x2e	; 46
    3ed2:	89 2b       	or	r24, r25
    3ed4:	8e bd       	out	0x2e, r24	; 46
    TCNT1 = 0; 
    3ed6:	1d bc       	out	0x2d, r1	; 45
    3ed8:	1c bc       	out	0x2c, r1	; 44
    OCR1A = OCR_Data; 
    3eda:	db bd       	out	0x2b, r29	; 43
    3edc:	ca bd       	out	0x2a, r28	; 42
    TIMSK |= (1<<OCIE1B);
    3ede:	87 b7       	in	r24, 0x37	; 55
    3ee0:	88 60       	ori	r24, 0x08	; 8
    3ee2:	87 bf       	out	0x37, r24	; 55
} 
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    3eea:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3eec:	77 9b       	sbis	0x0e, 7	; 14
    3eee:	fe cf       	rjmp	.-4      	; 0x3eec <xchg_spi+0x2>
	return SPDR;
    3ef0:	8f b1       	in	r24, 0x0f	; 15
}
    3ef2:	08 95       	ret

00003ef4 <wait_ready>:
)
{
	BYTE d;


	Timer2 = 1000*wt;
    3ef4:	28 ee       	ldi	r18, 0xE8	; 232
    3ef6:	33 e0       	ldi	r19, 0x03	; 3
    3ef8:	ac 01       	movw	r20, r24
    3efa:	42 9f       	mul	r20, r18
    3efc:	c0 01       	movw	r24, r0
    3efe:	43 9f       	mul	r20, r19
    3f00:	90 0d       	add	r25, r0
    3f02:	52 9f       	mul	r21, r18
    3f04:	90 0d       	add	r25, r0
    3f06:	11 24       	eor	r1, r1
    3f08:	a0 e0       	ldi	r26, 0x00	; 0
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <Timer2>
    3f10:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <Timer2+0x1>
    3f14:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <Timer2+0x2>
    3f18:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <Timer2+0x3>
	do {
		d = xchg_spi(0xFF);
    3f1c:	8f ef       	ldi	r24, 0xFF	; 255
    3f1e:	e5 df       	rcall	.-54     	; 0x3eea <xchg_spi>
		if(Timer2 > 0) Timer2--;
    3f20:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <Timer2>
    3f24:	50 91 df 03 	lds	r21, 0x03DF	; 0x8003df <Timer2+0x1>
    3f28:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <Timer2+0x2>
    3f2c:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <Timer2+0x3>
    3f30:	45 2b       	or	r20, r21
    3f32:	46 2b       	or	r20, r22
    3f34:	47 2b       	or	r20, r23
    3f36:	a1 f0       	breq	.+40     	; 0x3f60 <wait_ready+0x6c>
    3f38:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <Timer2>
    3f3c:	50 91 df 03 	lds	r21, 0x03DF	; 0x8003df <Timer2+0x1>
    3f40:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <Timer2+0x2>
    3f44:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <Timer2+0x3>
    3f48:	41 50       	subi	r20, 0x01	; 1
    3f4a:	51 09       	sbc	r21, r1
    3f4c:	61 09       	sbc	r22, r1
    3f4e:	71 09       	sbc	r23, r1
    3f50:	40 93 de 03 	sts	0x03DE, r20	; 0x8003de <Timer2>
    3f54:	50 93 df 03 	sts	0x03DF, r21	; 0x8003df <Timer2+0x1>
    3f58:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <Timer2+0x2>
    3f5c:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <Timer2+0x3>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	}
	while (d != 0xFF && Timer2);
    3f60:	8f 3f       	cpi	r24, 0xFF	; 255
    3f62:	61 f0       	breq	.+24     	; 0x3f7c <wait_ready+0x88>
    3f64:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <Timer2>
    3f68:	50 91 df 03 	lds	r21, 0x03DF	; 0x8003df <Timer2+0x1>
    3f6c:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <Timer2+0x2>
    3f70:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <Timer2+0x3>
    3f74:	45 2b       	or	r20, r21
    3f76:	46 2b       	or	r20, r22
    3f78:	47 2b       	or	r20, r23
    3f7a:	81 f6       	brne	.-96     	; 0x3f1c <wait_ready+0x28>

	return (d == 0xFF) ? 1 : 0;
    3f7c:	21 e0       	ldi	r18, 0x01	; 1
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	8f 3f       	cpi	r24, 0xFF	; 255
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <wait_ready+0x94>
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
}
    3f88:	c9 01       	movw	r24, r18
    3f8a:	08 95       	ret

00003f8c <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    3f8c:	e2 e6       	ldi	r30, 0x62	; 98
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	80 61       	ori	r24, 0x10	; 16
    3f94:	80 83       	st	Z, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3f96:	8f ef       	ldi	r24, 0xFF	; 255
    3f98:	a8 cf       	rjmp	.-176    	; 0x3eea <xchg_spi>
    3f9a:	08 95       	ret

00003f9c <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    3f9c:	cf 93       	push	r28
    3f9e:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    3fa0:	e2 e6       	ldi	r30, 0x62	; 98
    3fa2:	f0 e0       	ldi	r31, 0x00	; 0
    3fa4:	80 81       	ld	r24, Z
    3fa6:	8f 7e       	andi	r24, 0xEF	; 239
    3fa8:	80 83       	st	Z, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    3faa:	8f ef       	ldi	r24, 0xFF	; 255
    3fac:	9e df       	rcall	.-196    	; 0x3eea <xchg_spi>

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3fae:	84 ef       	ldi	r24, 0xF4	; 244
    3fb0:	91 e0       	ldi	r25, 0x01	; 1
    3fb2:	a0 df       	rcall	.-192    	; 0x3ef4 <wait_ready>
    3fb4:	ec 01       	movw	r28, r24
    3fb6:	89 2b       	or	r24, r25

	deselect();		/* Timeout */
    3fb8:	11 f4       	brne	.+4      	; 0x3fbe <select+0x22>
    3fba:	e8 df       	rcall	.-48     	; 0x3f8c <deselect>
	return 0;
    3fbc:	02 c0       	rjmp	.+4      	; 0x3fc2 <select+0x26>
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3fbe:	c1 e0       	ldi	r28, 0x01	; 1
    3fc0:	d0 e0       	ldi	r29, 0x00	; 0

	deselect();		/* Timeout */
	return 0;
}
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	08 95       	ret

00003fca <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	08 2f       	mov	r16, r24
    3fd4:	19 2f       	mov	r17, r25
    3fd6:	eb 01       	movw	r28, r22
	BYTE token;
	Timer1 = 10000;					// Set count-down initial at 10000, have't compute for delay 200ms
    3fd8:	80 e1       	ldi	r24, 0x10	; 16
    3fda:	97 e2       	ldi	r25, 0x27	; 39
    3fdc:	a0 e0       	ldi	r26, 0x00	; 0
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    3fe4:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    3fe8:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    3fec:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    3ff0:	8f ef       	ldi	r24, 0xFF	; 255
    3ff2:	7b df       	rcall	.-266    	; 0x3eea <xchg_spi>
		if(Timer1>0) Timer1--;
    3ff4:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <Timer1>
    3ff8:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <Timer1+0x1>
    3ffc:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4000:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4004:	45 2b       	or	r20, r21
    4006:	46 2b       	or	r20, r22
    4008:	47 2b       	or	r20, r23
    400a:	a1 f0       	breq	.+40     	; 0x4034 <rcvr_datablock+0x6a>
    400c:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <Timer1>
    4010:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4014:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4018:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <Timer1+0x3>
    401c:	41 50       	subi	r20, 0x01	; 1
    401e:	51 09       	sbc	r21, r1
    4020:	61 09       	sbc	r22, r1
    4022:	71 09       	sbc	r23, r1
    4024:	40 93 e2 03 	sts	0x03E2, r20	; 0x8003e2 <Timer1>
    4028:	50 93 e3 03 	sts	0x03E3, r21	; 0x8003e3 <Timer1+0x1>
    402c:	60 93 e4 03 	sts	0x03E4, r22	; 0x8003e4 <Timer1+0x2>
    4030:	70 93 e5 03 	sts	0x03E5, r23	; 0x8003e5 <Timer1+0x3>
	} while ((token == 0xFF) && Timer1);
    4034:	8f 3f       	cpi	r24, 0xFF	; 255
    4036:	79 f4       	brne	.+30     	; 0x4056 <rcvr_datablock+0x8c>
    4038:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    403c:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4040:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4044:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4048:	89 2b       	or	r24, r25
    404a:	8a 2b       	or	r24, r26
    404c:	8b 2b       	or	r24, r27
    404e:	81 f6       	brne	.-96     	; 0x3ff0 <rcvr_datablock+0x26>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	1e c0       	rjmp	.+60     	; 0x4092 <rcvr_datablock+0xc8>
    4056:	8e 3f       	cpi	r24, 0xFE	; 254
    4058:	d1 f4       	brne	.+52     	; 0x408e <rcvr_datablock+0xc4>
    405a:	e0 2f       	mov	r30, r16
    405c:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    4062:	77 9b       	sbis	0x0e, 7	; 14
    4064:	fe cf       	rjmp	.-4      	; 0x4062 <rcvr_datablock+0x98>
		*p++ = SPDR;
    4066:	9f b1       	in	r25, 0x0f	; 15
    4068:	df 01       	movw	r26, r30
    406a:	90 83       	st	Z, r25
		SPDR = 0xFF;
    406c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    406e:	77 9b       	sbis	0x0e, 7	; 14
    4070:	fe cf       	rjmp	.-4      	; 0x406e <rcvr_datablock+0xa4>
		*p++ = SPDR;
    4072:	9f b1       	in	r25, 0x0f	; 15
    4074:	11 96       	adiw	r26, 0x01	; 1
    4076:	9c 93       	st	X, r25
	} while (cnt -= 2);
    4078:	22 97       	sbiw	r28, 0x02	; 2
    407a:	32 96       	adiw	r30, 0x02	; 2
    407c:	20 97       	sbiw	r28, 0x00	; 0
    407e:	81 f7       	brne	.-32     	; 0x4060 <rcvr_datablock+0x96>
		if(Timer1>0) Timer1--;
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    4080:	8f ef       	ldi	r24, 0xFF	; 255
    4082:	33 df       	rcall	.-410    	; 0x3eea <xchg_spi>
	xchg_spi(0xFF);
    4084:	8f ef       	ldi	r24, 0xFF	; 255
    4086:	31 df       	rcall	.-414    	; 0x3eea <xchg_spi>
    4088:	81 e0       	ldi	r24, 0x01	; 1

	return 1;						/* Return with success */
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	02 c0       	rjmp	.+4      	; 0x4092 <rcvr_datablock+0xc8>
    408e:	80 e0       	ldi	r24, 0x00	; 0
	Timer1 = 10000;					// Set count-down initial at 10000, have't compute for delay 200ms
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
		if(Timer1>0) Timer1--;
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	df 91       	pop	r29
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	08 95       	ret

0000409c <xmit_datablock>:
    409c:	1f 93       	push	r17
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	ec 01       	movw	r28, r24
    40a4:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    40a6:	84 ef       	ldi	r24, 0xF4	; 244
    40a8:	91 e0       	ldi	r25, 0x01	; 1
    40aa:	24 df       	rcall	.-440    	; 0x3ef4 <wait_ready>
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	31 f1       	breq	.+76     	; 0x40fc <xmit_datablock+0x60>

	xchg_spi(token);					/* Xmit data token */
    40b0:	81 2f       	mov	r24, r17
    40b2:	1b df       	rcall	.-458    	; 0x3eea <xchg_spi>
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    40b4:	1d 3f       	cpi	r17, 0xFD	; 253
    40b6:	01 f1       	breq	.+64     	; 0x40f8 <xmit_datablock+0x5c>
    40b8:	fe 01       	movw	r30, r28
    40ba:	9e 01       	movw	r18, r28
    40bc:	3e 5f       	subi	r19, 0xFE	; 254
    40be:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
    40c0:	90 81       	ld	r25, Z
    40c2:	9f b9       	out	0x0f, r25	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    40c4:	77 9b       	sbis	0x0e, 7	; 14
    40c6:	fe cf       	rjmp	.-4      	; 0x40c4 <xmit_datablock+0x28>
		SPDR = *p++;
    40c8:	11 96       	adiw	r26, 0x01	; 1
    40ca:	9c 91       	ld	r25, X
    40cc:	9f b9       	out	0x0f, r25	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    40ce:	77 9b       	sbis	0x0e, 7	; 14
    40d0:	fe cf       	rjmp	.-4      	; 0x40ce <xmit_datablock+0x32>
    40d2:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    40d4:	e2 17       	cp	r30, r18
    40d6:	f3 07       	cpc	r31, r19

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */

	xmit_spi_multi(buff, 512);			/* Data */
	xchg_spi(0xFF); xchg_spi(0xFF);		/* Dummy CRC */
    40d8:	91 f7       	brne	.-28     	; 0x40be <xmit_datablock+0x22>
    40da:	8f ef       	ldi	r24, 0xFF	; 255
    40dc:	06 df       	rcall	.-500    	; 0x3eea <xchg_spi>
    40de:	8f ef       	ldi	r24, 0xFF	; 255

	resp = xchg_spi(0xFF);				/* Receive data resp */
    40e0:	04 df       	rcall	.-504    	; 0x3eea <xchg_spi>
    40e2:	8f ef       	ldi	r24, 0xFF	; 255
    40e4:	02 df       	rcall	.-508    	; 0x3eea <xchg_spi>

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */
    40e6:	8f 71       	andi	r24, 0x1F	; 31
    40e8:	31 e0       	ldi	r19, 0x01	; 1
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	85 30       	cpi	r24, 0x05	; 5
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <xmit_datablock+0x56>
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	83 2f       	mov	r24, r19
    40f4:	92 2f       	mov	r25, r18
    40f6:	02 c0       	rjmp	.+4      	; 0x40fc <xmit_datablock+0x60>


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	90 e0       	ldi	r25, 0x00	; 0
	resp = xchg_spi(0xFF);				/* Receive data resp */

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */

	/* Busy check is done at next transmission */
}
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	1f 91       	pop	r17
    4102:	08 95       	ret

00004104 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4104:	ff 92       	push	r15
    4106:	0f 93       	push	r16
    4108:	1f 93       	push	r17
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	c8 2f       	mov	r28, r24
    4110:	d4 2f       	mov	r29, r20
    4112:	15 2f       	mov	r17, r21
    4114:	06 2f       	mov	r16, r22
    4116:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    4118:	88 23       	and	r24, r24
    411a:	4c f4       	brge	.+18     	; 0x412e <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	ba 01       	movw	r22, r20
    4122:	87 e3       	ldi	r24, 0x37	; 55
    4124:	ef df       	rcall	.-34     	; 0x4104 <send_cmd>
		if (res > 1) return res;
    4126:	82 30       	cpi	r24, 0x02	; 2
    4128:	08 f0       	brcs	.+2      	; 0x412c <send_cmd+0x28>
    412a:	3c c0       	rjmp	.+120    	; 0x41a4 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    412c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    412e:	cc 30       	cpi	r28, 0x0C	; 12
		deselect();
    4130:	f1 f0       	breq	.+60     	; 0x416e <send_cmd+0x6a>
		if (!select()) return 0xFF;
    4132:	2c df       	rcall	.-424    	; 0x3f8c <deselect>
    4134:	33 df       	rcall	.-410    	; 0x3f9c <select>
    4136:	89 2b       	or	r24, r25
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    4138:	c1 f0       	breq	.+48     	; 0x416a <send_cmd+0x66>
    413a:	8c 2f       	mov	r24, r28
    413c:	80 64       	ori	r24, 0x40	; 64
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    413e:	d5 de       	rcall	.-598    	; 0x3eea <xchg_spi>
    4140:	8f 2d       	mov	r24, r15
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    4142:	d3 de       	rcall	.-602    	; 0x3eea <xchg_spi>
    4144:	80 2f       	mov	r24, r16
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    4146:	d1 de       	rcall	.-606    	; 0x3eea <xchg_spi>
    4148:	81 2f       	mov	r24, r17
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    414a:	cf de       	rcall	.-610    	; 0x3eea <xchg_spi>
    414c:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    414e:	cd de       	rcall	.-614    	; 0x3eea <xchg_spi>
    4150:	cc 23       	and	r28, r28
    4152:	29 f1       	breq	.+74     	; 0x419e <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    4154:	21 c0       	rjmp	.+66     	; 0x4198 <send_cmd+0x94>
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	c8 de       	rcall	.-624    	; 0x3eea <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    415a:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	c5 de       	rcall	.-630    	; 0x3eea <xchg_spi>
	while ((res & 0x80) && --n);
    4160:	88 23       	and	r24, r24
    4162:	04 f5       	brge	.+64     	; 0x41a4 <send_cmd+0xa0>
    4164:	c1 50       	subi	r28, 0x01	; 1
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    4166:	d1 f7       	brne	.-12     	; 0x415c <send_cmd+0x58>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    4168:	1d c0       	rjmp	.+58     	; 0x41a4 <send_cmd+0xa0>
    416a:	8f ef       	ldi	r24, 0xFF	; 255
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    416c:	1b c0       	rjmp	.+54     	; 0x41a4 <send_cmd+0xa0>
    416e:	8c e4       	ldi	r24, 0x4C	; 76
    4170:	bc de       	rcall	.-648    	; 0x3eea <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    4172:	8f 2d       	mov	r24, r15
    4174:	ba de       	rcall	.-652    	; 0x3eea <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    4176:	80 2f       	mov	r24, r16
    4178:	b8 de       	rcall	.-656    	; 0x3eea <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    417a:	81 2f       	mov	r24, r17
    417c:	b6 de       	rcall	.-660    	; 0x3eea <xchg_spi>
    417e:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    4180:	b4 de       	rcall	.-664    	; 0x3eea <xchg_spi>
    4182:	81 e0       	ldi	r24, 0x01	; 1

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    4184:	b2 de       	rcall	.-668    	; 0x3eea <xchg_spi>
    4186:	cc 30       	cpi	r28, 0x0C	; 12
    4188:	31 f3       	breq	.-52     	; 0x4156 <send_cmd+0x52>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    418a:	e7 cf       	rjmp	.-50     	; 0x415a <send_cmd+0x56>
    418c:	87 e8       	ldi	r24, 0x87	; 135
    418e:	ad de       	rcall	.-678    	; 0x3eea <xchg_spi>
    4190:	e4 cf       	rjmp	.-56     	; 0x415a <send_cmd+0x56>
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	aa de       	rcall	.-684    	; 0x3eea <xchg_spi>
    4196:	e1 cf       	rjmp	.-62     	; 0x415a <send_cmd+0x56>
    4198:	c8 30       	cpi	r28, 0x08	; 8
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    419a:	c1 f3       	breq	.-16     	; 0x418c <send_cmd+0x88>
    419c:	fa cf       	rjmp	.-12     	; 0x4192 <send_cmd+0x8e>
    419e:	85 e9       	ldi	r24, 0x95	; 149
	xchg_spi(n);
    41a0:	a4 de       	rcall	.-696    	; 0x3eea <xchg_spi>
    41a2:	db cf       	rjmp	.-74     	; 0x415a <send_cmd+0x56>
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	ff 90       	pop	r15
    41ae:	08 95       	ret

000041b0 <mmc_disk_initialize>:
    41b0:	cf 92       	push	r12
    41b2:	df 92       	push	r13
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    41b4:	ef 92       	push	r14
    41b6:	ff 92       	push	r15
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <mmc_disk_initialize+0x12>
    41c2:	00 d0       	rcall	.+0      	; 0x41c4 <mmc_disk_initialize+0x14>
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 33511; Timer1; Timer1--) ;		/* Wait for 100ms  Loop once = 32.2uS, need Loop 311055 times*/
    41c8:	87 ee       	ldi	r24, 0xE7	; 231
    41ca:	92 e8       	ldi	r25, 0x82	; 130
    41cc:	a0 e0       	ldi	r26, 0x00	; 0
    41ce:	b0 e0       	ldi	r27, 0x00	; 0
    41d0:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    41d4:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    41d8:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    41dc:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
    41e0:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    41e4:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    41e8:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    41ec:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    41f0:	89 2b       	or	r24, r25
    41f2:	8a 2b       	or	r24, r26
    41f4:	8b 2b       	or	r24, r27
    41f6:	f9 f0       	breq	.+62     	; 0x4236 <mmc_disk_initialize+0x86>
    41f8:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    41fc:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4200:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4204:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	a1 09       	sbc	r26, r1
    420c:	b1 09       	sbc	r27, r1
    420e:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    4212:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    4216:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    421a:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
    421e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4222:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4226:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    422a:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    422e:	89 2b       	or	r24, r25
    4230:	8a 2b       	or	r24, r26
    4232:	8b 2b       	or	r24, r27
    4234:	09 f7       	brne	.-62     	; 0x41f8 <mmc_disk_initialize+0x48>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
    4236:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    423a:	81 ff       	sbrs	r24, 1
    423c:	03 c0       	rjmp	.+6      	; 0x4244 <mmc_disk_initialize+0x94>
    423e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    4242:	11 c1       	rjmp	.+546    	; 0x4466 <mmc_disk_initialize+0x2b6>
	// The SDC00 is always power, don't need to power on


	/* Configure MOSI/MISO/SCLK/CS pins */
	// Configure PULL UP
	SFIOR &= ~(0x01 << PUD);
    4244:	80 b5       	in	r24, 0x20	; 32
    4246:	8b 7f       	andi	r24, 0xFB	; 251
    4248:	80 bd       	out	0x20, r24	; 32

	// Configure /SS, MOSI, CLK output
	SPI_DDR &= ~(0x01 << SPI_MISO);
    424a:	bb 98       	cbi	0x17, 3	; 23
	SPI_DDR |= (0x01 << SPI_MOSI) | (0x01 << SPI_SCK) | (0x01 << SPI_SS);
    424c:	87 b3       	in	r24, 0x17	; 23
    424e:	87 60       	ori	r24, 0x07	; 7
    4250:	87 bb       	out	0x17, r24	; 23
	DDRF |= (0x01 << 4);
    4252:	e1 e6       	ldi	r30, 0x61	; 97
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	80 61       	ori	r24, 0x10	; 16
    425a:	80 83       	st	Z, r24

	// Pin Initial state 
	// Hi: MOSI & \SS
	// Lo: MISO & SCK

	SPI_PORT &= ~((0x01 << SPI_SCK) | (0x01 << SPI_MISO) );
    425c:	88 b3       	in	r24, 0x18	; 24
    425e:	85 7f       	andi	r24, 0xF5	; 245
    4260:	88 bb       	out	0x18, r24	; 24
	SPI_PORT |= (0x01 << SPI_MOSI) | (0x01 << SPI_SS) ;
    4262:	88 b3       	in	r24, 0x18	; 24
    4264:	85 60       	ori	r24, 0x05	; 5
    4266:	88 bb       	out	0x18, r24	; 24

	// Enable SPI Interface and setup Clock rate clk/16
	//	7		6		5		4		3		2		1		0
	//	SPIE	SPE		DORD	MSTR	CPOL	CPHA	SPR1	SPR0
	//SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1<<CPOL) | (1<<CPHA) ;
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    4268:	81 e5       	ldi	r24, 0x51	; 81
    426a:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X); // Not Use 2X Mode
    426c:	70 98       	cbi	0x0e, 0	; 14
	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 33511; Timer1; Timer1--) ;		/* Wait for 100ms  Loop once = 32.2uS, need Loop 311055 times*/
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    426e:	82 e5       	ldi	r24, 0x52	; 82
    4270:	8d b9       	out	0x0d, r24	; 13
    4272:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    4274:	8f ef       	ldi	r24, 0xFF	; 255
    4276:	39 de       	rcall	.-910    	; 0x3eea <xchg_spi>
    4278:	11 50       	subi	r17, 0x01	; 1
    427a:	e1 f7       	brne	.-8      	; 0x4274 <mmc_disk_initialize+0xc4>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	ba 01       	movw	r22, r20
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	3f df       	rcall	.-386    	; 0x4104 <send_cmd>
    4286:	81 30       	cpi	r24, 0x01	; 1
    4288:	09 f0       	breq	.+2      	; 0x428c <mmc_disk_initialize+0xdc>
    428a:	e9 c0       	rjmp	.+466    	; 0x445e <mmc_disk_initialize+0x2ae>
		Timer1 = 10000;						/* Initialization timeout of 1000 msec, Count times have't compute*/
    428c:	80 e1       	ldi	r24, 0x10	; 16
    428e:	97 e2       	ldi	r25, 0x27	; 39
    4290:	a0 e0       	ldi	r26, 0x00	; 0
    4292:	b0 e0       	ldi	r27, 0x00	; 0
    4294:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    4298:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    429c:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    42a0:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    42a4:	4a ea       	ldi	r20, 0xAA	; 170
    42a6:	51 e0       	ldi	r21, 0x01	; 1
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	70 e0       	ldi	r23, 0x00	; 0
    42ac:	88 e0       	ldi	r24, 0x08	; 8
    42ae:	2a df       	rcall	.-428    	; 0x4104 <send_cmd>
    42b0:	81 30       	cpi	r24, 0x01	; 1
    42b2:	09 f0       	breq	.+2      	; 0x42b6 <mmc_disk_initialize+0x106>
    42b4:	6d c0       	rjmp	.+218    	; 0x4390 <mmc_disk_initialize+0x1e0>
    42b6:	ce 01       	movw	r24, r28
    42b8:	01 96       	adiw	r24, 0x01	; 1
    42ba:	6c 01       	movw	r12, r24
    42bc:	7e 01       	movw	r14, r28
    42be:	95 e0       	ldi	r25, 0x05	; 5
    42c0:	e9 0e       	add	r14, r25
    42c2:	f1 1c       	adc	r15, r1
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
    42c4:	86 01       	movw	r16, r12
    42c6:	8f ef       	ldi	r24, 0xFF	; 255
    42c8:	10 de       	rcall	.-992    	; 0x3eea <xchg_spi>
    42ca:	f8 01       	movw	r30, r16
    42cc:	81 93       	st	Z+, r24
    42ce:	8f 01       	movw	r16, r30
    42d0:	ee 15       	cp	r30, r14
    42d2:	ff 05       	cpc	r31, r15
    42d4:	c1 f7       	brne	.-16     	; 0x42c6 <mmc_disk_initialize+0x116>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	81 30       	cpi	r24, 0x01	; 1
    42da:	09 f0       	breq	.+2      	; 0x42de <mmc_disk_initialize+0x12e>
    42dc:	c0 c0       	rjmp	.+384    	; 0x445e <mmc_disk_initialize+0x2ae>
    42de:	8c 81       	ldd	r24, Y+4	; 0x04
    42e0:	8a 3a       	cpi	r24, 0xAA	; 170
    42e2:	09 f0       	breq	.+2      	; 0x42e6 <mmc_disk_initialize+0x136>
    42e4:	bc c0       	rjmp	.+376    	; 0x445e <mmc_disk_initialize+0x2ae>
    42e6:	1f c0       	rjmp	.+62     	; 0x4326 <mmc_disk_initialize+0x176>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) { /* Wait for leaving idle state (ACMD41 with HCS bit) */
					if(Timer1>0) Timer1--;	
    42e8:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    42ec:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    42f0:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    42f4:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    42f8:	89 2b       	or	r24, r25
    42fa:	8a 2b       	or	r24, r26
    42fc:	8b 2b       	or	r24, r27
    42fe:	99 f0       	breq	.+38     	; 0x4326 <mmc_disk_initialize+0x176>
    4300:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4304:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4308:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    430c:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4310:	01 97       	sbiw	r24, 0x01	; 1
    4312:	a1 09       	sbc	r26, r1
    4314:	b1 09       	sbc	r27, r1
    4316:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    431a:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    431e:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    4322:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 10000;						/* Initialization timeout of 1000 msec, Count times have't compute*/
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) { /* Wait for leaving idle state (ACMD41 with HCS bit) */
    4326:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    432a:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    432e:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4332:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4336:	89 2b       	or	r24, r25
    4338:	8a 2b       	or	r24, r26
    433a:	8b 2b       	or	r24, r27
    433c:	41 f0       	breq	.+16     	; 0x434e <mmc_disk_initialize+0x19e>
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	70 e4       	ldi	r23, 0x40	; 64
    4346:	89 ea       	ldi	r24, 0xA9	; 169
    4348:	dd de       	rcall	.-582    	; 0x4104 <send_cmd>
    434a:	81 11       	cpse	r24, r1
    434c:	cd cf       	rjmp	.-102    	; 0x42e8 <mmc_disk_initialize+0x138>
					if(Timer1>0) Timer1--;	
				}
					
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    434e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4352:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4356:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    435a:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    435e:	89 2b       	or	r24, r25
    4360:	8a 2b       	or	r24, r26
    4362:	8b 2b       	or	r24, r27
    4364:	09 f4       	brne	.+2      	; 0x4368 <mmc_disk_initialize+0x1b8>
    4366:	7b c0       	rjmp	.+246    	; 0x445e <mmc_disk_initialize+0x2ae>
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	ba 01       	movw	r22, r20
    436e:	8a e3       	ldi	r24, 0x3A	; 58
    4370:	c9 de       	rcall	.-622    	; 0x4104 <send_cmd>
    4372:	81 11       	cpse	r24, r1
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    4374:	74 c0       	rjmp	.+232    	; 0x445e <mmc_disk_initialize+0x2ae>
    4376:	8f ef       	ldi	r24, 0xFF	; 255
    4378:	b8 dd       	rcall	.-1168   	; 0x3eea <xchg_spi>
    437a:	f6 01       	movw	r30, r12
    437c:	81 93       	st	Z+, r24
    437e:	6f 01       	movw	r12, r30
    4380:	ee 15       	cp	r30, r14
    4382:	ff 05       	cpc	r31, r15
    4384:	c1 f7       	brne	.-16     	; 0x4376 <mmc_disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	86 fd       	sbrc	r24, 6
    438a:	64 c0       	rjmp	.+200    	; 0x4454 <mmc_disk_initialize+0x2a4>
    438c:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    438e:	63 c0       	rjmp	.+198    	; 0x4456 <mmc_disk_initialize+0x2a6>
    4390:	40 e0       	ldi	r20, 0x00	; 0
    4392:	50 e0       	ldi	r21, 0x00	; 0
    4394:	ba 01       	movw	r22, r20
    4396:	89 ea       	ldi	r24, 0xA9	; 169
    4398:	b5 de       	rcall	.-662    	; 0x4104 <send_cmd>
    439a:	82 30       	cpi	r24, 0x02	; 2
    439c:	18 f0       	brcs	.+6      	; 0x43a4 <mmc_disk_initialize+0x1f4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    439e:	01 e0       	ldi	r16, 0x01	; 1
    43a0:	11 e0       	ldi	r17, 0x01	; 1
    43a2:	22 c0       	rjmp	.+68     	; 0x43e8 <mmc_disk_initialize+0x238>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    43a4:	02 e0       	ldi	r16, 0x02	; 2
    43a6:	19 ea       	ldi	r17, 0xA9	; 169
    43a8:	1f c0       	rjmp	.+62     	; 0x43e8 <mmc_disk_initialize+0x238>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0)) {			/* Wait for leaving idle state */
				if(Timer1 > 0)Timer1--;
    43aa:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    43ae:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    43b2:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    43b6:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    43ba:	89 2b       	or	r24, r25
    43bc:	8a 2b       	or	r24, r26
    43be:	8b 2b       	or	r24, r27
    43c0:	99 f0       	breq	.+38     	; 0x43e8 <mmc_disk_initialize+0x238>
    43c2:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    43c6:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    43ca:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    43ce:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	a1 09       	sbc	r26, r1
    43d6:	b1 09       	sbc	r27, r1
    43d8:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    43dc:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    43e0:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    43e4:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0)) {			/* Wait for leaving idle state */
    43e8:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    43ec:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    43f0:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    43f4:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    43f8:	89 2b       	or	r24, r25
    43fa:	8a 2b       	or	r24, r26
    43fc:	8b 2b       	or	r24, r27
    43fe:	39 f0       	breq	.+14     	; 0x440e <mmc_disk_initialize+0x25e>
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	50 e0       	ldi	r21, 0x00	; 0
    4404:	ba 01       	movw	r22, r20
    4406:	81 2f       	mov	r24, r17
    4408:	7d de       	rcall	.-774    	; 0x4104 <send_cmd>
    440a:	81 11       	cpse	r24, r1
    440c:	ce cf       	rjmp	.-100    	; 0x43aa <mmc_disk_initialize+0x1fa>
				if(Timer1 > 0)Timer1--;
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    440e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4412:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4416:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    441a:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    441e:	89 2b       	or	r24, r25
    4420:	8a 2b       	or	r24, r26
    4422:	8b 2b       	or	r24, r27
    4424:	e1 f0       	breq	.+56     	; 0x445e <mmc_disk_initialize+0x2ae>
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	52 e0       	ldi	r21, 0x02	; 2
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	80 e1       	ldi	r24, 0x10	; 16
    4430:	69 de       	rcall	.-814    	; 0x4104 <send_cmd>
    4432:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
    4434:	14 c0       	rjmp	.+40     	; 0x445e <mmc_disk_initialize+0x2ae>
    4436:	00 93 dd 03 	sts	0x03DD, r16	; 0x8003dd <CardType>
	deselect();
    443a:	a8 dd       	rcall	.-1200   	; 0x3f8c <deselect>

	if (ty) {			/* Initialization succeded */
    443c:	00 23       	and	r16, r16
    443e:	39 f0       	breq	.+14     	; 0x444e <mmc_disk_initialize+0x29e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    4440:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    4444:	8e 7f       	andi	r24, 0xFE	; 254
    4446:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Stat>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    444a:	80 e5       	ldi	r24, 0x50	; 80
    444c:	8d b9       	out	0x0d, r24	; 13
    444e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    4452:	09 c0       	rjmp	.+18     	; 0x4466 <mmc_disk_initialize+0x2b6>
    4454:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
    4456:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <CardType>
    445a:	98 dd       	rcall	.-1232   	; 0x3f8c <deselect>
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    445c:	f1 cf       	rjmp	.-30     	; 0x4440 <mmc_disk_initialize+0x290>
    445e:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <CardType>
	deselect();
    4462:	94 dd       	rcall	.-1240   	; 0x3f8c <deselect>
    4464:	f4 cf       	rjmp	.-24     	; 0x444e <mmc_disk_initialize+0x29e>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    4466:	0f 90       	pop	r0
    4468:	0f 90       	pop	r0
    446a:	0f 90       	pop	r0
    446c:	0f 90       	pop	r0
    446e:	df 91       	pop	r29
    4470:	cf 91       	pop	r28
    4472:	1f 91       	pop	r17
    4474:	0f 91       	pop	r16
    4476:	ff 90       	pop	r15
    4478:	ef 90       	pop	r14
    447a:	df 90       	pop	r13
    447c:	cf 90       	pop	r12
    447e:	08 95       	ret

00004480 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
    4480:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
}
    4484:	08 95       	ret

00004486 <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	8c 01       	movw	r16, r24
    4492:	e9 01       	movw	r28, r18
	BYTE cmd;


	if (!count) return RES_PARERR;
    4494:	20 97       	sbiw	r28, 0x00	; 0
    4496:	c1 f1       	breq	.+112    	; 0x4508 <mmc_disk_read+0x82>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4498:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    449c:	80 fd       	sbrc	r24, 0
    449e:	36 c0       	rjmp	.+108    	; 0x450c <mmc_disk_read+0x86>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    44a0:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <CardType>
    44a4:	83 fd       	sbrc	r24, 3
    44a6:	09 c0       	rjmp	.+18     	; 0x44ba <mmc_disk_read+0x34>
    44a8:	03 2e       	mov	r0, r19
    44aa:	39 e0       	ldi	r19, 0x09	; 9
    44ac:	44 0f       	add	r20, r20
    44ae:	55 1f       	adc	r21, r21
    44b0:	66 1f       	adc	r22, r22
    44b2:	77 1f       	adc	r23, r23
    44b4:	3a 95       	dec	r19
    44b6:	d1 f7       	brne	.-12     	; 0x44ac <mmc_disk_read+0x26>
    44b8:	30 2d       	mov	r19, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    44ba:	c2 30       	cpi	r28, 0x02	; 2
    44bc:	d1 05       	cpc	r29, r1
    44be:	28 f4       	brcc	.+10     	; 0x44ca <mmc_disk_read+0x44>
    44c0:	0f 2e       	mov	r0, r31
    44c2:	f1 e1       	ldi	r31, 0x11	; 17
    44c4:	ff 2e       	mov	r15, r31
    44c6:	f0 2d       	mov	r31, r0
    44c8:	04 c0       	rjmp	.+8      	; 0x44d2 <mmc_disk_read+0x4c>
    44ca:	0f 2e       	mov	r0, r31
    44cc:	f2 e1       	ldi	r31, 0x12	; 18
    44ce:	ff 2e       	mov	r15, r31
    44d0:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    44d2:	8f 2d       	mov	r24, r15
    44d4:	17 de       	rcall	.-978    	; 0x4104 <send_cmd>
    44d6:	81 11       	cpse	r24, r1
    44d8:	11 c0       	rjmp	.+34     	; 0x44fc <mmc_disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    44da:	60 e0       	ldi	r22, 0x00	; 0
    44dc:	72 e0       	ldi	r23, 0x02	; 2
    44de:	c8 01       	movw	r24, r16
    44e0:	74 dd       	rcall	.-1304   	; 0x3fca <rcvr_datablock>
    44e2:	89 2b       	or	r24, r25
    44e4:	19 f0       	breq	.+6      	; 0x44ec <mmc_disk_read+0x66>
			buff += 512;
    44e6:	1e 5f       	subi	r17, 0xFE	; 254
		} while (--count);
    44e8:	21 97       	sbiw	r28, 0x01	; 1
    44ea:	b9 f7       	brne	.-18     	; 0x44da <mmc_disk_read+0x54>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    44ec:	82 e1       	ldi	r24, 0x12	; 18
    44ee:	f8 12       	cpse	r15, r24
    44f0:	05 c0       	rjmp	.+10     	; 0x44fc <mmc_disk_read+0x76>
    44f2:	40 e0       	ldi	r20, 0x00	; 0
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	ba 01       	movw	r22, r20
    44f8:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
    44fa:	04 de       	rcall	.-1016   	; 0x4104 <send_cmd>
    44fc:	47 dd       	rcall	.-1394   	; 0x3f8c <deselect>

	return count ? RES_ERROR : RES_OK;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	cd 2b       	or	r28, r29
    4502:	29 f4       	brne	.+10     	; 0x450e <mmc_disk_read+0x88>
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	03 c0       	rjmp	.+6      	; 0x450e <mmc_disk_read+0x88>
)
{
	BYTE cmd;


	if (!count) return RES_PARERR;
    4508:	84 e0       	ldi	r24, 0x04	; 4
    450a:	01 c0       	rjmp	.+2      	; 0x450e <mmc_disk_read+0x88>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    450c:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	ff 90       	pop	r15
    4518:	08 95       	ret

0000451a <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    451a:	cf 92       	push	r12
    451c:	df 92       	push	r13
    451e:	ef 92       	push	r14
    4520:	ff 92       	push	r15
    4522:	0f 93       	push	r16
    4524:	1f 93       	push	r17
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
    452a:	8c 01       	movw	r16, r24
    452c:	6a 01       	movw	r12, r20
    452e:	7b 01       	movw	r14, r22
    4530:	e9 01       	movw	r28, r18
	if (!count) return RES_PARERR;
    4532:	20 97       	sbiw	r28, 0x00	; 0
    4534:	09 f4       	brne	.+2      	; 0x4538 <mmc_disk_write+0x1e>
    4536:	4c c0       	rjmp	.+152    	; 0x45d0 <mmc_disk_write+0xb6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4538:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    453c:	80 fd       	sbrc	r24, 0
    453e:	4a c0       	rjmp	.+148    	; 0x45d4 <mmc_disk_write+0xba>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    4540:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    4544:	82 fd       	sbrc	r24, 2
    4546:	48 c0       	rjmp	.+144    	; 0x45d8 <mmc_disk_write+0xbe>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    4548:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <CardType>
    454c:	83 fd       	sbrc	r24, 3
    454e:	09 c0       	rjmp	.+18     	; 0x4562 <mmc_disk_write+0x48>
    4550:	0b 2e       	mov	r0, r27
    4552:	b9 e0       	ldi	r27, 0x09	; 9
    4554:	cc 0c       	add	r12, r12
    4556:	dd 1c       	adc	r13, r13
    4558:	ee 1c       	adc	r14, r14
    455a:	ff 1c       	adc	r15, r15
    455c:	ba 95       	dec	r27
    455e:	d1 f7       	brne	.-12     	; 0x4554 <mmc_disk_write+0x3a>
    4560:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    4562:	c1 30       	cpi	r28, 0x01	; 1
    4564:	d1 05       	cpc	r29, r1
    4566:	89 f4       	brne	.+34     	; 0x458a <mmc_disk_write+0x70>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    4568:	b7 01       	movw	r22, r14
    456a:	a6 01       	movw	r20, r12
    456c:	88 e1       	ldi	r24, 0x18	; 24
    456e:	ca dd       	rcall	.-1132   	; 0x4104 <send_cmd>
    4570:	81 11       	cpse	r24, r1
    4572:	28 c0       	rjmp	.+80     	; 0x45c4 <mmc_disk_write+0xaa>
			&& xmit_datablock(buff, 0xFE)) {
    4574:	6e ef       	ldi	r22, 0xFE	; 254
    4576:	c8 01       	movw	r24, r16
    4578:	91 dd       	rcall	.-1246   	; 0x409c <xmit_datablock>
    457a:	31 e0       	ldi	r19, 0x01	; 1
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	89 2b       	or	r24, r25
    4580:	09 f0       	breq	.+2      	; 0x4584 <mmc_disk_write+0x6a>
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	c3 2f       	mov	r28, r19
    4586:	d2 2f       	mov	r29, r18
    4588:	1d c0       	rjmp	.+58     	; 0x45c4 <mmc_disk_write+0xaa>
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    458a:	86 70       	andi	r24, 0x06	; 6
    458c:	29 f0       	breq	.+10     	; 0x4598 <mmc_disk_write+0x7e>
    458e:	ae 01       	movw	r20, r28
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	70 e0       	ldi	r23, 0x00	; 0
    4594:	87 e9       	ldi	r24, 0x97	; 151
    4596:	b6 dd       	rcall	.-1172   	; 0x4104 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    4598:	b7 01       	movw	r22, r14
    459a:	a6 01       	movw	r20, r12
    459c:	89 e1       	ldi	r24, 0x19	; 25
    459e:	b2 dd       	rcall	.-1180   	; 0x4104 <send_cmd>
    45a0:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    45a2:	10 c0       	rjmp	.+32     	; 0x45c4 <mmc_disk_write+0xaa>
    45a4:	6c ef       	ldi	r22, 0xFC	; 252
    45a6:	c8 01       	movw	r24, r16
    45a8:	79 dd       	rcall	.-1294   	; 0x409c <xmit_datablock>
    45aa:	89 2b       	or	r24, r25
    45ac:	19 f0       	breq	.+6      	; 0x45b4 <mmc_disk_write+0x9a>
				buff += 512;
    45ae:	1e 5f       	subi	r17, 0xFE	; 254
			} while (--count);
    45b0:	21 97       	sbiw	r28, 0x01	; 1
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
    45b2:	c1 f7       	brne	.-16     	; 0x45a4 <mmc_disk_write+0x8a>
    45b4:	6d ef       	ldi	r22, 0xFD	; 253
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	70 dd       	rcall	.-1312   	; 0x409c <xmit_datablock>
    45bc:	89 2b       	or	r24, r25
    45be:	11 f4       	brne	.+4      	; 0x45c4 <mmc_disk_write+0xaa>
    45c0:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
	deselect();
    45c2:	d0 e0       	ldi	r29, 0x00	; 0
    45c4:	e3 dc       	rcall	.-1594   	; 0x3f8c <deselect>

	return count ? RES_ERROR : RES_OK;
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	cd 2b       	or	r28, r29
    45ca:	39 f4       	brne	.+14     	; 0x45da <mmc_disk_write+0xc0>
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	05 c0       	rjmp	.+10     	; 0x45da <mmc_disk_write+0xc0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
    45d0:	84 e0       	ldi	r24, 0x04	; 4
    45d2:	03 c0       	rjmp	.+6      	; 0x45da <mmc_disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    45d4:	83 e0       	ldi	r24, 0x03	; 3
    45d6:	01 c0       	rjmp	.+2      	; 0x45da <mmc_disk_write+0xc0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    45d8:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	ff 90       	pop	r15
    45e4:	ef 90       	pop	r14
    45e6:	df 90       	pop	r13
    45e8:	cf 90       	pop	r12
    45ea:	08 95       	ret

000045ec <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    45ec:	8f 92       	push	r8
    45ee:	9f 92       	push	r9
    45f0:	af 92       	push	r10
    45f2:	bf 92       	push	r11
    45f4:	cf 92       	push	r12
    45f6:	df 92       	push	r13
    45f8:	ef 92       	push	r14
    45fa:	ff 92       	push	r15
    45fc:	0f 93       	push	r16
    45fe:	1f 93       	push	r17
    4600:	cf 93       	push	r28
    4602:	df 93       	push	r29
    4604:	cd b7       	in	r28, 0x3d	; 61
    4606:	de b7       	in	r29, 0x3e	; 62
    4608:	60 97       	sbiw	r28, 0x10	; 16
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4614:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Stat>
    4618:	90 fd       	sbrc	r25, 0
    461a:	0e c3       	rjmp	.+1564   	; 0x4c38 <mmc_disk_ioctl+0x64c>

	res = RES_ERROR;
	switch (cmd) {
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	8a 33       	cpi	r24, 0x3A	; 58
    4620:	91 05       	cpc	r25, r1
    4622:	08 f0       	brcs	.+2      	; 0x4626 <mmc_disk_ioctl+0x3a>
    4624:	0b c3       	rjmp	.+1558   	; 0x4c3c <mmc_disk_ioctl+0x650>
    4626:	8b 01       	movw	r16, r22
    4628:	fc 01       	movw	r30, r24
    462a:	ea 5b       	subi	r30, 0xBA	; 186
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4632:	b4 dc       	rcall	.-1688   	; 0x3f9c <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4634:	11 e0       	ldi	r17, 0x01	; 1
    4636:	89 2b       	or	r24, r25
    4638:	09 f0       	breq	.+2      	; 0x463c <mmc_disk_ioctl+0x50>
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		deselect();
    463a:	10 e0       	ldi	r17, 0x00	; 0
    463c:	a7 dc       	rcall	.-1714   	; 0x3f8c <deselect>
		break;
    463e:	0b c3       	rjmp	.+1558   	; 0x4c56 <mmc_disk_ioctl+0x66a>

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4640:	40 e0       	ldi	r20, 0x00	; 0
    4642:	50 e0       	ldi	r21, 0x00	; 0
    4644:	ba 01       	movw	r22, r20
    4646:	89 e0       	ldi	r24, 0x09	; 9
    4648:	5d dd       	rcall	.-1350   	; 0x4104 <send_cmd>
    464a:	81 11       	cpse	r24, r1
    464c:	6d c0       	rjmp	.+218    	; 0x4728 <mmc_disk_ioctl+0x13c>
    464e:	60 e1       	ldi	r22, 0x10	; 16
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	ce 01       	movw	r24, r28
    4654:	01 96       	adiw	r24, 0x01	; 1
    4656:	b9 dc       	rcall	.-1678   	; 0x3fca <rcvr_datablock>
    4658:	89 2b       	or	r24, r25
    465a:	09 f4       	brne	.+2      	; 0x465e <mmc_disk_ioctl+0x72>
    465c:	67 c0       	rjmp	.+206    	; 0x472c <mmc_disk_ioctl+0x140>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	82 95       	swap	r24
    4662:	86 95       	lsr	r24
    4664:	86 95       	lsr	r24
    4666:	83 70       	andi	r24, 0x03	; 3
    4668:	81 30       	cpi	r24, 0x01	; 1
    466a:	31 f5       	brne	.+76     	; 0x46b8 <mmc_disk_ioctl+0xcc>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    466c:	29 85       	ldd	r18, Y+9	; 0x09
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	32 2f       	mov	r19, r18
    4672:	22 27       	eor	r18, r18
    4674:	8a 85       	ldd	r24, Y+10	; 0x0a
    4676:	28 0f       	add	r18, r24
    4678:	31 1d       	adc	r19, r1
    467a:	88 85       	ldd	r24, Y+8	; 0x08
    467c:	8f 73       	andi	r24, 0x3F	; 63
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	a0 e0       	ldi	r26, 0x00	; 0
    4682:	b0 e0       	ldi	r27, 0x00	; 0
    4684:	dc 01       	movw	r26, r24
    4686:	99 27       	eor	r25, r25
    4688:	88 27       	eor	r24, r24
    468a:	01 96       	adiw	r24, 0x01	; 1
    468c:	a1 1d       	adc	r26, r1
    468e:	b1 1d       	adc	r27, r1
    4690:	82 0f       	add	r24, r18
    4692:	93 1f       	adc	r25, r19
    4694:	a1 1d       	adc	r26, r1
    4696:	b1 1d       	adc	r27, r1
    4698:	07 2e       	mov	r0, r23
    469a:	7a e0       	ldi	r23, 0x0A	; 10
    469c:	88 0f       	add	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	aa 1f       	adc	r26, r26
    46a2:	bb 1f       	adc	r27, r27
    46a4:	7a 95       	dec	r23
    46a6:	d1 f7       	brne	.-12     	; 0x469c <mmc_disk_ioctl+0xb0>
    46a8:	70 2d       	mov	r23, r0
    46aa:	f8 01       	movw	r30, r16
    46ac:	80 83       	st	Z, r24
    46ae:	91 83       	std	Z+1, r25	; 0x01
    46b0:	a2 83       	std	Z+2, r26	; 0x02
    46b2:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    46b4:	10 e0       	ldi	r17, 0x00	; 0
    46b6:	3b c0       	rjmp	.+118    	; 0x472e <mmc_disk_ioctl+0x142>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    46b8:	89 85       	ldd	r24, Y+9	; 0x09
    46ba:	82 95       	swap	r24
    46bc:	86 95       	lsr	r24
    46be:	86 95       	lsr	r24
    46c0:	83 70       	andi	r24, 0x03	; 3
    46c2:	28 85       	ldd	r18, Y+8	; 0x08
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	f4 e0       	ldi	r31, 0x04	; 4
    46c8:	2f 9f       	mul	r18, r31
    46ca:	80 0d       	add	r24, r0
    46cc:	91 1d       	adc	r25, r1
    46ce:	11 24       	eor	r1, r1
    46d0:	9c 01       	movw	r18, r24
    46d2:	2f 5f       	subi	r18, 0xFF	; 255
    46d4:	3f 4f       	sbci	r19, 0xFF	; 255
    46d6:	9f 81       	ldd	r25, Y+7	; 0x07
    46d8:	93 70       	andi	r25, 0x03	; 3
    46da:	89 2f       	mov	r24, r25
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	98 2f       	mov	r25, r24
    46e0:	88 27       	eor	r24, r24
    46e2:	99 0f       	add	r25, r25
    46e4:	99 0f       	add	r25, r25
    46e6:	82 0f       	add	r24, r18
    46e8:	93 1f       	adc	r25, r19
    46ea:	a0 e0       	ldi	r26, 0x00	; 0
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	3e 81       	ldd	r19, Y+6	; 0x06
    46f0:	43 2f       	mov	r20, r19
    46f2:	4f 70       	andi	r20, 0x0F	; 15
    46f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    46f6:	23 2f       	mov	r18, r19
    46f8:	22 1f       	adc	r18, r18
    46fa:	22 27       	eor	r18, r18
    46fc:	22 1f       	adc	r18, r18
    46fe:	34 2f       	mov	r19, r20
    4700:	32 0f       	add	r19, r18
    4702:	2a 85       	ldd	r18, Y+10	; 0x0a
    4704:	23 70       	andi	r18, 0x03	; 3
    4706:	22 0f       	add	r18, r18
    4708:	23 0f       	add	r18, r19
    470a:	27 50       	subi	r18, 0x07	; 7
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <mmc_disk_ioctl+0x12a>
    470e:	88 0f       	add	r24, r24
    4710:	99 1f       	adc	r25, r25
    4712:	aa 1f       	adc	r26, r26
    4714:	bb 1f       	adc	r27, r27
    4716:	2a 95       	dec	r18
    4718:	d2 f7       	brpl	.-12     	; 0x470e <mmc_disk_ioctl+0x122>
    471a:	f8 01       	movw	r30, r16
    471c:	80 83       	st	Z, r24
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	a2 83       	std	Z+2, r26	; 0x02
    4722:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    4724:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4726:	03 c0       	rjmp	.+6      	; 0x472e <mmc_disk_ioctl+0x142>
    4728:	11 e0       	ldi	r17, 0x01	; 1
    472a:	01 c0       	rjmp	.+2      	; 0x472e <mmc_disk_ioctl+0x142>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
		}
		deselect();
    472c:	11 e0       	ldi	r17, 0x01	; 1
    472e:	2e dc       	rcall	.-1956   	; 0x3f8c <deselect>
		break;
    4730:	92 c2       	rjmp	.+1316   	; 0x4c56 <mmc_disk_ioctl+0x66a>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    4732:	f0 90 dd 03 	lds	r15, 0x03DD	; 0x8003dd <CardType>
    4736:	f2 fe       	sbrs	r15, 2
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    4738:	2f c0       	rjmp	.+94     	; 0x4798 <mmc_disk_ioctl+0x1ac>
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	ba 01       	movw	r22, r20
    4740:	8d e8       	ldi	r24, 0x8D	; 141
    4742:	e0 dc       	rcall	.-1600   	; 0x4104 <send_cmd>
    4744:	81 11       	cpse	r24, r1
				xchg_spi(0xFF);
    4746:	85 c0       	rjmp	.+266    	; 0x4852 <mmc_disk_ioctl+0x266>
    4748:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    474a:	cf db       	rcall	.-2146   	; 0x3eea <xchg_spi>
    474c:	60 e1       	ldi	r22, 0x10	; 16
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	ce 01       	movw	r24, r28
    4752:	01 96       	adiw	r24, 0x01	; 1
    4754:	3a dc       	rcall	.-1932   	; 0x3fca <rcvr_datablock>
    4756:	89 2b       	or	r24, r25
    4758:	09 f4       	brne	.+2      	; 0x475c <mmc_disk_ioctl+0x170>
    475a:	7d c0       	rjmp	.+250    	; 0x4856 <mmc_disk_ioctl+0x26a>
    475c:	0f 2e       	mov	r0, r31
    475e:	f0 e3       	ldi	r31, 0x30	; 48
    4760:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    4762:	f0 2d       	mov	r31, r0
    4764:	8f ef       	ldi	r24, 0xFF	; 255
    4766:	c1 db       	rcall	.-2174   	; 0x3eea <xchg_spi>
    4768:	fa 94       	dec	r15
    476a:	f1 10       	cpse	r15, r1
    476c:	fb cf       	rjmp	.-10     	; 0x4764 <mmc_disk_ioctl+0x178>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    476e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4770:	22 95       	swap	r18
    4772:	2f 70       	andi	r18, 0x0F	; 15
    4774:	80 e1       	ldi	r24, 0x10	; 16
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 e0       	ldi	r26, 0x00	; 0
    477a:	b0 e0       	ldi	r27, 0x00	; 0
    477c:	04 c0       	rjmp	.+8      	; 0x4786 <mmc_disk_ioctl+0x19a>
    477e:	88 0f       	add	r24, r24
    4780:	99 1f       	adc	r25, r25
    4782:	aa 1f       	adc	r26, r26
    4784:	bb 1f       	adc	r27, r27
    4786:	2a 95       	dec	r18
    4788:	d2 f7       	brpl	.-12     	; 0x477e <mmc_disk_ioctl+0x192>
    478a:	f8 01       	movw	r30, r16
    478c:	80 83       	st	Z, r24
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
    4792:	b3 83       	std	Z+3, r27	; 0x03
    4794:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    4796:	64 c0       	rjmp	.+200    	; 0x4860 <mmc_disk_ioctl+0x274>
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	ba 01       	movw	r22, r20
    479e:	89 e0       	ldi	r24, 0x09	; 9
    47a0:	b1 dc       	rcall	.-1694   	; 0x4104 <send_cmd>
    47a2:	81 11       	cpse	r24, r1
    47a4:	5a c0       	rjmp	.+180    	; 0x485a <mmc_disk_ioctl+0x26e>
    47a6:	60 e1       	ldi	r22, 0x10	; 16
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	ce 01       	movw	r24, r28
    47ac:	01 96       	adiw	r24, 0x01	; 1
    47ae:	0d dc       	rcall	.-2022   	; 0x3fca <rcvr_datablock>
    47b0:	89 2b       	or	r24, r25
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <mmc_disk_ioctl+0x1ca>
    47b4:	54 c0       	rjmp	.+168    	; 0x485e <mmc_disk_ioctl+0x272>
				if (CardType & CT_SD1) {	/* SDv1 */
    47b6:	f1 fe       	sbrs	r15, 1
    47b8:	22 c0       	rjmp	.+68     	; 0x47fe <mmc_disk_ioctl+0x212>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    47ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    47bc:	8f 73       	andi	r24, 0x3F	; 63
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	9c 01       	movw	r18, r24
    47c2:	22 0f       	add	r18, r18
    47c4:	33 1f       	adc	r19, r19
    47c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    47c8:	88 1f       	adc	r24, r24
    47ca:	88 27       	eor	r24, r24
    47cc:	88 1f       	adc	r24, r24
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	01 96       	adiw	r24, 0x01	; 1
    47d2:	82 0f       	add	r24, r18
    47d4:	93 1f       	adc	r25, r19
    47d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    47d8:	22 95       	swap	r18
    47da:	26 95       	lsr	r18
    47dc:	26 95       	lsr	r18
    47de:	23 70       	andi	r18, 0x03	; 3
    47e0:	21 50       	subi	r18, 0x01	; 1
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <mmc_disk_ioctl+0x1fc>
    47e4:	88 0f       	add	r24, r24
    47e6:	99 1f       	adc	r25, r25
    47e8:	2a 95       	dec	r18
    47ea:	e2 f7       	brpl	.-8      	; 0x47e4 <mmc_disk_ioctl+0x1f8>
    47ec:	a0 e0       	ldi	r26, 0x00	; 0
    47ee:	b0 e0       	ldi	r27, 0x00	; 0
    47f0:	f8 01       	movw	r30, r16
    47f2:	80 83       	st	Z, r24
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	a2 83       	std	Z+2, r26	; 0x02
    47f8:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    47fa:	10 e0       	ldi	r17, 0x00	; 0
    47fc:	31 c0       	rjmp	.+98     	; 0x4860 <mmc_disk_ioctl+0x274>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    47fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4800:	28 2f       	mov	r18, r24
    4802:	23 70       	andi	r18, 0x03	; 3
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	22 0f       	add	r18, r18
    4808:	33 1f       	adc	r19, r19
    480a:	22 0f       	add	r18, r18
    480c:	33 1f       	adc	r19, r19
    480e:	22 0f       	add	r18, r18
    4810:	33 1f       	adc	r19, r19
    4812:	82 95       	swap	r24
    4814:	86 95       	lsr	r24
    4816:	87 70       	andi	r24, 0x07	; 7
    4818:	28 0f       	add	r18, r24
    481a:	31 1d       	adc	r19, r1
    481c:	2f 5f       	subi	r18, 0xFF	; 255
    481e:	3f 4f       	sbci	r19, 0xFF	; 255
    4820:	8b 85       	ldd	r24, Y+11	; 0x0b
    4822:	8c 77       	andi	r24, 0x7C	; 124
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	95 95       	asr	r25
    4828:	87 95       	ror	r24
    482a:	95 95       	asr	r25
    482c:	87 95       	ror	r24
    482e:	01 96       	adiw	r24, 0x01	; 1
    4830:	28 9f       	mul	r18, r24
    4832:	a0 01       	movw	r20, r0
    4834:	29 9f       	mul	r18, r25
    4836:	50 0d       	add	r21, r0
    4838:	38 9f       	mul	r19, r24
    483a:	50 0d       	add	r21, r0
    483c:	11 24       	eor	r1, r1
    483e:	ca 01       	movw	r24, r20
    4840:	a0 e0       	ldi	r26, 0x00	; 0
    4842:	b0 e0       	ldi	r27, 0x00	; 0
    4844:	f8 01       	movw	r30, r16
    4846:	80 83       	st	Z, r24
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	a2 83       	std	Z+2, r26	; 0x02
				}
				res = RES_OK;
    484c:	b3 83       	std	Z+3, r27	; 0x03
    484e:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4850:	07 c0       	rjmp	.+14     	; 0x4860 <mmc_disk_ioctl+0x274>
    4852:	11 e0       	ldi	r17, 0x01	; 1
    4854:	05 c0       	rjmp	.+10     	; 0x4860 <mmc_disk_ioctl+0x274>
    4856:	11 e0       	ldi	r17, 0x01	; 1
    4858:	03 c0       	rjmp	.+6      	; 0x4860 <mmc_disk_ioctl+0x274>
    485a:	11 e0       	ldi	r17, 0x01	; 1
    485c:	01 c0       	rjmp	.+2      	; 0x4860 <mmc_disk_ioctl+0x274>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		deselect();
    485e:	11 e0       	ldi	r17, 0x01	; 1
		break;
    4860:	95 db       	rcall	.-2262   	; 0x3f8c <deselect>

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    4862:	f9 c1       	rjmp	.+1010   	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4864:	f0 90 dd 03 	lds	r15, 0x03DD	; 0x8003dd <CardType>
    4868:	8f 2d       	mov	r24, r15
    486a:	86 70       	andi	r24, 0x06	; 6
    486c:	09 f4       	brne	.+2      	; 0x4870 <mmc_disk_ioctl+0x284>
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
    486e:	e8 c1       	rjmp	.+976    	; 0x4c40 <mmc_disk_ioctl+0x654>
    4870:	be 01       	movw	r22, r28
    4872:	6f 5f       	subi	r22, 0xFF	; 255
    4874:	7f 4f       	sbci	r23, 0xFF	; 255
    4876:	83 e3       	ldi	r24, 0x33	; 51
    4878:	b9 de       	rcall	.-654    	; 0x45ec <mmc_disk_ioctl>
    487a:	81 11       	cpse	r24, r1
    487c:	e3 c1       	rjmp	.+966    	; 0x4c44 <mmc_disk_ioctl+0x658>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	82 95       	swap	r24
    4882:	86 95       	lsr	r24
    4884:	86 95       	lsr	r24
    4886:	83 70       	andi	r24, 0x03	; 3
    4888:	19 f4       	brne	.+6      	; 0x4890 <mmc_disk_ioctl+0x2a4>
    488a:	8b 85       	ldd	r24, Y+11	; 0x0b
    488c:	86 ff       	sbrs	r24, 6
    488e:	dc c1       	rjmp	.+952    	; 0x4c48 <mmc_disk_ioctl+0x65c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
    4890:	f8 01       	movw	r30, r16
    4892:	40 81       	ld	r20, Z
    4894:	51 81       	ldd	r21, Z+1	; 0x01
    4896:	62 81       	ldd	r22, Z+2	; 0x02
    4898:	73 81       	ldd	r23, Z+3	; 0x03
    489a:	84 80       	ldd	r8, Z+4	; 0x04
    489c:	95 80       	ldd	r9, Z+5	; 0x05
    489e:	a6 80       	ldd	r10, Z+6	; 0x06
    48a0:	b7 80       	ldd	r11, Z+7	; 0x07
		if (!(CardType & CT_BLOCK)) {
    48a2:	f3 fc       	sbrc	r15, 3
    48a4:	12 c0       	rjmp	.+36     	; 0x48ca <mmc_disk_ioctl+0x2de>
			st *= 512; ed *= 512;
    48a6:	03 2e       	mov	r0, r19
    48a8:	39 e0       	ldi	r19, 0x09	; 9
    48aa:	44 0f       	add	r20, r20
    48ac:	55 1f       	adc	r21, r21
    48ae:	66 1f       	adc	r22, r22
    48b0:	77 1f       	adc	r23, r23
    48b2:	3a 95       	dec	r19
    48b4:	d1 f7       	brne	.-12     	; 0x48aa <mmc_disk_ioctl+0x2be>
    48b6:	30 2d       	mov	r19, r0
    48b8:	07 2e       	mov	r0, r23
    48ba:	79 e0       	ldi	r23, 0x09	; 9
    48bc:	88 0c       	add	r8, r8
    48be:	99 1c       	adc	r9, r9
    48c0:	aa 1c       	adc	r10, r10
    48c2:	bb 1c       	adc	r11, r11
    48c4:	7a 95       	dec	r23
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
    48c6:	d1 f7       	brne	.-12     	; 0x48bc <mmc_disk_ioctl+0x2d0>
    48c8:	70 2d       	mov	r23, r0
    48ca:	80 e2       	ldi	r24, 0x20	; 32
    48cc:	1b dc       	rcall	.-1994   	; 0x4104 <send_cmd>
    48ce:	81 11       	cpse	r24, r1
    48d0:	bd c1       	rjmp	.+890    	; 0x4c4c <mmc_disk_ioctl+0x660>
    48d2:	b5 01       	movw	r22, r10
    48d4:	a4 01       	movw	r20, r8
    48d6:	81 e2       	ldi	r24, 0x21	; 33
    48d8:	15 dc       	rcall	.-2006   	; 0x4104 <send_cmd>
    48da:	81 11       	cpse	r24, r1
    48dc:	b9 c1       	rjmp	.+882    	; 0x4c50 <mmc_disk_ioctl+0x664>
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	ba 01       	movw	r22, r20
    48e4:	86 e2       	ldi	r24, 0x26	; 38
    48e6:	0e dc       	rcall	.-2020   	; 0x4104 <send_cmd>
    48e8:	81 11       	cpse	r24, r1
    48ea:	b4 c1       	rjmp	.+872    	; 0x4c54 <mmc_disk_ioctl+0x668>
    48ec:	80 e3       	ldi	r24, 0x30	; 48
    48ee:	95 e7       	ldi	r25, 0x75	; 117
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    48f0:	01 db       	rcall	.-2558   	; 0x3ef4 <wait_ready>
    48f2:	11 e0       	ldi	r17, 0x01	; 1
    48f4:	89 2b       	or	r24, r25
    48f6:	09 f4       	brne	.+2      	; 0x48fa <mmc_disk_ioctl+0x30e>
    48f8:	ae c1       	rjmp	.+860    	; 0x4c56 <mmc_disk_ioctl+0x66a>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    48fa:	10 e0       	ldi	r17, 0x00	; 0
    48fc:	ac c1       	rjmp	.+856    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    48fe:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <CardType>
		res = RES_OK;
    4902:	fb 01       	movw	r30, r22
		break;
    4904:	80 83       	st	Z, r24

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    4906:	10 e0       	ldi	r17, 0x00	; 0
    4908:	a6 c1       	rjmp	.+844    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    490a:	40 e0       	ldi	r20, 0x00	; 0
    490c:	50 e0       	ldi	r21, 0x00	; 0
    490e:	ba 01       	movw	r22, r20
    4910:	89 e0       	ldi	r24, 0x09	; 9
    4912:	f8 db       	rcall	.-2064   	; 0x4104 <send_cmd>
    4914:	81 11       	cpse	r24, r1
    4916:	09 c0       	rjmp	.+18     	; 0x492a <mmc_disk_ioctl+0x33e>
    4918:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    491a:	70 e0       	ldi	r23, 0x00	; 0
    491c:	c8 01       	movw	r24, r16
    491e:	55 db       	rcall	.-2390   	; 0x3fca <rcvr_datablock>
    4920:	11 e0       	ldi	r17, 0x01	; 1
    4922:	89 2b       	or	r24, r25
    4924:	19 f0       	breq	.+6      	; 0x492c <mmc_disk_ioctl+0x340>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
			res = RES_OK;
		}
		deselect();
    4926:	10 e0       	ldi	r17, 0x00	; 0
		break;
    4928:	01 c0       	rjmp	.+2      	; 0x492c <mmc_disk_ioctl+0x340>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    492a:	11 e0       	ldi	r17, 0x01	; 1
    492c:	2f db       	rcall	.-2466   	; 0x3f8c <deselect>
    492e:	93 c1       	rjmp	.+806    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4930:	40 e0       	ldi	r20, 0x00	; 0
    4932:	50 e0       	ldi	r21, 0x00	; 0
    4934:	ba 01       	movw	r22, r20
    4936:	8a e0       	ldi	r24, 0x0A	; 10
    4938:	e5 db       	rcall	.-2102   	; 0x4104 <send_cmd>
    493a:	81 11       	cpse	r24, r1
    493c:	09 c0       	rjmp	.+18     	; 0x4950 <mmc_disk_ioctl+0x364>
    493e:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4940:	70 e0       	ldi	r23, 0x00	; 0
    4942:	c8 01       	movw	r24, r16
    4944:	42 db       	rcall	.-2428   	; 0x3fca <rcvr_datablock>
    4946:	11 e0       	ldi	r17, 0x01	; 1
    4948:	89 2b       	or	r24, r25
    494a:	19 f0       	breq	.+6      	; 0x4952 <mmc_disk_ioctl+0x366>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
			res = RES_OK;
		}
		deselect();
    494c:	10 e0       	ldi	r17, 0x00	; 0
		break;
    494e:	01 c0       	rjmp	.+2      	; 0x4952 <mmc_disk_ioctl+0x366>

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    4950:	11 e0       	ldi	r17, 0x01	; 1
    4952:	1c db       	rcall	.-2504   	; 0x3f8c <deselect>
    4954:	80 c1       	rjmp	.+768    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4956:	40 e0       	ldi	r20, 0x00	; 0
    4958:	50 e0       	ldi	r21, 0x00	; 0
    495a:	ba 01       	movw	r22, r20
    495c:	8a e3       	ldi	r24, 0x3A	; 58
    495e:	d2 db       	rcall	.-2140   	; 0x4104 <send_cmd>
    4960:	81 11       	cpse	r24, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    4962:	0d c0       	rjmp	.+26     	; 0x497e <mmc_disk_ioctl+0x392>
    4964:	78 01       	movw	r14, r16
    4966:	0c 5f       	subi	r16, 0xFC	; 252
    4968:	1f 4f       	sbci	r17, 0xFF	; 255
    496a:	8f ef       	ldi	r24, 0xFF	; 255
    496c:	be da       	rcall	.-2692   	; 0x3eea <xchg_spi>
    496e:	f7 01       	movw	r30, r14
    4970:	81 93       	st	Z+, r24
			res = RES_OK;
    4972:	7f 01       	movw	r14, r30
    4974:	0e 17       	cp	r16, r30
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4976:	1f 07       	cpc	r17, r31
	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
		}
		deselect();
    4978:	c1 f7       	brne	.-16     	; 0x496a <mmc_disk_ioctl+0x37e>
    497a:	10 e0       	ldi	r17, 0x00	; 0
		break;
    497c:	01 c0       	rjmp	.+2      	; 0x4980 <mmc_disk_ioctl+0x394>

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    497e:	11 e0       	ldi	r17, 0x01	; 1
    4980:	05 db       	rcall	.-2550   	; 0x3f8c <deselect>
    4982:	69 c1       	rjmp	.+722    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4984:	40 e0       	ldi	r20, 0x00	; 0
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	ba 01       	movw	r22, r20
    498a:	8d e8       	ldi	r24, 0x8D	; 141
    498c:	bb db       	rcall	.-2186   	; 0x4104 <send_cmd>
			xchg_spi(0xFF);
    498e:	81 11       	cpse	r24, r1
    4990:	0b c0       	rjmp	.+22     	; 0x49a8 <mmc_disk_ioctl+0x3bc>
    4992:	8f ef       	ldi	r24, 0xFF	; 255
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    4994:	aa da       	rcall	.-2732   	; 0x3eea <xchg_spi>
    4996:	60 e4       	ldi	r22, 0x40	; 64
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	c8 01       	movw	r24, r16
    499c:	16 db       	rcall	.-2516   	; 0x3fca <rcvr_datablock>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    499e:	11 e0       	ldi	r17, 0x01	; 1
    49a0:	89 2b       	or	r24, r25
    49a2:	19 f0       	breq	.+6      	; 0x49aa <mmc_disk_ioctl+0x3be>
    49a4:	10 e0       	ldi	r17, 0x00	; 0
    49a6:	01 c0       	rjmp	.+2      	; 0x49aa <mmc_disk_ioctl+0x3be>
    49a8:	11 e0       	ldi	r17, 0x01	; 1
	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
		}
		deselect();
    49aa:	f0 da       	rcall	.-2592   	; 0x3f8c <deselect>
    49ac:	54 c1       	rjmp	.+680    	; 0x4c56 <mmc_disk_ioctl+0x66a>
		break;
    49ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    49b2:	81 60       	ori	r24, 0x01	; 1
    49b4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Stat>
    49b8:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
    49ba:	4d c1       	rjmp	.+666    	; 0x4c56 <mmc_disk_ioctl+0x66a>
		break;
    49bc:	fb 01       	movw	r30, r22
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    49be:	43 81       	ldd	r20, Z+3	; 0x03
    49c0:	54 81       	ldd	r21, Z+4	; 0x04
    49c2:	65 81       	ldd	r22, Z+5	; 0x05
    49c4:	76 81       	ldd	r23, Z+6	; 0x06
    49c6:	03 2e       	mov	r0, r19
    49c8:	39 e0       	ldi	r19, 0x09	; 9
    49ca:	44 0f       	add	r20, r20
    49cc:	55 1f       	adc	r21, r21
    49ce:	66 1f       	adc	r22, r22
    49d0:	77 1f       	adc	r23, r23
    49d2:	3a 95       	dec	r19
    49d4:	d1 f7       	brne	.-12     	; 0x49ca <mmc_disk_ioctl+0x3de>
    49d6:	30 2d       	mov	r19, r0
    49d8:	70 68       	ori	r23, 0x80	; 128
    49da:	80 81       	ld	r24, Z
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	a0 e0       	ldi	r26, 0x00	; 0
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	07 2e       	mov	r0, r23
    49e4:	7c e1       	ldi	r23, 0x1C	; 28
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	aa 1f       	adc	r26, r26
    49ec:	bb 1f       	adc	r27, r27
    49ee:	7a 95       	dec	r23
    49f0:	d1 f7       	brne	.-12     	; 0x49e6 <mmc_disk_ioctl+0x3fa>
    49f2:	70 2d       	mov	r23, r0
    49f4:	48 2b       	or	r20, r24
    49f6:	59 2b       	or	r21, r25
    49f8:	6a 2b       	or	r22, r26
    49fa:	7b 2b       	or	r23, r27
    49fc:	81 81       	ldd	r24, Z+1	; 0x01
    49fe:	92 81       	ldd	r25, Z+2	; 0x02
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	91 70       	andi	r25, 0x01	; 1
    4a04:	a0 e0       	ldi	r26, 0x00	; 0
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	48 2b       	or	r20, r24
    4a0a:	59 2b       	or	r21, r25
    4a0c:	6a 2b       	or	r22, r26
    4a0e:	7b 2b       	or	r23, r27
    4a10:	80 e3       	ldi	r24, 0x30	; 48
    4a12:	78 db       	rcall	.-2320   	; 0x4104 <send_cmd>
    4a14:	81 11       	cpse	r24, r1
    4a16:	65 c0       	rjmp	.+202    	; 0x4ae2 <mmc_disk_ioctl+0x4f6>
    4a18:	80 e1       	ldi	r24, 0x10	; 16
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
    4a1a:	97 e2       	ldi	r25, 0x27	; 39
    4a1c:	a0 e0       	ldi	r26, 0x00	; 0
    4a1e:	b0 e0       	ldi	r27, 0x00	; 0
    4a20:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    4a24:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    4a28:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    4a2c:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
    4a30:	1f c0       	rjmp	.+62     	; 0x4a70 <mmc_disk_ioctl+0x484>
    4a32:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
				if(Timer1 > 0) Timer1--;
    4a36:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4a3a:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4a3e:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4a42:	89 2b       	or	r24, r25
    4a44:	8a 2b       	or	r24, r26
    4a46:	8b 2b       	or	r24, r27
    4a48:	99 f0       	breq	.+38     	; 0x4a70 <mmc_disk_ioctl+0x484>
    4a4a:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4a4e:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4a52:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4a56:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	a1 09       	sbc	r26, r1
    4a5e:	b1 09       	sbc	r27, r1
    4a60:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <Timer1>
    4a64:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <Timer1+0x1>
    4a68:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <Timer1+0x2>
    4a6c:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <Timer1+0x3>
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
    4a70:	8f ef       	ldi	r24, 0xFF	; 255
    4a72:	3b da       	rcall	.-2954   	; 0x3eea <xchg_spi>
    4a74:	8f 3f       	cpi	r24, 0xFF	; 255
    4a76:	71 f4       	brne	.+28     	; 0x4a94 <mmc_disk_ioctl+0x4a8>
    4a78:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <Timer1>
    4a7c:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <Timer1+0x1>
    4a80:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <Timer1+0x2>
    4a84:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <Timer1+0x3>
    4a88:	89 2b       	or	r24, r25
    4a8a:	8a 2b       	or	r24, r26
    4a8c:	8b 2b       	or	r24, r27
    4a8e:	89 f6       	brne	.-94     	; 0x4a32 <mmc_disk_ioctl+0x446>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4a90:	11 e0       	ldi	r17, 0x01	; 1
    4a92:	2c c0       	rjmp	.+88     	; 0x4aec <mmc_disk_ioctl+0x500>
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
				if(Timer1 > 0) Timer1--;
			}
			if (rc == 0xFE) {
    4a94:	8e 3f       	cpi	r24, 0xFE	; 254
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    4a96:	39 f5       	brne	.+78     	; 0x4ae6 <mmc_disk_ioctl+0x4fa>
    4a98:	f8 01       	movw	r30, r16
    4a9a:	97 81       	ldd	r25, Z+7	; 0x07
    4a9c:	80 85       	ldd	r24, Z+8	; 0x08
    4a9e:	e1 80       	ldd	r14, Z+1	; 0x01
    4aa0:	f2 80       	ldd	r15, Z+2	; 0x02
    4aa2:	e1 14       	cp	r14, r1
    4aa4:	f1 04       	cpc	r15, r1
    4aa6:	a1 f0       	breq	.+40     	; 0x4ad0 <mmc_disk_ioctl+0x4e4>
    4aa8:	c9 2e       	mov	r12, r25
    4aaa:	d8 2e       	mov	r13, r24
    4aac:	8f ef       	ldi	r24, 0xFF	; 255
    4aae:	1d da       	rcall	.-3014   	; 0x3eea <xchg_spi>
    4ab0:	f6 01       	movw	r30, r12
    4ab2:	81 93       	st	Z+, r24
    4ab4:	6f 01       	movw	r12, r30
    4ab6:	f1 e0       	ldi	r31, 0x01	; 1
    4ab8:	ef 1a       	sub	r14, r31
    4aba:	f1 08       	sbc	r15, r1
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4abc:	b9 f7       	brne	.-18     	; 0x4aac <mmc_disk_ioctl+0x4c0>
    4abe:	f8 01       	movw	r30, r16
    4ac0:	81 81       	ldd	r24, Z+1	; 0x01
    4ac2:	92 81       	ldd	r25, Z+2	; 0x02
    4ac4:	02 e0       	ldi	r16, 0x02	; 2
    4ac6:	12 e0       	ldi	r17, 0x02	; 2
    4ac8:	08 1b       	sub	r16, r24
    4aca:	19 0b       	sbc	r17, r25
    4acc:	19 f4       	brne	.+6      	; 0x4ad4 <mmc_disk_ioctl+0x4e8>
    4ace:	0d c0       	rjmp	.+26     	; 0x4aea <mmc_disk_ioctl+0x4fe>
    4ad0:	02 e0       	ldi	r16, 0x02	; 2
    4ad2:	12 e0       	ldi	r17, 0x02	; 2
    4ad4:	8f ef       	ldi	r24, 0xFF	; 255
    4ad6:	09 da       	rcall	.-3054   	; 0x3eea <xchg_spi>
    4ad8:	01 50       	subi	r16, 0x01	; 1
    4ada:	11 09       	sbc	r17, r1
    4adc:	d9 f7       	brne	.-10     	; 0x4ad4 <mmc_disk_ioctl+0x4e8>
				res = RES_OK;
    4ade:	10 e0       	ldi	r17, 0x00	; 0
    4ae0:	05 c0       	rjmp	.+10     	; 0x4aec <mmc_disk_ioctl+0x500>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4ae2:	11 e0       	ldi	r17, 0x01	; 1
    4ae4:	03 c0       	rjmp	.+6      	; 0x4aec <mmc_disk_ioctl+0x500>
    4ae6:	11 e0       	ldi	r17, 0x01	; 1
    4ae8:	01 c0       	rjmp	.+2      	; 0x4aec <mmc_disk_ioctl+0x500>
				if(Timer1 > 0) Timer1--;
			}
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
				res = RES_OK;
    4aea:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		deselect();
    4aec:	4f da       	rcall	.-2914   	; 0x3f8c <deselect>
    4aee:	b3 c0       	rjmp	.+358    	; 0x4c56 <mmc_disk_ioctl+0x66a>
		break;
    4af0:	fb 01       	movw	r30, r22

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4af2:	43 81       	ldd	r20, Z+3	; 0x03
    4af4:	54 81       	ldd	r21, Z+4	; 0x04
    4af6:	65 81       	ldd	r22, Z+5	; 0x05
    4af8:	76 81       	ldd	r23, Z+6	; 0x06
    4afa:	03 2e       	mov	r0, r19
    4afc:	39 e0       	ldi	r19, 0x09	; 9
    4afe:	44 0f       	add	r20, r20
    4b00:	55 1f       	adc	r21, r21
    4b02:	66 1f       	adc	r22, r22
    4b04:	77 1f       	adc	r23, r23
    4b06:	3a 95       	dec	r19
    4b08:	d1 f7       	brne	.-12     	; 0x4afe <mmc_disk_ioctl+0x512>
    4b0a:	30 2d       	mov	r19, r0
    4b0c:	70 68       	ori	r23, 0x80	; 128
    4b0e:	80 81       	ld	r24, Z
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	a0 e0       	ldi	r26, 0x00	; 0
    4b14:	b0 e0       	ldi	r27, 0x00	; 0
    4b16:	07 2e       	mov	r0, r23
    4b18:	7c e1       	ldi	r23, 0x1C	; 28
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	aa 1f       	adc	r26, r26
    4b20:	bb 1f       	adc	r27, r27
    4b22:	7a 95       	dec	r23
    4b24:	d1 f7       	brne	.-12     	; 0x4b1a <mmc_disk_ioctl+0x52e>
    4b26:	70 2d       	mov	r23, r0
    4b28:	48 2b       	or	r20, r24
    4b2a:	59 2b       	or	r21, r25
    4b2c:	6a 2b       	or	r22, r26
    4b2e:	7b 2b       	or	r23, r27
    4b30:	81 81       	ldd	r24, Z+1	; 0x01
    4b32:	92 81       	ldd	r25, Z+2	; 0x02
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	91 70       	andi	r25, 0x01	; 1
    4b38:	a0 e0       	ldi	r26, 0x00	; 0
    4b3a:	b0 e0       	ldi	r27, 0x00	; 0
    4b3c:	48 2b       	or	r20, r24
    4b3e:	59 2b       	or	r21, r25
    4b40:	6a 2b       	or	r22, r26
    4b42:	7b 2b       	or	r23, r27
    4b44:	81 e3       	ldi	r24, 0x31	; 49
    4b46:	de da       	rcall	.-2628   	; 0x4104 <send_cmd>
			xchg_spi(0xFF); xchg_spi(0xFE);
    4b48:	81 11       	cpse	r24, r1
    4b4a:	2e c0       	rjmp	.+92     	; 0x4ba8 <mmc_disk_ioctl+0x5bc>
    4b4c:	8f ef       	ldi	r24, 0xFF	; 255
    4b4e:	cd d9       	rcall	.-3174   	; 0x3eea <xchg_spi>
    4b50:	8e ef       	ldi	r24, 0xFE	; 254
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    4b52:	cb d9       	rcall	.-3178   	; 0x3eea <xchg_spi>
    4b54:	f8 01       	movw	r30, r16
    4b56:	97 81       	ldd	r25, Z+7	; 0x07
    4b58:	80 85       	ldd	r24, Z+8	; 0x08
    4b5a:	e1 80       	ldd	r14, Z+1	; 0x01
    4b5c:	f2 80       	ldd	r15, Z+2	; 0x02
    4b5e:	e1 14       	cp	r14, r1
    4b60:	f1 04       	cpc	r15, r1
    4b62:	99 f0       	breq	.+38     	; 0x4b8a <mmc_disk_ioctl+0x59e>
    4b64:	c9 2e       	mov	r12, r25
    4b66:	d8 2e       	mov	r13, r24
    4b68:	f6 01       	movw	r30, r12
    4b6a:	81 91       	ld	r24, Z+
    4b6c:	6f 01       	movw	r12, r30
    4b6e:	bd d9       	rcall	.-3206   	; 0x3eea <xchg_spi>
    4b70:	f1 e0       	ldi	r31, 0x01	; 1
    4b72:	ef 1a       	sub	r14, r31
    4b74:	f1 08       	sbc	r15, r1
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4b76:	c1 f7       	brne	.-16     	; 0x4b68 <mmc_disk_ioctl+0x57c>
    4b78:	f8 01       	movw	r30, r16
    4b7a:	81 81       	ldd	r24, Z+1	; 0x01
    4b7c:	92 81       	ldd	r25, Z+2	; 0x02
    4b7e:	02 e0       	ldi	r16, 0x02	; 2
    4b80:	12 e0       	ldi	r17, 0x02	; 2
    4b82:	08 1b       	sub	r16, r24
    4b84:	19 0b       	sbc	r17, r25
    4b86:	19 f4       	brne	.+6      	; 0x4b8e <mmc_disk_ioctl+0x5a2>
    4b88:	07 c0       	rjmp	.+14     	; 0x4b98 <mmc_disk_ioctl+0x5ac>
    4b8a:	02 e0       	ldi	r16, 0x02	; 2
    4b8c:	12 e0       	ldi	r17, 0x02	; 2
    4b8e:	8f ef       	ldi	r24, 0xFF	; 255
    4b90:	ac d9       	rcall	.-3240   	; 0x3eea <xchg_spi>
    4b92:	01 50       	subi	r16, 0x01	; 1
    4b94:	11 09       	sbc	r17, r1
    4b96:	d9 f7       	brne	.-10     	; 0x4b8e <mmc_disk_ioctl+0x5a2>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    4b98:	8f ef       	ldi	r24, 0xFF	; 255
    4b9a:	a7 d9       	rcall	.-3250   	; 0x3eea <xchg_spi>
    4b9c:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4b9e:	11 e0       	ldi	r17, 0x01	; 1
    4ba0:	85 30       	cpi	r24, 0x05	; 5
    4ba2:	19 f4       	brne	.+6      	; 0x4baa <mmc_disk_ioctl+0x5be>
    4ba4:	10 e0       	ldi	r17, 0x00	; 0
    4ba6:	01 c0       	rjmp	.+2      	; 0x4baa <mmc_disk_ioctl+0x5be>
    4ba8:	11 e0       	ldi	r17, 0x01	; 1
    4baa:	f0 d9       	rcall	.-3104   	; 0x3f8c <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
    4bac:	54 c0       	rjmp	.+168    	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4bae:	fb 01       	movw	r30, r22
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    4bb0:	43 81       	ldd	r20, Z+3	; 0x03
    4bb2:	54 81       	ldd	r21, Z+4	; 0x04
    4bb4:	65 81       	ldd	r22, Z+5	; 0x05
    4bb6:	76 81       	ldd	r23, Z+6	; 0x06
    4bb8:	03 2e       	mov	r0, r19
    4bba:	39 e0       	ldi	r19, 0x09	; 9
    4bbc:	44 0f       	add	r20, r20
    4bbe:	55 1f       	adc	r21, r21
    4bc0:	66 1f       	adc	r22, r22
    4bc2:	77 1f       	adc	r23, r23
    4bc4:	3a 95       	dec	r19
    4bc6:	d1 f7       	brne	.-12     	; 0x4bbc <mmc_disk_ioctl+0x5d0>
    4bc8:	30 2d       	mov	r19, r0
    4bca:	74 68       	ori	r23, 0x84	; 132
    4bcc:	80 81       	ld	r24, Z
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	a0 e0       	ldi	r26, 0x00	; 0
    4bd2:	b0 e0       	ldi	r27, 0x00	; 0
    4bd4:	07 2e       	mov	r0, r23
    4bd6:	7c e1       	ldi	r23, 0x1C	; 28
    4bd8:	88 0f       	add	r24, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	aa 1f       	adc	r26, r26
    4bde:	bb 1f       	adc	r27, r27
    4be0:	7a 95       	dec	r23
    4be2:	d1 f7       	brne	.-12     	; 0x4bd8 <mmc_disk_ioctl+0x5ec>
    4be4:	70 2d       	mov	r23, r0
    4be6:	48 2b       	or	r20, r24
    4be8:	59 2b       	or	r21, r25
    4bea:	6a 2b       	or	r22, r26
    4bec:	7b 2b       	or	r23, r27
    4bee:	82 81       	ldd	r24, Z+2	; 0x02
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	a0 e0       	ldi	r26, 0x00	; 0
    4bf4:	b0 e0       	ldi	r27, 0x00	; 0
    4bf6:	48 2b       	or	r20, r24
    4bf8:	59 2b       	or	r21, r25
    4bfa:	6a 2b       	or	r22, r26
    4bfc:	7b 2b       	or	r23, r27
			xchg_spi(0xFF); xchg_spi(0xFE);
    4bfe:	81 e3       	ldi	r24, 0x31	; 49
    4c00:	81 da       	rcall	.-2814   	; 0x4104 <send_cmd>
    4c02:	81 11       	cpse	r24, r1
    4c04:	16 c0       	rjmp	.+44     	; 0x4c32 <mmc_disk_ioctl+0x646>
    4c06:	8f ef       	ldi	r24, 0xFF	; 255
    4c08:	70 d9       	rcall	.-3360   	; 0x3eea <xchg_spi>
			xchg_spi(sdi->ndata);
    4c0a:	8e ef       	ldi	r24, 0xFE	; 254
    4c0c:	6e d9       	rcall	.-3364   	; 0x3eea <xchg_spi>
    4c0e:	f8 01       	movw	r30, r16
    4c10:	81 81       	ldd	r24, Z+1	; 0x01
    4c12:	6b d9       	rcall	.-3370   	; 0x3eea <xchg_spi>
    4c14:	01 e0       	ldi	r16, 0x01	; 1
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    4c16:	12 e0       	ldi	r17, 0x02	; 2
    4c18:	8f ef       	ldi	r24, 0xFF	; 255
    4c1a:	67 d9       	rcall	.-3378   	; 0x3eea <xchg_spi>
    4c1c:	01 50       	subi	r16, 0x01	; 1
    4c1e:	11 09       	sbc	r17, r1
    4c20:	d9 f7       	brne	.-10     	; 0x4c18 <mmc_disk_ioctl+0x62c>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    4c22:	8f ef       	ldi	r24, 0xFF	; 255
    4c24:	62 d9       	rcall	.-3388   	; 0x3eea <xchg_spi>
    4c26:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4c28:	11 e0       	ldi	r17, 0x01	; 1
    4c2a:	85 30       	cpi	r24, 0x05	; 5
    4c2c:	19 f4       	brne	.+6      	; 0x4c34 <mmc_disk_ioctl+0x648>
    4c2e:	10 e0       	ldi	r17, 0x00	; 0
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <mmc_disk_ioctl+0x648>
    4c32:	11 e0       	ldi	r17, 0x01	; 1
    4c34:	ab d9       	rcall	.-3242   	; 0x3f8c <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
    4c36:	0f c0       	rjmp	.+30     	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4c38:	13 e0       	ldi	r17, 0x03	; 3
		break;
    4c3a:	0d c0       	rjmp	.+26     	; 0x4c56 <mmc_disk_ioctl+0x66a>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4c3c:	14 e0       	ldi	r17, 0x04	; 4
    4c3e:	0b c0       	rjmp	.+22     	; 0x4c56 <mmc_disk_ioctl+0x66a>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    4c40:	11 e0       	ldi	r17, 0x01	; 1
    4c42:	09 c0       	rjmp	.+18     	; 0x4c56 <mmc_disk_ioctl+0x66a>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4c44:	11 e0       	ldi	r17, 0x01	; 1
    4c46:	07 c0       	rjmp	.+14     	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4c48:	11 e0       	ldi	r17, 0x01	; 1
    4c4a:	05 c0       	rjmp	.+10     	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4c4c:	11 e0       	ldi	r17, 0x01	; 1
    4c4e:	03 c0       	rjmp	.+6      	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4c50:	11 e0       	ldi	r17, 0x01	; 1
    4c52:	01 c0       	rjmp	.+2      	; 0x4c56 <mmc_disk_ioctl+0x66a>
    4c54:	11 e0       	ldi	r17, 0x01	; 1
    4c56:	81 2f       	mov	r24, r17
    4c58:	60 96       	adiw	r28, 0x10	; 16
	default:
		res = RES_PARERR;
	}

	return res;
}
    4c5a:	0f b6       	in	r0, 0x3f	; 63
    4c5c:	f8 94       	cli
    4c5e:	de bf       	out	0x3e, r29	; 62
    4c60:	0f be       	out	0x3f, r0	; 63
    4c62:	cd bf       	out	0x3d, r28	; 61
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	ff 90       	pop	r15
    4c6e:	ef 90       	pop	r14
    4c70:	df 90       	pop	r13
    4c72:	cf 90       	pop	r12
    4c74:	bf 90       	pop	r11
    4c76:	af 90       	pop	r10
    4c78:	9f 90       	pop	r9
    4c7a:	8f 90       	pop	r8
    4c7c:	08 95       	ret

00004c7e <__vector_21>:
	uint16_t ADC3CounterEnd;
}CircleBuffer;

char dataBuffer[16];

ISR(ADC_vect){
    4c7e:	1f 92       	push	r1
    4c80:	0f 92       	push	r0
    4c82:	0f b6       	in	r0, 0x3f	; 63
    4c84:	0f 92       	push	r0
    4c86:	11 24       	eor	r1, r1
    4c88:	0b b6       	in	r0, 0x3b	; 59
    4c8a:	0f 92       	push	r0
    4c8c:	2f 93       	push	r18
    4c8e:	3f 93       	push	r19
    4c90:	4f 93       	push	r20
    4c92:	5f 93       	push	r21
    4c94:	6f 93       	push	r22
    4c96:	7f 93       	push	r23
    4c98:	8f 93       	push	r24
    4c9a:	9f 93       	push	r25
    4c9c:	af 93       	push	r26
    4c9e:	bf 93       	push	r27
    4ca0:	ef 93       	push	r30
    4ca2:	ff 93       	push	r31
	char buff[8];
	if(!OK_Flag){
    4ca4:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <OK_Flag>
    4ca8:	81 11       	cpse	r24, r1
    4caa:	5f c0       	rjmp	.+190    	; 0x4d6a <__vector_21+0xec>
		setConversion();
    4cac:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <setConversion>
		dataADC3 = ADCL + (ADCH << 8);
    4cb0:	24 b1       	in	r18, 0x04	; 4
    4cb2:	85 b1       	in	r24, 0x05	; 5
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	98 2f       	mov	r25, r24
    4cb8:	88 27       	eor	r24, r24
    4cba:	82 0f       	add	r24, r18
    4cbc:	91 1d       	adc	r25, r1
    4cbe:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <dataADC3+0x1>
    4cc2:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dataADC3>
		myADCData[ADCCounter] = dataADC3;
    4cc6:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <ADCCounter>
    4cca:	50 91 ee 03 	lds	r21, 0x03EE	; 0x8003ee <ADCCounter+0x1>
    4cce:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <ADCCounter+0x2>
    4cd2:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <ADCCounter+0x3>
    4cd6:	fa 01       	movw	r30, r20
    4cd8:	ee 0f       	add	r30, r30
    4cda:	ff 1f       	adc	r31, r31
    4cdc:	eb 5b       	subi	r30, 0xBB	; 187
    4cde:	f6 4f       	sbci	r31, 0xF6	; 246
    4ce0:	91 83       	std	Z+1, r25	; 0x01
    4ce2:	80 83       	st	Z, r24
		ADCCounter++;
    4ce4:	db 01       	movw	r26, r22
    4ce6:	ca 01       	movw	r24, r20
    4ce8:	01 96       	adiw	r24, 0x01	; 1
    4cea:	a1 1d       	adc	r26, r1
    4cec:	b1 1d       	adc	r27, r1
    4cee:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <ADCCounter>
    4cf2:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <ADCCounter+0x1>
    4cf6:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <ADCCounter+0x2>
    4cfa:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <ADCCounter+0x3>
		// sprintf(buff, "%d", dataADC3);
		// setSDCWords(buff);
		// printf("data is %d\n", dataADC3);
		if(ADCCounter >= MAX_QUERY_NUMBERS){
    4cfe:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <MAX_QUERY_NUMBERS>
    4d02:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <MAX_QUERY_NUMBERS+0x1>
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	84 17       	cp	r24, r20
    4d0c:	95 07       	cpc	r25, r21
    4d0e:	a6 07       	cpc	r26, r22
    4d10:	b7 07       	cpc	r27, r23
    4d12:	58 f1       	brcs	.+86     	; 0x4d6a <__vector_21+0xec>
			// closeTimer0();
			closeTimer1B();
    4d14:	ae d8       	rcall	.-3748   	; 0x3e72 <closeTimer1B>
			closeSDC();
    4d16:	3c d8       	rcall	.-3976   	; 0x3d90 <closeSDC>
    4d18:	81 e0       	ldi	r24, 0x01	; 1
			OK_Flag = true;
    4d1a:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <OK_Flag>
    4d1e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer1Counter+0x3>
			printf("OK->%d, %lu\n", ADCCounter, timer1Counter);
    4d22:	8f 93       	push	r24
    4d24:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer1Counter+0x2>
    4d28:	8f 93       	push	r24
    4d2a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer1Counter+0x1>
    4d2e:	8f 93       	push	r24
    4d30:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer1Counter>
    4d34:	8f 93       	push	r24
    4d36:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <ADCCounter+0x3>
    4d3a:	8f 93       	push	r24
    4d3c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <ADCCounter+0x2>
    4d40:	8f 93       	push	r24
    4d42:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <ADCCounter+0x1>
    4d46:	8f 93       	push	r24
    4d48:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <ADCCounter>
    4d4c:	8f 93       	push	r24
    4d4e:	80 ee       	ldi	r24, 0xE0	; 224
    4d50:	92 e0       	ldi	r25, 0x02	; 2
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    4d5a:	8d b7       	in	r24, 0x3d	; 61
    4d5c:	9e b7       	in	r25, 0x3e	; 62
    4d5e:	0a 96       	adiw	r24, 0x0a	; 10
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	9e bf       	out	0x3e, r25	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	8d bf       	out	0x3d, r24	; 61
    4d6a:	ff 91       	pop	r31
		}
	}
}
    4d6c:	ef 91       	pop	r30
    4d6e:	bf 91       	pop	r27
    4d70:	af 91       	pop	r26
    4d72:	9f 91       	pop	r25
    4d74:	8f 91       	pop	r24
    4d76:	7f 91       	pop	r23
    4d78:	6f 91       	pop	r22
    4d7a:	5f 91       	pop	r21
    4d7c:	4f 91       	pop	r20
    4d7e:	3f 91       	pop	r19
    4d80:	2f 91       	pop	r18
    4d82:	0f 90       	pop	r0
    4d84:	0b be       	out	0x3b, r0	; 59
    4d86:	0f 90       	pop	r0
    4d88:	0f be       	out	0x3f, r0	; 63
    4d8a:	0f 90       	pop	r0
    4d8c:	1f 90       	pop	r1
    4d8e:	18 95       	reti

00004d90 <__vector_15>:
    4d90:	1f 92       	push	r1
ISR(TIMER0_COMP_vect){
    4d92:	0f 92       	push	r0
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	0f 92       	push	r0
    4d98:	11 24       	eor	r1, r1
    4d9a:	8f 93       	push	r24
	static bool ToggleFlag = true;
	if(ToggleFlag){
    4d9c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ToggleFlag.2360>
    4da0:	88 23       	and	r24, r24
    4da2:	21 f0       	breq	.+8      	; 0x4dac <__vector_15+0x1c>
		PORTA |= (1<<7);
    4da4:	df 9a       	sbi	0x1b, 7	; 27
		ToggleFlag = false;
    4da6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ToggleFlag.2360>
    4daa:	04 c0       	rjmp	.+8      	; 0x4db4 <__vector_15+0x24>
	}
	else{
		PORTA &= ~(1<<7);
    4dac:	df 98       	cbi	0x1b, 7	; 27
		ToggleFlag = true;
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ToggleFlag.2360>
	}
}
    4db4:	8f 91       	pop	r24
    4db6:	0f 90       	pop	r0
    4db8:	0f be       	out	0x3f, r0	; 63
    4dba:	0f 90       	pop	r0
    4dbc:	1f 90       	pop	r1
    4dbe:	18 95       	reti

00004dc0 <__vector_9>:
ISR(TIMER2_COMP_vect){
    4dc0:	1f 92       	push	r1
    4dc2:	0f 92       	push	r0
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	0f 92       	push	r0
    4dc8:	11 24       	eor	r1, r1
	
}
    4dca:	0f 90       	pop	r0
    4dcc:	0f be       	out	0x3f, r0	; 63
    4dce:	0f 90       	pop	r0
    4dd0:	1f 90       	pop	r1
    4dd2:	18 95       	reti

00004dd4 <__vector_27>:
	}
	timer1Counter++;
	setCircleBuffer(dataADC3);
}

ISR(TIMER3_COMPB_vect){
    4dd4:	1f 92       	push	r1
    4dd6:	0f 92       	push	r0
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	0f 92       	push	r0
    4ddc:	11 24       	eor	r1, r1
	
}
    4dde:	0f 90       	pop	r0
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	0f 90       	pop	r0
    4de4:	1f 90       	pop	r1
    4de6:	18 95       	reti

00004de8 <ascii2num>:
	}

}

int ascii2num(char asciiNum){
	switch(asciiNum){
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	fc 01       	movw	r30, r24
    4dec:	f1 97       	sbiw	r30, 0x31	; 49
    4dee:	e9 30       	cpi	r30, 0x09	; 9
    4df0:	f1 05       	cpc	r31, r1
    4df2:	f8 f4       	brcc	.+62     	; 0x4e32 <ascii2num+0x4a>
    4df4:	e0 58       	subi	r30, 0x80	; 128
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__tablejump2__>
		case '0':
		return 0;
		break;
		case '1':
		return 1;
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	08 95       	ret
		break;
		case '2':
		return 2;
    4e02:	82 e0       	ldi	r24, 0x02	; 2
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	08 95       	ret
		break;
		case '3':
		return 3;
    4e08:	83 e0       	ldi	r24, 0x03	; 3
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	08 95       	ret
		break;
		case '4':
		return 4;
    4e0e:	84 e0       	ldi	r24, 0x04	; 4
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	08 95       	ret
		break;
		case '5':
		return 5;
    4e14:	85 e0       	ldi	r24, 0x05	; 5
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	08 95       	ret
		break;
		case '6':
		return 6;
    4e1a:	86 e0       	ldi	r24, 0x06	; 6
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	08 95       	ret
		break;
		case '7':
		return 7;
    4e20:	87 e0       	ldi	r24, 0x07	; 7
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	08 95       	ret
		break;
		case '8':
		return 8;
    4e26:	88 e0       	ldi	r24, 0x08	; 8
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	08 95       	ret
		break;
		case '9':
		return 9;
    4e2c:	89 e0       	ldi	r24, 0x09	; 9
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	08 95       	ret
}

int ascii2num(char asciiNum){
	switch(asciiNum){
		case '0':
		return 0;
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		return 0;
		break;
	}
}
    4e36:	08 95       	ret

00004e38 <initCircleBuffer>:

void initCircleBuffer(){
	initBuffer(CircleBuffer.ADC3Buffer);
    4e38:	81 ec       	ldi	r24, 0xC1	; 193
    4e3a:	98 e0       	ldi	r25, 0x08	; 8
    4e3c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <initBuffer>
	CircleBuffer.ADC3CounterStart = 0;
    4e40:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <CircleBuffer+0x81>
    4e44:	10 92 41 09 	sts	0x0941, r1	; 0x800941 <CircleBuffer+0x80>
	CircleBuffer.ADC3CounterEnd = 0;
    4e48:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <CircleBuffer+0x83>
    4e4c:	10 92 43 09 	sts	0x0943, r1	; 0x800943 <CircleBuffer+0x82>
    4e50:	08 95       	ret

00004e52 <getCircleBuffer>:
		CircleBuffer.ADC3Buffer[CircleBuffer.ADC3CounterEnd] = data;
		CircleBuffer.ADC3CounterEnd++;
	}
}
uint16_t getCircleBuffer(int pos){
	if(pos >= Buff_Max_Size){
    4e52:	80 34       	cpi	r24, 0x40	; 64
    4e54:	91 05       	cpc	r25, r1
    4e56:	44 f0       	brlt	.+16     	; 0x4e68 <getCircleBuffer+0x16>
		return CircleBuffer.ADC3Buffer[pos-Buff_Max_Size];
    4e58:	88 0f       	add	r24, r24
    4e5a:	99 1f       	adc	r25, r25
    4e5c:	fc 01       	movw	r30, r24
    4e5e:	ef 5b       	subi	r30, 0xBF	; 191
    4e60:	f7 4f       	sbci	r31, 0xF7	; 247
    4e62:	80 81       	ld	r24, Z
    4e64:	91 81       	ldd	r25, Z+1	; 0x01
    4e66:	08 95       	ret
	}
	else{
		return CircleBuffer.ADC3Buffer[pos];
    4e68:	88 0f       	add	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	ef 53       	subi	r30, 0x3F	; 63
    4e70:	f7 4f       	sbci	r31, 0xF7	; 247
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
	}
}
    4e76:	08 95       	ret

00004e78 <main>:

ISR(TIMER3_COMPB_vect){
	
}

int main(){
    4e78:	cf 93       	push	r28
    4e7a:	df 93       	push	r29
    4e7c:	cd b7       	in	r28, 0x3d	; 61
    4e7e:	de b7       	in	r29, 0x3e	; 62
    4e80:	2e 97       	sbiw	r28, 0x0e	; 14
    4e82:	0f b6       	in	r0, 0x3f	; 63
    4e84:	f8 94       	cli
    4e86:	de bf       	out	0x3e, r29	; 62
    4e88:	0f be       	out	0x3f, r0	; 63
    4e8a:	cd bf       	out	0x3d, r28	; 61
	// Setup, Only run one time.
	//char check;
	ASA_M128_set();
    4e8c:	0e 94 1c 02 	call	0x438	; 0x438 <ASA_M128_set>
	uint32_t LoopCounter = 0;
	DDRA |= 1<<7;
    4e90:	d7 9a       	sbi	0x1a, 7	; 26
	initCircleBuffer();
    4e92:	d2 df       	rcall	.-92     	; 0x4e38 <initCircleBuffer>

	setIO(DDRF, ADC3_NUM, INPUT);
    4e94:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    4e98:	40 e0       	ldi	r20, 0x00	; 0
    4e9a:	63 e0       	ldi	r22, 0x03	; 3
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <setIO>
	setupADC3();
    4ea2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <setupADC3>
	setConversion();
    4ea6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <setConversion>
	setFreeRunning(true);
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <setFreeRunning>
	setTimer1B_CompareInterrupt(21, 256);  // 2 k
    4eb0:	60 e0       	ldi	r22, 0x00	; 0
    4eb2:	71 e0       	ldi	r23, 0x01	; 1
    4eb4:	85 e1       	ldi	r24, 0x15	; 21
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	03 d8       	rcall	.-4090   	; 0x3ec0 <setTimer1B_CompareInterrupt>
	// setTimer0_CompareInterrupt(11, 1024);
	createFile(HMI_NAME, HMI_EXTENSION); // create new file
    4eba:	6d e4       	ldi	r22, 0x4D	; 77
    4ebc:	72 e0       	ldi	r23, 0x02	; 2
    4ebe:	8d ee       	ldi	r24, 0xED	; 237
    4ec0:	92 e0       	ldi	r25, 0x02	; 2
    4ec2:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <createFile>
	printf("How many ADC data do you want ?");
    4ec6:	85 ef       	ldi	r24, 0xF5	; 245
    4ec8:	92 e0       	ldi	r25, 0x02	; 2
    4eca:	9f 93       	push	r25
    4ecc:	8f 93       	push	r24
    4ece:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
	printf("Please enter the number do you want ...\n");
    4ed2:	85 e1       	ldi	r24, 0x15	; 21
    4ed4:	93 e0       	ldi	r25, 0x03	; 3
    4ed6:	0e 94 e7 33 	call	0x67ce	; 0x67ce <puts>
	uint16_t dataNumbers;
	// scanf("%d", &dataNumbers);
	M128_HMI_get(2, &dataNumbers);
    4eda:	be 01       	movw	r22, r28
    4edc:	6f 5f       	subi	r22, 0xFF	; 255
    4ede:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee0:	82 e0       	ldi	r24, 0x02	; 2
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	0e 94 c0 01 	call	0x380	; 0x380 <M128_HMI_get>
	// if(dataNumbers>=600) dataNumbers = 600;
	printf("DataNumbers is %d\n", dataNumbers);
    4ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eea:	8f 93       	push	r24
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	8f 93       	push	r24
    4ef0:	8d e3       	ldi	r24, 0x3D	; 61
    4ef2:	93 e0       	ldi	r25, 0x03	; 3
    4ef4:	9f 93       	push	r25
    4ef6:	8f 93       	push	r24
    4ef8:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
	MAX_QUERY_NUMBERS = dataNumbers;
    4efc:	89 81       	ldd	r24, Y+1	; 0x01
    4efe:	9a 81       	ldd	r25, Y+2	; 0x02
    4f00:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <MAX_QUERY_NUMBERS+0x1>
    4f04:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <MAX_QUERY_NUMBERS>
	printf("Run Main code, start to get data ...\n");
    4f08:	80 e5       	ldi	r24, 0x50	; 80
    4f0a:	93 e0       	ldi	r25, 0x03	; 3
    4f0c:	0e 94 e7 33 	call	0x67ce	; 0x67ce <puts>
	// closeSDC();
	// printf("FEFE\n");
	// while(true);
	// openTimer0();
	// while(true);
	setSDCName(HMI_NAME, HMI_EXTENSION);
    4f10:	6d e4       	ldi	r22, 0x4D	; 77
    4f12:	72 e0       	ldi	r23, 0x02	; 2
    4f14:	8d ee       	ldi	r24, 0xED	; 237
    4f16:	92 e0       	ldi	r25, 0x02	; 2
    4f18:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <setSDCName>
	setSDCContinuous();
    4f1c:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <setSDCContinuous>
	// _delay_ms(500);
	openTimer1B();
    4f20:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <openTimer1B>
	// setInterruptADCEnable(true);
	DDRA |= (1<<5);
    4f24:	d5 9a       	sbi	0x1a, 5	; 26
    4f26:	0f 90       	pop	r0
    4f28:	0f 90       	pop	r0
    4f2a:	0f 90       	pop	r0
    4f2c:	0f 90       	pop	r0
    4f2e:	0f 90       	pop	r0
    4f30:	0f 90       	pop	r0
		//static int startCNT = 0;
		char dataBuff[6];
		cli();
		PORTA |= (1<<5);
		int end;
		if(CircleBuffer.ADC3CounterEnd < CircleBuffer.ADC3CounterStart){
    4f32:	0f 2e       	mov	r0, r31
    4f34:	f3 e4       	ldi	r31, 0x43	; 67
    4f36:	8f 2e       	mov	r8, r31
    4f38:	f9 e0       	ldi	r31, 0x09	; 9
    4f3a:	9f 2e       	mov	r9, r31
    4f3c:	f0 2d       	mov	r31, r0
    4f3e:	0f 2e       	mov	r0, r31
    4f40:	f1 e4       	ldi	r31, 0x41	; 65
    4f42:	6f 2e       	mov	r6, r31
    4f44:	f9 e0       	ldi	r31, 0x09	; 9
    4f46:	7f 2e       	mov	r7, r31
    4f48:	f0 2d       	mov	r31, r0
			end = CircleBuffer.ADC3CounterEnd;
		}
		//    printf("S:%d, E:%d\n", CircleBuffer.ADC3CounterStart, end);
		for(int i=CircleBuffer.ADC3CounterStart;i<end;i++){
			initBuffer(dataBuffer);
			sprintf(dataBuff, "%d\r\n", getCircleBuffer(i));
    4f4a:	0f 2e       	mov	r0, r31
    4f4c:	f5 e7       	ldi	r31, 0x75	; 117
    4f4e:	cf 2e       	mov	r12, r31
    4f50:	f3 e0       	ldi	r31, 0x03	; 3
    4f52:	df 2e       	mov	r13, r31
    4f54:	f0 2d       	mov	r31, r0
    4f56:	7e 01       	movw	r14, r28
    4f58:	29 e0       	ldi	r18, 0x09	; 9
    4f5a:	e2 0e       	add	r14, r18
    4f5c:	f1 1c       	adc	r15, r1
    4f5e:	4e 2c       	mov	r4, r14
    4f60:	5f 2c       	mov	r5, r15
	while(true){
		// printf("%lu, %d, %lu\n", ADCCounter, dataADC3, timer1Counter);
		// _delay_ms(200);
		//static int startCNT = 0;
		char dataBuff[6];
		cli();
    4f62:	f8 94       	cli
		PORTA |= (1<<5);
    4f64:	dd 9a       	sbi	0x1b, 5	; 27
		int end;
		if(CircleBuffer.ADC3CounterEnd < CircleBuffer.ADC3CounterStart){
    4f66:	f4 01       	movw	r30, r8
    4f68:	a0 80       	ld	r10, Z
    4f6a:	b1 80       	ldd	r11, Z+1	; 0x01
    4f6c:	f3 01       	movw	r30, r6
    4f6e:	00 81       	ld	r16, Z
    4f70:	11 81       	ldd	r17, Z+1	; 0x01
    4f72:	a0 16       	cp	r10, r16
    4f74:	b1 06       	cpc	r11, r17
    4f76:	18 f4       	brcc	.+6      	; 0x4f7e <main+0x106>
			end = CircleBuffer.ADC3CounterEnd+Buff_Max_Size;
    4f78:	f0 e4       	ldi	r31, 0x40	; 64
    4f7a:	af 0e       	add	r10, r31
    4f7c:	b1 1c       	adc	r11, r1
		}
		else{
			end = CircleBuffer.ADC3CounterEnd;
		}
		//    printf("S:%d, E:%d\n", CircleBuffer.ADC3CounterStart, end);
		for(int i=CircleBuffer.ADC3CounterStart;i<end;i++){
    4f7e:	0a 15       	cp	r16, r10
    4f80:	1b 05       	cpc	r17, r11
    4f82:	3c f5       	brge	.+78     	; 0x4fd2 <main+0x15a>
			initBuffer(dataBuffer);
    4f84:	81 eb       	ldi	r24, 0xB1	; 177
    4f86:	98 e0       	ldi	r25, 0x08	; 8
    4f88:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <initBuffer>
			sprintf(dataBuff, "%d\r\n", getCircleBuffer(i));
    4f8c:	c8 01       	movw	r24, r16
    4f8e:	61 df       	rcall	.-318    	; 0x4e52 <getCircleBuffer>
    4f90:	9f 93       	push	r25
    4f92:	8f 93       	push	r24
    4f94:	df 92       	push	r13
    4f96:	cf 92       	push	r12
    4f98:	ff 92       	push	r15
    4f9a:	ef 92       	push	r14
    4f9c:	0e 94 17 34 	call	0x682e	; 0x682e <sprintf>
			setSDCWords(dataBuff, 5);
    4fa0:	65 e0       	ldi	r22, 0x05	; 5
    4fa2:	84 2d       	mov	r24, r4
    4fa4:	95 2d       	mov	r25, r5
    4fa6:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <setSDCWords>
			// printf("D:%d\n", getCircleBuffer(i));
			RecordNumbers++;
    4faa:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <RecordNumbers>
    4fae:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <RecordNumbers+0x1>
    4fb2:	01 96       	adiw	r24, 0x01	; 1
    4fb4:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <RecordNumbers+0x1>
    4fb8:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <RecordNumbers>
		}
		else{
			end = CircleBuffer.ADC3CounterEnd;
		}
		//    printf("S:%d, E:%d\n", CircleBuffer.ADC3CounterStart, end);
		for(int i=CircleBuffer.ADC3CounterStart;i<end;i++){
    4fbc:	0f 5f       	subi	r16, 0xFF	; 255
    4fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	0a 15       	cp	r16, r10
    4fce:	1b 05       	cpc	r17, r11
    4fd0:	cc f2       	brlt	.-78     	; 0x4f84 <main+0x10c>
			sprintf(dataBuff, "%d\r\n", getCircleBuffer(i));
			setSDCWords(dataBuff, 5);
			// printf("D:%d\n", getCircleBuffer(i));
			RecordNumbers++;
		}
		CircleBuffer.ADC3CounterStart = CircleBuffer.ADC3CounterEnd;
    4fd2:	f4 01       	movw	r30, r8
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	f3 01       	movw	r30, r6
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
		//     closeSDC();
		//     setSDCName(HMI_NAME, HMI_EXTENSION);
		//     setSDCContinuous();
		// }

		PORTA &= ~(1<<5);
    4fde:	dd 98       	cbi	0x1b, 5	; 27
		// printf("Num:%d\n", RecordNumbers);
		sei();
    4fe0:	78 94       	sei
		// printf("=>%d\n", startCNT);


		if(OK_Flag && (RecordNumbers==dataNumbers)){
    4fe2:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <OK_Flag>
    4fe6:	88 23       	and	r24, r24
    4fe8:	09 f4       	brne	.+2      	; 0x4fec <main+0x174>
    4fea:	bb cf       	rjmp	.-138    	; 0x4f62 <main+0xea>
    4fec:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <RecordNumbers>
    4ff0:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <RecordNumbers+0x1>
    4ff4:	89 81       	ldd	r24, Y+1	; 0x01
    4ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff8:	28 17       	cp	r18, r24
    4ffa:	39 07       	cpc	r19, r25
    4ffc:	09 f0       	breq	.+2      	; 0x5000 <main+0x188>
    4ffe:	b1 cf       	rjmp	.-158    	; 0x4f62 <main+0xea>
			closeSDC();
    5000:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <closeSDC>
			

			printf("OK, Read SDC Data and send to matlab ...\n");
    5004:	8a e7       	ldi	r24, 0x7A	; 122
    5006:	93 e0       	ldi	r25, 0x03	; 3
    5008:	0e 94 e7 33 	call	0x67ce	; 0x67ce <puts>
			setSDCName(HMI_NAME, HMI_EXTENSION);
    500c:	6d e4       	ldi	r22, 0x4D	; 77
    500e:	72 e0       	ldi	r23, 0x02	; 2
    5010:	8d ee       	ldi	r24, 0xED	; 237
    5012:	92 e0       	ldi	r25, 0x02	; 2
    5014:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <setSDCName>
			setSDCRead();
    5018:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <setSDCRead>
			
			printf("%lu\n", timer1Counter);
    501c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer1Counter+0x3>
    5020:	8f 93       	push	r24
    5022:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer1Counter+0x2>
    5026:	8f 93       	push	r24
    5028:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer1Counter+0x1>
    502c:	8f 93       	push	r24
    502e:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer1Counter>
    5032:	8f 93       	push	r24
    5034:	88 ee       	ldi	r24, 0xE8	; 232
    5036:	92 e0       	ldi	r25, 0x02	; 2
    5038:	9f 93       	push	r25
    503a:	8f 93       	push	r24
    503c:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
			

			for(uint16_t n=0;n<dataNumbers;n++){
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
    5044:	0f 90       	pop	r0
    5046:	0f 90       	pop	r0
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	9a 81       	ldd	r25, Y+2	; 0x02
    5050:	89 2b       	or	r24, r25
    5052:	09 f4       	brne	.+2      	; 0x5056 <main+0x1de>
    5054:	67 c0       	rjmp	.+206    	; 0x5124 <main+0x2ac>
    5056:	81 2c       	mov	r8, r1
    5058:	91 2c       	mov	r9, r1
				int digits = getBufferSizeUseCRLF(readBuff);
				// printf("digits:%d\n", digits);
				
				for(int k=0;k<digits;k++){
					int dpow=1;
					for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    505a:	44 24       	eor	r4, r4
    505c:	43 94       	inc	r4
    505e:	51 2c       	mov	r5, r1
					calculateData += dpow*ascii2num(readBuff[k]);
					// printf("%d\n", ascii2num(readBuff[k]));
				}
				// printf("%d\n", calculateData);
				// DataAcquisitionSystem.data[n] = calculateData;
				printf("%d\n", calculateData);
    5060:	0f 2e       	mov	r0, r31
    5062:	fc e4       	ldi	r31, 0x4C	; 76
    5064:	6f 2e       	mov	r6, r31
    5066:	f3 e0       	ldi	r31, 0x03	; 3
    5068:	7f 2e       	mov	r7, r31
    506a:	f0 2d       	mov	r31, r0
			

			for(uint16_t n=0;n<dataNumbers;n++){
				char readBuff[6];
				int calculateData = 0;
				initBuffer(readBuff);
    506c:	ce 01       	movw	r24, r28
    506e:	03 96       	adiw	r24, 0x03	; 3
    5070:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <initBuffer>
				getSDCData(readBuff, 5);
    5074:	65 e0       	ldi	r22, 0x05	; 5
    5076:	ce 01       	movw	r24, r28
    5078:	03 96       	adiw	r24, 0x03	; 3
    507a:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <getSDCData>
				int digits = getBufferSizeUseCRLF(readBuff);
    507e:	ce 01       	movw	r24, r28
    5080:	03 96       	adiw	r24, 0x03	; 3
    5082:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <getBufferSizeUseCRLF>
				// printf("digits:%d\n", digits);
				
				for(int k=0;k<digits;k++){
    5086:	18 16       	cp	r1, r24
    5088:	19 06       	cpc	r1, r25
    508a:	bc f5       	brge	.+110    	; 0x50fa <main+0x282>
    508c:	7c 01       	movw	r14, r24
    508e:	f1 e0       	ldi	r31, 0x01	; 1
    5090:	ef 1a       	sub	r14, r31
    5092:	f1 08       	sbc	r15, r1
    5094:	5e 01       	movw	r10, r28
    5096:	23 e0       	ldi	r18, 0x03	; 3
    5098:	a2 0e       	add	r10, r18
    509a:	b1 1c       	adc	r11, r1
    509c:	c1 2c       	mov	r12, r1
    509e:	d1 2c       	mov	r13, r1
    50a0:	25 c0       	rjmp	.+74     	; 0x50ec <main+0x274>
					int dpow=1;
					for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	04 2d       	mov	r16, r4
    50a8:	15 2d       	mov	r17, r5
    50aa:	98 01       	movw	r18, r16
    50ac:	22 0f       	add	r18, r18
    50ae:	33 1f       	adc	r19, r19
    50b0:	00 0f       	add	r16, r16
    50b2:	11 1f       	adc	r17, r17
    50b4:	00 0f       	add	r16, r16
    50b6:	11 1f       	adc	r17, r17
    50b8:	00 0f       	add	r16, r16
    50ba:	11 1f       	adc	r17, r17
    50bc:	02 0f       	add	r16, r18
    50be:	13 1f       	adc	r17, r19
    50c0:	01 96       	adiw	r24, 0x01	; 1
    50c2:	84 17       	cp	r24, r20
    50c4:	95 07       	cpc	r25, r21
    50c6:	8c f3       	brlt	.-30     	; 0x50aa <main+0x232>
					calculateData += dpow*ascii2num(readBuff[k]);
    50c8:	f5 01       	movw	r30, r10
    50ca:	81 91       	ld	r24, Z+
    50cc:	5f 01       	movw	r10, r30
    50ce:	8c de       	rcall	.-744    	; 0x4de8 <ascii2num>
    50d0:	9c 01       	movw	r18, r24
    50d2:	20 9f       	mul	r18, r16
    50d4:	c0 01       	movw	r24, r0
    50d6:	21 9f       	mul	r18, r17
    50d8:	90 0d       	add	r25, r0
    50da:	30 9f       	mul	r19, r16
    50dc:	90 0d       	add	r25, r0
    50de:	11 24       	eor	r1, r1
    50e0:	c8 0e       	add	r12, r24
    50e2:	d9 1e       	adc	r13, r25
    50e4:	31 e0       	ldi	r19, 0x01	; 1
    50e6:	e3 1a       	sub	r14, r19
    50e8:	f1 08       	sbc	r15, r1
    50ea:	48 f0       	brcs	.+18     	; 0x50fe <main+0x286>
				int digits = getBufferSizeUseCRLF(readBuff);
				// printf("digits:%d\n", digits);
				
				for(int k=0;k<digits;k++){
					int dpow=1;
					for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    50ec:	a7 01       	movw	r20, r14
    50ee:	1e 14       	cp	r1, r14
    50f0:	1f 04       	cpc	r1, r15
    50f2:	bc f2       	brlt	.-82     	; 0x50a2 <main+0x22a>
    50f4:	04 2d       	mov	r16, r4
    50f6:	15 2d       	mov	r17, r5
    50f8:	e7 cf       	rjmp	.-50     	; 0x50c8 <main+0x250>
			printf("%lu\n", timer1Counter);
			

			for(uint16_t n=0;n<dataNumbers;n++){
				char readBuff[6];
				int calculateData = 0;
    50fa:	c1 2c       	mov	r12, r1
    50fc:	d1 2c       	mov	r13, r1
					calculateData += dpow*ascii2num(readBuff[k]);
					// printf("%d\n", ascii2num(readBuff[k]));
				}
				// printf("%d\n", calculateData);
				// DataAcquisitionSystem.data[n] = calculateData;
				printf("%d\n", calculateData);
    50fe:	df 92       	push	r13
    5100:	cf 92       	push	r12
    5102:	7f 92       	push	r7
    5104:	6f 92       	push	r6
    5106:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
			setSDCRead();
			
			printf("%lu\n", timer1Counter);
			

			for(uint16_t n=0;n<dataNumbers;n++){
    510a:	ef ef       	ldi	r30, 0xFF	; 255
    510c:	8e 1a       	sub	r8, r30
    510e:	9e 0a       	sbc	r9, r30
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	9a 81       	ldd	r25, Y+2	; 0x02
    511c:	88 16       	cp	r8, r24
    511e:	99 06       	cpc	r9, r25
    5120:	08 f4       	brcc	.+2      	; 0x5124 <main+0x2ac>
    5122:	a4 cf       	rjmp	.-184    	; 0x506c <main+0x1f4>
				}
				// printf("%d\n", calculateData);
				// DataAcquisitionSystem.data[n] = calculateData;
				printf("%d\n", calculateData);
			}
			closeSDC();
    5124:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <closeSDC>
    5128:	ff cf       	rjmp	.-2      	; 0x5128 <main+0x2b0>

0000512a <isCircleBufferFull>:
	else{
		return CircleBuffer.ADC3Buffer[pos];
	}
}

bool isCircleBufferFull(){
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	20 91 41 09 	lds	r18, 0x0941	; 0x800941 <CircleBuffer+0x80>
    5130:	30 91 42 09 	lds	r19, 0x0942	; 0x800942 <CircleBuffer+0x81>
    5134:	20 34       	cpi	r18, 0x40	; 64
    5136:	31 05       	cpc	r19, r1
    5138:	08 f4       	brcc	.+2      	; 0x513c <isCircleBufferFull+0x12>
    513a:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	else{
		return false;
	}
}
    513c:	08 95       	ret

0000513e <setCircleBuffer>:
	initBuffer(CircleBuffer.ADC3Buffer);
	CircleBuffer.ADC3CounterStart = 0;
	CircleBuffer.ADC3CounterEnd = 0;
}

void setCircleBuffer(uint16_t data){
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	ec 01       	movw	r28, r24
	if(!isCircleBufferFull()){
    5144:	f2 df       	rcall	.-28     	; 0x512a <isCircleBufferFull>
    5146:	81 11       	cpse	r24, r1
    5148:	10 c0       	rjmp	.+32     	; 0x516a <setCircleBuffer+0x2c>
		CircleBuffer.ADC3Buffer[CircleBuffer.ADC3CounterEnd] = data;
    514a:	a3 e4       	ldi	r26, 0x43	; 67
    514c:	b9 e0       	ldi	r27, 0x09	; 9
    514e:	8d 91       	ld	r24, X+
    5150:	9c 91       	ld	r25, X
    5152:	11 97       	sbiw	r26, 0x01	; 1
    5154:	fc 01       	movw	r30, r24
    5156:	ee 0f       	add	r30, r30
    5158:	ff 1f       	adc	r31, r31
    515a:	ef 53       	subi	r30, 0x3F	; 63
    515c:	f7 4f       	sbci	r31, 0xF7	; 247
    515e:	d1 83       	std	Z+1, r29	; 0x01
    5160:	c0 83       	st	Z, r28
		CircleBuffer.ADC3CounterEnd++;
    5162:	01 96       	adiw	r24, 0x01	; 1
    5164:	8d 93       	st	X+, r24
    5166:	9c 93       	st	X, r25
    5168:	0a c0       	rjmp	.+20     	; 0x517e <setCircleBuffer+0x40>
	}
	else{
		CircleBuffer.ADC3CounterEnd = 0;
		CircleBuffer.ADC3Buffer[CircleBuffer.ADC3CounterEnd] = data;
    516a:	d0 93 c2 08 	sts	0x08C2, r29	; 0x8008c2 <CircleBuffer+0x1>
    516e:	c0 93 c1 08 	sts	0x08C1, r28	; 0x8008c1 <CircleBuffer>
		CircleBuffer.ADC3CounterEnd++;
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <CircleBuffer+0x83>
    517a:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <CircleBuffer+0x82>
	}
}
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	08 95       	ret

00005184 <__vector_13>:
	}
}
ISR(TIMER2_COMP_vect){
	
}
ISR(TIMER1_COMPB_vect){
    5184:	1f 92       	push	r1
    5186:	0f 92       	push	r0
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	0f 92       	push	r0
    518c:	11 24       	eor	r1, r1
    518e:	0b b6       	in	r0, 0x3b	; 59
    5190:	0f 92       	push	r0
    5192:	2f 93       	push	r18
    5194:	3f 93       	push	r19
    5196:	4f 93       	push	r20
    5198:	5f 93       	push	r21
    519a:	6f 93       	push	r22
    519c:	7f 93       	push	r23
    519e:	8f 93       	push	r24
    51a0:	9f 93       	push	r25
    51a2:	af 93       	push	r26
    51a4:	bf 93       	push	r27
    51a6:	ef 93       	push	r30
    51a8:	ff 93       	push	r31
	//         OK_Flag = true;
	//         // printf("OK->%d, %d\n", ADCCounter, MAX_QUERY_NUMBERS);
	//     }
	//     setCircleBuffer(dataADC3);
	// }
	if(!OK_Flag){
    51aa:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <OK_Flag>
    51ae:	81 11       	cpse	r24, r1
    51b0:	56 c0       	rjmp	.+172    	; 0x525e <__vector_13+0xda>
		setConversion();
    51b2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <setConversion>
		dataADC3 = ADCL + (ADCH << 8);
    51b6:	24 b1       	in	r18, 0x04	; 4
    51b8:	85 b1       	in	r24, 0x05	; 5
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	98 2f       	mov	r25, r24
    51be:	88 27       	eor	r24, r24
    51c0:	82 0f       	add	r24, r18
    51c2:	91 1d       	adc	r25, r1
    51c4:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <dataADC3+0x1>
    51c8:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dataADC3>
		// myADCData[ADCCounter] = dataADC3;
		ADCCounter++;
    51cc:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <ADCCounter>
    51d0:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <ADCCounter+0x1>
    51d4:	a0 91 ef 03 	lds	r26, 0x03EF	; 0x8003ef <ADCCounter+0x2>
    51d8:	b0 91 f0 03 	lds	r27, 0x03F0	; 0x8003f0 <ADCCounter+0x3>
    51dc:	01 96       	adiw	r24, 0x01	; 1
    51de:	a1 1d       	adc	r26, r1
    51e0:	b1 1d       	adc	r27, r1
    51e2:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <ADCCounter>
    51e6:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <ADCCounter+0x1>
    51ea:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <ADCCounter+0x2>
    51ee:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <ADCCounter+0x3>
		if(ADCCounter >= MAX_QUERY_NUMBERS){
    51f2:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <MAX_QUERY_NUMBERS>
    51f6:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <MAX_QUERY_NUMBERS+0x1>
    51fa:	60 e0       	ldi	r22, 0x00	; 0
    51fc:	70 e0       	ldi	r23, 0x00	; 0
    51fe:	84 17       	cp	r24, r20
    5200:	95 07       	cpc	r25, r21
    5202:	a6 07       	cpc	r26, r22
    5204:	b7 07       	cpc	r27, r23
    5206:	58 f1       	brcs	.+86     	; 0x525e <__vector_13+0xda>
			closeTimer1B();
    5208:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <closeTimer1B>
			OK_Flag = true;
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <OK_Flag>
			printf("OK->%lu, %lu\n", ADCCounter, timer1Counter);
    5212:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer1Counter+0x3>
    5216:	8f 93       	push	r24
    5218:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer1Counter+0x2>
    521c:	8f 93       	push	r24
    521e:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer1Counter+0x1>
    5222:	8f 93       	push	r24
    5224:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer1Counter>
    5228:	8f 93       	push	r24
    522a:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <ADCCounter+0x3>
    522e:	8f 93       	push	r24
    5230:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <ADCCounter+0x2>
    5234:	8f 93       	push	r24
    5236:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <ADCCounter+0x1>
    523a:	8f 93       	push	r24
    523c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <ADCCounter>
    5240:	8f 93       	push	r24
    5242:	83 ea       	ldi	r24, 0xA3	; 163
    5244:	93 e0       	ldi	r25, 0x03	; 3
    5246:	9f 93       	push	r25
    5248:	8f 93       	push	r24
    524a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <printf>
    524e:	8d b7       	in	r24, 0x3d	; 61
    5250:	9e b7       	in	r25, 0x3e	; 62
    5252:	0a 96       	adiw	r24, 0x0a	; 10
    5254:	0f b6       	in	r0, 0x3f	; 63
    5256:	f8 94       	cli
    5258:	9e bf       	out	0x3e, r25	; 62
    525a:	0f be       	out	0x3f, r0	; 63
    525c:	8d bf       	out	0x3d, r24	; 61
		}
	}
	timer1Counter++;
    525e:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer1Counter>
    5262:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer1Counter+0x1>
    5266:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <timer1Counter+0x2>
    526a:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <timer1Counter+0x3>
    526e:	01 96       	adiw	r24, 0x01	; 1
    5270:	a1 1d       	adc	r26, r1
    5272:	b1 1d       	adc	r27, r1
    5274:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timer1Counter>
    5278:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timer1Counter+0x1>
    527c:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <timer1Counter+0x2>
    5280:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <timer1Counter+0x3>
	setCircleBuffer(dataADC3);
    5284:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <dataADC3>
    5288:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <dataADC3+0x1>
    528c:	58 df       	rcall	.-336    	; 0x513e <setCircleBuffer>
}
    528e:	ff 91       	pop	r31
    5290:	ef 91       	pop	r30
    5292:	bf 91       	pop	r27
    5294:	af 91       	pop	r26
    5296:	9f 91       	pop	r25
    5298:	8f 91       	pop	r24
    529a:	7f 91       	pop	r23
    529c:	6f 91       	pop	r22
    529e:	5f 91       	pop	r21
    52a0:	4f 91       	pop	r20
    52a2:	3f 91       	pop	r19
    52a4:	2f 91       	pop	r18
    52a6:	0f 90       	pop	r0
    52a8:	0b be       	out	0x3b, r0	; 59
    52aa:	0f 90       	pop	r0
    52ac:	0f be       	out	0x3f, r0	; 63
    52ae:	0f 90       	pop	r0
    52b0:	1f 90       	pop	r1
    52b2:	18 95       	reti

000052b4 <vfprintf>:
    52b4:	2f 92       	push	r2
    52b6:	3f 92       	push	r3
    52b8:	4f 92       	push	r4
    52ba:	5f 92       	push	r5
    52bc:	6f 92       	push	r6
    52be:	7f 92       	push	r7
    52c0:	8f 92       	push	r8
    52c2:	9f 92       	push	r9
    52c4:	af 92       	push	r10
    52c6:	bf 92       	push	r11
    52c8:	cf 92       	push	r12
    52ca:	df 92       	push	r13
    52cc:	ef 92       	push	r14
    52ce:	ff 92       	push	r15
    52d0:	0f 93       	push	r16
    52d2:	1f 93       	push	r17
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	cd b7       	in	r28, 0x3d	; 61
    52da:	de b7       	in	r29, 0x3e	; 62
    52dc:	60 97       	sbiw	r28, 0x10	; 16
    52de:	0f b6       	in	r0, 0x3f	; 63
    52e0:	f8 94       	cli
    52e2:	de bf       	out	0x3e, r29	; 62
    52e4:	0f be       	out	0x3f, r0	; 63
    52e6:	cd bf       	out	0x3d, r28	; 61
    52e8:	7c 01       	movw	r14, r24
    52ea:	1b 01       	movw	r2, r22
    52ec:	6a 01       	movw	r12, r20
    52ee:	fc 01       	movw	r30, r24
    52f0:	17 82       	std	Z+7, r1	; 0x07
    52f2:	16 82       	std	Z+6, r1	; 0x06
    52f4:	83 81       	ldd	r24, Z+3	; 0x03
    52f6:	81 ff       	sbrs	r24, 1
    52f8:	3a c3       	rjmp	.+1652   	; 0x596e <vfprintf+0x6ba>
    52fa:	9e 01       	movw	r18, r28
    52fc:	2f 5f       	subi	r18, 0xFF	; 255
    52fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5300:	39 01       	movw	r6, r18
    5302:	f7 01       	movw	r30, r14
    5304:	93 81       	ldd	r25, Z+3	; 0x03
    5306:	f1 01       	movw	r30, r2
    5308:	93 fd       	sbrc	r25, 3
    530a:	85 91       	lpm	r24, Z+
    530c:	93 ff       	sbrs	r25, 3
    530e:	81 91       	ld	r24, Z+
    5310:	1f 01       	movw	r2, r30
    5312:	88 23       	and	r24, r24
    5314:	09 f4       	brne	.+2      	; 0x5318 <vfprintf+0x64>
    5316:	27 c3       	rjmp	.+1614   	; 0x5966 <vfprintf+0x6b2>
    5318:	85 32       	cpi	r24, 0x25	; 37
    531a:	39 f4       	brne	.+14     	; 0x532a <vfprintf+0x76>
    531c:	93 fd       	sbrc	r25, 3
    531e:	85 91       	lpm	r24, Z+
    5320:	93 ff       	sbrs	r25, 3
    5322:	81 91       	ld	r24, Z+
    5324:	1f 01       	movw	r2, r30
    5326:	85 32       	cpi	r24, 0x25	; 37
    5328:	39 f4       	brne	.+14     	; 0x5338 <vfprintf+0x84>
    532a:	b7 01       	movw	r22, r14
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5332:	56 01       	movw	r10, r12
    5334:	65 01       	movw	r12, r10
    5336:	e5 cf       	rjmp	.-54     	; 0x5302 <vfprintf+0x4e>
    5338:	10 e0       	ldi	r17, 0x00	; 0
    533a:	51 2c       	mov	r5, r1
    533c:	91 2c       	mov	r9, r1
    533e:	ff e1       	ldi	r31, 0x1F	; 31
    5340:	f9 15       	cp	r31, r9
    5342:	d8 f0       	brcs	.+54     	; 0x537a <vfprintf+0xc6>
    5344:	8b 32       	cpi	r24, 0x2B	; 43
    5346:	79 f0       	breq	.+30     	; 0x5366 <vfprintf+0xb2>
    5348:	38 f4       	brcc	.+14     	; 0x5358 <vfprintf+0xa4>
    534a:	80 32       	cpi	r24, 0x20	; 32
    534c:	79 f0       	breq	.+30     	; 0x536c <vfprintf+0xb8>
    534e:	83 32       	cpi	r24, 0x23	; 35
    5350:	a1 f4       	brne	.+40     	; 0x537a <vfprintf+0xc6>
    5352:	f9 2d       	mov	r31, r9
    5354:	f0 61       	ori	r31, 0x10	; 16
    5356:	2e c0       	rjmp	.+92     	; 0x53b4 <vfprintf+0x100>
    5358:	8d 32       	cpi	r24, 0x2D	; 45
    535a:	61 f0       	breq	.+24     	; 0x5374 <vfprintf+0xc0>
    535c:	80 33       	cpi	r24, 0x30	; 48
    535e:	69 f4       	brne	.+26     	; 0x537a <vfprintf+0xc6>
    5360:	29 2d       	mov	r18, r9
    5362:	21 60       	ori	r18, 0x01	; 1
    5364:	2d c0       	rjmp	.+90     	; 0x53c0 <vfprintf+0x10c>
    5366:	39 2d       	mov	r19, r9
    5368:	32 60       	ori	r19, 0x02	; 2
    536a:	93 2e       	mov	r9, r19
    536c:	89 2d       	mov	r24, r9
    536e:	84 60       	ori	r24, 0x04	; 4
    5370:	98 2e       	mov	r9, r24
    5372:	2a c0       	rjmp	.+84     	; 0x53c8 <vfprintf+0x114>
    5374:	e9 2d       	mov	r30, r9
    5376:	e8 60       	ori	r30, 0x08	; 8
    5378:	15 c0       	rjmp	.+42     	; 0x53a4 <vfprintf+0xf0>
    537a:	97 fc       	sbrc	r9, 7
    537c:	2d c0       	rjmp	.+90     	; 0x53d8 <vfprintf+0x124>
    537e:	20 ed       	ldi	r18, 0xD0	; 208
    5380:	28 0f       	add	r18, r24
    5382:	2a 30       	cpi	r18, 0x0A	; 10
    5384:	88 f4       	brcc	.+34     	; 0x53a8 <vfprintf+0xf4>
    5386:	96 fe       	sbrs	r9, 6
    5388:	06 c0       	rjmp	.+12     	; 0x5396 <vfprintf+0xe2>
    538a:	3a e0       	ldi	r19, 0x0A	; 10
    538c:	13 9f       	mul	r17, r19
    538e:	20 0d       	add	r18, r0
    5390:	11 24       	eor	r1, r1
    5392:	12 2f       	mov	r17, r18
    5394:	19 c0       	rjmp	.+50     	; 0x53c8 <vfprintf+0x114>
    5396:	8a e0       	ldi	r24, 0x0A	; 10
    5398:	58 9e       	mul	r5, r24
    539a:	20 0d       	add	r18, r0
    539c:	11 24       	eor	r1, r1
    539e:	52 2e       	mov	r5, r18
    53a0:	e9 2d       	mov	r30, r9
    53a2:	e0 62       	ori	r30, 0x20	; 32
    53a4:	9e 2e       	mov	r9, r30
    53a6:	10 c0       	rjmp	.+32     	; 0x53c8 <vfprintf+0x114>
    53a8:	8e 32       	cpi	r24, 0x2E	; 46
    53aa:	31 f4       	brne	.+12     	; 0x53b8 <vfprintf+0x104>
    53ac:	96 fc       	sbrc	r9, 6
    53ae:	db c2       	rjmp	.+1462   	; 0x5966 <vfprintf+0x6b2>
    53b0:	f9 2d       	mov	r31, r9
    53b2:	f0 64       	ori	r31, 0x40	; 64
    53b4:	9f 2e       	mov	r9, r31
    53b6:	08 c0       	rjmp	.+16     	; 0x53c8 <vfprintf+0x114>
    53b8:	8c 36       	cpi	r24, 0x6C	; 108
    53ba:	21 f4       	brne	.+8      	; 0x53c4 <vfprintf+0x110>
    53bc:	29 2d       	mov	r18, r9
    53be:	20 68       	ori	r18, 0x80	; 128
    53c0:	92 2e       	mov	r9, r18
    53c2:	02 c0       	rjmp	.+4      	; 0x53c8 <vfprintf+0x114>
    53c4:	88 36       	cpi	r24, 0x68	; 104
    53c6:	41 f4       	brne	.+16     	; 0x53d8 <vfprintf+0x124>
    53c8:	f1 01       	movw	r30, r2
    53ca:	93 fd       	sbrc	r25, 3
    53cc:	85 91       	lpm	r24, Z+
    53ce:	93 ff       	sbrs	r25, 3
    53d0:	81 91       	ld	r24, Z+
    53d2:	1f 01       	movw	r2, r30
    53d4:	81 11       	cpse	r24, r1
    53d6:	b3 cf       	rjmp	.-154    	; 0x533e <vfprintf+0x8a>
    53d8:	9b eb       	ldi	r25, 0xBB	; 187
    53da:	98 0f       	add	r25, r24
    53dc:	93 30       	cpi	r25, 0x03	; 3
    53de:	20 f4       	brcc	.+8      	; 0x53e8 <vfprintf+0x134>
    53e0:	99 2d       	mov	r25, r9
    53e2:	90 61       	ori	r25, 0x10	; 16
    53e4:	80 5e       	subi	r24, 0xE0	; 224
    53e6:	07 c0       	rjmp	.+14     	; 0x53f6 <vfprintf+0x142>
    53e8:	9b e9       	ldi	r25, 0x9B	; 155
    53ea:	98 0f       	add	r25, r24
    53ec:	93 30       	cpi	r25, 0x03	; 3
    53ee:	08 f0       	brcs	.+2      	; 0x53f2 <vfprintf+0x13e>
    53f0:	66 c1       	rjmp	.+716    	; 0x56be <vfprintf+0x40a>
    53f2:	99 2d       	mov	r25, r9
    53f4:	9f 7e       	andi	r25, 0xEF	; 239
    53f6:	96 ff       	sbrs	r25, 6
    53f8:	16 e0       	ldi	r17, 0x06	; 6
    53fa:	9f 73       	andi	r25, 0x3F	; 63
    53fc:	99 2e       	mov	r9, r25
    53fe:	85 36       	cpi	r24, 0x65	; 101
    5400:	19 f4       	brne	.+6      	; 0x5408 <vfprintf+0x154>
    5402:	90 64       	ori	r25, 0x40	; 64
    5404:	99 2e       	mov	r9, r25
    5406:	08 c0       	rjmp	.+16     	; 0x5418 <vfprintf+0x164>
    5408:	86 36       	cpi	r24, 0x66	; 102
    540a:	21 f4       	brne	.+8      	; 0x5414 <vfprintf+0x160>
    540c:	39 2f       	mov	r19, r25
    540e:	30 68       	ori	r19, 0x80	; 128
    5410:	93 2e       	mov	r9, r19
    5412:	02 c0       	rjmp	.+4      	; 0x5418 <vfprintf+0x164>
    5414:	11 11       	cpse	r17, r1
    5416:	11 50       	subi	r17, 0x01	; 1
    5418:	97 fe       	sbrs	r9, 7
    541a:	07 c0       	rjmp	.+14     	; 0x542a <vfprintf+0x176>
    541c:	1c 33       	cpi	r17, 0x3C	; 60
    541e:	50 f4       	brcc	.+20     	; 0x5434 <vfprintf+0x180>
    5420:	44 24       	eor	r4, r4
    5422:	43 94       	inc	r4
    5424:	41 0e       	add	r4, r17
    5426:	27 e0       	ldi	r18, 0x07	; 7
    5428:	0b c0       	rjmp	.+22     	; 0x5440 <vfprintf+0x18c>
    542a:	18 30       	cpi	r17, 0x08	; 8
    542c:	38 f0       	brcs	.+14     	; 0x543c <vfprintf+0x188>
    542e:	27 e0       	ldi	r18, 0x07	; 7
    5430:	17 e0       	ldi	r17, 0x07	; 7
    5432:	05 c0       	rjmp	.+10     	; 0x543e <vfprintf+0x18a>
    5434:	27 e0       	ldi	r18, 0x07	; 7
    5436:	9c e3       	ldi	r25, 0x3C	; 60
    5438:	49 2e       	mov	r4, r25
    543a:	02 c0       	rjmp	.+4      	; 0x5440 <vfprintf+0x18c>
    543c:	21 2f       	mov	r18, r17
    543e:	41 2c       	mov	r4, r1
    5440:	56 01       	movw	r10, r12
    5442:	84 e0       	ldi	r24, 0x04	; 4
    5444:	a8 0e       	add	r10, r24
    5446:	b1 1c       	adc	r11, r1
    5448:	f6 01       	movw	r30, r12
    544a:	60 81       	ld	r22, Z
    544c:	71 81       	ldd	r23, Z+1	; 0x01
    544e:	82 81       	ldd	r24, Z+2	; 0x02
    5450:	93 81       	ldd	r25, Z+3	; 0x03
    5452:	04 2d       	mov	r16, r4
    5454:	a3 01       	movw	r20, r6
    5456:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__ftoa_engine>
    545a:	6c 01       	movw	r12, r24
    545c:	f9 81       	ldd	r31, Y+1	; 0x01
    545e:	fc 87       	std	Y+12, r31	; 0x0c
    5460:	f0 ff       	sbrs	r31, 0
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <vfprintf+0x1b4>
    5464:	f3 ff       	sbrs	r31, 3
    5466:	06 c0       	rjmp	.+12     	; 0x5474 <vfprintf+0x1c0>
    5468:	91 fc       	sbrc	r9, 1
    546a:	06 c0       	rjmp	.+12     	; 0x5478 <vfprintf+0x1c4>
    546c:	92 fe       	sbrs	r9, 2
    546e:	06 c0       	rjmp	.+12     	; 0x547c <vfprintf+0x1c8>
    5470:	00 e2       	ldi	r16, 0x20	; 32
    5472:	05 c0       	rjmp	.+10     	; 0x547e <vfprintf+0x1ca>
    5474:	0d e2       	ldi	r16, 0x2D	; 45
    5476:	03 c0       	rjmp	.+6      	; 0x547e <vfprintf+0x1ca>
    5478:	0b e2       	ldi	r16, 0x2B	; 43
    547a:	01 c0       	rjmp	.+2      	; 0x547e <vfprintf+0x1ca>
    547c:	00 e0       	ldi	r16, 0x00	; 0
    547e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5480:	8c 70       	andi	r24, 0x0C	; 12
    5482:	19 f0       	breq	.+6      	; 0x548a <vfprintf+0x1d6>
    5484:	01 11       	cpse	r16, r1
    5486:	51 c2       	rjmp	.+1186   	; 0x592a <vfprintf+0x676>
    5488:	8e c2       	rjmp	.+1308   	; 0x59a6 <vfprintf+0x6f2>
    548a:	97 fe       	sbrs	r9, 7
    548c:	10 c0       	rjmp	.+32     	; 0x54ae <vfprintf+0x1fa>
    548e:	4c 0c       	add	r4, r12
    5490:	fc 85       	ldd	r31, Y+12	; 0x0c
    5492:	f4 ff       	sbrs	r31, 4
    5494:	04 c0       	rjmp	.+8      	; 0x549e <vfprintf+0x1ea>
    5496:	8a 81       	ldd	r24, Y+2	; 0x02
    5498:	81 33       	cpi	r24, 0x31	; 49
    549a:	09 f4       	brne	.+2      	; 0x549e <vfprintf+0x1ea>
    549c:	4a 94       	dec	r4
    549e:	14 14       	cp	r1, r4
    54a0:	74 f5       	brge	.+92     	; 0x54fe <vfprintf+0x24a>
    54a2:	28 e0       	ldi	r18, 0x08	; 8
    54a4:	24 15       	cp	r18, r4
    54a6:	78 f5       	brcc	.+94     	; 0x5506 <vfprintf+0x252>
    54a8:	88 e0       	ldi	r24, 0x08	; 8
    54aa:	48 2e       	mov	r4, r24
    54ac:	2c c0       	rjmp	.+88     	; 0x5506 <vfprintf+0x252>
    54ae:	96 fc       	sbrc	r9, 6
    54b0:	2a c0       	rjmp	.+84     	; 0x5506 <vfprintf+0x252>
    54b2:	81 2f       	mov	r24, r17
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	8c 15       	cp	r24, r12
    54b8:	9d 05       	cpc	r25, r13
    54ba:	9c f0       	brlt	.+38     	; 0x54e2 <vfprintf+0x22e>
    54bc:	3c ef       	ldi	r19, 0xFC	; 252
    54be:	c3 16       	cp	r12, r19
    54c0:	3f ef       	ldi	r19, 0xFF	; 255
    54c2:	d3 06       	cpc	r13, r19
    54c4:	74 f0       	brlt	.+28     	; 0x54e2 <vfprintf+0x22e>
    54c6:	89 2d       	mov	r24, r9
    54c8:	80 68       	ori	r24, 0x80	; 128
    54ca:	98 2e       	mov	r9, r24
    54cc:	0a c0       	rjmp	.+20     	; 0x54e2 <vfprintf+0x22e>
    54ce:	e2 e0       	ldi	r30, 0x02	; 2
    54d0:	f0 e0       	ldi	r31, 0x00	; 0
    54d2:	ec 0f       	add	r30, r28
    54d4:	fd 1f       	adc	r31, r29
    54d6:	e1 0f       	add	r30, r17
    54d8:	f1 1d       	adc	r31, r1
    54da:	80 81       	ld	r24, Z
    54dc:	80 33       	cpi	r24, 0x30	; 48
    54de:	19 f4       	brne	.+6      	; 0x54e6 <vfprintf+0x232>
    54e0:	11 50       	subi	r17, 0x01	; 1
    54e2:	11 11       	cpse	r17, r1
    54e4:	f4 cf       	rjmp	.-24     	; 0x54ce <vfprintf+0x21a>
    54e6:	97 fe       	sbrs	r9, 7
    54e8:	0e c0       	rjmp	.+28     	; 0x5506 <vfprintf+0x252>
    54ea:	44 24       	eor	r4, r4
    54ec:	43 94       	inc	r4
    54ee:	41 0e       	add	r4, r17
    54f0:	81 2f       	mov	r24, r17
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	c8 16       	cp	r12, r24
    54f6:	d9 06       	cpc	r13, r25
    54f8:	2c f4       	brge	.+10     	; 0x5504 <vfprintf+0x250>
    54fa:	1c 19       	sub	r17, r12
    54fc:	04 c0       	rjmp	.+8      	; 0x5506 <vfprintf+0x252>
    54fe:	44 24       	eor	r4, r4
    5500:	43 94       	inc	r4
    5502:	01 c0       	rjmp	.+2      	; 0x5506 <vfprintf+0x252>
    5504:	10 e0       	ldi	r17, 0x00	; 0
    5506:	97 fe       	sbrs	r9, 7
    5508:	06 c0       	rjmp	.+12     	; 0x5516 <vfprintf+0x262>
    550a:	1c 14       	cp	r1, r12
    550c:	1d 04       	cpc	r1, r13
    550e:	34 f4       	brge	.+12     	; 0x551c <vfprintf+0x268>
    5510:	c6 01       	movw	r24, r12
    5512:	01 96       	adiw	r24, 0x01	; 1
    5514:	05 c0       	rjmp	.+10     	; 0x5520 <vfprintf+0x26c>
    5516:	85 e0       	ldi	r24, 0x05	; 5
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <vfprintf+0x26c>
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	01 11       	cpse	r16, r1
    5522:	01 96       	adiw	r24, 0x01	; 1
    5524:	11 23       	and	r17, r17
    5526:	31 f0       	breq	.+12     	; 0x5534 <vfprintf+0x280>
    5528:	21 2f       	mov	r18, r17
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	2f 5f       	subi	r18, 0xFF	; 255
    552e:	3f 4f       	sbci	r19, 0xFF	; 255
    5530:	82 0f       	add	r24, r18
    5532:	93 1f       	adc	r25, r19
    5534:	25 2d       	mov	r18, r5
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	82 17       	cp	r24, r18
    553a:	93 07       	cpc	r25, r19
    553c:	14 f4       	brge	.+4      	; 0x5542 <vfprintf+0x28e>
    553e:	58 1a       	sub	r5, r24
    5540:	01 c0       	rjmp	.+2      	; 0x5544 <vfprintf+0x290>
    5542:	51 2c       	mov	r5, r1
    5544:	89 2d       	mov	r24, r9
    5546:	89 70       	andi	r24, 0x09	; 9
    5548:	49 f4       	brne	.+18     	; 0x555c <vfprintf+0x2a8>
    554a:	55 20       	and	r5, r5
    554c:	39 f0       	breq	.+14     	; 0x555c <vfprintf+0x2a8>
    554e:	b7 01       	movw	r22, r14
    5550:	80 e2       	ldi	r24, 0x20	; 32
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5558:	5a 94       	dec	r5
    555a:	f7 cf       	rjmp	.-18     	; 0x554a <vfprintf+0x296>
    555c:	00 23       	and	r16, r16
    555e:	29 f0       	breq	.+10     	; 0x556a <vfprintf+0x2b6>
    5560:	b7 01       	movw	r22, r14
    5562:	80 2f       	mov	r24, r16
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    556a:	93 fc       	sbrc	r9, 3
    556c:	09 c0       	rjmp	.+18     	; 0x5580 <vfprintf+0x2cc>
    556e:	55 20       	and	r5, r5
    5570:	39 f0       	breq	.+14     	; 0x5580 <vfprintf+0x2cc>
    5572:	b7 01       	movw	r22, r14
    5574:	80 e3       	ldi	r24, 0x30	; 48
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    557c:	5a 94       	dec	r5
    557e:	f7 cf       	rjmp	.-18     	; 0x556e <vfprintf+0x2ba>
    5580:	97 fe       	sbrs	r9, 7
    5582:	4c c0       	rjmp	.+152    	; 0x561c <vfprintf+0x368>
    5584:	46 01       	movw	r8, r12
    5586:	d7 fe       	sbrs	r13, 7
    5588:	02 c0       	rjmp	.+4      	; 0x558e <vfprintf+0x2da>
    558a:	81 2c       	mov	r8, r1
    558c:	91 2c       	mov	r9, r1
    558e:	c6 01       	movw	r24, r12
    5590:	88 19       	sub	r24, r8
    5592:	99 09       	sbc	r25, r9
    5594:	f3 01       	movw	r30, r6
    5596:	e8 0f       	add	r30, r24
    5598:	f9 1f       	adc	r31, r25
    559a:	fe 87       	std	Y+14, r31	; 0x0e
    559c:	ed 87       	std	Y+13, r30	; 0x0d
    559e:	96 01       	movw	r18, r12
    55a0:	24 19       	sub	r18, r4
    55a2:	31 09       	sbc	r19, r1
    55a4:	38 8b       	std	Y+16, r19	; 0x10
    55a6:	2f 87       	std	Y+15, r18	; 0x0f
    55a8:	01 2f       	mov	r16, r17
    55aa:	10 e0       	ldi	r17, 0x00	; 0
    55ac:	11 95       	neg	r17
    55ae:	01 95       	neg	r16
    55b0:	11 09       	sbc	r17, r1
    55b2:	3f ef       	ldi	r19, 0xFF	; 255
    55b4:	83 16       	cp	r8, r19
    55b6:	93 06       	cpc	r9, r19
    55b8:	29 f4       	brne	.+10     	; 0x55c4 <vfprintf+0x310>
    55ba:	b7 01       	movw	r22, r14
    55bc:	8e e2       	ldi	r24, 0x2E	; 46
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    55c4:	c8 14       	cp	r12, r8
    55c6:	d9 04       	cpc	r13, r9
    55c8:	4c f0       	brlt	.+18     	; 0x55dc <vfprintf+0x328>
    55ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    55cc:	98 89       	ldd	r25, Y+16	; 0x10
    55ce:	88 15       	cp	r24, r8
    55d0:	99 05       	cpc	r25, r9
    55d2:	24 f4       	brge	.+8      	; 0x55dc <vfprintf+0x328>
    55d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    55d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    55d8:	81 81       	ldd	r24, Z+1	; 0x01
    55da:	01 c0       	rjmp	.+2      	; 0x55de <vfprintf+0x32a>
    55dc:	80 e3       	ldi	r24, 0x30	; 48
    55de:	f1 e0       	ldi	r31, 0x01	; 1
    55e0:	8f 1a       	sub	r8, r31
    55e2:	91 08       	sbc	r9, r1
    55e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    55e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    55e8:	2f 5f       	subi	r18, 0xFF	; 255
    55ea:	3f 4f       	sbci	r19, 0xFF	; 255
    55ec:	3e 87       	std	Y+14, r19	; 0x0e
    55ee:	2d 87       	std	Y+13, r18	; 0x0d
    55f0:	80 16       	cp	r8, r16
    55f2:	91 06       	cpc	r9, r17
    55f4:	2c f0       	brlt	.+10     	; 0x5600 <vfprintf+0x34c>
    55f6:	b7 01       	movw	r22, r14
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    55fe:	d9 cf       	rjmp	.-78     	; 0x55b2 <vfprintf+0x2fe>
    5600:	c8 14       	cp	r12, r8
    5602:	d9 04       	cpc	r13, r9
    5604:	41 f4       	brne	.+16     	; 0x5616 <vfprintf+0x362>
    5606:	9a 81       	ldd	r25, Y+2	; 0x02
    5608:	96 33       	cpi	r25, 0x36	; 54
    560a:	20 f4       	brcc	.+8      	; 0x5614 <vfprintf+0x360>
    560c:	95 33       	cpi	r25, 0x35	; 53
    560e:	19 f4       	brne	.+6      	; 0x5616 <vfprintf+0x362>
    5610:	3c 85       	ldd	r19, Y+12	; 0x0c
    5612:	34 ff       	sbrs	r19, 4
    5614:	81 e3       	ldi	r24, 0x31	; 49
    5616:	b7 01       	movw	r22, r14
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	4e c0       	rjmp	.+156    	; 0x56b8 <vfprintf+0x404>
    561c:	8a 81       	ldd	r24, Y+2	; 0x02
    561e:	81 33       	cpi	r24, 0x31	; 49
    5620:	19 f0       	breq	.+6      	; 0x5628 <vfprintf+0x374>
    5622:	9c 85       	ldd	r25, Y+12	; 0x0c
    5624:	9f 7e       	andi	r25, 0xEF	; 239
    5626:	9c 87       	std	Y+12, r25	; 0x0c
    5628:	b7 01       	movw	r22, r14
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5630:	11 11       	cpse	r17, r1
    5632:	05 c0       	rjmp	.+10     	; 0x563e <vfprintf+0x38a>
    5634:	94 fc       	sbrc	r9, 4
    5636:	18 c0       	rjmp	.+48     	; 0x5668 <vfprintf+0x3b4>
    5638:	85 e6       	ldi	r24, 0x65	; 101
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	17 c0       	rjmp	.+46     	; 0x566c <vfprintf+0x3b8>
    563e:	b7 01       	movw	r22, r14
    5640:	8e e2       	ldi	r24, 0x2E	; 46
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5648:	1e 5f       	subi	r17, 0xFE	; 254
    564a:	82 e0       	ldi	r24, 0x02	; 2
    564c:	01 e0       	ldi	r16, 0x01	; 1
    564e:	08 0f       	add	r16, r24
    5650:	f3 01       	movw	r30, r6
    5652:	e8 0f       	add	r30, r24
    5654:	f1 1d       	adc	r31, r1
    5656:	80 81       	ld	r24, Z
    5658:	b7 01       	movw	r22, r14
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5660:	80 2f       	mov	r24, r16
    5662:	01 13       	cpse	r16, r17
    5664:	f3 cf       	rjmp	.-26     	; 0x564c <vfprintf+0x398>
    5666:	e6 cf       	rjmp	.-52     	; 0x5634 <vfprintf+0x380>
    5668:	85 e4       	ldi	r24, 0x45	; 69
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	b7 01       	movw	r22, r14
    566e:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5672:	d7 fc       	sbrc	r13, 7
    5674:	06 c0       	rjmp	.+12     	; 0x5682 <vfprintf+0x3ce>
    5676:	c1 14       	cp	r12, r1
    5678:	d1 04       	cpc	r13, r1
    567a:	41 f4       	brne	.+16     	; 0x568c <vfprintf+0x3d8>
    567c:	ec 85       	ldd	r30, Y+12	; 0x0c
    567e:	e4 ff       	sbrs	r30, 4
    5680:	05 c0       	rjmp	.+10     	; 0x568c <vfprintf+0x3d8>
    5682:	d1 94       	neg	r13
    5684:	c1 94       	neg	r12
    5686:	d1 08       	sbc	r13, r1
    5688:	8d e2       	ldi	r24, 0x2D	; 45
    568a:	01 c0       	rjmp	.+2      	; 0x568e <vfprintf+0x3da>
    568c:	8b e2       	ldi	r24, 0x2B	; 43
    568e:	b7 01       	movw	r22, r14
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    5696:	80 e3       	ldi	r24, 0x30	; 48
    5698:	2a e0       	ldi	r18, 0x0A	; 10
    569a:	c2 16       	cp	r12, r18
    569c:	d1 04       	cpc	r13, r1
    569e:	2c f0       	brlt	.+10     	; 0x56aa <vfprintf+0x3f6>
    56a0:	8f 5f       	subi	r24, 0xFF	; 255
    56a2:	fa e0       	ldi	r31, 0x0A	; 10
    56a4:	cf 1a       	sub	r12, r31
    56a6:	d1 08       	sbc	r13, r1
    56a8:	f7 cf       	rjmp	.-18     	; 0x5698 <vfprintf+0x3e4>
    56aa:	b7 01       	movw	r22, r14
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    56b2:	b7 01       	movw	r22, r14
    56b4:	c6 01       	movw	r24, r12
    56b6:	c0 96       	adiw	r24, 0x30	; 48
    56b8:	0e 94 97 33 	call	0x672e	; 0x672e <fputc>
    56bc:	4b c1       	rjmp	.+662    	; 0x5954 <vfprintf+0x6a0>
    56be:	83 36       	cpi	r24, 0x63	; 99
    56c0:	31 f0       	breq	.+12     	; 0x56ce <vfprintf+0x41a>
    56c2:	83 37       	cpi	r24, 0x73	; 115
    56c4:	79 f0       	breq	.+30     	; 0x56e4 <vfprintf+0x430>
    56c6:	83 35       	cpi	r24, 0x53	; 83
    56c8:	09 f0       	breq	.+2      	; 0x56cc <vfprintf+0x418>
    56ca:	52 c0       	rjmp	.+164    	; 0x5770 <vfprintf+0x4bc>
    56cc:	1f c0       	rjmp	.+62     	; 0x570c <vfprintf+0x458>
    56ce:	56 01       	movw	r10, r12
    56d0:	32 e0       	ldi	r19, 0x02	; 2
    56d2:	a3 0e       	add	r10, r19
    56d4:	b1 1c       	adc	r11, r1
    56d6:	f6 01       	movw	r30, r12
    56d8:	80 81       	ld	r24, Z
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	01 e0       	ldi	r16, 0x01	; 1
    56de:	10 e0       	ldi	r17, 0x00	; 0
    56e0:	63 01       	movw	r12, r6
    56e2:	11 c0       	rjmp	.+34     	; 0x5706 <vfprintf+0x452>
    56e4:	56 01       	movw	r10, r12
    56e6:	f2 e0       	ldi	r31, 0x02	; 2
    56e8:	af 0e       	add	r10, r31
    56ea:	b1 1c       	adc	r11, r1
    56ec:	f6 01       	movw	r30, r12
    56ee:	c0 80       	ld	r12, Z
    56f0:	d1 80       	ldd	r13, Z+1	; 0x01
    56f2:	96 fe       	sbrs	r9, 6
    56f4:	03 c0       	rjmp	.+6      	; 0x56fc <vfprintf+0x448>
    56f6:	61 2f       	mov	r22, r17
    56f8:	70 e0       	ldi	r23, 0x00	; 0
    56fa:	02 c0       	rjmp	.+4      	; 0x5700 <vfprintf+0x44c>
    56fc:	6f ef       	ldi	r22, 0xFF	; 255
    56fe:	7f ef       	ldi	r23, 0xFF	; 255
    5700:	c6 01       	movw	r24, r12
    5702:	cc d7       	rcall	.+3992   	; 0x669c <strnlen>
    5704:	8c 01       	movw	r16, r24
    5706:	f9 2d       	mov	r31, r9
    5708:	ff 77       	andi	r31, 0x7F	; 127
    570a:	13 c0       	rjmp	.+38     	; 0x5732 <vfprintf+0x47e>
    570c:	56 01       	movw	r10, r12
    570e:	22 e0       	ldi	r18, 0x02	; 2
    5710:	a2 0e       	add	r10, r18
    5712:	b1 1c       	adc	r11, r1
    5714:	f6 01       	movw	r30, r12
    5716:	c0 80       	ld	r12, Z
    5718:	d1 80       	ldd	r13, Z+1	; 0x01
    571a:	96 fe       	sbrs	r9, 6
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <vfprintf+0x470>
    571e:	61 2f       	mov	r22, r17
    5720:	70 e0       	ldi	r23, 0x00	; 0
    5722:	02 c0       	rjmp	.+4      	; 0x5728 <vfprintf+0x474>
    5724:	6f ef       	ldi	r22, 0xFF	; 255
    5726:	7f ef       	ldi	r23, 0xFF	; 255
    5728:	c6 01       	movw	r24, r12
    572a:	ad d7       	rcall	.+3930   	; 0x6686 <strnlen_P>
    572c:	8c 01       	movw	r16, r24
    572e:	f9 2d       	mov	r31, r9
    5730:	f0 68       	ori	r31, 0x80	; 128
    5732:	9f 2e       	mov	r9, r31
    5734:	f3 fd       	sbrc	r31, 3
    5736:	18 c0       	rjmp	.+48     	; 0x5768 <vfprintf+0x4b4>
    5738:	85 2d       	mov	r24, r5
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	08 17       	cp	r16, r24
    573e:	19 07       	cpc	r17, r25
    5740:	98 f4       	brcc	.+38     	; 0x5768 <vfprintf+0x4b4>
    5742:	b7 01       	movw	r22, r14
    5744:	80 e2       	ldi	r24, 0x20	; 32
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	f2 d7       	rcall	.+4068   	; 0x672e <fputc>
    574a:	5a 94       	dec	r5
    574c:	f5 cf       	rjmp	.-22     	; 0x5738 <vfprintf+0x484>
    574e:	f6 01       	movw	r30, r12
    5750:	97 fc       	sbrc	r9, 7
    5752:	85 91       	lpm	r24, Z+
    5754:	97 fe       	sbrs	r9, 7
    5756:	81 91       	ld	r24, Z+
    5758:	6f 01       	movw	r12, r30
    575a:	b7 01       	movw	r22, r14
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	e7 d7       	rcall	.+4046   	; 0x672e <fputc>
    5760:	51 10       	cpse	r5, r1
    5762:	5a 94       	dec	r5
    5764:	01 50       	subi	r16, 0x01	; 1
    5766:	11 09       	sbc	r17, r1
    5768:	01 15       	cp	r16, r1
    576a:	11 05       	cpc	r17, r1
    576c:	81 f7       	brne	.-32     	; 0x574e <vfprintf+0x49a>
    576e:	f2 c0       	rjmp	.+484    	; 0x5954 <vfprintf+0x6a0>
    5770:	84 36       	cpi	r24, 0x64	; 100
    5772:	11 f0       	breq	.+4      	; 0x5778 <vfprintf+0x4c4>
    5774:	89 36       	cpi	r24, 0x69	; 105
    5776:	61 f5       	brne	.+88     	; 0x57d0 <vfprintf+0x51c>
    5778:	56 01       	movw	r10, r12
    577a:	97 fe       	sbrs	r9, 7
    577c:	09 c0       	rjmp	.+18     	; 0x5790 <vfprintf+0x4dc>
    577e:	24 e0       	ldi	r18, 0x04	; 4
    5780:	a2 0e       	add	r10, r18
    5782:	b1 1c       	adc	r11, r1
    5784:	f6 01       	movw	r30, r12
    5786:	60 81       	ld	r22, Z
    5788:	71 81       	ldd	r23, Z+1	; 0x01
    578a:	82 81       	ldd	r24, Z+2	; 0x02
    578c:	93 81       	ldd	r25, Z+3	; 0x03
    578e:	0a c0       	rjmp	.+20     	; 0x57a4 <vfprintf+0x4f0>
    5790:	f2 e0       	ldi	r31, 0x02	; 2
    5792:	af 0e       	add	r10, r31
    5794:	b1 1c       	adc	r11, r1
    5796:	f6 01       	movw	r30, r12
    5798:	60 81       	ld	r22, Z
    579a:	71 81       	ldd	r23, Z+1	; 0x01
    579c:	07 2e       	mov	r0, r23
    579e:	00 0c       	add	r0, r0
    57a0:	88 0b       	sbc	r24, r24
    57a2:	99 0b       	sbc	r25, r25
    57a4:	f9 2d       	mov	r31, r9
    57a6:	ff 76       	andi	r31, 0x6F	; 111
    57a8:	9f 2e       	mov	r9, r31
    57aa:	97 ff       	sbrs	r25, 7
    57ac:	09 c0       	rjmp	.+18     	; 0x57c0 <vfprintf+0x50c>
    57ae:	90 95       	com	r25
    57b0:	80 95       	com	r24
    57b2:	70 95       	com	r23
    57b4:	61 95       	neg	r22
    57b6:	7f 4f       	sbci	r23, 0xFF	; 255
    57b8:	8f 4f       	sbci	r24, 0xFF	; 255
    57ba:	9f 4f       	sbci	r25, 0xFF	; 255
    57bc:	f0 68       	ori	r31, 0x80	; 128
    57be:	9f 2e       	mov	r9, r31
    57c0:	2a e0       	ldi	r18, 0x0A	; 10
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	a3 01       	movw	r20, r6
    57c6:	0e 94 5f 34 	call	0x68be	; 0x68be <__ultoa_invert>
    57ca:	c8 2e       	mov	r12, r24
    57cc:	c6 18       	sub	r12, r6
    57ce:	3f c0       	rjmp	.+126    	; 0x584e <vfprintf+0x59a>
    57d0:	09 2d       	mov	r16, r9
    57d2:	85 37       	cpi	r24, 0x75	; 117
    57d4:	21 f4       	brne	.+8      	; 0x57de <vfprintf+0x52a>
    57d6:	0f 7e       	andi	r16, 0xEF	; 239
    57d8:	2a e0       	ldi	r18, 0x0A	; 10
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	1d c0       	rjmp	.+58     	; 0x5818 <vfprintf+0x564>
    57de:	09 7f       	andi	r16, 0xF9	; 249
    57e0:	8f 36       	cpi	r24, 0x6F	; 111
    57e2:	91 f0       	breq	.+36     	; 0x5808 <vfprintf+0x554>
    57e4:	18 f4       	brcc	.+6      	; 0x57ec <vfprintf+0x538>
    57e6:	88 35       	cpi	r24, 0x58	; 88
    57e8:	59 f0       	breq	.+22     	; 0x5800 <vfprintf+0x54c>
    57ea:	bd c0       	rjmp	.+378    	; 0x5966 <vfprintf+0x6b2>
    57ec:	80 37       	cpi	r24, 0x70	; 112
    57ee:	19 f0       	breq	.+6      	; 0x57f6 <vfprintf+0x542>
    57f0:	88 37       	cpi	r24, 0x78	; 120
    57f2:	11 f0       	breq	.+4      	; 0x57f8 <vfprintf+0x544>
    57f4:	b8 c0       	rjmp	.+368    	; 0x5966 <vfprintf+0x6b2>
    57f6:	00 61       	ori	r16, 0x10	; 16
    57f8:	04 ff       	sbrs	r16, 4
    57fa:	09 c0       	rjmp	.+18     	; 0x580e <vfprintf+0x55a>
    57fc:	04 60       	ori	r16, 0x04	; 4
    57fe:	07 c0       	rjmp	.+14     	; 0x580e <vfprintf+0x55a>
    5800:	94 fe       	sbrs	r9, 4
    5802:	08 c0       	rjmp	.+16     	; 0x5814 <vfprintf+0x560>
    5804:	06 60       	ori	r16, 0x06	; 6
    5806:	06 c0       	rjmp	.+12     	; 0x5814 <vfprintf+0x560>
    5808:	28 e0       	ldi	r18, 0x08	; 8
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	05 c0       	rjmp	.+10     	; 0x5818 <vfprintf+0x564>
    580e:	20 e1       	ldi	r18, 0x10	; 16
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <vfprintf+0x564>
    5814:	20 e1       	ldi	r18, 0x10	; 16
    5816:	32 e0       	ldi	r19, 0x02	; 2
    5818:	56 01       	movw	r10, r12
    581a:	07 ff       	sbrs	r16, 7
    581c:	09 c0       	rjmp	.+18     	; 0x5830 <vfprintf+0x57c>
    581e:	84 e0       	ldi	r24, 0x04	; 4
    5820:	a8 0e       	add	r10, r24
    5822:	b1 1c       	adc	r11, r1
    5824:	f6 01       	movw	r30, r12
    5826:	60 81       	ld	r22, Z
    5828:	71 81       	ldd	r23, Z+1	; 0x01
    582a:	82 81       	ldd	r24, Z+2	; 0x02
    582c:	93 81       	ldd	r25, Z+3	; 0x03
    582e:	08 c0       	rjmp	.+16     	; 0x5840 <vfprintf+0x58c>
    5830:	f2 e0       	ldi	r31, 0x02	; 2
    5832:	af 0e       	add	r10, r31
    5834:	b1 1c       	adc	r11, r1
    5836:	f6 01       	movw	r30, r12
    5838:	60 81       	ld	r22, Z
    583a:	71 81       	ldd	r23, Z+1	; 0x01
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	90 e0       	ldi	r25, 0x00	; 0
    5840:	a3 01       	movw	r20, r6
    5842:	0e 94 5f 34 	call	0x68be	; 0x68be <__ultoa_invert>
    5846:	c8 2e       	mov	r12, r24
    5848:	c6 18       	sub	r12, r6
    584a:	0f 77       	andi	r16, 0x7F	; 127
    584c:	90 2e       	mov	r9, r16
    584e:	96 fe       	sbrs	r9, 6
    5850:	0b c0       	rjmp	.+22     	; 0x5868 <vfprintf+0x5b4>
    5852:	09 2d       	mov	r16, r9
    5854:	0e 7f       	andi	r16, 0xFE	; 254
    5856:	c1 16       	cp	r12, r17
    5858:	50 f4       	brcc	.+20     	; 0x586e <vfprintf+0x5ba>
    585a:	94 fe       	sbrs	r9, 4
    585c:	0a c0       	rjmp	.+20     	; 0x5872 <vfprintf+0x5be>
    585e:	92 fc       	sbrc	r9, 2
    5860:	08 c0       	rjmp	.+16     	; 0x5872 <vfprintf+0x5be>
    5862:	09 2d       	mov	r16, r9
    5864:	0e 7e       	andi	r16, 0xEE	; 238
    5866:	05 c0       	rjmp	.+10     	; 0x5872 <vfprintf+0x5be>
    5868:	dc 2c       	mov	r13, r12
    586a:	09 2d       	mov	r16, r9
    586c:	03 c0       	rjmp	.+6      	; 0x5874 <vfprintf+0x5c0>
    586e:	dc 2c       	mov	r13, r12
    5870:	01 c0       	rjmp	.+2      	; 0x5874 <vfprintf+0x5c0>
    5872:	d1 2e       	mov	r13, r17
    5874:	04 ff       	sbrs	r16, 4
    5876:	0d c0       	rjmp	.+26     	; 0x5892 <vfprintf+0x5de>
    5878:	fe 01       	movw	r30, r28
    587a:	ec 0d       	add	r30, r12
    587c:	f1 1d       	adc	r31, r1
    587e:	80 81       	ld	r24, Z
    5880:	80 33       	cpi	r24, 0x30	; 48
    5882:	11 f4       	brne	.+4      	; 0x5888 <vfprintf+0x5d4>
    5884:	09 7e       	andi	r16, 0xE9	; 233
    5886:	09 c0       	rjmp	.+18     	; 0x589a <vfprintf+0x5e6>
    5888:	02 ff       	sbrs	r16, 2
    588a:	06 c0       	rjmp	.+12     	; 0x5898 <vfprintf+0x5e4>
    588c:	d3 94       	inc	r13
    588e:	d3 94       	inc	r13
    5890:	04 c0       	rjmp	.+8      	; 0x589a <vfprintf+0x5e6>
    5892:	80 2f       	mov	r24, r16
    5894:	86 78       	andi	r24, 0x86	; 134
    5896:	09 f0       	breq	.+2      	; 0x589a <vfprintf+0x5e6>
    5898:	d3 94       	inc	r13
    589a:	03 fd       	sbrc	r16, 3
    589c:	10 c0       	rjmp	.+32     	; 0x58be <vfprintf+0x60a>
    589e:	00 ff       	sbrs	r16, 0
    58a0:	06 c0       	rjmp	.+12     	; 0x58ae <vfprintf+0x5fa>
    58a2:	1c 2d       	mov	r17, r12
    58a4:	d5 14       	cp	r13, r5
    58a6:	78 f4       	brcc	.+30     	; 0x58c6 <vfprintf+0x612>
    58a8:	15 0d       	add	r17, r5
    58aa:	1d 19       	sub	r17, r13
    58ac:	0c c0       	rjmp	.+24     	; 0x58c6 <vfprintf+0x612>
    58ae:	d5 14       	cp	r13, r5
    58b0:	50 f4       	brcc	.+20     	; 0x58c6 <vfprintf+0x612>
    58b2:	b7 01       	movw	r22, r14
    58b4:	80 e2       	ldi	r24, 0x20	; 32
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	3a d7       	rcall	.+3700   	; 0x672e <fputc>
    58ba:	d3 94       	inc	r13
    58bc:	f8 cf       	rjmp	.-16     	; 0x58ae <vfprintf+0x5fa>
    58be:	d5 14       	cp	r13, r5
    58c0:	10 f4       	brcc	.+4      	; 0x58c6 <vfprintf+0x612>
    58c2:	5d 18       	sub	r5, r13
    58c4:	01 c0       	rjmp	.+2      	; 0x58c8 <vfprintf+0x614>
    58c6:	51 2c       	mov	r5, r1
    58c8:	04 ff       	sbrs	r16, 4
    58ca:	0f c0       	rjmp	.+30     	; 0x58ea <vfprintf+0x636>
    58cc:	b7 01       	movw	r22, r14
    58ce:	80 e3       	ldi	r24, 0x30	; 48
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	2d d7       	rcall	.+3674   	; 0x672e <fputc>
    58d4:	02 ff       	sbrs	r16, 2
    58d6:	16 c0       	rjmp	.+44     	; 0x5904 <vfprintf+0x650>
    58d8:	01 fd       	sbrc	r16, 1
    58da:	03 c0       	rjmp	.+6      	; 0x58e2 <vfprintf+0x62e>
    58dc:	88 e7       	ldi	r24, 0x78	; 120
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	02 c0       	rjmp	.+4      	; 0x58e6 <vfprintf+0x632>
    58e2:	88 e5       	ldi	r24, 0x58	; 88
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	b7 01       	movw	r22, r14
    58e8:	0c c0       	rjmp	.+24     	; 0x5902 <vfprintf+0x64e>
    58ea:	80 2f       	mov	r24, r16
    58ec:	86 78       	andi	r24, 0x86	; 134
    58ee:	51 f0       	breq	.+20     	; 0x5904 <vfprintf+0x650>
    58f0:	01 ff       	sbrs	r16, 1
    58f2:	02 c0       	rjmp	.+4      	; 0x58f8 <vfprintf+0x644>
    58f4:	8b e2       	ldi	r24, 0x2B	; 43
    58f6:	01 c0       	rjmp	.+2      	; 0x58fa <vfprintf+0x646>
    58f8:	80 e2       	ldi	r24, 0x20	; 32
    58fa:	07 fd       	sbrc	r16, 7
    58fc:	8d e2       	ldi	r24, 0x2D	; 45
    58fe:	b7 01       	movw	r22, r14
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	15 d7       	rcall	.+3626   	; 0x672e <fputc>
    5904:	c1 16       	cp	r12, r17
    5906:	30 f4       	brcc	.+12     	; 0x5914 <vfprintf+0x660>
    5908:	b7 01       	movw	r22, r14
    590a:	80 e3       	ldi	r24, 0x30	; 48
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	0f d7       	rcall	.+3614   	; 0x672e <fputc>
    5910:	11 50       	subi	r17, 0x01	; 1
    5912:	f8 cf       	rjmp	.-16     	; 0x5904 <vfprintf+0x650>
    5914:	ca 94       	dec	r12
    5916:	f3 01       	movw	r30, r6
    5918:	ec 0d       	add	r30, r12
    591a:	f1 1d       	adc	r31, r1
    591c:	80 81       	ld	r24, Z
    591e:	b7 01       	movw	r22, r14
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	05 d7       	rcall	.+3594   	; 0x672e <fputc>
    5924:	c1 10       	cpse	r12, r1
    5926:	f6 cf       	rjmp	.-20     	; 0x5914 <vfprintf+0x660>
    5928:	15 c0       	rjmp	.+42     	; 0x5954 <vfprintf+0x6a0>
    592a:	f4 e0       	ldi	r31, 0x04	; 4
    592c:	f5 15       	cp	r31, r5
    592e:	50 f5       	brcc	.+84     	; 0x5984 <vfprintf+0x6d0>
    5930:	84 e0       	ldi	r24, 0x04	; 4
    5932:	58 1a       	sub	r5, r24
    5934:	93 fe       	sbrs	r9, 3
    5936:	1e c0       	rjmp	.+60     	; 0x5974 <vfprintf+0x6c0>
    5938:	01 11       	cpse	r16, r1
    593a:	25 c0       	rjmp	.+74     	; 0x5986 <vfprintf+0x6d2>
    593c:	2c 85       	ldd	r18, Y+12	; 0x0c
    593e:	23 ff       	sbrs	r18, 3
    5940:	27 c0       	rjmp	.+78     	; 0x5990 <vfprintf+0x6dc>
    5942:	02 e1       	ldi	r16, 0x12	; 18
    5944:	11 e0       	ldi	r17, 0x01	; 1
    5946:	39 2d       	mov	r19, r9
    5948:	30 71       	andi	r19, 0x10	; 16
    594a:	93 2e       	mov	r9, r19
    594c:	f8 01       	movw	r30, r16
    594e:	84 91       	lpm	r24, Z
    5950:	81 11       	cpse	r24, r1
    5952:	21 c0       	rjmp	.+66     	; 0x5996 <vfprintf+0x6e2>
    5954:	55 20       	and	r5, r5
    5956:	09 f4       	brne	.+2      	; 0x595a <vfprintf+0x6a6>
    5958:	ed cc       	rjmp	.-1574   	; 0x5334 <vfprintf+0x80>
    595a:	b7 01       	movw	r22, r14
    595c:	80 e2       	ldi	r24, 0x20	; 32
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	e6 d6       	rcall	.+3532   	; 0x672e <fputc>
    5962:	5a 94       	dec	r5
    5964:	f7 cf       	rjmp	.-18     	; 0x5954 <vfprintf+0x6a0>
    5966:	f7 01       	movw	r30, r14
    5968:	86 81       	ldd	r24, Z+6	; 0x06
    596a:	97 81       	ldd	r25, Z+7	; 0x07
    596c:	23 c0       	rjmp	.+70     	; 0x59b4 <vfprintf+0x700>
    596e:	8f ef       	ldi	r24, 0xFF	; 255
    5970:	9f ef       	ldi	r25, 0xFF	; 255
    5972:	20 c0       	rjmp	.+64     	; 0x59b4 <vfprintf+0x700>
    5974:	b7 01       	movw	r22, r14
    5976:	80 e2       	ldi	r24, 0x20	; 32
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	d9 d6       	rcall	.+3506   	; 0x672e <fputc>
    597c:	5a 94       	dec	r5
    597e:	51 10       	cpse	r5, r1
    5980:	f9 cf       	rjmp	.-14     	; 0x5974 <vfprintf+0x6c0>
    5982:	da cf       	rjmp	.-76     	; 0x5938 <vfprintf+0x684>
    5984:	51 2c       	mov	r5, r1
    5986:	b7 01       	movw	r22, r14
    5988:	80 2f       	mov	r24, r16
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	d0 d6       	rcall	.+3488   	; 0x672e <fputc>
    598e:	d6 cf       	rjmp	.-84     	; 0x593c <vfprintf+0x688>
    5990:	06 e1       	ldi	r16, 0x16	; 22
    5992:	11 e0       	ldi	r17, 0x01	; 1
    5994:	d8 cf       	rjmp	.-80     	; 0x5946 <vfprintf+0x692>
    5996:	91 10       	cpse	r9, r1
    5998:	80 52       	subi	r24, 0x20	; 32
    599a:	b7 01       	movw	r22, r14
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	c7 d6       	rcall	.+3470   	; 0x672e <fputc>
    59a0:	0f 5f       	subi	r16, 0xFF	; 255
    59a2:	1f 4f       	sbci	r17, 0xFF	; 255
    59a4:	d3 cf       	rjmp	.-90     	; 0x594c <vfprintf+0x698>
    59a6:	23 e0       	ldi	r18, 0x03	; 3
    59a8:	25 15       	cp	r18, r5
    59aa:	10 f4       	brcc	.+4      	; 0x59b0 <vfprintf+0x6fc>
    59ac:	83 e0       	ldi	r24, 0x03	; 3
    59ae:	c1 cf       	rjmp	.-126    	; 0x5932 <vfprintf+0x67e>
    59b0:	51 2c       	mov	r5, r1
    59b2:	c4 cf       	rjmp	.-120    	; 0x593c <vfprintf+0x688>
    59b4:	60 96       	adiw	r28, 0x10	; 16
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	0f be       	out	0x3f, r0	; 63
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	df 91       	pop	r29
    59c2:	cf 91       	pop	r28
    59c4:	1f 91       	pop	r17
    59c6:	0f 91       	pop	r16
    59c8:	ff 90       	pop	r15
    59ca:	ef 90       	pop	r14
    59cc:	df 90       	pop	r13
    59ce:	cf 90       	pop	r12
    59d0:	bf 90       	pop	r11
    59d2:	af 90       	pop	r10
    59d4:	9f 90       	pop	r9
    59d6:	8f 90       	pop	r8
    59d8:	7f 90       	pop	r7
    59da:	6f 90       	pop	r6
    59dc:	5f 90       	pop	r5
    59de:	4f 90       	pop	r4
    59e0:	3f 90       	pop	r3
    59e2:	2f 90       	pop	r2
    59e4:	08 95       	ret

000059e6 <putval>:
    59e6:	20 fd       	sbrc	r18, 0
    59e8:	09 c0       	rjmp	.+18     	; 0x59fc <putval+0x16>
    59ea:	fc 01       	movw	r30, r24
    59ec:	23 fd       	sbrc	r18, 3
    59ee:	05 c0       	rjmp	.+10     	; 0x59fa <putval+0x14>
    59f0:	22 ff       	sbrs	r18, 2
    59f2:	02 c0       	rjmp	.+4      	; 0x59f8 <putval+0x12>
    59f4:	73 83       	std	Z+3, r23	; 0x03
    59f6:	62 83       	std	Z+2, r22	; 0x02
    59f8:	51 83       	std	Z+1, r21	; 0x01
    59fa:	40 83       	st	Z, r20
    59fc:	08 95       	ret

000059fe <mulacc>:
    59fe:	44 fd       	sbrc	r20, 4
    5a00:	17 c0       	rjmp	.+46     	; 0x5a30 <mulacc+0x32>
    5a02:	46 fd       	sbrc	r20, 6
    5a04:	17 c0       	rjmp	.+46     	; 0x5a34 <mulacc+0x36>
    5a06:	ab 01       	movw	r20, r22
    5a08:	bc 01       	movw	r22, r24
    5a0a:	da 01       	movw	r26, r20
    5a0c:	fb 01       	movw	r30, r22
    5a0e:	aa 0f       	add	r26, r26
    5a10:	bb 1f       	adc	r27, r27
    5a12:	ee 1f       	adc	r30, r30
    5a14:	ff 1f       	adc	r31, r31
    5a16:	10 94       	com	r1
    5a18:	d1 f7       	brne	.-12     	; 0x5a0e <mulacc+0x10>
    5a1a:	4a 0f       	add	r20, r26
    5a1c:	5b 1f       	adc	r21, r27
    5a1e:	6e 1f       	adc	r22, r30
    5a20:	7f 1f       	adc	r23, r31
    5a22:	cb 01       	movw	r24, r22
    5a24:	ba 01       	movw	r22, r20
    5a26:	66 0f       	add	r22, r22
    5a28:	77 1f       	adc	r23, r23
    5a2a:	88 1f       	adc	r24, r24
    5a2c:	99 1f       	adc	r25, r25
    5a2e:	09 c0       	rjmp	.+18     	; 0x5a42 <mulacc+0x44>
    5a30:	33 e0       	ldi	r19, 0x03	; 3
    5a32:	01 c0       	rjmp	.+2      	; 0x5a36 <mulacc+0x38>
    5a34:	34 e0       	ldi	r19, 0x04	; 4
    5a36:	66 0f       	add	r22, r22
    5a38:	77 1f       	adc	r23, r23
    5a3a:	88 1f       	adc	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	31 50       	subi	r19, 0x01	; 1
    5a40:	d1 f7       	brne	.-12     	; 0x5a36 <mulacc+0x38>
    5a42:	62 0f       	add	r22, r18
    5a44:	71 1d       	adc	r23, r1
    5a46:	81 1d       	adc	r24, r1
    5a48:	91 1d       	adc	r25, r1
    5a4a:	08 95       	ret

00005a4c <skip_spaces>:
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	8c 01       	movw	r16, r24
    5a56:	c8 01       	movw	r24, r16
    5a58:	2c d6       	rcall	.+3160   	; 0x66b2 <fgetc>
    5a5a:	ec 01       	movw	r28, r24
    5a5c:	97 fd       	sbrc	r25, 7
    5a5e:	06 c0       	rjmp	.+12     	; 0x5a6c <skip_spaces+0x20>
    5a60:	f7 d5       	rcall	.+3054   	; 0x6650 <isspace>
    5a62:	89 2b       	or	r24, r25
    5a64:	c1 f7       	brne	.-16     	; 0x5a56 <skip_spaces+0xa>
    5a66:	b8 01       	movw	r22, r16
    5a68:	ce 01       	movw	r24, r28
    5a6a:	10 d7       	rcall	.+3616   	; 0x688c <ungetc>
    5a6c:	ce 01       	movw	r24, r28
    5a6e:	df 91       	pop	r29
    5a70:	cf 91       	pop	r28
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	08 95       	ret

00005a78 <conv_int>:
    5a78:	8f 92       	push	r8
    5a7a:	9f 92       	push	r9
    5a7c:	af 92       	push	r10
    5a7e:	bf 92       	push	r11
    5a80:	cf 92       	push	r12
    5a82:	df 92       	push	r13
    5a84:	ef 92       	push	r14
    5a86:	ff 92       	push	r15
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	cf 93       	push	r28
    5a8e:	df 93       	push	r29
    5a90:	7c 01       	movw	r14, r24
    5a92:	8b 01       	movw	r16, r22
    5a94:	6a 01       	movw	r12, r20
    5a96:	d2 2f       	mov	r29, r18
    5a98:	0c d6       	rcall	.+3096   	; 0x66b2 <fgetc>
    5a9a:	9c 01       	movw	r18, r24
    5a9c:	33 27       	eor	r19, r19
    5a9e:	2b 32       	cpi	r18, 0x2B	; 43
    5aa0:	31 05       	cpc	r19, r1
    5aa2:	21 f0       	breq	.+8      	; 0x5aac <conv_int+0x34>
    5aa4:	2d 32       	cpi	r18, 0x2D	; 45
    5aa6:	31 05       	cpc	r19, r1
    5aa8:	51 f4       	brne	.+20     	; 0x5abe <conv_int+0x46>
    5aaa:	d0 68       	ori	r29, 0x80	; 128
    5aac:	01 50       	subi	r16, 0x01	; 1
    5aae:	11 09       	sbc	r17, r1
    5ab0:	11 f4       	brne	.+4      	; 0x5ab6 <conv_int+0x3e>
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	64 c0       	rjmp	.+200    	; 0x5b7e <conv_int+0x106>
    5ab6:	c7 01       	movw	r24, r14
    5ab8:	fc d5       	rcall	.+3064   	; 0x66b2 <fgetc>
    5aba:	97 fd       	sbrc	r25, 7
    5abc:	fa cf       	rjmp	.-12     	; 0x5ab2 <conv_int+0x3a>
    5abe:	cd 2f       	mov	r28, r29
    5ac0:	cd 7f       	andi	r28, 0xFD	; 253
    5ac2:	2d 2f       	mov	r18, r29
    5ac4:	20 73       	andi	r18, 0x30	; 48
    5ac6:	09 f5       	brne	.+66     	; 0x5b0a <conv_int+0x92>
    5ac8:	80 33       	cpi	r24, 0x30	; 48
    5aca:	f9 f4       	brne	.+62     	; 0x5b0a <conv_int+0x92>
    5acc:	58 01       	movw	r10, r16
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	a8 1a       	sub	r10, r24
    5ad2:	b1 08       	sbc	r11, r1
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <conv_int+0x60>
    5ad6:	40 c0       	rjmp	.+128    	; 0x5b58 <conv_int+0xe0>
    5ad8:	c7 01       	movw	r24, r14
    5ada:	eb d5       	rcall	.+3030   	; 0x66b2 <fgetc>
    5adc:	97 fd       	sbrc	r25, 7
    5ade:	3c c0       	rjmp	.+120    	; 0x5b58 <conv_int+0xe0>
    5ae0:	9c 01       	movw	r18, r24
    5ae2:	2f 7d       	andi	r18, 0xDF	; 223
    5ae4:	33 27       	eor	r19, r19
    5ae6:	28 35       	cpi	r18, 0x58	; 88
    5ae8:	31 05       	cpc	r19, r1
    5aea:	49 f4       	brne	.+18     	; 0x5afe <conv_int+0x86>
    5aec:	c2 64       	ori	r28, 0x42	; 66
    5aee:	02 50       	subi	r16, 0x02	; 2
    5af0:	11 09       	sbc	r17, r1
    5af2:	91 f1       	breq	.+100    	; 0x5b58 <conv_int+0xe0>
    5af4:	c7 01       	movw	r24, r14
    5af6:	dd d5       	rcall	.+3002   	; 0x66b2 <fgetc>
    5af8:	97 ff       	sbrs	r25, 7
    5afa:	07 c0       	rjmp	.+14     	; 0x5b0a <conv_int+0x92>
    5afc:	2d c0       	rjmp	.+90     	; 0x5b58 <conv_int+0xe0>
    5afe:	d6 ff       	sbrs	r29, 6
    5b00:	02 c0       	rjmp	.+4      	; 0x5b06 <conv_int+0x8e>
    5b02:	c2 60       	ori	r28, 0x02	; 2
    5b04:	01 c0       	rjmp	.+2      	; 0x5b08 <conv_int+0x90>
    5b06:	c2 61       	ori	r28, 0x12	; 18
    5b08:	85 01       	movw	r16, r10
    5b0a:	81 2c       	mov	r8, r1
    5b0c:	91 2c       	mov	r9, r1
    5b0e:	54 01       	movw	r10, r8
    5b10:	20 ed       	ldi	r18, 0xD0	; 208
    5b12:	28 0f       	add	r18, r24
    5b14:	28 30       	cpi	r18, 0x08	; 8
    5b16:	78 f0       	brcs	.+30     	; 0x5b36 <conv_int+0xbe>
    5b18:	c4 ff       	sbrs	r28, 4
    5b1a:	03 c0       	rjmp	.+6      	; 0x5b22 <conv_int+0xaa>
    5b1c:	b7 01       	movw	r22, r14
    5b1e:	b6 d6       	rcall	.+3436   	; 0x688c <ungetc>
    5b20:	18 c0       	rjmp	.+48     	; 0x5b52 <conv_int+0xda>
    5b22:	2a 30       	cpi	r18, 0x0A	; 10
    5b24:	40 f0       	brcs	.+16     	; 0x5b36 <conv_int+0xbe>
    5b26:	c6 ff       	sbrs	r28, 6
    5b28:	f9 cf       	rjmp	.-14     	; 0x5b1c <conv_int+0xa4>
    5b2a:	2f 7d       	andi	r18, 0xDF	; 223
    5b2c:	3f ee       	ldi	r19, 0xEF	; 239
    5b2e:	32 0f       	add	r19, r18
    5b30:	36 30       	cpi	r19, 0x06	; 6
    5b32:	a0 f7       	brcc	.-24     	; 0x5b1c <conv_int+0xa4>
    5b34:	27 50       	subi	r18, 0x07	; 7
    5b36:	4c 2f       	mov	r20, r28
    5b38:	c5 01       	movw	r24, r10
    5b3a:	b4 01       	movw	r22, r8
    5b3c:	60 df       	rcall	.-320    	; 0x59fe <mulacc>
    5b3e:	4b 01       	movw	r8, r22
    5b40:	5c 01       	movw	r10, r24
    5b42:	c2 60       	ori	r28, 0x02	; 2
    5b44:	01 50       	subi	r16, 0x01	; 1
    5b46:	11 09       	sbc	r17, r1
    5b48:	51 f0       	breq	.+20     	; 0x5b5e <conv_int+0xe6>
    5b4a:	c7 01       	movw	r24, r14
    5b4c:	b2 d5       	rcall	.+2916   	; 0x66b2 <fgetc>
    5b4e:	97 ff       	sbrs	r25, 7
    5b50:	df cf       	rjmp	.-66     	; 0x5b10 <conv_int+0x98>
    5b52:	c1 fd       	sbrc	r28, 1
    5b54:	04 c0       	rjmp	.+8      	; 0x5b5e <conv_int+0xe6>
    5b56:	ad cf       	rjmp	.-166    	; 0x5ab2 <conv_int+0x3a>
    5b58:	81 2c       	mov	r8, r1
    5b5a:	91 2c       	mov	r9, r1
    5b5c:	54 01       	movw	r10, r8
    5b5e:	c7 ff       	sbrs	r28, 7
    5b60:	08 c0       	rjmp	.+16     	; 0x5b72 <conv_int+0xfa>
    5b62:	b0 94       	com	r11
    5b64:	a0 94       	com	r10
    5b66:	90 94       	com	r9
    5b68:	80 94       	com	r8
    5b6a:	81 1c       	adc	r8, r1
    5b6c:	91 1c       	adc	r9, r1
    5b6e:	a1 1c       	adc	r10, r1
    5b70:	b1 1c       	adc	r11, r1
    5b72:	2c 2f       	mov	r18, r28
    5b74:	b5 01       	movw	r22, r10
    5b76:	a4 01       	movw	r20, r8
    5b78:	c6 01       	movw	r24, r12
    5b7a:	35 df       	rcall	.-406    	; 0x59e6 <putval>
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	df 91       	pop	r29
    5b80:	cf 91       	pop	r28
    5b82:	1f 91       	pop	r17
    5b84:	0f 91       	pop	r16
    5b86:	ff 90       	pop	r15
    5b88:	ef 90       	pop	r14
    5b8a:	df 90       	pop	r13
    5b8c:	cf 90       	pop	r12
    5b8e:	bf 90       	pop	r11
    5b90:	af 90       	pop	r10
    5b92:	9f 90       	pop	r9
    5b94:	8f 90       	pop	r8
    5b96:	08 95       	ret

00005b98 <conv_brk>:
    5b98:	4f 92       	push	r4
    5b9a:	5f 92       	push	r5
    5b9c:	6f 92       	push	r6
    5b9e:	7f 92       	push	r7
    5ba0:	8f 92       	push	r8
    5ba2:	9f 92       	push	r9
    5ba4:	af 92       	push	r10
    5ba6:	bf 92       	push	r11
    5ba8:	cf 92       	push	r12
    5baa:	df 92       	push	r13
    5bac:	ef 92       	push	r14
    5bae:	ff 92       	push	r15
    5bb0:	0f 93       	push	r16
    5bb2:	1f 93       	push	r17
    5bb4:	cf 93       	push	r28
    5bb6:	df 93       	push	r29
    5bb8:	cd b7       	in	r28, 0x3d	; 61
    5bba:	de b7       	in	r29, 0x3e	; 62
    5bbc:	a0 97       	sbiw	r28, 0x20	; 32
    5bbe:	0f b6       	in	r0, 0x3f	; 63
    5bc0:	f8 94       	cli
    5bc2:	de bf       	out	0x3e, r29	; 62
    5bc4:	0f be       	out	0x3f, r0	; 63
    5bc6:	cd bf       	out	0x3d, r28	; 61
    5bc8:	5c 01       	movw	r10, r24
    5bca:	4b 01       	movw	r8, r22
    5bcc:	7a 01       	movw	r14, r20
    5bce:	8e 01       	movw	r16, r28
    5bd0:	0f 5f       	subi	r16, 0xFF	; 255
    5bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd4:	68 01       	movw	r12, r16
    5bd6:	80 e2       	ldi	r24, 0x20	; 32
    5bd8:	f8 01       	movw	r30, r16
    5bda:	11 92       	st	Z+, r1
    5bdc:	8a 95       	dec	r24
    5bde:	e9 f7       	brne	.-6      	; 0x5bda <conv_brk+0x42>
    5be0:	f5 01       	movw	r30, r10
    5be2:	53 80       	ldd	r5, Z+3	; 0x03
    5be4:	40 e0       	ldi	r20, 0x00	; 0
    5be6:	50 e0       	ldi	r21, 0x00	; 0
    5be8:	61 2c       	mov	r6, r1
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	71 2c       	mov	r7, r1
    5bee:	a1 e0       	ldi	r26, 0x01	; 1
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	f9 01       	movw	r30, r18
    5bf4:	53 fc       	sbrc	r5, 3
    5bf6:	85 91       	lpm	r24, Z+
    5bf8:	53 fe       	sbrs	r5, 3
    5bfa:	81 91       	ld	r24, Z+
    5bfc:	8f 01       	movw	r16, r30
    5bfe:	48 2e       	mov	r4, r24
    5c00:	9f 01       	movw	r18, r30
    5c02:	81 11       	cpse	r24, r1
    5c04:	03 c0       	rjmp	.+6      	; 0x5c0c <conv_brk+0x74>
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	94 c0       	rjmp	.+296    	; 0x5d34 <conv_brk+0x19c>
    5c0c:	8e 35       	cpi	r24, 0x5E	; 94
    5c0e:	19 f4       	brne	.+6      	; 0x5c16 <conv_brk+0x7e>
    5c10:	41 15       	cp	r20, r1
    5c12:	51 05       	cpc	r21, r1
    5c14:	51 f1       	breq	.+84     	; 0x5c6a <conv_brk+0xd2>
    5c16:	67 2d       	mov	r22, r7
    5c18:	70 e0       	ldi	r23, 0x00	; 0
    5c1a:	64 17       	cp	r22, r20
    5c1c:	75 07       	cpc	r23, r21
    5c1e:	3c f4       	brge	.+14     	; 0x5c2e <conv_brk+0x96>
    5c20:	8d 35       	cpi	r24, 0x5D	; 93
    5c22:	61 f1       	breq	.+88     	; 0x5c7c <conv_brk+0xe4>
    5c24:	8d 32       	cpi	r24, 0x2D	; 45
    5c26:	19 f4       	brne	.+6      	; 0x5c2e <conv_brk+0x96>
    5c28:	99 23       	and	r25, r25
    5c2a:	11 f1       	breq	.+68     	; 0x5c70 <conv_brk+0xd8>
    5c2c:	03 c0       	rjmp	.+6      	; 0x5c34 <conv_brk+0x9c>
    5c2e:	99 23       	and	r25, r25
    5c30:	09 f4       	brne	.+2      	; 0x5c34 <conv_brk+0x9c>
    5c32:	6b c0       	rjmp	.+214    	; 0x5d0a <conv_brk+0x172>
    5c34:	84 2d       	mov	r24, r4
    5c36:	86 95       	lsr	r24
    5c38:	86 95       	lsr	r24
    5c3a:	86 95       	lsr	r24
    5c3c:	f6 01       	movw	r30, r12
    5c3e:	e8 0f       	add	r30, r24
    5c40:	f1 1d       	adc	r31, r1
    5c42:	84 2d       	mov	r24, r4
    5c44:	87 70       	andi	r24, 0x07	; 7
    5c46:	8d 01       	movw	r16, r26
    5c48:	02 c0       	rjmp	.+4      	; 0x5c4e <conv_brk+0xb6>
    5c4a:	00 0f       	add	r16, r16
    5c4c:	11 1f       	adc	r17, r17
    5c4e:	8a 95       	dec	r24
    5c50:	e2 f7       	brpl	.-8      	; 0x5c4a <conv_brk+0xb2>
    5c52:	c8 01       	movw	r24, r16
    5c54:	90 81       	ld	r25, Z
    5c56:	89 2b       	or	r24, r25
    5c58:	80 83       	st	Z, r24
    5c5a:	64 14       	cp	r6, r4
    5c5c:	59 f0       	breq	.+22     	; 0x5c74 <conv_brk+0xdc>
    5c5e:	46 14       	cp	r4, r6
    5c60:	10 f4       	brcc	.+4      	; 0x5c66 <conv_brk+0xce>
    5c62:	43 94       	inc	r4
    5c64:	e7 cf       	rjmp	.-50     	; 0x5c34 <conv_brk+0x9c>
    5c66:	4a 94       	dec	r4
    5c68:	e5 cf       	rjmp	.-54     	; 0x5c34 <conv_brk+0x9c>
    5c6a:	77 24       	eor	r7, r7
    5c6c:	73 94       	inc	r7
    5c6e:	03 c0       	rjmp	.+6      	; 0x5c76 <conv_brk+0xde>
    5c70:	91 e0       	ldi	r25, 0x01	; 1
    5c72:	01 c0       	rjmp	.+2      	; 0x5c76 <conv_brk+0xde>
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	4f 5f       	subi	r20, 0xFF	; 255
    5c78:	5f 4f       	sbci	r21, 0xFF	; 255
    5c7a:	bb cf       	rjmp	.-138    	; 0x5bf2 <conv_brk+0x5a>
    5c7c:	99 23       	and	r25, r25
    5c7e:	19 f0       	breq	.+6      	; 0x5c86 <conv_brk+0xee>
    5c80:	8e 81       	ldd	r24, Y+6	; 0x06
    5c82:	80 62       	ori	r24, 0x20	; 32
    5c84:	8e 83       	std	Y+6, r24	; 0x06
    5c86:	71 10       	cpse	r7, r1
    5c88:	03 c0       	rjmp	.+6      	; 0x5c90 <conv_brk+0xf8>
    5c8a:	77 24       	eor	r7, r7
    5c8c:	73 94       	inc	r7
    5c8e:	19 c0       	rjmp	.+50     	; 0x5cc2 <conv_brk+0x12a>
    5c90:	f6 01       	movw	r30, r12
    5c92:	9e 01       	movw	r18, r28
    5c94:	2f 5d       	subi	r18, 0xDF	; 223
    5c96:	3f 4f       	sbci	r19, 0xFF	; 255
    5c98:	80 81       	ld	r24, Z
    5c9a:	80 95       	com	r24
    5c9c:	81 93       	st	Z+, r24
    5c9e:	2e 17       	cp	r18, r30
    5ca0:	3f 07       	cpc	r19, r31
    5ca2:	d1 f7       	brne	.-12     	; 0x5c98 <conv_brk+0x100>
    5ca4:	f2 cf       	rjmp	.-28     	; 0x5c8a <conv_brk+0xf2>
    5ca6:	e1 14       	cp	r14, r1
    5ca8:	f1 04       	cpc	r15, r1
    5caa:	31 f0       	breq	.+12     	; 0x5cb8 <conv_brk+0x120>
    5cac:	f7 01       	movw	r30, r14
    5cae:	80 83       	st	Z, r24
    5cb0:	b7 01       	movw	r22, r14
    5cb2:	6f 5f       	subi	r22, 0xFF	; 255
    5cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb6:	7b 01       	movw	r14, r22
    5cb8:	71 e0       	ldi	r23, 0x01	; 1
    5cba:	87 1a       	sub	r8, r23
    5cbc:	91 08       	sbc	r9, r1
    5cbe:	71 2c       	mov	r7, r1
    5cc0:	e9 f0       	breq	.+58     	; 0x5cfc <conv_brk+0x164>
    5cc2:	c5 01       	movw	r24, r10
    5cc4:	f6 d4       	rcall	.+2540   	; 0x66b2 <fgetc>
    5cc6:	97 fd       	sbrc	r25, 7
    5cc8:	17 c0       	rjmp	.+46     	; 0x5cf8 <conv_brk+0x160>
    5cca:	fc 01       	movw	r30, r24
    5ccc:	ff 27       	eor	r31, r31
    5cce:	23 e0       	ldi	r18, 0x03	; 3
    5cd0:	f5 95       	asr	r31
    5cd2:	e7 95       	ror	r30
    5cd4:	2a 95       	dec	r18
    5cd6:	e1 f7       	brne	.-8      	; 0x5cd0 <conv_brk+0x138>
    5cd8:	ec 0d       	add	r30, r12
    5cda:	fd 1d       	adc	r31, r13
    5cdc:	20 81       	ld	r18, Z
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	ac 01       	movw	r20, r24
    5ce2:	47 70       	andi	r20, 0x07	; 7
    5ce4:	55 27       	eor	r21, r21
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <conv_brk+0x154>
    5ce8:	35 95       	asr	r19
    5cea:	27 95       	ror	r18
    5cec:	4a 95       	dec	r20
    5cee:	e2 f7       	brpl	.-8      	; 0x5ce8 <conv_brk+0x150>
    5cf0:	20 fd       	sbrc	r18, 0
    5cf2:	d9 cf       	rjmp	.-78     	; 0x5ca6 <conv_brk+0x10e>
    5cf4:	b5 01       	movw	r22, r10
    5cf6:	ca d5       	rcall	.+2964   	; 0x688c <ungetc>
    5cf8:	71 10       	cpse	r7, r1
    5cfa:	85 cf       	rjmp	.-246    	; 0x5c06 <conv_brk+0x6e>
    5cfc:	e1 14       	cp	r14, r1
    5cfe:	f1 04       	cpc	r15, r1
    5d00:	11 f0       	breq	.+4      	; 0x5d06 <conv_brk+0x16e>
    5d02:	f7 01       	movw	r30, r14
    5d04:	10 82       	st	Z, r1
    5d06:	c8 01       	movw	r24, r16
    5d08:	15 c0       	rjmp	.+42     	; 0x5d34 <conv_brk+0x19c>
    5d0a:	68 2f       	mov	r22, r24
    5d0c:	66 95       	lsr	r22
    5d0e:	66 95       	lsr	r22
    5d10:	66 95       	lsr	r22
    5d12:	f6 01       	movw	r30, r12
    5d14:	e6 0f       	add	r30, r22
    5d16:	f1 1d       	adc	r31, r1
    5d18:	68 2f       	mov	r22, r24
    5d1a:	67 70       	andi	r22, 0x07	; 7
    5d1c:	8d 01       	movw	r16, r26
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <conv_brk+0x18c>
    5d20:	00 0f       	add	r16, r16
    5d22:	11 1f       	adc	r17, r17
    5d24:	6a 95       	dec	r22
    5d26:	e2 f7       	brpl	.-8      	; 0x5d20 <conv_brk+0x188>
    5d28:	b8 01       	movw	r22, r16
    5d2a:	70 81       	ld	r23, Z
    5d2c:	67 2b       	or	r22, r23
    5d2e:	60 83       	st	Z, r22
    5d30:	68 2e       	mov	r6, r24
    5d32:	a1 cf       	rjmp	.-190    	; 0x5c76 <conv_brk+0xde>
    5d34:	a0 96       	adiw	r28, 0x20	; 32
    5d36:	0f b6       	in	r0, 0x3f	; 63
    5d38:	f8 94       	cli
    5d3a:	de bf       	out	0x3e, r29	; 62
    5d3c:	0f be       	out	0x3f, r0	; 63
    5d3e:	cd bf       	out	0x3d, r28	; 61
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	1f 91       	pop	r17
    5d46:	0f 91       	pop	r16
    5d48:	ff 90       	pop	r15
    5d4a:	ef 90       	pop	r14
    5d4c:	df 90       	pop	r13
    5d4e:	cf 90       	pop	r12
    5d50:	bf 90       	pop	r11
    5d52:	af 90       	pop	r10
    5d54:	9f 90       	pop	r9
    5d56:	8f 90       	pop	r8
    5d58:	7f 90       	pop	r7
    5d5a:	6f 90       	pop	r6
    5d5c:	5f 90       	pop	r5
    5d5e:	4f 90       	pop	r4
    5d60:	08 95       	ret

00005d62 <conv_flt>:
    5d62:	2f 92       	push	r2
    5d64:	3f 92       	push	r3
    5d66:	4f 92       	push	r4
    5d68:	5f 92       	push	r5
    5d6a:	6f 92       	push	r6
    5d6c:	7f 92       	push	r7
    5d6e:	9f 92       	push	r9
    5d70:	af 92       	push	r10
    5d72:	bf 92       	push	r11
    5d74:	cf 92       	push	r12
    5d76:	df 92       	push	r13
    5d78:	ef 92       	push	r14
    5d7a:	ff 92       	push	r15
    5d7c:	0f 93       	push	r16
    5d7e:	1f 93       	push	r17
    5d80:	cf 93       	push	r28
    5d82:	df 93       	push	r29
    5d84:	6c 01       	movw	r12, r24
    5d86:	8b 01       	movw	r16, r22
    5d88:	1a 01       	movw	r2, r20
    5d8a:	93 d4       	rcall	.+2342   	; 0x66b2 <fgetc>
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	99 27       	eor	r25, r25
    5d90:	8b 32       	cpi	r24, 0x2B	; 43
    5d92:	91 05       	cpc	r25, r1
    5d94:	29 f0       	breq	.+10     	; 0x5da0 <conv_flt+0x3e>
    5d96:	8d 97       	sbiw	r24, 0x2d	; 45
    5d98:	79 f4       	brne	.+30     	; 0x5db8 <conv_flt+0x56>
    5d9a:	30 e8       	ldi	r19, 0x80	; 128
    5d9c:	93 2e       	mov	r9, r19
    5d9e:	01 c0       	rjmp	.+2      	; 0x5da2 <conv_flt+0x40>
    5da0:	91 2c       	mov	r9, r1
    5da2:	01 50       	subi	r16, 0x01	; 1
    5da4:	11 09       	sbc	r17, r1
    5da6:	11 f4       	brne	.+4      	; 0x5dac <conv_flt+0x4a>
    5da8:	80 e0       	ldi	r24, 0x00	; 0
    5daa:	fe c0       	rjmp	.+508    	; 0x5fa8 <conv_flt+0x246>
    5dac:	c6 01       	movw	r24, r12
    5dae:	81 d4       	rcall	.+2306   	; 0x66b2 <fgetc>
    5db0:	ec 01       	movw	r28, r24
    5db2:	97 ff       	sbrs	r25, 7
    5db4:	02 c0       	rjmp	.+4      	; 0x5dba <conv_flt+0x58>
    5db6:	f8 cf       	rjmp	.-16     	; 0x5da8 <conv_flt+0x46>
    5db8:	91 2c       	mov	r9, r1
    5dba:	ce 01       	movw	r24, r28
    5dbc:	51 d4       	rcall	.+2210   	; 0x6660 <tolower>
    5dbe:	89 36       	cpi	r24, 0x69	; 105
    5dc0:	91 05       	cpc	r25, r1
    5dc2:	31 f0       	breq	.+12     	; 0x5dd0 <conv_flt+0x6e>
    5dc4:	8e 36       	cpi	r24, 0x6E	; 110
    5dc6:	91 05       	cpc	r25, r1
    5dc8:	81 f5       	brne	.+96     	; 0x5e2a <conv_flt+0xc8>
    5dca:	c6 e2       	ldi	r28, 0x26	; 38
    5dcc:	d2 e0       	ldi	r29, 0x02	; 2
    5dce:	02 c0       	rjmp	.+4      	; 0x5dd4 <conv_flt+0x72>
    5dd0:	c9 e2       	ldi	r28, 0x29	; 41
    5dd2:	d2 e0       	ldi	r29, 0x02	; 2
    5dd4:	21 96       	adiw	r28, 0x01	; 1
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	31 97       	sbiw	r30, 0x01	; 1
    5dda:	b4 90       	lpm	r11, Z
    5ddc:	bb 20       	and	r11, r11
    5dde:	b1 f0       	breq	.+44     	; 0x5e0c <conv_flt+0xaa>
    5de0:	01 50       	subi	r16, 0x01	; 1
    5de2:	11 09       	sbc	r17, r1
    5de4:	79 f0       	breq	.+30     	; 0x5e04 <conv_flt+0xa2>
    5de6:	c6 01       	movw	r24, r12
    5de8:	64 d4       	rcall	.+2248   	; 0x66b2 <fgetc>
    5dea:	7c 01       	movw	r14, r24
    5dec:	97 fd       	sbrc	r25, 7
    5dee:	0a c0       	rjmp	.+20     	; 0x5e04 <conv_flt+0xa2>
    5df0:	37 d4       	rcall	.+2158   	; 0x6660 <tolower>
    5df2:	99 27       	eor	r25, r25
    5df4:	eb 2d       	mov	r30, r11
    5df6:	f0 e0       	ldi	r31, 0x00	; 0
    5df8:	8e 17       	cp	r24, r30
    5dfa:	9f 07       	cpc	r25, r31
    5dfc:	59 f3       	breq	.-42     	; 0x5dd4 <conv_flt+0x72>
    5dfe:	b6 01       	movw	r22, r12
    5e00:	c7 01       	movw	r24, r14
    5e02:	44 d5       	rcall	.+2696   	; 0x688c <ungetc>
    5e04:	cc 52       	subi	r28, 0x2C	; 44
    5e06:	d2 40       	sbci	r29, 0x02	; 2
    5e08:	79 f6       	brne	.-98     	; 0x5da8 <conv_flt+0x46>
    5e0a:	03 c0       	rjmp	.+6      	; 0x5e12 <conv_flt+0xb0>
    5e0c:	c9 52       	subi	r28, 0x29	; 41
    5e0e:	d2 40       	sbci	r29, 0x02	; 2
    5e10:	29 f0       	breq	.+10     	; 0x5e1c <conv_flt+0xba>
    5e12:	80 e0       	ldi	r24, 0x00	; 0
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	a0 e8       	ldi	r26, 0x80	; 128
    5e18:	bf e7       	ldi	r27, 0x7F	; 127
    5e1a:	04 c0       	rjmp	.+8      	; 0x5e24 <conv_flt+0xc2>
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	a0 ec       	ldi	r26, 0xC0	; 192
    5e22:	bf e7       	ldi	r27, 0x7F	; 127
    5e24:	bc 01       	movw	r22, r24
    5e26:	cd 01       	movw	r24, r26
    5e28:	af c0       	rjmp	.+350    	; 0x5f88 <conv_flt+0x226>
    5e2a:	41 2c       	mov	r4, r1
    5e2c:	51 2c       	mov	r5, r1
    5e2e:	32 01       	movw	r6, r4
    5e30:	e1 2c       	mov	r14, r1
    5e32:	f1 2c       	mov	r15, r1
    5e34:	2c 2f       	mov	r18, r28
    5e36:	20 53       	subi	r18, 0x30	; 48
    5e38:	2a 30       	cpi	r18, 0x0A	; 10
    5e3a:	08 f5       	brcc	.+66     	; 0x5e7e <conv_flt+0x11c>
    5e3c:	e9 2d       	mov	r30, r9
    5e3e:	e2 60       	ori	r30, 0x02	; 2
    5e40:	be 2e       	mov	r11, r30
    5e42:	89 2d       	mov	r24, r9
    5e44:	88 70       	andi	r24, 0x08	; 8
    5e46:	92 fe       	sbrs	r9, 2
    5e48:	06 c0       	rjmp	.+12     	; 0x5e56 <conv_flt+0xf4>
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	1f c0       	rjmp	.+62     	; 0x5e8c <conv_flt+0x12a>
    5e4e:	ff ef       	ldi	r31, 0xFF	; 255
    5e50:	ef 1a       	sub	r14, r31
    5e52:	ff 0a       	sbc	r15, r31
    5e54:	1b c0       	rjmp	.+54     	; 0x5e8c <conv_flt+0x12a>
    5e56:	88 23       	and	r24, r24
    5e58:	19 f0       	breq	.+6      	; 0x5e60 <conv_flt+0xfe>
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	e8 1a       	sub	r14, r24
    5e5e:	f1 08       	sbc	r15, r1
    5e60:	40 e2       	ldi	r20, 0x20	; 32
    5e62:	c3 01       	movw	r24, r6
    5e64:	b2 01       	movw	r22, r4
    5e66:	cb dd       	rcall	.-1130   	; 0x59fe <mulacc>
    5e68:	2b 01       	movw	r4, r22
    5e6a:	3c 01       	movw	r6, r24
    5e6c:	68 39       	cpi	r22, 0x98	; 152
    5e6e:	79 49       	sbci	r23, 0x99	; 153
    5e70:	89 49       	sbci	r24, 0x99	; 153
    5e72:	99 41       	sbci	r25, 0x19	; 25
    5e74:	58 f0       	brcs	.+22     	; 0x5e8c <conv_flt+0x12a>
    5e76:	f9 2d       	mov	r31, r9
    5e78:	f6 60       	ori	r31, 0x06	; 6
    5e7a:	bf 2e       	mov	r11, r31
    5e7c:	07 c0       	rjmp	.+14     	; 0x5e8c <conv_flt+0x12a>
    5e7e:	2e 3f       	cpi	r18, 0xFE	; 254
    5e80:	81 f4       	brne	.+32     	; 0x5ea2 <conv_flt+0x140>
    5e82:	93 fc       	sbrc	r9, 3
    5e84:	0e c0       	rjmp	.+28     	; 0x5ea2 <conv_flt+0x140>
    5e86:	29 2d       	mov	r18, r9
    5e88:	28 60       	ori	r18, 0x08	; 8
    5e8a:	b2 2e       	mov	r11, r18
    5e8c:	01 50       	subi	r16, 0x01	; 1
    5e8e:	11 09       	sbc	r17, r1
    5e90:	39 f0       	breq	.+14     	; 0x5ea0 <conv_flt+0x13e>
    5e92:	c6 01       	movw	r24, r12
    5e94:	0e d4       	rcall	.+2076   	; 0x66b2 <fgetc>
    5e96:	ec 01       	movw	r28, r24
    5e98:	9b 2c       	mov	r9, r11
    5e9a:	97 ff       	sbrs	r25, 7
    5e9c:	cb cf       	rjmp	.-106    	; 0x5e34 <conv_flt+0xd2>
    5e9e:	01 c0       	rjmp	.+2      	; 0x5ea2 <conv_flt+0x140>
    5ea0:	9b 2c       	mov	r9, r11
    5ea2:	91 fe       	sbrs	r9, 1
    5ea4:	81 cf       	rjmp	.-254    	; 0x5da8 <conv_flt+0x46>
    5ea6:	ce 01       	movw	r24, r28
    5ea8:	8f 7d       	andi	r24, 0xDF	; 223
    5eaa:	99 27       	eor	r25, r25
    5eac:	85 34       	cpi	r24, 0x45	; 69
    5eae:	91 05       	cpc	r25, r1
    5eb0:	09 f0       	breq	.+2      	; 0x5eb4 <conv_flt+0x152>
    5eb2:	3e c0       	rjmp	.+124    	; 0x5f30 <conv_flt+0x1ce>
    5eb4:	58 01       	movw	r10, r16
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	a8 1a       	sub	r10, r24
    5eba:	b1 08       	sbc	r11, r1
    5ebc:	09 f4       	brne	.+2      	; 0x5ec0 <conv_flt+0x15e>
    5ebe:	74 cf       	rjmp	.-280    	; 0x5da8 <conv_flt+0x46>
    5ec0:	c6 01       	movw	r24, r12
    5ec2:	f7 d3       	rcall	.+2030   	; 0x66b2 <fgetc>
    5ec4:	ec 01       	movw	r28, r24
    5ec6:	97 fd       	sbrc	r25, 7
    5ec8:	6f cf       	rjmp	.-290    	; 0x5da8 <conv_flt+0x46>
    5eca:	99 27       	eor	r25, r25
    5ecc:	8b 32       	cpi	r24, 0x2B	; 43
    5ece:	91 05       	cpc	r25, r1
    5ed0:	29 f0       	breq	.+10     	; 0x5edc <conv_flt+0x17a>
    5ed2:	8d 97       	sbiw	r24, 0x2d	; 45
    5ed4:	61 f4       	brne	.+24     	; 0x5eee <conv_flt+0x18c>
    5ed6:	e9 2d       	mov	r30, r9
    5ed8:	e0 61       	ori	r30, 0x10	; 16
    5eda:	9e 2e       	mov	r9, r30
    5edc:	58 01       	movw	r10, r16
    5ede:	f2 e0       	ldi	r31, 0x02	; 2
    5ee0:	af 1a       	sub	r10, r31
    5ee2:	b1 08       	sbc	r11, r1
    5ee4:	09 f4       	brne	.+2      	; 0x5ee8 <conv_flt+0x186>
    5ee6:	60 cf       	rjmp	.-320    	; 0x5da8 <conv_flt+0x46>
    5ee8:	c6 01       	movw	r24, r12
    5eea:	e3 d3       	rcall	.+1990   	; 0x66b2 <fgetc>
    5eec:	ec 01       	movw	r28, r24
    5eee:	ce 01       	movw	r24, r28
    5ef0:	c0 97       	sbiw	r24, 0x30	; 48
    5ef2:	0a 97       	sbiw	r24, 0x0a	; 10
    5ef4:	08 f0       	brcs	.+2      	; 0x5ef8 <conv_flt+0x196>
    5ef6:	58 cf       	rjmp	.-336    	; 0x5da8 <conv_flt+0x46>
    5ef8:	85 01       	movw	r16, r10
    5efa:	a1 2c       	mov	r10, r1
    5efc:	b1 2c       	mov	r11, r1
    5efe:	b5 01       	movw	r22, r10
    5f00:	bb 0c       	add	r11, r11
    5f02:	88 0b       	sbc	r24, r24
    5f04:	99 0b       	sbc	r25, r25
    5f06:	2c 2f       	mov	r18, r28
    5f08:	20 53       	subi	r18, 0x30	; 48
    5f0a:	40 e2       	ldi	r20, 0x20	; 32
    5f0c:	78 dd       	rcall	.-1296   	; 0x59fe <mulacc>
    5f0e:	5b 01       	movw	r10, r22
    5f10:	01 50       	subi	r16, 0x01	; 1
    5f12:	11 09       	sbc	r17, r1
    5f14:	31 f0       	breq	.+12     	; 0x5f22 <conv_flt+0x1c0>
    5f16:	c6 01       	movw	r24, r12
    5f18:	cc d3       	rcall	.+1944   	; 0x66b2 <fgetc>
    5f1a:	ec 01       	movw	r28, r24
    5f1c:	c0 97       	sbiw	r24, 0x30	; 48
    5f1e:	0a 97       	sbiw	r24, 0x0a	; 10
    5f20:	70 f3       	brcs	.-36     	; 0x5efe <conv_flt+0x19c>
    5f22:	94 fe       	sbrs	r9, 4
    5f24:	03 c0       	rjmp	.+6      	; 0x5f2c <conv_flt+0x1ca>
    5f26:	b1 94       	neg	r11
    5f28:	a1 94       	neg	r10
    5f2a:	b1 08       	sbc	r11, r1
    5f2c:	ea 0c       	add	r14, r10
    5f2e:	fb 1c       	adc	r15, r11
    5f30:	01 2b       	or	r16, r17
    5f32:	29 f0       	breq	.+10     	; 0x5f3e <conv_flt+0x1dc>
    5f34:	d7 fd       	sbrc	r29, 7
    5f36:	03 c0       	rjmp	.+6      	; 0x5f3e <conv_flt+0x1dc>
    5f38:	b6 01       	movw	r22, r12
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	a7 d4       	rcall	.+2382   	; 0x688c <ungetc>
    5f3e:	c3 01       	movw	r24, r6
    5f40:	b2 01       	movw	r22, r4
    5f42:	79 d1       	rcall	.+754    	; 0x6236 <__floatunsisf>
    5f44:	f7 fe       	sbrs	r15, 7
    5f46:	06 c0       	rjmp	.+12     	; 0x5f54 <conv_flt+0x1f2>
    5f48:	f1 94       	neg	r15
    5f4a:	e1 94       	neg	r14
    5f4c:	f1 08       	sbc	r15, r1
    5f4e:	c5 e4       	ldi	r28, 0x45	; 69
    5f50:	d2 e0       	ldi	r29, 0x02	; 2
    5f52:	02 c0       	rjmp	.+4      	; 0x5f58 <conv_flt+0x1f6>
    5f54:	cd e5       	ldi	r28, 0x5D	; 93
    5f56:	d2 e0       	ldi	r29, 0x02	; 2
    5f58:	6e 01       	movw	r12, r28
    5f5a:	28 e1       	ldi	r18, 0x18	; 24
    5f5c:	c2 1a       	sub	r12, r18
    5f5e:	d1 08       	sbc	r13, r1
    5f60:	00 e2       	ldi	r16, 0x20	; 32
    5f62:	10 e0       	ldi	r17, 0x00	; 0
    5f64:	e0 16       	cp	r14, r16
    5f66:	f1 06       	cpc	r15, r17
    5f68:	48 f0       	brcs	.+18     	; 0x5f7c <conv_flt+0x21a>
    5f6a:	fe 01       	movw	r30, r28
    5f6c:	25 91       	lpm	r18, Z+
    5f6e:	35 91       	lpm	r19, Z+
    5f70:	45 91       	lpm	r20, Z+
    5f72:	54 91       	lpm	r21, Z
    5f74:	9d d1       	rcall	.+826    	; 0x62b0 <__mulsf3>
    5f76:	e0 1a       	sub	r14, r16
    5f78:	f1 0a       	sbc	r15, r17
    5f7a:	f4 cf       	rjmp	.-24     	; 0x5f64 <conv_flt+0x202>
    5f7c:	24 97       	sbiw	r28, 0x04	; 4
    5f7e:	16 95       	lsr	r17
    5f80:	07 95       	ror	r16
    5f82:	cc 16       	cp	r12, r28
    5f84:	dd 06       	cpc	r13, r29
    5f86:	71 f7       	brne	.-36     	; 0x5f64 <conv_flt+0x202>
    5f88:	97 fe       	sbrs	r9, 7
    5f8a:	05 c0       	rjmp	.+10     	; 0x5f96 <conv_flt+0x234>
    5f8c:	dc 01       	movw	r26, r24
    5f8e:	cb 01       	movw	r24, r22
    5f90:	b0 58       	subi	r27, 0x80	; 128
    5f92:	bc 01       	movw	r22, r24
    5f94:	cd 01       	movw	r24, r26
    5f96:	21 14       	cp	r2, r1
    5f98:	31 04       	cpc	r3, r1
    5f9a:	29 f0       	breq	.+10     	; 0x5fa6 <conv_flt+0x244>
    5f9c:	f1 01       	movw	r30, r2
    5f9e:	60 83       	st	Z, r22
    5fa0:	71 83       	std	Z+1, r23	; 0x01
    5fa2:	82 83       	std	Z+2, r24	; 0x02
    5fa4:	93 83       	std	Z+3, r25	; 0x03
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	df 91       	pop	r29
    5faa:	cf 91       	pop	r28
    5fac:	1f 91       	pop	r17
    5fae:	0f 91       	pop	r16
    5fb0:	ff 90       	pop	r15
    5fb2:	ef 90       	pop	r14
    5fb4:	df 90       	pop	r13
    5fb6:	cf 90       	pop	r12
    5fb8:	bf 90       	pop	r11
    5fba:	af 90       	pop	r10
    5fbc:	9f 90       	pop	r9
    5fbe:	7f 90       	pop	r7
    5fc0:	6f 90       	pop	r6
    5fc2:	5f 90       	pop	r5
    5fc4:	4f 90       	pop	r4
    5fc6:	3f 90       	pop	r3
    5fc8:	2f 90       	pop	r2
    5fca:	08 95       	ret

00005fcc <vfscanf>:
    5fcc:	6f 92       	push	r6
    5fce:	7f 92       	push	r7
    5fd0:	8f 92       	push	r8
    5fd2:	9f 92       	push	r9
    5fd4:	af 92       	push	r10
    5fd6:	bf 92       	push	r11
    5fd8:	cf 92       	push	r12
    5fda:	df 92       	push	r13
    5fdc:	ef 92       	push	r14
    5fde:	ff 92       	push	r15
    5fe0:	0f 93       	push	r16
    5fe2:	1f 93       	push	r17
    5fe4:	cf 93       	push	r28
    5fe6:	df 93       	push	r29
    5fe8:	5c 01       	movw	r10, r24
    5fea:	eb 01       	movw	r28, r22
    5fec:	4a 01       	movw	r8, r20
    5fee:	fc 01       	movw	r30, r24
    5ff0:	17 82       	std	Z+7, r1	; 0x07
    5ff2:	16 82       	std	Z+6, r1	; 0x06
    5ff4:	61 2c       	mov	r6, r1
    5ff6:	f5 01       	movw	r30, r10
    5ff8:	03 81       	ldd	r16, Z+3	; 0x03
    5ffa:	fe 01       	movw	r30, r28
    5ffc:	03 fd       	sbrc	r16, 3
    5ffe:	85 91       	lpm	r24, Z+
    6000:	03 ff       	sbrs	r16, 3
    6002:	81 91       	ld	r24, Z+
    6004:	18 2f       	mov	r17, r24
    6006:	ef 01       	movw	r28, r30
    6008:	88 23       	and	r24, r24
    600a:	09 f4       	brne	.+2      	; 0x600e <vfscanf+0x42>
    600c:	00 c1       	rjmp	.+512    	; 0x620e <vfscanf+0x242>
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	1f d3       	rcall	.+1598   	; 0x6650 <isspace>
    6012:	89 2b       	or	r24, r25
    6014:	19 f0       	breq	.+6      	; 0x601c <vfscanf+0x50>
    6016:	c5 01       	movw	r24, r10
    6018:	19 dd       	rcall	.-1486   	; 0x5a4c <skip_spaces>
    601a:	ed cf       	rjmp	.-38     	; 0x5ff6 <vfscanf+0x2a>
    601c:	15 32       	cpi	r17, 0x25	; 37
    601e:	41 f4       	brne	.+16     	; 0x6030 <vfscanf+0x64>
    6020:	fe 01       	movw	r30, r28
    6022:	03 fd       	sbrc	r16, 3
    6024:	15 91       	lpm	r17, Z+
    6026:	03 ff       	sbrs	r16, 3
    6028:	11 91       	ld	r17, Z+
    602a:	ef 01       	movw	r28, r30
    602c:	15 32       	cpi	r17, 0x25	; 37
    602e:	71 f4       	brne	.+28     	; 0x604c <vfscanf+0x80>
    6030:	c5 01       	movw	r24, r10
    6032:	3f d3       	rcall	.+1662   	; 0x66b2 <fgetc>
    6034:	97 fd       	sbrc	r25, 7
    6036:	e9 c0       	rjmp	.+466    	; 0x620a <vfscanf+0x23e>
    6038:	41 2f       	mov	r20, r17
    603a:	50 e0       	ldi	r21, 0x00	; 0
    603c:	9c 01       	movw	r18, r24
    603e:	33 27       	eor	r19, r19
    6040:	24 17       	cp	r18, r20
    6042:	35 07       	cpc	r19, r21
    6044:	c1 f2       	breq	.-80     	; 0x5ff6 <vfscanf+0x2a>
    6046:	b5 01       	movw	r22, r10
    6048:	21 d4       	rcall	.+2114   	; 0x688c <ungetc>
    604a:	e1 c0       	rjmp	.+450    	; 0x620e <vfscanf+0x242>
    604c:	1a 32       	cpi	r17, 0x2A	; 42
    604e:	41 f4       	brne	.+16     	; 0x6060 <vfscanf+0x94>
    6050:	03 fd       	sbrc	r16, 3
    6052:	15 91       	lpm	r17, Z+
    6054:	03 ff       	sbrs	r16, 3
    6056:	11 91       	ld	r17, Z+
    6058:	ef 01       	movw	r28, r30
    605a:	77 24       	eor	r7, r7
    605c:	73 94       	inc	r7
    605e:	01 c0       	rjmp	.+2      	; 0x6062 <vfscanf+0x96>
    6060:	71 2c       	mov	r7, r1
    6062:	e1 2c       	mov	r14, r1
    6064:	f1 2c       	mov	r15, r1
    6066:	20 ed       	ldi	r18, 0xD0	; 208
    6068:	21 0f       	add	r18, r17
    606a:	2a 30       	cpi	r18, 0x0A	; 10
    606c:	80 f4       	brcc	.+32     	; 0x608e <vfscanf+0xc2>
    606e:	f7 2d       	mov	r31, r7
    6070:	f2 60       	ori	r31, 0x02	; 2
    6072:	7f 2e       	mov	r7, r31
    6074:	b7 01       	movw	r22, r14
    6076:	80 e0       	ldi	r24, 0x00	; 0
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	40 e2       	ldi	r20, 0x20	; 32
    607c:	c0 dc       	rcall	.-1664   	; 0x59fe <mulacc>
    607e:	7b 01       	movw	r14, r22
    6080:	fe 01       	movw	r30, r28
    6082:	03 fd       	sbrc	r16, 3
    6084:	15 91       	lpm	r17, Z+
    6086:	03 ff       	sbrs	r16, 3
    6088:	11 91       	ld	r17, Z+
    608a:	ef 01       	movw	r28, r30
    608c:	ec cf       	rjmp	.-40     	; 0x6066 <vfscanf+0x9a>
    608e:	71 fe       	sbrs	r7, 1
    6090:	04 c0       	rjmp	.+8      	; 0x609a <vfscanf+0xce>
    6092:	e1 14       	cp	r14, r1
    6094:	f1 04       	cpc	r15, r1
    6096:	21 f4       	brne	.+8      	; 0x60a0 <vfscanf+0xd4>
    6098:	ba c0       	rjmp	.+372    	; 0x620e <vfscanf+0x242>
    609a:	ee 24       	eor	r14, r14
    609c:	ea 94       	dec	r14
    609e:	fe 2c       	mov	r15, r14
    60a0:	18 36       	cpi	r17, 0x68	; 104
    60a2:	19 f0       	breq	.+6      	; 0x60aa <vfscanf+0xde>
    60a4:	1c 36       	cpi	r17, 0x6C	; 108
    60a6:	61 f0       	breq	.+24     	; 0x60c0 <vfscanf+0xf4>
    60a8:	14 c0       	rjmp	.+40     	; 0x60d2 <vfscanf+0x106>
    60aa:	fe 01       	movw	r30, r28
    60ac:	03 fd       	sbrc	r16, 3
    60ae:	15 91       	lpm	r17, Z+
    60b0:	03 ff       	sbrs	r16, 3
    60b2:	11 91       	ld	r17, Z+
    60b4:	ef 01       	movw	r28, r30
    60b6:	18 36       	cpi	r17, 0x68	; 104
    60b8:	61 f4       	brne	.+24     	; 0x60d2 <vfscanf+0x106>
    60ba:	87 2d       	mov	r24, r7
    60bc:	88 60       	ori	r24, 0x08	; 8
    60be:	78 2e       	mov	r7, r24
    60c0:	97 2d       	mov	r25, r7
    60c2:	94 60       	ori	r25, 0x04	; 4
    60c4:	79 2e       	mov	r7, r25
    60c6:	fe 01       	movw	r30, r28
    60c8:	03 fd       	sbrc	r16, 3
    60ca:	15 91       	lpm	r17, Z+
    60cc:	03 ff       	sbrs	r16, 3
    60ce:	11 91       	ld	r17, Z+
    60d0:	ef 01       	movw	r28, r30
    60d2:	11 23       	and	r17, r17
    60d4:	09 f4       	brne	.+2      	; 0x60d8 <vfscanf+0x10c>
    60d6:	9b c0       	rjmp	.+310    	; 0x620e <vfscanf+0x242>
    60d8:	61 2f       	mov	r22, r17
    60da:	70 e0       	ldi	r23, 0x00	; 0
    60dc:	84 e1       	ldi	r24, 0x14	; 20
    60de:	92 e0       	ldi	r25, 0x02	; 2
    60e0:	c7 d2       	rcall	.+1422   	; 0x6670 <strchr_P>
    60e2:	89 2b       	or	r24, r25
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <vfscanf+0x11c>
    60e6:	93 c0       	rjmp	.+294    	; 0x620e <vfscanf+0x242>
    60e8:	70 fc       	sbrc	r7, 0
    60ea:	07 c0       	rjmp	.+14     	; 0x60fa <vfscanf+0x12e>
    60ec:	f4 01       	movw	r30, r8
    60ee:	c0 80       	ld	r12, Z
    60f0:	d1 80       	ldd	r13, Z+1	; 0x01
    60f2:	c4 01       	movw	r24, r8
    60f4:	02 96       	adiw	r24, 0x02	; 2
    60f6:	4c 01       	movw	r8, r24
    60f8:	02 c0       	rjmp	.+4      	; 0x60fe <vfscanf+0x132>
    60fa:	c1 2c       	mov	r12, r1
    60fc:	d1 2c       	mov	r13, r1
    60fe:	1e 36       	cpi	r17, 0x6E	; 110
    6100:	49 f4       	brne	.+18     	; 0x6114 <vfscanf+0x148>
    6102:	f5 01       	movw	r30, r10
    6104:	46 81       	ldd	r20, Z+6	; 0x06
    6106:	57 81       	ldd	r21, Z+7	; 0x07
    6108:	60 e0       	ldi	r22, 0x00	; 0
    610a:	70 e0       	ldi	r23, 0x00	; 0
    610c:	27 2d       	mov	r18, r7
    610e:	c6 01       	movw	r24, r12
    6110:	6a dc       	rcall	.-1836   	; 0x59e6 <putval>
    6112:	71 cf       	rjmp	.-286    	; 0x5ff6 <vfscanf+0x2a>
    6114:	13 36       	cpi	r17, 0x63	; 99
    6116:	b1 f4       	brne	.+44     	; 0x6144 <vfscanf+0x178>
    6118:	71 fc       	sbrc	r7, 1
    611a:	03 c0       	rjmp	.+6      	; 0x6122 <vfscanf+0x156>
    611c:	ee 24       	eor	r14, r14
    611e:	e3 94       	inc	r14
    6120:	f1 2c       	mov	r15, r1
    6122:	c5 01       	movw	r24, r10
    6124:	c6 d2       	rcall	.+1420   	; 0x66b2 <fgetc>
    6126:	97 fd       	sbrc	r25, 7
    6128:	70 c0       	rjmp	.+224    	; 0x620a <vfscanf+0x23e>
    612a:	c1 14       	cp	r12, r1
    612c:	d1 04       	cpc	r13, r1
    612e:	29 f0       	breq	.+10     	; 0x613a <vfscanf+0x16e>
    6130:	f6 01       	movw	r30, r12
    6132:	80 83       	st	Z, r24
    6134:	c6 01       	movw	r24, r12
    6136:	01 96       	adiw	r24, 0x01	; 1
    6138:	6c 01       	movw	r12, r24
    613a:	91 e0       	ldi	r25, 0x01	; 1
    613c:	e9 1a       	sub	r14, r25
    613e:	f1 08       	sbc	r15, r1
    6140:	81 f7       	brne	.-32     	; 0x6122 <vfscanf+0x156>
    6142:	5f c0       	rjmp	.+190    	; 0x6202 <vfscanf+0x236>
    6144:	1b 35       	cpi	r17, 0x5B	; 91
    6146:	51 f4       	brne	.+20     	; 0x615c <vfscanf+0x190>
    6148:	9e 01       	movw	r18, r28
    614a:	a6 01       	movw	r20, r12
    614c:	b7 01       	movw	r22, r14
    614e:	c5 01       	movw	r24, r10
    6150:	23 dd       	rcall	.-1466   	; 0x5b98 <conv_brk>
    6152:	ec 01       	movw	r28, r24
    6154:	89 2b       	or	r24, r25
    6156:	09 f0       	breq	.+2      	; 0x615a <vfscanf+0x18e>
    6158:	54 c0       	rjmp	.+168    	; 0x6202 <vfscanf+0x236>
    615a:	4e c0       	rjmp	.+156    	; 0x61f8 <vfscanf+0x22c>
    615c:	c5 01       	movw	r24, r10
    615e:	76 dc       	rcall	.-1812   	; 0x5a4c <skip_spaces>
    6160:	97 fd       	sbrc	r25, 7
    6162:	53 c0       	rjmp	.+166    	; 0x620a <vfscanf+0x23e>
    6164:	1f 36       	cpi	r17, 0x6F	; 111
    6166:	c9 f1       	breq	.+114    	; 0x61da <vfscanf+0x20e>
    6168:	40 f4       	brcc	.+16     	; 0x617a <vfscanf+0x1ae>
    616a:	14 36       	cpi	r17, 0x64	; 100
    616c:	91 f1       	breq	.+100    	; 0x61d2 <vfscanf+0x206>
    616e:	19 36       	cpi	r17, 0x69	; 105
    6170:	b9 f1       	breq	.+110    	; 0x61e0 <vfscanf+0x214>
    6172:	18 35       	cpi	r17, 0x58	; 88
    6174:	09 f0       	breq	.+2      	; 0x6178 <vfscanf+0x1ac>
    6176:	3a c0       	rjmp	.+116    	; 0x61ec <vfscanf+0x220>
    6178:	28 c0       	rjmp	.+80     	; 0x61ca <vfscanf+0x1fe>
    617a:	13 37       	cpi	r17, 0x73	; 115
    617c:	a9 f0       	breq	.+42     	; 0x61a8 <vfscanf+0x1dc>
    617e:	18 f4       	brcc	.+6      	; 0x6186 <vfscanf+0x1ba>
    6180:	10 37       	cpi	r17, 0x70	; 112
    6182:	19 f1       	breq	.+70     	; 0x61ca <vfscanf+0x1fe>
    6184:	33 c0       	rjmp	.+102    	; 0x61ec <vfscanf+0x220>
    6186:	15 37       	cpi	r17, 0x75	; 117
    6188:	21 f1       	breq	.+72     	; 0x61d2 <vfscanf+0x206>
    618a:	18 37       	cpi	r17, 0x78	; 120
    618c:	f1 f0       	breq	.+60     	; 0x61ca <vfscanf+0x1fe>
    618e:	2e c0       	rjmp	.+92     	; 0x61ec <vfscanf+0x220>
    6190:	c1 14       	cp	r12, r1
    6192:	d1 04       	cpc	r13, r1
    6194:	29 f0       	breq	.+10     	; 0x61a0 <vfscanf+0x1d4>
    6196:	f6 01       	movw	r30, r12
    6198:	00 83       	st	Z, r16
    619a:	c6 01       	movw	r24, r12
    619c:	01 96       	adiw	r24, 0x01	; 1
    619e:	6c 01       	movw	r12, r24
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	e9 1a       	sub	r14, r25
    61a4:	f1 08       	sbc	r15, r1
    61a6:	59 f0       	breq	.+22     	; 0x61be <vfscanf+0x1f2>
    61a8:	c5 01       	movw	r24, r10
    61aa:	83 d2       	rcall	.+1286   	; 0x66b2 <fgetc>
    61ac:	8c 01       	movw	r16, r24
    61ae:	97 fd       	sbrc	r25, 7
    61b0:	06 c0       	rjmp	.+12     	; 0x61be <vfscanf+0x1f2>
    61b2:	4e d2       	rcall	.+1180   	; 0x6650 <isspace>
    61b4:	89 2b       	or	r24, r25
    61b6:	61 f3       	breq	.-40     	; 0x6190 <vfscanf+0x1c4>
    61b8:	b5 01       	movw	r22, r10
    61ba:	c8 01       	movw	r24, r16
    61bc:	67 d3       	rcall	.+1742   	; 0x688c <ungetc>
    61be:	c1 14       	cp	r12, r1
    61c0:	d1 04       	cpc	r13, r1
    61c2:	f9 f0       	breq	.+62     	; 0x6202 <vfscanf+0x236>
    61c4:	f6 01       	movw	r30, r12
    61c6:	10 82       	st	Z, r1
    61c8:	1c c0       	rjmp	.+56     	; 0x6202 <vfscanf+0x236>
    61ca:	f7 2d       	mov	r31, r7
    61cc:	f0 64       	ori	r31, 0x40	; 64
    61ce:	7f 2e       	mov	r7, r31
    61d0:	07 c0       	rjmp	.+14     	; 0x61e0 <vfscanf+0x214>
    61d2:	87 2d       	mov	r24, r7
    61d4:	80 62       	ori	r24, 0x20	; 32
    61d6:	78 2e       	mov	r7, r24
    61d8:	03 c0       	rjmp	.+6      	; 0x61e0 <vfscanf+0x214>
    61da:	97 2d       	mov	r25, r7
    61dc:	90 61       	ori	r25, 0x10	; 16
    61de:	79 2e       	mov	r7, r25
    61e0:	27 2d       	mov	r18, r7
    61e2:	a6 01       	movw	r20, r12
    61e4:	b7 01       	movw	r22, r14
    61e6:	c5 01       	movw	r24, r10
    61e8:	47 dc       	rcall	.-1906   	; 0x5a78 <conv_int>
    61ea:	04 c0       	rjmp	.+8      	; 0x61f4 <vfscanf+0x228>
    61ec:	a6 01       	movw	r20, r12
    61ee:	b7 01       	movw	r22, r14
    61f0:	c5 01       	movw	r24, r10
    61f2:	b7 dd       	rcall	.-1170   	; 0x5d62 <conv_flt>
    61f4:	81 11       	cpse	r24, r1
    61f6:	05 c0       	rjmp	.+10     	; 0x6202 <vfscanf+0x236>
    61f8:	f5 01       	movw	r30, r10
    61fa:	83 81       	ldd	r24, Z+3	; 0x03
    61fc:	80 73       	andi	r24, 0x30	; 48
    61fe:	29 f4       	brne	.+10     	; 0x620a <vfscanf+0x23e>
    6200:	06 c0       	rjmp	.+12     	; 0x620e <vfscanf+0x242>
    6202:	70 fc       	sbrc	r7, 0
    6204:	f8 ce       	rjmp	.-528    	; 0x5ff6 <vfscanf+0x2a>
    6206:	63 94       	inc	r6
    6208:	f6 ce       	rjmp	.-532    	; 0x5ff6 <vfscanf+0x2a>
    620a:	66 20       	and	r6, r6
    620c:	19 f0       	breq	.+6      	; 0x6214 <vfscanf+0x248>
    620e:	86 2d       	mov	r24, r6
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	02 c0       	rjmp	.+4      	; 0x6218 <vfscanf+0x24c>
    6214:	8f ef       	ldi	r24, 0xFF	; 255
    6216:	9f ef       	ldi	r25, 0xFF	; 255
    6218:	df 91       	pop	r29
    621a:	cf 91       	pop	r28
    621c:	1f 91       	pop	r17
    621e:	0f 91       	pop	r16
    6220:	ff 90       	pop	r15
    6222:	ef 90       	pop	r14
    6224:	df 90       	pop	r13
    6226:	cf 90       	pop	r12
    6228:	bf 90       	pop	r11
    622a:	af 90       	pop	r10
    622c:	9f 90       	pop	r9
    622e:	8f 90       	pop	r8
    6230:	7f 90       	pop	r7
    6232:	6f 90       	pop	r6
    6234:	08 95       	ret

00006236 <__floatunsisf>:
    6236:	e8 94       	clt
    6238:	09 c0       	rjmp	.+18     	; 0x624c <__floatsisf+0x12>

0000623a <__floatsisf>:
    623a:	97 fb       	bst	r25, 7
    623c:	3e f4       	brtc	.+14     	; 0x624c <__floatsisf+0x12>
    623e:	90 95       	com	r25
    6240:	80 95       	com	r24
    6242:	70 95       	com	r23
    6244:	61 95       	neg	r22
    6246:	7f 4f       	sbci	r23, 0xFF	; 255
    6248:	8f 4f       	sbci	r24, 0xFF	; 255
    624a:	9f 4f       	sbci	r25, 0xFF	; 255
    624c:	99 23       	and	r25, r25
    624e:	a9 f0       	breq	.+42     	; 0x627a <__floatsisf+0x40>
    6250:	f9 2f       	mov	r31, r25
    6252:	96 e9       	ldi	r25, 0x96	; 150
    6254:	bb 27       	eor	r27, r27
    6256:	93 95       	inc	r25
    6258:	f6 95       	lsr	r31
    625a:	87 95       	ror	r24
    625c:	77 95       	ror	r23
    625e:	67 95       	ror	r22
    6260:	b7 95       	ror	r27
    6262:	f1 11       	cpse	r31, r1
    6264:	f8 cf       	rjmp	.-16     	; 0x6256 <__floatsisf+0x1c>
    6266:	fa f4       	brpl	.+62     	; 0x62a6 <__floatsisf+0x6c>
    6268:	bb 0f       	add	r27, r27
    626a:	11 f4       	brne	.+4      	; 0x6270 <__floatsisf+0x36>
    626c:	60 ff       	sbrs	r22, 0
    626e:	1b c0       	rjmp	.+54     	; 0x62a6 <__floatsisf+0x6c>
    6270:	6f 5f       	subi	r22, 0xFF	; 255
    6272:	7f 4f       	sbci	r23, 0xFF	; 255
    6274:	8f 4f       	sbci	r24, 0xFF	; 255
    6276:	9f 4f       	sbci	r25, 0xFF	; 255
    6278:	16 c0       	rjmp	.+44     	; 0x62a6 <__floatsisf+0x6c>
    627a:	88 23       	and	r24, r24
    627c:	11 f0       	breq	.+4      	; 0x6282 <__floatsisf+0x48>
    627e:	96 e9       	ldi	r25, 0x96	; 150
    6280:	11 c0       	rjmp	.+34     	; 0x62a4 <__floatsisf+0x6a>
    6282:	77 23       	and	r23, r23
    6284:	21 f0       	breq	.+8      	; 0x628e <__floatsisf+0x54>
    6286:	9e e8       	ldi	r25, 0x8E	; 142
    6288:	87 2f       	mov	r24, r23
    628a:	76 2f       	mov	r23, r22
    628c:	05 c0       	rjmp	.+10     	; 0x6298 <__floatsisf+0x5e>
    628e:	66 23       	and	r22, r22
    6290:	71 f0       	breq	.+28     	; 0x62ae <__floatsisf+0x74>
    6292:	96 e8       	ldi	r25, 0x86	; 134
    6294:	86 2f       	mov	r24, r22
    6296:	70 e0       	ldi	r23, 0x00	; 0
    6298:	60 e0       	ldi	r22, 0x00	; 0
    629a:	2a f0       	brmi	.+10     	; 0x62a6 <__floatsisf+0x6c>
    629c:	9a 95       	dec	r25
    629e:	66 0f       	add	r22, r22
    62a0:	77 1f       	adc	r23, r23
    62a2:	88 1f       	adc	r24, r24
    62a4:	da f7       	brpl	.-10     	; 0x629c <__floatsisf+0x62>
    62a6:	88 0f       	add	r24, r24
    62a8:	96 95       	lsr	r25
    62aa:	87 95       	ror	r24
    62ac:	97 f9       	bld	r25, 7
    62ae:	08 95       	ret

000062b0 <__mulsf3>:
    62b0:	0b d0       	rcall	.+22     	; 0x62c8 <__mulsf3x>
    62b2:	78 c0       	rjmp	.+240    	; 0x63a4 <__fp_round>
    62b4:	69 d0       	rcall	.+210    	; 0x6388 <__fp_pscA>
    62b6:	28 f0       	brcs	.+10     	; 0x62c2 <__mulsf3+0x12>
    62b8:	6e d0       	rcall	.+220    	; 0x6396 <__fp_pscB>
    62ba:	18 f0       	brcs	.+6      	; 0x62c2 <__mulsf3+0x12>
    62bc:	95 23       	and	r25, r21
    62be:	09 f0       	breq	.+2      	; 0x62c2 <__mulsf3+0x12>
    62c0:	5a c0       	rjmp	.+180    	; 0x6376 <__fp_inf>
    62c2:	5f c0       	rjmp	.+190    	; 0x6382 <__fp_nan>
    62c4:	11 24       	eor	r1, r1
    62c6:	a2 c0       	rjmp	.+324    	; 0x640c <__fp_szero>

000062c8 <__mulsf3x>:
    62c8:	7e d0       	rcall	.+252    	; 0x63c6 <__fp_split3>
    62ca:	a0 f3       	brcs	.-24     	; 0x62b4 <__mulsf3+0x4>

000062cc <__mulsf3_pse>:
    62cc:	95 9f       	mul	r25, r21
    62ce:	d1 f3       	breq	.-12     	; 0x62c4 <__mulsf3+0x14>
    62d0:	95 0f       	add	r25, r21
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	55 1f       	adc	r21, r21
    62d6:	62 9f       	mul	r22, r18
    62d8:	f0 01       	movw	r30, r0
    62da:	72 9f       	mul	r23, r18
    62dc:	bb 27       	eor	r27, r27
    62de:	f0 0d       	add	r31, r0
    62e0:	b1 1d       	adc	r27, r1
    62e2:	63 9f       	mul	r22, r19
    62e4:	aa 27       	eor	r26, r26
    62e6:	f0 0d       	add	r31, r0
    62e8:	b1 1d       	adc	r27, r1
    62ea:	aa 1f       	adc	r26, r26
    62ec:	64 9f       	mul	r22, r20
    62ee:	66 27       	eor	r22, r22
    62f0:	b0 0d       	add	r27, r0
    62f2:	a1 1d       	adc	r26, r1
    62f4:	66 1f       	adc	r22, r22
    62f6:	82 9f       	mul	r24, r18
    62f8:	22 27       	eor	r18, r18
    62fa:	b0 0d       	add	r27, r0
    62fc:	a1 1d       	adc	r26, r1
    62fe:	62 1f       	adc	r22, r18
    6300:	73 9f       	mul	r23, r19
    6302:	b0 0d       	add	r27, r0
    6304:	a1 1d       	adc	r26, r1
    6306:	62 1f       	adc	r22, r18
    6308:	83 9f       	mul	r24, r19
    630a:	a0 0d       	add	r26, r0
    630c:	61 1d       	adc	r22, r1
    630e:	22 1f       	adc	r18, r18
    6310:	74 9f       	mul	r23, r20
    6312:	33 27       	eor	r19, r19
    6314:	a0 0d       	add	r26, r0
    6316:	61 1d       	adc	r22, r1
    6318:	23 1f       	adc	r18, r19
    631a:	84 9f       	mul	r24, r20
    631c:	60 0d       	add	r22, r0
    631e:	21 1d       	adc	r18, r1
    6320:	82 2f       	mov	r24, r18
    6322:	76 2f       	mov	r23, r22
    6324:	6a 2f       	mov	r22, r26
    6326:	11 24       	eor	r1, r1
    6328:	9f 57       	subi	r25, 0x7F	; 127
    632a:	50 40       	sbci	r21, 0x00	; 0
    632c:	8a f0       	brmi	.+34     	; 0x6350 <__mulsf3_pse+0x84>
    632e:	e1 f0       	breq	.+56     	; 0x6368 <__mulsf3_pse+0x9c>
    6330:	88 23       	and	r24, r24
    6332:	4a f0       	brmi	.+18     	; 0x6346 <__mulsf3_pse+0x7a>
    6334:	ee 0f       	add	r30, r30
    6336:	ff 1f       	adc	r31, r31
    6338:	bb 1f       	adc	r27, r27
    633a:	66 1f       	adc	r22, r22
    633c:	77 1f       	adc	r23, r23
    633e:	88 1f       	adc	r24, r24
    6340:	91 50       	subi	r25, 0x01	; 1
    6342:	50 40       	sbci	r21, 0x00	; 0
    6344:	a9 f7       	brne	.-22     	; 0x6330 <__mulsf3_pse+0x64>
    6346:	9e 3f       	cpi	r25, 0xFE	; 254
    6348:	51 05       	cpc	r21, r1
    634a:	70 f0       	brcs	.+28     	; 0x6368 <__mulsf3_pse+0x9c>
    634c:	14 c0       	rjmp	.+40     	; 0x6376 <__fp_inf>
    634e:	5e c0       	rjmp	.+188    	; 0x640c <__fp_szero>
    6350:	5f 3f       	cpi	r21, 0xFF	; 255
    6352:	ec f3       	brlt	.-6      	; 0x634e <__mulsf3_pse+0x82>
    6354:	98 3e       	cpi	r25, 0xE8	; 232
    6356:	dc f3       	brlt	.-10     	; 0x634e <__mulsf3_pse+0x82>
    6358:	86 95       	lsr	r24
    635a:	77 95       	ror	r23
    635c:	67 95       	ror	r22
    635e:	b7 95       	ror	r27
    6360:	f7 95       	ror	r31
    6362:	e7 95       	ror	r30
    6364:	9f 5f       	subi	r25, 0xFF	; 255
    6366:	c1 f7       	brne	.-16     	; 0x6358 <__mulsf3_pse+0x8c>
    6368:	fe 2b       	or	r31, r30
    636a:	88 0f       	add	r24, r24
    636c:	91 1d       	adc	r25, r1
    636e:	96 95       	lsr	r25
    6370:	87 95       	ror	r24
    6372:	97 f9       	bld	r25, 7
    6374:	08 95       	ret

00006376 <__fp_inf>:
    6376:	97 f9       	bld	r25, 7
    6378:	9f 67       	ori	r25, 0x7F	; 127
    637a:	80 e8       	ldi	r24, 0x80	; 128
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	60 e0       	ldi	r22, 0x00	; 0
    6380:	08 95       	ret

00006382 <__fp_nan>:
    6382:	9f ef       	ldi	r25, 0xFF	; 255
    6384:	80 ec       	ldi	r24, 0xC0	; 192
    6386:	08 95       	ret

00006388 <__fp_pscA>:
    6388:	00 24       	eor	r0, r0
    638a:	0a 94       	dec	r0
    638c:	16 16       	cp	r1, r22
    638e:	17 06       	cpc	r1, r23
    6390:	18 06       	cpc	r1, r24
    6392:	09 06       	cpc	r0, r25
    6394:	08 95       	ret

00006396 <__fp_pscB>:
    6396:	00 24       	eor	r0, r0
    6398:	0a 94       	dec	r0
    639a:	12 16       	cp	r1, r18
    639c:	13 06       	cpc	r1, r19
    639e:	14 06       	cpc	r1, r20
    63a0:	05 06       	cpc	r0, r21
    63a2:	08 95       	ret

000063a4 <__fp_round>:
    63a4:	09 2e       	mov	r0, r25
    63a6:	03 94       	inc	r0
    63a8:	00 0c       	add	r0, r0
    63aa:	11 f4       	brne	.+4      	; 0x63b0 <__fp_round+0xc>
    63ac:	88 23       	and	r24, r24
    63ae:	52 f0       	brmi	.+20     	; 0x63c4 <__fp_round+0x20>
    63b0:	bb 0f       	add	r27, r27
    63b2:	40 f4       	brcc	.+16     	; 0x63c4 <__fp_round+0x20>
    63b4:	bf 2b       	or	r27, r31
    63b6:	11 f4       	brne	.+4      	; 0x63bc <__fp_round+0x18>
    63b8:	60 ff       	sbrs	r22, 0
    63ba:	04 c0       	rjmp	.+8      	; 0x63c4 <__fp_round+0x20>
    63bc:	6f 5f       	subi	r22, 0xFF	; 255
    63be:	7f 4f       	sbci	r23, 0xFF	; 255
    63c0:	8f 4f       	sbci	r24, 0xFF	; 255
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	08 95       	ret

000063c6 <__fp_split3>:
    63c6:	57 fd       	sbrc	r21, 7
    63c8:	90 58       	subi	r25, 0x80	; 128
    63ca:	44 0f       	add	r20, r20
    63cc:	55 1f       	adc	r21, r21
    63ce:	59 f0       	breq	.+22     	; 0x63e6 <__fp_splitA+0x10>
    63d0:	5f 3f       	cpi	r21, 0xFF	; 255
    63d2:	71 f0       	breq	.+28     	; 0x63f0 <__fp_splitA+0x1a>
    63d4:	47 95       	ror	r20

000063d6 <__fp_splitA>:
    63d6:	88 0f       	add	r24, r24
    63d8:	97 fb       	bst	r25, 7
    63da:	99 1f       	adc	r25, r25
    63dc:	61 f0       	breq	.+24     	; 0x63f6 <__fp_splitA+0x20>
    63de:	9f 3f       	cpi	r25, 0xFF	; 255
    63e0:	79 f0       	breq	.+30     	; 0x6400 <__fp_splitA+0x2a>
    63e2:	87 95       	ror	r24
    63e4:	08 95       	ret
    63e6:	12 16       	cp	r1, r18
    63e8:	13 06       	cpc	r1, r19
    63ea:	14 06       	cpc	r1, r20
    63ec:	55 1f       	adc	r21, r21
    63ee:	f2 cf       	rjmp	.-28     	; 0x63d4 <__fp_split3+0xe>
    63f0:	46 95       	lsr	r20
    63f2:	f1 df       	rcall	.-30     	; 0x63d6 <__fp_splitA>
    63f4:	08 c0       	rjmp	.+16     	; 0x6406 <__fp_splitA+0x30>
    63f6:	16 16       	cp	r1, r22
    63f8:	17 06       	cpc	r1, r23
    63fa:	18 06       	cpc	r1, r24
    63fc:	99 1f       	adc	r25, r25
    63fe:	f1 cf       	rjmp	.-30     	; 0x63e2 <__fp_splitA+0xc>
    6400:	86 95       	lsr	r24
    6402:	71 05       	cpc	r23, r1
    6404:	61 05       	cpc	r22, r1
    6406:	08 94       	sec
    6408:	08 95       	ret

0000640a <__fp_zero>:
    640a:	e8 94       	clt

0000640c <__fp_szero>:
    640c:	bb 27       	eor	r27, r27
    640e:	66 27       	eor	r22, r22
    6410:	77 27       	eor	r23, r23
    6412:	cb 01       	movw	r24, r22
    6414:	97 f9       	bld	r25, 7
    6416:	08 95       	ret

00006418 <__udivmodsi4>:
    6418:	a1 e2       	ldi	r26, 0x21	; 33
    641a:	1a 2e       	mov	r1, r26
    641c:	aa 1b       	sub	r26, r26
    641e:	bb 1b       	sub	r27, r27
    6420:	fd 01       	movw	r30, r26
    6422:	0d c0       	rjmp	.+26     	; 0x643e <__udivmodsi4_ep>

00006424 <__udivmodsi4_loop>:
    6424:	aa 1f       	adc	r26, r26
    6426:	bb 1f       	adc	r27, r27
    6428:	ee 1f       	adc	r30, r30
    642a:	ff 1f       	adc	r31, r31
    642c:	a2 17       	cp	r26, r18
    642e:	b3 07       	cpc	r27, r19
    6430:	e4 07       	cpc	r30, r20
    6432:	f5 07       	cpc	r31, r21
    6434:	20 f0       	brcs	.+8      	; 0x643e <__udivmodsi4_ep>
    6436:	a2 1b       	sub	r26, r18
    6438:	b3 0b       	sbc	r27, r19
    643a:	e4 0b       	sbc	r30, r20
    643c:	f5 0b       	sbc	r31, r21

0000643e <__udivmodsi4_ep>:
    643e:	66 1f       	adc	r22, r22
    6440:	77 1f       	adc	r23, r23
    6442:	88 1f       	adc	r24, r24
    6444:	99 1f       	adc	r25, r25
    6446:	1a 94       	dec	r1
    6448:	69 f7       	brne	.-38     	; 0x6424 <__udivmodsi4_loop>
    644a:	60 95       	com	r22
    644c:	70 95       	com	r23
    644e:	80 95       	com	r24
    6450:	90 95       	com	r25
    6452:	9b 01       	movw	r18, r22
    6454:	ac 01       	movw	r20, r24
    6456:	bd 01       	movw	r22, r26
    6458:	cf 01       	movw	r24, r30
    645a:	08 95       	ret

0000645c <__tablejump2__>:
    645c:	ee 0f       	add	r30, r30
    645e:	ff 1f       	adc	r31, r31
    6460:	00 24       	eor	r0, r0
    6462:	00 1c       	adc	r0, r0
    6464:	0b be       	out	0x3b, r0	; 59
    6466:	07 90       	elpm	r0, Z+
    6468:	f6 91       	elpm	r31, Z
    646a:	e0 2d       	mov	r30, r0
    646c:	09 94       	ijmp

0000646e <__muluhisi3>:
    646e:	09 d0       	rcall	.+18     	; 0x6482 <__umulhisi3>
    6470:	a5 9f       	mul	r26, r21
    6472:	90 0d       	add	r25, r0
    6474:	b4 9f       	mul	r27, r20
    6476:	90 0d       	add	r25, r0
    6478:	a4 9f       	mul	r26, r20
    647a:	80 0d       	add	r24, r0
    647c:	91 1d       	adc	r25, r1
    647e:	11 24       	eor	r1, r1
    6480:	08 95       	ret

00006482 <__umulhisi3>:
    6482:	a2 9f       	mul	r26, r18
    6484:	b0 01       	movw	r22, r0
    6486:	b3 9f       	mul	r27, r19
    6488:	c0 01       	movw	r24, r0
    648a:	a3 9f       	mul	r26, r19
    648c:	70 0d       	add	r23, r0
    648e:	81 1d       	adc	r24, r1
    6490:	11 24       	eor	r1, r1
    6492:	91 1d       	adc	r25, r1
    6494:	b2 9f       	mul	r27, r18
    6496:	70 0d       	add	r23, r0
    6498:	81 1d       	adc	r24, r1
    649a:	11 24       	eor	r1, r1
    649c:	91 1d       	adc	r25, r1
    649e:	08 95       	ret

000064a0 <__ftoa_engine>:
    64a0:	28 30       	cpi	r18, 0x08	; 8
    64a2:	08 f0       	brcs	.+2      	; 0x64a6 <__ftoa_engine+0x6>
    64a4:	27 e0       	ldi	r18, 0x07	; 7
    64a6:	33 27       	eor	r19, r19
    64a8:	da 01       	movw	r26, r20
    64aa:	99 0f       	add	r25, r25
    64ac:	31 1d       	adc	r19, r1
    64ae:	87 fd       	sbrc	r24, 7
    64b0:	91 60       	ori	r25, 0x01	; 1
    64b2:	00 96       	adiw	r24, 0x00	; 0
    64b4:	61 05       	cpc	r22, r1
    64b6:	71 05       	cpc	r23, r1
    64b8:	39 f4       	brne	.+14     	; 0x64c8 <__ftoa_engine+0x28>
    64ba:	32 60       	ori	r19, 0x02	; 2
    64bc:	2e 5f       	subi	r18, 0xFE	; 254
    64be:	3d 93       	st	X+, r19
    64c0:	30 e3       	ldi	r19, 0x30	; 48
    64c2:	2a 95       	dec	r18
    64c4:	e1 f7       	brne	.-8      	; 0x64be <__ftoa_engine+0x1e>
    64c6:	08 95       	ret
    64c8:	9f 3f       	cpi	r25, 0xFF	; 255
    64ca:	30 f0       	brcs	.+12     	; 0x64d8 <__ftoa_engine+0x38>
    64cc:	80 38       	cpi	r24, 0x80	; 128
    64ce:	71 05       	cpc	r23, r1
    64d0:	61 05       	cpc	r22, r1
    64d2:	09 f0       	breq	.+2      	; 0x64d6 <__ftoa_engine+0x36>
    64d4:	3c 5f       	subi	r19, 0xFC	; 252
    64d6:	3c 5f       	subi	r19, 0xFC	; 252
    64d8:	3d 93       	st	X+, r19
    64da:	91 30       	cpi	r25, 0x01	; 1
    64dc:	08 f0       	brcs	.+2      	; 0x64e0 <__ftoa_engine+0x40>
    64de:	80 68       	ori	r24, 0x80	; 128
    64e0:	91 1d       	adc	r25, r1
    64e2:	df 93       	push	r29
    64e4:	cf 93       	push	r28
    64e6:	1f 93       	push	r17
    64e8:	0f 93       	push	r16
    64ea:	ff 92       	push	r15
    64ec:	ef 92       	push	r14
    64ee:	19 2f       	mov	r17, r25
    64f0:	98 7f       	andi	r25, 0xF8	; 248
    64f2:	96 95       	lsr	r25
    64f4:	e9 2f       	mov	r30, r25
    64f6:	96 95       	lsr	r25
    64f8:	96 95       	lsr	r25
    64fa:	e9 0f       	add	r30, r25
    64fc:	ff 27       	eor	r31, r31
    64fe:	ec 58       	subi	r30, 0x8C	; 140
    6500:	fe 4f       	sbci	r31, 0xFE	; 254
    6502:	99 27       	eor	r25, r25
    6504:	33 27       	eor	r19, r19
    6506:	ee 24       	eor	r14, r14
    6508:	ff 24       	eor	r15, r15
    650a:	a7 01       	movw	r20, r14
    650c:	e7 01       	movw	r28, r14
    650e:	05 90       	lpm	r0, Z+
    6510:	08 94       	sec
    6512:	07 94       	ror	r0
    6514:	28 f4       	brcc	.+10     	; 0x6520 <__ftoa_engine+0x80>
    6516:	36 0f       	add	r19, r22
    6518:	e7 1e       	adc	r14, r23
    651a:	f8 1e       	adc	r15, r24
    651c:	49 1f       	adc	r20, r25
    651e:	51 1d       	adc	r21, r1
    6520:	66 0f       	add	r22, r22
    6522:	77 1f       	adc	r23, r23
    6524:	88 1f       	adc	r24, r24
    6526:	99 1f       	adc	r25, r25
    6528:	06 94       	lsr	r0
    652a:	a1 f7       	brne	.-24     	; 0x6514 <__ftoa_engine+0x74>
    652c:	05 90       	lpm	r0, Z+
    652e:	07 94       	ror	r0
    6530:	28 f4       	brcc	.+10     	; 0x653c <__ftoa_engine+0x9c>
    6532:	e7 0e       	add	r14, r23
    6534:	f8 1e       	adc	r15, r24
    6536:	49 1f       	adc	r20, r25
    6538:	56 1f       	adc	r21, r22
    653a:	c1 1d       	adc	r28, r1
    653c:	77 0f       	add	r23, r23
    653e:	88 1f       	adc	r24, r24
    6540:	99 1f       	adc	r25, r25
    6542:	66 1f       	adc	r22, r22
    6544:	06 94       	lsr	r0
    6546:	a1 f7       	brne	.-24     	; 0x6530 <__ftoa_engine+0x90>
    6548:	05 90       	lpm	r0, Z+
    654a:	07 94       	ror	r0
    654c:	28 f4       	brcc	.+10     	; 0x6558 <__ftoa_engine+0xb8>
    654e:	f8 0e       	add	r15, r24
    6550:	49 1f       	adc	r20, r25
    6552:	56 1f       	adc	r21, r22
    6554:	c7 1f       	adc	r28, r23
    6556:	d1 1d       	adc	r29, r1
    6558:	88 0f       	add	r24, r24
    655a:	99 1f       	adc	r25, r25
    655c:	66 1f       	adc	r22, r22
    655e:	77 1f       	adc	r23, r23
    6560:	06 94       	lsr	r0
    6562:	a1 f7       	brne	.-24     	; 0x654c <__ftoa_engine+0xac>
    6564:	05 90       	lpm	r0, Z+
    6566:	07 94       	ror	r0
    6568:	20 f4       	brcc	.+8      	; 0x6572 <__ftoa_engine+0xd2>
    656a:	49 0f       	add	r20, r25
    656c:	56 1f       	adc	r21, r22
    656e:	c7 1f       	adc	r28, r23
    6570:	d8 1f       	adc	r29, r24
    6572:	99 0f       	add	r25, r25
    6574:	66 1f       	adc	r22, r22
    6576:	77 1f       	adc	r23, r23
    6578:	88 1f       	adc	r24, r24
    657a:	06 94       	lsr	r0
    657c:	a9 f7       	brne	.-22     	; 0x6568 <__ftoa_engine+0xc8>
    657e:	84 91       	lpm	r24, Z
    6580:	10 95       	com	r17
    6582:	17 70       	andi	r17, 0x07	; 7
    6584:	41 f0       	breq	.+16     	; 0x6596 <__ftoa_engine+0xf6>
    6586:	d6 95       	lsr	r29
    6588:	c7 95       	ror	r28
    658a:	57 95       	ror	r21
    658c:	47 95       	ror	r20
    658e:	f7 94       	ror	r15
    6590:	e7 94       	ror	r14
    6592:	1a 95       	dec	r17
    6594:	c1 f7       	brne	.-16     	; 0x6586 <__ftoa_engine+0xe6>
    6596:	ea e1       	ldi	r30, 0x1A	; 26
    6598:	f1 e0       	ldi	r31, 0x01	; 1
    659a:	68 94       	set
    659c:	15 90       	lpm	r1, Z+
    659e:	15 91       	lpm	r17, Z+
    65a0:	35 91       	lpm	r19, Z+
    65a2:	65 91       	lpm	r22, Z+
    65a4:	95 91       	lpm	r25, Z+
    65a6:	05 90       	lpm	r0, Z+
    65a8:	7f e2       	ldi	r23, 0x2F	; 47
    65aa:	73 95       	inc	r23
    65ac:	e1 18       	sub	r14, r1
    65ae:	f1 0a       	sbc	r15, r17
    65b0:	43 0b       	sbc	r20, r19
    65b2:	56 0b       	sbc	r21, r22
    65b4:	c9 0b       	sbc	r28, r25
    65b6:	d0 09       	sbc	r29, r0
    65b8:	c0 f7       	brcc	.-16     	; 0x65aa <__ftoa_engine+0x10a>
    65ba:	e1 0c       	add	r14, r1
    65bc:	f1 1e       	adc	r15, r17
    65be:	43 1f       	adc	r20, r19
    65c0:	56 1f       	adc	r21, r22
    65c2:	c9 1f       	adc	r28, r25
    65c4:	d0 1d       	adc	r29, r0
    65c6:	7e f4       	brtc	.+30     	; 0x65e6 <__ftoa_engine+0x146>
    65c8:	70 33       	cpi	r23, 0x30	; 48
    65ca:	11 f4       	brne	.+4      	; 0x65d0 <__ftoa_engine+0x130>
    65cc:	8a 95       	dec	r24
    65ce:	e6 cf       	rjmp	.-52     	; 0x659c <__ftoa_engine+0xfc>
    65d0:	e8 94       	clt
    65d2:	01 50       	subi	r16, 0x01	; 1
    65d4:	30 f0       	brcs	.+12     	; 0x65e2 <__ftoa_engine+0x142>
    65d6:	08 0f       	add	r16, r24
    65d8:	0a f4       	brpl	.+2      	; 0x65dc <__ftoa_engine+0x13c>
    65da:	00 27       	eor	r16, r16
    65dc:	02 17       	cp	r16, r18
    65de:	08 f4       	brcc	.+2      	; 0x65e2 <__ftoa_engine+0x142>
    65e0:	20 2f       	mov	r18, r16
    65e2:	23 95       	inc	r18
    65e4:	02 2f       	mov	r16, r18
    65e6:	7a 33       	cpi	r23, 0x3A	; 58
    65e8:	28 f0       	brcs	.+10     	; 0x65f4 <__ftoa_engine+0x154>
    65ea:	79 e3       	ldi	r23, 0x39	; 57
    65ec:	7d 93       	st	X+, r23
    65ee:	2a 95       	dec	r18
    65f0:	e9 f7       	brne	.-6      	; 0x65ec <__ftoa_engine+0x14c>
    65f2:	10 c0       	rjmp	.+32     	; 0x6614 <__ftoa_engine+0x174>
    65f4:	7d 93       	st	X+, r23
    65f6:	2a 95       	dec	r18
    65f8:	89 f6       	brne	.-94     	; 0x659c <__ftoa_engine+0xfc>
    65fa:	06 94       	lsr	r0
    65fc:	97 95       	ror	r25
    65fe:	67 95       	ror	r22
    6600:	37 95       	ror	r19
    6602:	17 95       	ror	r17
    6604:	17 94       	ror	r1
    6606:	e1 18       	sub	r14, r1
    6608:	f1 0a       	sbc	r15, r17
    660a:	43 0b       	sbc	r20, r19
    660c:	56 0b       	sbc	r21, r22
    660e:	c9 0b       	sbc	r28, r25
    6610:	d0 09       	sbc	r29, r0
    6612:	98 f0       	brcs	.+38     	; 0x663a <__ftoa_engine+0x19a>
    6614:	23 95       	inc	r18
    6616:	7e 91       	ld	r23, -X
    6618:	73 95       	inc	r23
    661a:	7a 33       	cpi	r23, 0x3A	; 58
    661c:	08 f0       	brcs	.+2      	; 0x6620 <__ftoa_engine+0x180>
    661e:	70 e3       	ldi	r23, 0x30	; 48
    6620:	7c 93       	st	X, r23
    6622:	20 13       	cpse	r18, r16
    6624:	b8 f7       	brcc	.-18     	; 0x6614 <__ftoa_engine+0x174>
    6626:	7e 91       	ld	r23, -X
    6628:	70 61       	ori	r23, 0x10	; 16
    662a:	7d 93       	st	X+, r23
    662c:	30 f0       	brcs	.+12     	; 0x663a <__ftoa_engine+0x19a>
    662e:	83 95       	inc	r24
    6630:	71 e3       	ldi	r23, 0x31	; 49
    6632:	7d 93       	st	X+, r23
    6634:	70 e3       	ldi	r23, 0x30	; 48
    6636:	2a 95       	dec	r18
    6638:	e1 f7       	brne	.-8      	; 0x6632 <__ftoa_engine+0x192>
    663a:	11 24       	eor	r1, r1
    663c:	ef 90       	pop	r14
    663e:	ff 90       	pop	r15
    6640:	0f 91       	pop	r16
    6642:	1f 91       	pop	r17
    6644:	cf 91       	pop	r28
    6646:	df 91       	pop	r29
    6648:	99 27       	eor	r25, r25
    664a:	87 fd       	sbrc	r24, 7
    664c:	90 95       	com	r25
    664e:	08 95       	ret

00006650 <isspace>:
    6650:	91 11       	cpse	r25, r1
    6652:	93 c1       	rjmp	.+806    	; 0x697a <__ctype_isfalse>
    6654:	80 32       	cpi	r24, 0x20	; 32
    6656:	19 f0       	breq	.+6      	; 0x665e <isspace+0xe>
    6658:	89 50       	subi	r24, 0x09	; 9
    665a:	85 50       	subi	r24, 0x05	; 5
    665c:	d0 f7       	brcc	.-12     	; 0x6652 <isspace+0x2>
    665e:	08 95       	ret

00006660 <tolower>:
    6660:	91 11       	cpse	r25, r1
    6662:	08 95       	ret
    6664:	81 54       	subi	r24, 0x41	; 65
    6666:	8a 51       	subi	r24, 0x1A	; 26
    6668:	08 f4       	brcc	.+2      	; 0x666c <tolower+0xc>
    666a:	80 5e       	subi	r24, 0xE0	; 224
    666c:	85 5a       	subi	r24, 0xA5	; 165
    666e:	08 95       	ret

00006670 <strchr_P>:
    6670:	fc 01       	movw	r30, r24
    6672:	05 90       	lpm	r0, Z+
    6674:	06 16       	cp	r0, r22
    6676:	21 f0       	breq	.+8      	; 0x6680 <strchr_P+0x10>
    6678:	00 20       	and	r0, r0
    667a:	d9 f7       	brne	.-10     	; 0x6672 <strchr_P+0x2>
    667c:	c0 01       	movw	r24, r0
    667e:	08 95       	ret
    6680:	31 97       	sbiw	r30, 0x01	; 1
    6682:	cf 01       	movw	r24, r30
    6684:	08 95       	ret

00006686 <strnlen_P>:
    6686:	fc 01       	movw	r30, r24
    6688:	05 90       	lpm	r0, Z+
    668a:	61 50       	subi	r22, 0x01	; 1
    668c:	70 40       	sbci	r23, 0x00	; 0
    668e:	01 10       	cpse	r0, r1
    6690:	d8 f7       	brcc	.-10     	; 0x6688 <strnlen_P+0x2>
    6692:	80 95       	com	r24
    6694:	90 95       	com	r25
    6696:	8e 0f       	add	r24, r30
    6698:	9f 1f       	adc	r25, r31
    669a:	08 95       	ret

0000669c <strnlen>:
    669c:	fc 01       	movw	r30, r24
    669e:	61 50       	subi	r22, 0x01	; 1
    66a0:	70 40       	sbci	r23, 0x00	; 0
    66a2:	01 90       	ld	r0, Z+
    66a4:	01 10       	cpse	r0, r1
    66a6:	d8 f7       	brcc	.-10     	; 0x669e <strnlen+0x2>
    66a8:	80 95       	com	r24
    66aa:	90 95       	com	r25
    66ac:	8e 0f       	add	r24, r30
    66ae:	9f 1f       	adc	r25, r31
    66b0:	08 95       	ret

000066b2 <fgetc>:
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	ec 01       	movw	r28, r24
    66b8:	2b 81       	ldd	r18, Y+3	; 0x03
    66ba:	20 ff       	sbrs	r18, 0
    66bc:	33 c0       	rjmp	.+102    	; 0x6724 <fgetc+0x72>
    66be:	26 ff       	sbrs	r18, 6
    66c0:	0a c0       	rjmp	.+20     	; 0x66d6 <fgetc+0x24>
    66c2:	2f 7b       	andi	r18, 0xBF	; 191
    66c4:	2b 83       	std	Y+3, r18	; 0x03
    66c6:	8e 81       	ldd	r24, Y+6	; 0x06
    66c8:	9f 81       	ldd	r25, Y+7	; 0x07
    66ca:	01 96       	adiw	r24, 0x01	; 1
    66cc:	9f 83       	std	Y+7, r25	; 0x07
    66ce:	8e 83       	std	Y+6, r24	; 0x06
    66d0:	8a 81       	ldd	r24, Y+2	; 0x02
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	29 c0       	rjmp	.+82     	; 0x6728 <fgetc+0x76>
    66d6:	22 ff       	sbrs	r18, 2
    66d8:	0f c0       	rjmp	.+30     	; 0x66f8 <fgetc+0x46>
    66da:	e8 81       	ld	r30, Y
    66dc:	f9 81       	ldd	r31, Y+1	; 0x01
    66de:	80 81       	ld	r24, Z
    66e0:	08 2e       	mov	r0, r24
    66e2:	00 0c       	add	r0, r0
    66e4:	99 0b       	sbc	r25, r25
    66e6:	00 97       	sbiw	r24, 0x00	; 0
    66e8:	19 f4       	brne	.+6      	; 0x66f0 <fgetc+0x3e>
    66ea:	20 62       	ori	r18, 0x20	; 32
    66ec:	2b 83       	std	Y+3, r18	; 0x03
    66ee:	1a c0       	rjmp	.+52     	; 0x6724 <fgetc+0x72>
    66f0:	31 96       	adiw	r30, 0x01	; 1
    66f2:	f9 83       	std	Y+1, r31	; 0x01
    66f4:	e8 83       	st	Y, r30
    66f6:	0e c0       	rjmp	.+28     	; 0x6714 <fgetc+0x62>
    66f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    66fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    66fc:	09 95       	icall
    66fe:	97 ff       	sbrs	r25, 7
    6700:	09 c0       	rjmp	.+18     	; 0x6714 <fgetc+0x62>
    6702:	2b 81       	ldd	r18, Y+3	; 0x03
    6704:	01 96       	adiw	r24, 0x01	; 1
    6706:	11 f0       	breq	.+4      	; 0x670c <fgetc+0x5a>
    6708:	80 e2       	ldi	r24, 0x20	; 32
    670a:	01 c0       	rjmp	.+2      	; 0x670e <fgetc+0x5c>
    670c:	80 e1       	ldi	r24, 0x10	; 16
    670e:	82 2b       	or	r24, r18
    6710:	8b 83       	std	Y+3, r24	; 0x03
    6712:	08 c0       	rjmp	.+16     	; 0x6724 <fgetc+0x72>
    6714:	2e 81       	ldd	r18, Y+6	; 0x06
    6716:	3f 81       	ldd	r19, Y+7	; 0x07
    6718:	2f 5f       	subi	r18, 0xFF	; 255
    671a:	3f 4f       	sbci	r19, 0xFF	; 255
    671c:	3f 83       	std	Y+7, r19	; 0x07
    671e:	2e 83       	std	Y+6, r18	; 0x06
    6720:	99 27       	eor	r25, r25
    6722:	02 c0       	rjmp	.+4      	; 0x6728 <fgetc+0x76>
    6724:	8f ef       	ldi	r24, 0xFF	; 255
    6726:	9f ef       	ldi	r25, 0xFF	; 255
    6728:	df 91       	pop	r29
    672a:	cf 91       	pop	r28
    672c:	08 95       	ret

0000672e <fputc>:
    672e:	0f 93       	push	r16
    6730:	1f 93       	push	r17
    6732:	cf 93       	push	r28
    6734:	df 93       	push	r29
    6736:	fb 01       	movw	r30, r22
    6738:	23 81       	ldd	r18, Z+3	; 0x03
    673a:	21 fd       	sbrc	r18, 1
    673c:	03 c0       	rjmp	.+6      	; 0x6744 <fputc+0x16>
    673e:	8f ef       	ldi	r24, 0xFF	; 255
    6740:	9f ef       	ldi	r25, 0xFF	; 255
    6742:	2c c0       	rjmp	.+88     	; 0x679c <fputc+0x6e>
    6744:	22 ff       	sbrs	r18, 2
    6746:	16 c0       	rjmp	.+44     	; 0x6774 <fputc+0x46>
    6748:	46 81       	ldd	r20, Z+6	; 0x06
    674a:	57 81       	ldd	r21, Z+7	; 0x07
    674c:	24 81       	ldd	r18, Z+4	; 0x04
    674e:	35 81       	ldd	r19, Z+5	; 0x05
    6750:	42 17       	cp	r20, r18
    6752:	53 07       	cpc	r21, r19
    6754:	44 f4       	brge	.+16     	; 0x6766 <fputc+0x38>
    6756:	a0 81       	ld	r26, Z
    6758:	b1 81       	ldd	r27, Z+1	; 0x01
    675a:	9d 01       	movw	r18, r26
    675c:	2f 5f       	subi	r18, 0xFF	; 255
    675e:	3f 4f       	sbci	r19, 0xFF	; 255
    6760:	31 83       	std	Z+1, r19	; 0x01
    6762:	20 83       	st	Z, r18
    6764:	8c 93       	st	X, r24
    6766:	26 81       	ldd	r18, Z+6	; 0x06
    6768:	37 81       	ldd	r19, Z+7	; 0x07
    676a:	2f 5f       	subi	r18, 0xFF	; 255
    676c:	3f 4f       	sbci	r19, 0xFF	; 255
    676e:	37 83       	std	Z+7, r19	; 0x07
    6770:	26 83       	std	Z+6, r18	; 0x06
    6772:	14 c0       	rjmp	.+40     	; 0x679c <fputc+0x6e>
    6774:	8b 01       	movw	r16, r22
    6776:	ec 01       	movw	r28, r24
    6778:	fb 01       	movw	r30, r22
    677a:	00 84       	ldd	r0, Z+8	; 0x08
    677c:	f1 85       	ldd	r31, Z+9	; 0x09
    677e:	e0 2d       	mov	r30, r0
    6780:	09 95       	icall
    6782:	89 2b       	or	r24, r25
    6784:	e1 f6       	brne	.-72     	; 0x673e <fputc+0x10>
    6786:	d8 01       	movw	r26, r16
    6788:	16 96       	adiw	r26, 0x06	; 6
    678a:	8d 91       	ld	r24, X+
    678c:	9c 91       	ld	r25, X
    678e:	17 97       	sbiw	r26, 0x07	; 7
    6790:	01 96       	adiw	r24, 0x01	; 1
    6792:	17 96       	adiw	r26, 0x07	; 7
    6794:	9c 93       	st	X, r25
    6796:	8e 93       	st	-X, r24
    6798:	16 97       	sbiw	r26, 0x06	; 6
    679a:	ce 01       	movw	r24, r28
    679c:	df 91       	pop	r29
    679e:	cf 91       	pop	r28
    67a0:	1f 91       	pop	r17
    67a2:	0f 91       	pop	r16
    67a4:	08 95       	ret

000067a6 <printf>:
    67a6:	cf 93       	push	r28
    67a8:	df 93       	push	r29
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62
    67ae:	ae 01       	movw	r20, r28
    67b0:	4b 5f       	subi	r20, 0xFB	; 251
    67b2:	5f 4f       	sbci	r21, 0xFF	; 255
    67b4:	fa 01       	movw	r30, r20
    67b6:	61 91       	ld	r22, Z+
    67b8:	71 91       	ld	r23, Z+
    67ba:	af 01       	movw	r20, r30
    67bc:	80 91 c7 09 	lds	r24, 0x09C7	; 0x8009c7 <__iob+0x2>
    67c0:	90 91 c8 09 	lds	r25, 0x09C8	; 0x8009c8 <__iob+0x3>
    67c4:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <vfprintf>
    67c8:	df 91       	pop	r29
    67ca:	cf 91       	pop	r28
    67cc:	08 95       	ret

000067ce <puts>:
    67ce:	0f 93       	push	r16
    67d0:	1f 93       	push	r17
    67d2:	cf 93       	push	r28
    67d4:	df 93       	push	r29
    67d6:	e0 91 c7 09 	lds	r30, 0x09C7	; 0x8009c7 <__iob+0x2>
    67da:	f0 91 c8 09 	lds	r31, 0x09C8	; 0x8009c8 <__iob+0x3>
    67de:	23 81       	ldd	r18, Z+3	; 0x03
    67e0:	21 ff       	sbrs	r18, 1
    67e2:	1b c0       	rjmp	.+54     	; 0x681a <puts+0x4c>
    67e4:	8c 01       	movw	r16, r24
    67e6:	d0 e0       	ldi	r29, 0x00	; 0
    67e8:	c0 e0       	ldi	r28, 0x00	; 0
    67ea:	f8 01       	movw	r30, r16
    67ec:	81 91       	ld	r24, Z+
    67ee:	8f 01       	movw	r16, r30
    67f0:	60 91 c7 09 	lds	r22, 0x09C7	; 0x8009c7 <__iob+0x2>
    67f4:	70 91 c8 09 	lds	r23, 0x09C8	; 0x8009c8 <__iob+0x3>
    67f8:	db 01       	movw	r26, r22
    67fa:	18 96       	adiw	r26, 0x08	; 8
    67fc:	ed 91       	ld	r30, X+
    67fe:	fc 91       	ld	r31, X
    6800:	19 97       	sbiw	r26, 0x09	; 9
    6802:	88 23       	and	r24, r24
    6804:	31 f0       	breq	.+12     	; 0x6812 <puts+0x44>
    6806:	09 95       	icall
    6808:	89 2b       	or	r24, r25
    680a:	79 f3       	breq	.-34     	; 0x67ea <puts+0x1c>
    680c:	df ef       	ldi	r29, 0xFF	; 255
    680e:	cf ef       	ldi	r28, 0xFF	; 255
    6810:	ec cf       	rjmp	.-40     	; 0x67ea <puts+0x1c>
    6812:	8a e0       	ldi	r24, 0x0A	; 10
    6814:	09 95       	icall
    6816:	89 2b       	or	r24, r25
    6818:	19 f0       	breq	.+6      	; 0x6820 <puts+0x52>
    681a:	8f ef       	ldi	r24, 0xFF	; 255
    681c:	9f ef       	ldi	r25, 0xFF	; 255
    681e:	02 c0       	rjmp	.+4      	; 0x6824 <puts+0x56>
    6820:	8d 2f       	mov	r24, r29
    6822:	9c 2f       	mov	r25, r28
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	0f 91       	pop	r16
    682c:	08 95       	ret

0000682e <sprintf>:
    682e:	0f 93       	push	r16
    6830:	1f 93       	push	r17
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	cd b7       	in	r28, 0x3d	; 61
    6838:	de b7       	in	r29, 0x3e	; 62
    683a:	2e 97       	sbiw	r28, 0x0e	; 14
    683c:	0f b6       	in	r0, 0x3f	; 63
    683e:	f8 94       	cli
    6840:	de bf       	out	0x3e, r29	; 62
    6842:	0f be       	out	0x3f, r0	; 63
    6844:	cd bf       	out	0x3d, r28	; 61
    6846:	0d 89       	ldd	r16, Y+21	; 0x15
    6848:	1e 89       	ldd	r17, Y+22	; 0x16
    684a:	86 e0       	ldi	r24, 0x06	; 6
    684c:	8c 83       	std	Y+4, r24	; 0x04
    684e:	1a 83       	std	Y+2, r17	; 0x02
    6850:	09 83       	std	Y+1, r16	; 0x01
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	9f e7       	ldi	r25, 0x7F	; 127
    6856:	9e 83       	std	Y+6, r25	; 0x06
    6858:	8d 83       	std	Y+5, r24	; 0x05
    685a:	ae 01       	movw	r20, r28
    685c:	47 5e       	subi	r20, 0xE7	; 231
    685e:	5f 4f       	sbci	r21, 0xFF	; 255
    6860:	6f 89       	ldd	r22, Y+23	; 0x17
    6862:	78 8d       	ldd	r23, Y+24	; 0x18
    6864:	ce 01       	movw	r24, r28
    6866:	01 96       	adiw	r24, 0x01	; 1
    6868:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <vfprintf>
    686c:	ef 81       	ldd	r30, Y+7	; 0x07
    686e:	f8 85       	ldd	r31, Y+8	; 0x08
    6870:	e0 0f       	add	r30, r16
    6872:	f1 1f       	adc	r31, r17
    6874:	10 82       	st	Z, r1
    6876:	2e 96       	adiw	r28, 0x0e	; 14
    6878:	0f b6       	in	r0, 0x3f	; 63
    687a:	f8 94       	cli
    687c:	de bf       	out	0x3e, r29	; 62
    687e:	0f be       	out	0x3f, r0	; 63
    6880:	cd bf       	out	0x3d, r28	; 61
    6882:	df 91       	pop	r29
    6884:	cf 91       	pop	r28
    6886:	1f 91       	pop	r17
    6888:	0f 91       	pop	r16
    688a:	08 95       	ret

0000688c <ungetc>:
    688c:	fb 01       	movw	r30, r22
    688e:	23 81       	ldd	r18, Z+3	; 0x03
    6890:	20 ff       	sbrs	r18, 0
    6892:	12 c0       	rjmp	.+36     	; 0x68b8 <ungetc+0x2c>
    6894:	26 fd       	sbrc	r18, 6
    6896:	10 c0       	rjmp	.+32     	; 0x68b8 <ungetc+0x2c>
    6898:	8f 3f       	cpi	r24, 0xFF	; 255
    689a:	3f ef       	ldi	r19, 0xFF	; 255
    689c:	93 07       	cpc	r25, r19
    689e:	61 f0       	breq	.+24     	; 0x68b8 <ungetc+0x2c>
    68a0:	82 83       	std	Z+2, r24	; 0x02
    68a2:	2f 7d       	andi	r18, 0xDF	; 223
    68a4:	20 64       	ori	r18, 0x40	; 64
    68a6:	23 83       	std	Z+3, r18	; 0x03
    68a8:	26 81       	ldd	r18, Z+6	; 0x06
    68aa:	37 81       	ldd	r19, Z+7	; 0x07
    68ac:	21 50       	subi	r18, 0x01	; 1
    68ae:	31 09       	sbc	r19, r1
    68b0:	37 83       	std	Z+7, r19	; 0x07
    68b2:	26 83       	std	Z+6, r18	; 0x06
    68b4:	99 27       	eor	r25, r25
    68b6:	08 95       	ret
    68b8:	8f ef       	ldi	r24, 0xFF	; 255
    68ba:	9f ef       	ldi	r25, 0xFF	; 255
    68bc:	08 95       	ret

000068be <__ultoa_invert>:
    68be:	fa 01       	movw	r30, r20
    68c0:	aa 27       	eor	r26, r26
    68c2:	28 30       	cpi	r18, 0x08	; 8
    68c4:	51 f1       	breq	.+84     	; 0x691a <__ultoa_invert+0x5c>
    68c6:	20 31       	cpi	r18, 0x10	; 16
    68c8:	81 f1       	breq	.+96     	; 0x692a <__ultoa_invert+0x6c>
    68ca:	e8 94       	clt
    68cc:	6f 93       	push	r22
    68ce:	6e 7f       	andi	r22, 0xFE	; 254
    68d0:	6e 5f       	subi	r22, 0xFE	; 254
    68d2:	7f 4f       	sbci	r23, 0xFF	; 255
    68d4:	8f 4f       	sbci	r24, 0xFF	; 255
    68d6:	9f 4f       	sbci	r25, 0xFF	; 255
    68d8:	af 4f       	sbci	r26, 0xFF	; 255
    68da:	b1 e0       	ldi	r27, 0x01	; 1
    68dc:	3e d0       	rcall	.+124    	; 0x695a <__ultoa_invert+0x9c>
    68de:	b4 e0       	ldi	r27, 0x04	; 4
    68e0:	3c d0       	rcall	.+120    	; 0x695a <__ultoa_invert+0x9c>
    68e2:	67 0f       	add	r22, r23
    68e4:	78 1f       	adc	r23, r24
    68e6:	89 1f       	adc	r24, r25
    68e8:	9a 1f       	adc	r25, r26
    68ea:	a1 1d       	adc	r26, r1
    68ec:	68 0f       	add	r22, r24
    68ee:	79 1f       	adc	r23, r25
    68f0:	8a 1f       	adc	r24, r26
    68f2:	91 1d       	adc	r25, r1
    68f4:	a1 1d       	adc	r26, r1
    68f6:	6a 0f       	add	r22, r26
    68f8:	71 1d       	adc	r23, r1
    68fa:	81 1d       	adc	r24, r1
    68fc:	91 1d       	adc	r25, r1
    68fe:	a1 1d       	adc	r26, r1
    6900:	20 d0       	rcall	.+64     	; 0x6942 <__ultoa_invert+0x84>
    6902:	09 f4       	brne	.+2      	; 0x6906 <__ultoa_invert+0x48>
    6904:	68 94       	set
    6906:	3f 91       	pop	r19
    6908:	2a e0       	ldi	r18, 0x0A	; 10
    690a:	26 9f       	mul	r18, r22
    690c:	11 24       	eor	r1, r1
    690e:	30 19       	sub	r19, r0
    6910:	30 5d       	subi	r19, 0xD0	; 208
    6912:	31 93       	st	Z+, r19
    6914:	de f6       	brtc	.-74     	; 0x68cc <__ultoa_invert+0xe>
    6916:	cf 01       	movw	r24, r30
    6918:	08 95       	ret
    691a:	46 2f       	mov	r20, r22
    691c:	47 70       	andi	r20, 0x07	; 7
    691e:	40 5d       	subi	r20, 0xD0	; 208
    6920:	41 93       	st	Z+, r20
    6922:	b3 e0       	ldi	r27, 0x03	; 3
    6924:	0f d0       	rcall	.+30     	; 0x6944 <__ultoa_invert+0x86>
    6926:	c9 f7       	brne	.-14     	; 0x691a <__ultoa_invert+0x5c>
    6928:	f6 cf       	rjmp	.-20     	; 0x6916 <__ultoa_invert+0x58>
    692a:	46 2f       	mov	r20, r22
    692c:	4f 70       	andi	r20, 0x0F	; 15
    692e:	40 5d       	subi	r20, 0xD0	; 208
    6930:	4a 33       	cpi	r20, 0x3A	; 58
    6932:	18 f0       	brcs	.+6      	; 0x693a <__ultoa_invert+0x7c>
    6934:	49 5d       	subi	r20, 0xD9	; 217
    6936:	31 fd       	sbrc	r19, 1
    6938:	40 52       	subi	r20, 0x20	; 32
    693a:	41 93       	st	Z+, r20
    693c:	02 d0       	rcall	.+4      	; 0x6942 <__ultoa_invert+0x84>
    693e:	a9 f7       	brne	.-22     	; 0x692a <__ultoa_invert+0x6c>
    6940:	ea cf       	rjmp	.-44     	; 0x6916 <__ultoa_invert+0x58>
    6942:	b4 e0       	ldi	r27, 0x04	; 4
    6944:	a6 95       	lsr	r26
    6946:	97 95       	ror	r25
    6948:	87 95       	ror	r24
    694a:	77 95       	ror	r23
    694c:	67 95       	ror	r22
    694e:	ba 95       	dec	r27
    6950:	c9 f7       	brne	.-14     	; 0x6944 <__ultoa_invert+0x86>
    6952:	00 97       	sbiw	r24, 0x00	; 0
    6954:	61 05       	cpc	r22, r1
    6956:	71 05       	cpc	r23, r1
    6958:	08 95       	ret
    695a:	9b 01       	movw	r18, r22
    695c:	ac 01       	movw	r20, r24
    695e:	0a 2e       	mov	r0, r26
    6960:	06 94       	lsr	r0
    6962:	57 95       	ror	r21
    6964:	47 95       	ror	r20
    6966:	37 95       	ror	r19
    6968:	27 95       	ror	r18
    696a:	ba 95       	dec	r27
    696c:	c9 f7       	brne	.-14     	; 0x6960 <__ultoa_invert+0xa2>
    696e:	62 0f       	add	r22, r18
    6970:	73 1f       	adc	r23, r19
    6972:	84 1f       	adc	r24, r20
    6974:	95 1f       	adc	r25, r21
    6976:	a0 1d       	adc	r26, r0
    6978:	08 95       	ret

0000697a <__ctype_isfalse>:
    697a:	99 27       	eor	r25, r25
    697c:	88 27       	eor	r24, r24

0000697e <__ctype_istrue>:
    697e:	08 95       	ret

00006980 <_exit>:
    6980:	f8 94       	cli

00006982 <__stop_program>:
    6982:	ff cf       	rjmp	.-2      	; 0x6982 <__stop_program>


exp4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  0000694a  000069de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000694a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cd5  0080029c  0080029c  00006b7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00006c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000102  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000092f2  00000000  00000000  000071d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001760  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005678  00000000  00000000  00011c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000016e8  00000000  00000000  000172a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001337  00000000  00000000  00018988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d2ff  00000000  00000000  00019cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000610  00000000  00000000  00026fbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3f c1       	rjmp	.+638    	; 0x280 <__ctors_end>
       2:	00 00       	nop
       4:	5c c1       	rjmp	.+696    	; 0x2be <__bad_interrupt>
       6:	00 00       	nop
       8:	5a c1       	rjmp	.+692    	; 0x2be <__bad_interrupt>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c1       	rjmp	.+684    	; 0x2be <__bad_interrupt>
      12:	00 00       	nop
      14:	54 c1       	rjmp	.+680    	; 0x2be <__bad_interrupt>
      16:	00 00       	nop
      18:	52 c1       	rjmp	.+676    	; 0x2be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	50 c1       	rjmp	.+672    	; 0x2be <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c1       	rjmp	.+668    	; 0x2be <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	4a c1       	rjmp	.+660    	; 0x2be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__vector_15>
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c1       	rjmp	.+608    	; 0x2be <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	1e c1       	rjmp	.+572    	; 0x2be <__bad_interrupt>
      82:	00 00       	nop
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	69 03       	fmul	r22, r17
      8e:	6c 03       	fmul	r22, r20
      90:	6f 03       	fmul	r22, r23
      92:	72 03       	mulsu	r23, r18
      94:	75 03       	mulsu	r23, r21
      96:	78 03       	fmul	r23, r16
      98:	7b 03       	fmul	r23, r19
      9a:	7e 03       	fmul	r23, r22
      9c:	81 03       	fmuls	r16, r17
      9e:	d4 21       	and	r29, r4
      a0:	db 21       	and	r29, r11
      a2:	d9 24       	eor	r13, r9
      a4:	54 22       	and	r5, r20
      a6:	ed 22       	and	r14, r29
      a8:	d9 24       	eor	r13, r9
      aa:	d9 24       	eor	r13, r9
      ac:	92 23       	and	r25, r18
      ae:	d9 24       	eor	r13, r9
      b0:	d9 24       	eor	r13, r9
      b2:	d9 24       	eor	r13, r9
      b4:	d9 24       	eor	r13, r9
      b6:	d9 24       	eor	r13, r9
      b8:	d9 24       	eor	r13, r9
      ba:	d9 24       	eor	r13, r9
      bc:	d9 24       	eor	r13, r9
      be:	d9 24       	eor	r13, r9
      c0:	d9 24       	eor	r13, r9
      c2:	d9 24       	eor	r13, r9
      c4:	d9 24       	eor	r13, r9
      c6:	d9 24       	eor	r13, r9
      c8:	d9 24       	eor	r13, r9
      ca:	d9 24       	eor	r13, r9
      cc:	d9 24       	eor	r13, r9
      ce:	d9 24       	eor	r13, r9
      d0:	d9 24       	eor	r13, r9
      d2:	d9 24       	eor	r13, r9
      d4:	d9 24       	eor	r13, r9
      d6:	d9 24       	eor	r13, r9
      d8:	d9 24       	eor	r13, r9
      da:	d9 24       	eor	r13, r9
      dc:	d9 24       	eor	r13, r9
      de:	d9 24       	eor	r13, r9
      e0:	d9 24       	eor	r13, r9
      e2:	d9 24       	eor	r13, r9
      e4:	d9 24       	eor	r13, r9
      e6:	d9 24       	eor	r13, r9
      e8:	d9 24       	eor	r13, r9
      ea:	d9 24       	eor	r13, r9
      ec:	d9 24       	eor	r13, r9
      ee:	d9 24       	eor	r13, r9
      f0:	d9 24       	eor	r13, r9
      f2:	d9 24       	eor	r13, r9
      f4:	d9 24       	eor	r13, r9
      f6:	d9 24       	eor	r13, r9
      f8:	d9 24       	eor	r13, r9
      fa:	d9 24       	eor	r13, r9
      fc:	d9 24       	eor	r13, r9
      fe:	d9 24       	eor	r13, r9
     100:	d9 24       	eor	r13, r9
     102:	3a 23       	and	r19, r26
     104:	40 23       	and	r20, r16
     106:	53 23       	and	r21, r19
     108:	66 23       	and	r22, r22
     10a:	7d 23       	and	r23, r29
     10c:	99 23       	and	r25, r25
     10e:	33 24       	eor	r3, r3
     110:	92 24       	eor	r9, r2
     112:	05 a8       	ldd	r0, Z+53	; 0x35
     114:	4c cd       	rjmp	.-1384   	; 0xfffffbae <__eeprom_end+0xff7efbae>
     116:	b2 d4       	rcall	.+2404   	; 0xa7c <ASA_SDC00_put+0x138>
     118:	4e b9       	out	0x0e, r20	; 14
     11a:	38 36       	cpi	r19, 0x68	; 104
     11c:	a9 02       	muls	r26, r25
     11e:	0c 50       	subi	r16, 0x0C	; 12
     120:	b9 91       	ld	r27, Y+
     122:	86 88       	ldd	r8, Z+22	; 0x16
     124:	08 3c       	cpi	r16, 0xC8	; 200
     126:	a6 aa       	std	Z+54, r10	; 0x36
     128:	aa 2a       	or	r10, r26
     12a:	be 00       	.word	0x00be	; ????
     12c:	00 00       	nop
     12e:	80 3f       	cpi	r24, 0xF0	; 240

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <__c.2529>:
     232:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     242:	47 00                                               G.

00000244 <pstr_an>:
     244:	61 6e 00                                            an.

00000247 <pstr_nfinity>:
     247:	6e 66 69 6e 69 74 79 00                             nfinity.

0000024f <pwr_m10>:
     24f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     25f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000267 <pwr_p10>:
     267:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     277:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000280 <__ctors_end>:
     280:	11 24       	eor	r1, r1
     282:	1f be       	out	0x3f, r1	; 63
     284:	cf ef       	ldi	r28, 0xFF	; 255
     286:	d0 e1       	ldi	r29, 0x10	; 16
     288:	de bf       	out	0x3e, r29	; 62
     28a:	cd bf       	out	0x3d, r28	; 61

0000028c <__do_copy_data>:
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	ea e4       	ldi	r30, 0x4A	; 74
     294:	f9 e6       	ldi	r31, 0x69	; 105
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0b bf       	out	0x3b, r16	; 59
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__do_copy_data+0x14>
     29c:	07 90       	elpm	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	ac 39       	cpi	r26, 0x9C	; 156
     2a2:	b1 07       	cpc	r27, r17
     2a4:	d9 f7       	brne	.-10     	; 0x29c <__do_copy_data+0x10>

000002a6 <__do_clear_bss>:
     2a6:	2f e0       	ldi	r18, 0x0F	; 15
     2a8:	ac e9       	ldi	r26, 0x9C	; 156
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <.do_clear_bss_start>

000002ae <.do_clear_bss_loop>:
     2ae:	1d 92       	st	X+, r1

000002b0 <.do_clear_bss_start>:
     2b0:	a1 37       	cpi	r26, 0x71	; 113
     2b2:	b2 07       	cpc	r27, r18
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <.do_clear_bss_loop>
     2b6:	0e 94 93 26 	call	0x4d26	; 0x4d26 <main>
     2ba:	0c 94 a3 34 	jmp	0x6946	; 0x6946 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <uart_put>:
     2c0:	5d 9b       	sbis	0x0b, 5	; 11
     2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <uart_put>
     2c4:	8c b9       	out	0x0c, r24	; 12
     2c6:	08 95       	ret

000002c8 <uart_get>:
     2c8:	5f 9b       	sbis	0x0b, 7	; 11
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <uart_get>
     2cc:	8c b1       	in	r24, 0x0c	; 12
     2ce:	08 95       	ret

000002d0 <M128_HMI_set>:
     2d0:	88 3c       	cpi	r24, 0xC8	; 200
     2d2:	91 f4       	brne	.+36     	; 0x2f8 <M128_HMI_set+0x28>
     2d4:	6f 3f       	cpi	r22, 0xFF	; 255
     2d6:	81 f4       	brne	.+32     	; 0x2f8 <M128_HMI_set+0x28>
     2d8:	44 23       	and	r20, r20
     2da:	71 f4       	brne	.+28     	; 0x2f8 <M128_HMI_set+0x28>
     2dc:	82 2f       	mov	r24, r18
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Timeout>
     2e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Timeout+0x1>
     2ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Timeout+0x2>
     2f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Timeout+0x3>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <HMI_timeout_set>:
     2fc:	9c 01       	movw	r18, r24
     2fe:	c2 97       	sbiw	r24, 0x32	; 50
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	94 47       	sbci	r25, 0x74	; 116
     304:	10 f0       	brcs	.+4      	; 0x30a <HMI_timeout_set+0xe>
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	08 95       	ret
     30a:	89 e9       	ldi	r24, 0x99	; 153
     30c:	93 e0       	ldi	r25, 0x03	; 3
     30e:	ac 01       	movw	r20, r24
     310:	24 9f       	mul	r18, r20
     312:	c0 01       	movw	r24, r0
     314:	25 9f       	mul	r18, r21
     316:	90 0d       	add	r25, r0
     318:	34 9f       	mul	r19, r20
     31a:	90 0d       	add	r25, r0
     31c:	11 24       	eor	r1, r1
     31e:	aa 27       	eor	r26, r26
     320:	97 fd       	sbrc	r25, 7
     322:	a0 95       	com	r26
     324:	ba 2f       	mov	r27, r26
     326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Timeout>
     32a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Timeout+0x1>
     32e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <Timeout+0x2>
     332:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <Timeout+0x3>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	08 95       	ret

0000033a <M128_HMI_put>:
     33a:	dc 01       	movw	r26, r24
     33c:	5d 9b       	sbis	0x0b, 5	; 11
     33e:	fe cf       	rjmp	.-4      	; 0x33c <M128_HMI_put+0x2>
     340:	8a ea       	ldi	r24, 0xAA	; 170
     342:	8c b9       	out	0x0c, r24	; 12
     344:	5d 9b       	sbis	0x0b, 5	; 11
     346:	fe cf       	rjmp	.-4      	; 0x344 <M128_HMI_put+0xa>
     348:	8a ea       	ldi	r24, 0xAA	; 170
     34a:	8c b9       	out	0x0c, r24	; 12
     34c:	5d 9b       	sbis	0x0b, 5	; 11
     34e:	fe cf       	rjmp	.-4      	; 0x34c <M128_HMI_put+0x12>
     350:	8a ea       	ldi	r24, 0xAA	; 170
     352:	8c b9       	out	0x0c, r24	; 12
     354:	5d 9b       	sbis	0x0b, 5	; 11
     356:	fe cf       	rjmp	.-4      	; 0x354 <M128_HMI_put+0x1a>
     358:	6c b9       	out	0x0c, r22	; 12
     35a:	8b 2f       	mov	r24, r27
     35c:	99 27       	eor	r25, r25
     35e:	87 fd       	sbrc	r24, 7
     360:	9a 95       	dec	r25
     362:	98 2f       	mov	r25, r24
     364:	5d 9b       	sbis	0x0b, 5	; 11
     366:	fe cf       	rjmp	.-4      	; 0x364 <M128_HMI_put+0x2a>
     368:	9c b9       	out	0x0c, r25	; 12
     36a:	8a 2f       	mov	r24, r26
     36c:	5d 9b       	sbis	0x0b, 5	; 11
     36e:	fe cf       	rjmp	.-4      	; 0x36c <M128_HMI_put+0x32>
     370:	8c b9       	out	0x0c, r24	; 12
     372:	89 0f       	add	r24, r25
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	0a c0       	rjmp	.+20     	; 0x38e <M128_HMI_put+0x54>
     37a:	fa 01       	movw	r30, r20
     37c:	e2 0f       	add	r30, r18
     37e:	f3 1f       	adc	r31, r19
     380:	e0 81       	ld	r30, Z
     382:	5d 9b       	sbis	0x0b, 5	; 11
     384:	fe cf       	rjmp	.-4      	; 0x382 <M128_HMI_put+0x48>
     386:	ec b9       	out	0x0c, r30	; 12
     388:	8e 0f       	add	r24, r30
     38a:	2f 5f       	subi	r18, 0xFF	; 255
     38c:	3f 4f       	sbci	r19, 0xFF	; 255
     38e:	2a 17       	cp	r18, r26
     390:	3b 07       	cpc	r19, r27
     392:	98 f3       	brcs	.-26     	; 0x37a <M128_HMI_put+0x40>
     394:	5d 9b       	sbis	0x0b, 5	; 11
     396:	fe cf       	rjmp	.-4      	; 0x394 <M128_HMI_put+0x5a>
     398:	8c b9       	out	0x0c, r24	; 12
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	08 95       	ret

0000039e <M128_HMI_get>:
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	5f 9b       	sbis	0x0b, 7	; 11
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <M128_HMI_get+0x6>
     3a8:	8c b1       	in	r24, 0x0c	; 12
     3aa:	8b 3a       	cpi	r24, 0xAB	; 171
     3ac:	c1 f5       	brne	.+112    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3ae:	5f 9b       	sbis	0x0b, 7	; 11
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <M128_HMI_get+0x10>
     3b2:	8c b1       	in	r24, 0x0c	; 12
     3b4:	8b 3a       	cpi	r24, 0xAB	; 171
     3b6:	99 f5       	brne	.+102    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3b8:	5f 9b       	sbis	0x0b, 7	; 11
     3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <M128_HMI_get+0x1a>
     3bc:	8c b1       	in	r24, 0x0c	; 12
     3be:	8b 3a       	cpi	r24, 0xAB	; 171
     3c0:	71 f5       	brne	.+92     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3c2:	5f 9b       	sbis	0x0b, 7	; 11
     3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <M128_HMI_get+0x24>
     3c6:	8c b1       	in	r24, 0x0c	; 12
     3c8:	5f 9b       	sbis	0x0b, 7	; 11
     3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <M128_HMI_get+0x2a>
     3cc:	3c b1       	in	r19, 0x0c	; 12
     3ce:	5f 9b       	sbis	0x0b, 7	; 11
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <M128_HMI_get+0x30>
     3d2:	2c b1       	in	r18, 0x0c	; 12
     3d4:	a2 2f       	mov	r26, r18
     3d6:	a3 0f       	add	r26, r19
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <M128_HMI_get+0x54>
     3de:	5f 9b       	sbis	0x0b, 7	; 11
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <M128_HMI_get+0x40>
     3e2:	8c b1       	in	r24, 0x0c	; 12
     3e4:	fb 01       	movw	r30, r22
     3e6:	e4 0f       	add	r30, r20
     3e8:	f5 1f       	adc	r31, r21
     3ea:	80 83       	st	Z, r24
     3ec:	a8 0f       	add	r26, r24
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	4c 17       	cp	r20, r28
     3f4:	5d 07       	cpc	r21, r29
     3f6:	9c f3       	brlt	.-26     	; 0x3de <M128_HMI_get+0x40>
     3f8:	5f 9b       	sbis	0x0b, 7	; 11
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <M128_HMI_get+0x5a>
     3fc:	4c b1       	in	r20, 0x0c	; 12
     3fe:	93 2f       	mov	r25, r19
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	82 2b       	or	r24, r18
     406:	93 2b       	or	r25, r19
     408:	8c 17       	cp	r24, r28
     40a:	9d 07       	cpc	r25, r29
     40c:	11 f0       	breq	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	07 c0       	rjmp	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	4a 17       	cp	r20, r26
     414:	11 f4       	brne	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	03 c0       	rjmp	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <stdio_putchar>:
     426:	1f 93       	push	r17
     428:	18 2f       	mov	r17, r24
     42a:	8a 30       	cpi	r24, 0x0A	; 10
     42c:	11 f4       	brne	.+4      	; 0x432 <stdio_putchar+0xc>
     42e:	8d e0       	ldi	r24, 0x0D	; 13
     430:	fa df       	rcall	.-12     	; 0x426 <stdio_putchar>
     432:	5d 9b       	sbis	0x0b, 5	; 11
     434:	fe cf       	rjmp	.-4      	; 0x432 <stdio_putchar+0xc>
     436:	1c b9       	out	0x0c, r17	; 12
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	1f 91       	pop	r17
     43e:	08 95       	ret

00000440 <stdio_getchar>:
     440:	1f 93       	push	r17
     442:	bc 01       	movw	r22, r24
     444:	5f 9b       	sbis	0x0b, 7	; 11
     446:	fe cf       	rjmp	.-4      	; 0x444 <stdio_getchar+0x4>
     448:	1c b1       	in	r17, 0x0c	; 12
     44a:	81 2f       	mov	r24, r17
     44c:	ec df       	rcall	.-40     	; 0x426 <stdio_putchar>
     44e:	81 2f       	mov	r24, r17
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	1f 91       	pop	r17
     454:	08 95       	ret

00000456 <ASA_M128_set>:
     456:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     45a:	81 e1       	ldi	r24, 0x11	; 17
     45c:	89 b9       	out	0x09, r24	; 9
     45e:	8a b1       	in	r24, 0x0a	; 10
     460:	88 61       	ori	r24, 0x18	; 24
     462:	8a b9       	out	0x0a, r24	; 10
     464:	e5 e9       	ldi	r30, 0x95	; 149
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	86 60       	ori	r24, 0x06	; 6
     46c:	80 83       	st	Z, r24
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <__iob+0x3>
     476:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <__iob+0x2>
     47a:	90 93 6c 0f 	sts	0x0F6C, r25	; 0x800f6c <__iob+0x1>
     47e:	80 93 6b 0f 	sts	0x0F6B, r24	; 0x800f6b <__iob>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret

00000486 <M128_HMI_Form_get>:
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ec 01       	movw	r28, r24
     494:	8a 01       	movw	r16, r20
     496:	5f 9b       	sbis	0x0b, 7	; 11
     498:	fe cf       	rjmp	.-4      	; 0x496 <M128_HMI_Form_get+0x10>
     49a:	8c b1       	in	r24, 0x0c	; 12
     49c:	8b 3a       	cpi	r24, 0xAB	; 171
     49e:	09 f0       	breq	.+2      	; 0x4a2 <M128_HMI_Form_get+0x1c>
     4a0:	50 c0       	rjmp	.+160    	; 0x542 <M128_HMI_Form_get+0xbc>
     4a2:	5f 9b       	sbis	0x0b, 7	; 11
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <M128_HMI_Form_get+0x1c>
     4a6:	8c b1       	in	r24, 0x0c	; 12
     4a8:	8b 3a       	cpi	r24, 0xAB	; 171
     4aa:	09 f0       	breq	.+2      	; 0x4ae <M128_HMI_Form_get+0x28>
     4ac:	4a c0       	rjmp	.+148    	; 0x542 <M128_HMI_Form_get+0xbc>
     4ae:	5f 9b       	sbis	0x0b, 7	; 11
     4b0:	fe cf       	rjmp	.-4      	; 0x4ae <M128_HMI_Form_get+0x28>
     4b2:	8c b1       	in	r24, 0x0c	; 12
     4b4:	8b 3a       	cpi	r24, 0xAB	; 171
     4b6:	09 f0       	breq	.+2      	; 0x4ba <M128_HMI_Form_get+0x34>
     4b8:	44 c0       	rjmp	.+136    	; 0x542 <M128_HMI_Form_get+0xbc>
     4ba:	5f 9b       	sbis	0x0b, 7	; 11
     4bc:	fe cf       	rjmp	.-4      	; 0x4ba <M128_HMI_Form_get+0x34>
     4be:	ec b0       	in	r14, 0x0c	; 12
     4c0:	5f 9b       	sbis	0x0b, 7	; 11
     4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <M128_HMI_Form_get+0x3a>
     4c4:	5c b1       	in	r21, 0x0c	; 12
     4c6:	5f 9b       	sbis	0x0b, 7	; 11
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <M128_HMI_Form_get+0x40>
     4ca:	fc b0       	in	r15, 0x0c	; 12
     4cc:	de 01       	movw	r26, r28
     4ce:	0d 90       	ld	r0, X+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <M128_HMI_Form_get+0x48>
     4d4:	11 97       	sbiw	r26, 0x01	; 1
     4d6:	ac 1b       	sub	r26, r28
     4d8:	bd 0b       	sbc	r27, r29
     4da:	4f 2d       	mov	r20, r15
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <M128_HMI_Form_get+0x70>
     4e2:	5f 9b       	sbis	0x0b, 7	; 11
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <M128_HMI_Form_get+0x5c>
     4e6:	8c b1       	in	r24, 0x0c	; 12
     4e8:	fe 01       	movw	r30, r28
     4ea:	e2 0f       	add	r30, r18
     4ec:	f3 1f       	adc	r31, r19
     4ee:	80 83       	st	Z, r24
     4f0:	48 0f       	add	r20, r24
     4f2:	2f 5f       	subi	r18, 0xFF	; 255
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	2a 17       	cp	r18, r26
     4f8:	3b 07       	cpc	r19, r27
     4fa:	9c f3       	brlt	.-26     	; 0x4e2 <M128_HMI_Form_get+0x5c>
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	0a c0       	rjmp	.+20     	; 0x516 <M128_HMI_Form_get+0x90>
     502:	5f 9b       	sbis	0x0b, 7	; 11
     504:	fe cf       	rjmp	.-4      	; 0x502 <M128_HMI_Form_get+0x7c>
     506:	8c b1       	in	r24, 0x0c	; 12
     508:	f8 01       	movw	r30, r16
     50a:	e2 0f       	add	r30, r18
     50c:	f3 1f       	adc	r31, r19
     50e:	80 83       	st	Z, r24
     510:	48 0f       	add	r20, r24
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	26 17       	cp	r18, r22
     518:	37 07       	cpc	r19, r23
     51a:	9c f3       	brlt	.-26     	; 0x502 <M128_HMI_Form_get+0x7c>
     51c:	5f 9b       	sbis	0x0b, 7	; 11
     51e:	fe cf       	rjmp	.-4      	; 0x51c <M128_HMI_Form_get+0x96>
     520:	2c b1       	in	r18, 0x0c	; 12
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	58 2b       	or	r21, r24
     526:	5f 19       	sub	r21, r15
     528:	85 2f       	mov	r24, r21
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	86 17       	cp	r24, r22
     52e:	97 07       	cpc	r25, r23
     530:	11 f0       	breq	.+4      	; 0x536 <M128_HMI_Form_get+0xb0>
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	07 c0       	rjmp	.+14     	; 0x544 <M128_HMI_Form_get+0xbe>
     536:	24 17       	cp	r18, r20
     538:	11 f4       	brne	.+4      	; 0x53e <M128_HMI_Form_get+0xb8>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	03 c0       	rjmp	.+6      	; 0x544 <M128_HMI_Form_get+0xbe>
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	01 c0       	rjmp	.+2      	; 0x544 <M128_HMI_Form_get+0xbe>
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <M128_HMI_Form_put>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	ec 01       	movw	r28, r24
     558:	5d 9b       	sbis	0x0b, 5	; 11
     55a:	fe cf       	rjmp	.-4      	; 0x558 <M128_HMI_Form_put+0x6>
     55c:	8b eb       	ldi	r24, 0xBB	; 187
     55e:	8c b9       	out	0x0c, r24	; 12
     560:	5d 9b       	sbis	0x0b, 5	; 11
     562:	fe cf       	rjmp	.-4      	; 0x560 <M128_HMI_Form_put+0xe>
     564:	8b eb       	ldi	r24, 0xBB	; 187
     566:	8c b9       	out	0x0c, r24	; 12
     568:	5d 9b       	sbis	0x0b, 5	; 11
     56a:	fe cf       	rjmp	.-4      	; 0x568 <M128_HMI_Form_put+0x16>
     56c:	8b eb       	ldi	r24, 0xBB	; 187
     56e:	8c b9       	out	0x0c, r24	; 12
     570:	de 01       	movw	r26, r28
     572:	0d 90       	ld	r0, X+
     574:	00 20       	and	r0, r0
     576:	e9 f7       	brne	.-6      	; 0x572 <M128_HMI_Form_put+0x20>
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	ac 1b       	sub	r26, r28
     57c:	bd 0b       	sbc	r27, r29
     57e:	af 3f       	cpi	r26, 0xFF	; 255
     580:	b1 05       	cpc	r27, r1
     582:	10 f0       	brcs	.+4      	; 0x588 <M128_HMI_Form_put+0x36>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	38 c0       	rjmp	.+112    	; 0x5f8 <M128_HMI_Form_put+0xa6>
     588:	8a 2f       	mov	r24, r26
     58a:	2a 2f       	mov	r18, r26
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	26 0f       	add	r18, r22
     594:	37 1f       	adc	r19, r23
     596:	93 2f       	mov	r25, r19
     598:	5d 9b       	sbis	0x0b, 5	; 11
     59a:	fe cf       	rjmp	.-4      	; 0x598 <M128_HMI_Form_put+0x46>
     59c:	9c b9       	out	0x0c, r25	; 12
     59e:	5d 9b       	sbis	0x0b, 5	; 11
     5a0:	fe cf       	rjmp	.-4      	; 0x59e <M128_HMI_Form_put+0x4c>
     5a2:	2c b9       	out	0x0c, r18	; 12
     5a4:	5d 9b       	sbis	0x0b, 5	; 11
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <M128_HMI_Form_put+0x52>
     5a8:	8c b9       	out	0x0c, r24	; 12
     5aa:	a2 2f       	mov	r26, r18
     5ac:	a8 0f       	add	r26, r24
     5ae:	a9 0f       	add	r26, r25
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0a c0       	rjmp	.+20     	; 0x5cc <M128_HMI_Form_put+0x7a>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e2 0f       	add	r30, r18
     5bc:	f3 1f       	adc	r31, r19
     5be:	e0 81       	ld	r30, Z
     5c0:	5d 9b       	sbis	0x0b, 5	; 11
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <M128_HMI_Form_put+0x6e>
     5c4:	ec b9       	out	0x0c, r30	; 12
     5c6:	ae 0f       	add	r26, r30
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	98 f3       	brcs	.-26     	; 0x5b8 <M128_HMI_Form_put+0x66>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <M128_HMI_Form_put+0x98>
     5d8:	fa 01       	movw	r30, r20
     5da:	e8 0f       	add	r30, r24
     5dc:	f9 1f       	adc	r31, r25
     5de:	e0 81       	ld	r30, Z
     5e0:	5d 9b       	sbis	0x0b, 5	; 11
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <M128_HMI_Form_put+0x8e>
     5e4:	ec b9       	out	0x0c, r30	; 12
     5e6:	ae 0f       	add	r26, r30
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	86 17       	cp	r24, r22
     5ec:	97 07       	cpc	r25, r23
     5ee:	a0 f3       	brcs	.-24     	; 0x5d8 <M128_HMI_Form_put+0x86>
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <M128_HMI_Form_put+0x9e>
     5f4:	ac b9       	out	0x0c, r26	; 12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <initBuffer>:
        }
        else{
            return counter;
        }
    }
}
     5fe:	fc 01       	movw	r30, r24
     600:	11 82       	std	Z+1, r1	; 0x01
     602:	10 82       	st	Z, r1
     604:	08 95       	ret

00000606 <setSDCRead>:
     606:	0f 93       	push	r16
     608:	01 e0       	ldi	r16, 0x01	; 1
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	43 e0       	ldi	r20, 0x03	; 3
     60e:	68 ec       	ldi	r22, 0xC8	; 200
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	f1 d0       	rcall	.+482    	; 0x7f6 <ASA_SDC00_set>
     614:	0f 91       	pop	r16
     616:	08 95       	ret

00000618 <getSDCData>:
     618:	46 2f       	mov	r20, r22
     61a:	9c 01       	movw	r18, r24
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	84 e0       	ldi	r24, 0x04	; 4
     620:	df c2       	rjmp	.+1470   	; 0xbe0 <ASA_SDC00_get>
     622:	08 95       	ret

00000624 <closeSDC>:
     624:	0f 93       	push	r16
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	68 ec       	ldi	r22, 0xC8	; 200
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	e2 d0       	rcall	.+452    	; 0x7f6 <ASA_SDC00_set>
     632:	88 23       	and	r24, r24
     634:	61 f0       	breq	.+24     	; 0x64e <closeSDC+0x2a>
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	8b e4       	ldi	r24, 0x4B	; 75
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 a3 33 	call	0x6746	; 0x6746 <printf>
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <setSDCName>:
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	eb 01       	movw	r28, r22
     658:	9c 01       	movw	r18, r24
     65a:	48 e0       	ldi	r20, 0x08	; 8
     65c:	60 e4       	ldi	r22, 0x40	; 64
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	71 d1       	rcall	.+738    	; 0x944 <ASA_SDC00_put>
     662:	9e 01       	movw	r18, r28
     664:	43 e0       	ldi	r20, 0x03	; 3
     666:	68 e4       	ldi	r22, 0x48	; 72
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	6c d1       	rcall	.+728    	; 0x944 <ASA_SDC00_put>
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <getBufferSizeUseCRLF>:

int getBufferSizeUseCRLF(char dataString[]){
	int counter = 0;
	for(int i=0;i<MAX_WORDS_SIZE;i++){
		if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
     672:	fc 01       	movw	r30, r24
     674:	20 81       	ld	r18, Z
     676:	21 11       	cpse	r18, r1
     678:	18 c0       	rjmp	.+48     	; 0x6aa <getBufferSizeUseCRLF+0x38>
        }
    }
}

int getBufferSizeUseCRLF(char dataString[]){
	int counter = 0;
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	12 c0       	rjmp	.+36     	; 0x6a4 <getBufferSizeUseCRLF+0x32>
	for(int i=0;i<MAX_WORDS_SIZE;i++){
		if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
     680:	91 91       	ld	r25, Z+
     682:	99 23       	and	r25, r25
     684:	79 f0       	breq	.+30     	; 0x6a4 <getBufferSizeUseCRLF+0x32>
     686:	9a 30       	cpi	r25, 0x0A	; 10
     688:	69 f0       	breq	.+26     	; 0x6a4 <getBufferSizeUseCRLF+0x32>
     68a:	9d 30       	cpi	r25, 0x0D	; 13
     68c:	59 f0       	breq	.+22     	; 0x6a4 <getBufferSizeUseCRLF+0x32>
			counter++;
     68e:	2f 5f       	subi	r18, 0xFF	; 255
     690:	3f 4f       	sbci	r19, 0xFF	; 255
    }
}

int getBufferSizeUseCRLF(char dataString[]){
	int counter = 0;
	for(int i=0;i<MAX_WORDS_SIZE;i++){
     692:	20 32       	cpi	r18, 0x20	; 32
     694:	31 05       	cpc	r19, r1
     696:	a1 f7       	brne	.-24     	; 0x680 <getBufferSizeUseCRLF+0xe>
     698:	11 c0       	rjmp	.+34     	; 0x6bc <getBufferSizeUseCRLF+0x4a>
        }
    }
}

int getBufferSizeUseCRLF(char dataString[]){
	int counter = 0;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <getBufferSizeUseCRLF+0x32>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;i<MAX_WORDS_SIZE;i++){
		if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
			counter++;
		}
		else{
			return counter;
     6a4:	82 2f       	mov	r24, r18
     6a6:	93 2f       	mov	r25, r19
     6a8:	08 95       	ret
}

int getBufferSizeUseCRLF(char dataString[]){
	int counter = 0;
	for(int i=0;i<MAX_WORDS_SIZE;i++){
		if((dataString[i] != '\0') && (dataString[i]!=10) && (dataString[i]!=13)){
     6aa:	2a 30       	cpi	r18, 0x0A	; 10
     6ac:	b1 f3       	breq	.-20     	; 0x69a <getBufferSizeUseCRLF+0x28>
     6ae:	2d 30       	cpi	r18, 0x0D	; 13
     6b0:	b9 f3       	breq	.-18     	; 0x6a0 <getBufferSizeUseCRLF+0x2e>
     6b2:	fc 01       	movw	r30, r24
     6b4:	31 96       	adiw	r30, 0x01	; 1
			counter++;
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	e2 cf       	rjmp	.-60     	; 0x680 <getBufferSizeUseCRLF+0xe>
		}
		else{
			return counter;
		}
	}
}
     6bc:	08 95       	ret

000006be <ascii2num>:


int ascii2num(char asciiNum){
	switch(asciiNum){
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	fc 01       	movw	r30, r24
     6c2:	f1 97       	sbiw	r30, 0x31	; 49
     6c4:	e9 30       	cpi	r30, 0x09	; 9
     6c6:	f1 05       	cpc	r31, r1
     6c8:	f8 f4       	brcc	.+62     	; 0x708 <ascii2num+0x4a>
     6ca:	ea 5b       	subi	r30, 0xBA	; 186
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	0c 94 fe 31 	jmp	0x63fc	; 0x63fc <__tablejump2__>
		case '0':
		return 0;
		break;
		case '1':
		return 1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	08 95       	ret
		break;
		case '2':
		return 2;
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	08 95       	ret
		break;
		case '3':
		return 3;
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	08 95       	ret
		break;
		case '4':
		return 4;
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	08 95       	ret
		break;
		case '5':
		return 5;
     6ea:	85 e0       	ldi	r24, 0x05	; 5
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	08 95       	ret
		break;
		case '6':
		return 6;
     6f0:	86 e0       	ldi	r24, 0x06	; 6
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	08 95       	ret
		break;
		case '7':
		return 7;
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	08 95       	ret
		break;
		case '8':
		return 8;
     6fc:	88 e0       	ldi	r24, 0x08	; 8
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret
		break;
		case '9':
		return 9;
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	08 95       	ret


int ascii2num(char asciiNum){
	switch(asciiNum){
		case '0':
		return 0;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		return 0;
		break;
	}
}
     70c:	08 95       	ret

0000070e <ASA_SDC00_Select>:
}

/**** Functions ****/
void ASA_SDC00_Select(char ASA_ID)
{
	PORTB |= 0b00000101;	// Configure MOSI/SCK/CS as output
     70e:	98 b3       	in	r25, 0x18	; 24
     710:	95 60       	ori	r25, 0x05	; 5
     712:	98 bb       	out	0x18, r25	; 24
	DDRB  |= 0b00000111;
     714:	97 b3       	in	r25, 0x17	; 23
     716:	97 60       	ori	r25, 0x07	; 7
     718:	97 bb       	out	0x17, r25	; 23
	SPCR = 0x52;			// Enable SPI function in mode 0
     71a:	92 e5       	ldi	r25, 0x52	; 82
     71c:	9d b9       	out	0x0d, r25	; 13
	SPSR = 0x01;			// SPI 2x mode
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9e b9       	out	0x0e, r25	; 14
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     722:	97 b3       	in	r25, 0x17	; 23
     724:	90 6e       	ori	r25, 0xE0	; 224
     726:	97 bb       	out	0x17, r25	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
     728:	88 30       	cpi	r24, 0x08	; 8
     72a:	48 f4       	brcc	.+18     	; 0x73e <ASA_SDC00_Select+0x30>
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     72c:	28 b3       	in	r18, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
     72e:	30 e2       	ldi	r19, 0x20	; 32
     730:	83 9f       	mul	r24, r19
     732:	c0 01       	movw	r24, r0
     734:	11 24       	eor	r1, r1
     736:	92 2f       	mov	r25, r18
     738:	9f 71       	andi	r25, 0x1F	; 31
     73a:	89 2b       	or	r24, r25
		ADDR_PORT  = ASA_ID_temp;
     73c:	88 bb       	out	0x18, r24	; 24
     73e:	08 95       	ret

00000740 <ASA_SDC00_Deselect>:
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     740:	87 b3       	in	r24, 0x17	; 23
     742:	80 6e       	ori	r24, 0xE0	; 224
     744:	87 bb       	out	0x17, r24	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     746:	88 b3       	in	r24, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
     748:	8f 71       	andi	r24, 0x1F	; 31
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
		ADDR_PORT  = ASA_ID_temp;
     74a:	88 bb       	out	0x18, r24	; 24
	ASA_ID_set(ASA_ID);
}
void ASA_SDC00_Deselect(void)
{
	ASA_ID_set(0);
	SPCR = 0;				// Disable SPI function
     74c:	1d b8       	out	0x0d, r1	; 13
	DDRB  &= ~0b00000111;	// Set MOSI/SCK/CS as hi-z
     74e:	87 b3       	in	r24, 0x17	; 23
     750:	88 7f       	andi	r24, 0xF8	; 248
     752:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~0b00000111;
     754:	88 b3       	in	r24, 0x18	; 24
     756:	88 7f       	andi	r24, 0xF8	; 248
     758:	88 bb       	out	0x18, r24	; 24
	PORTB |=  0b00000000;
     75a:	88 b3       	in	r24, 0x18	; 24
     75c:	88 bb       	out	0x18, r24	; 24
     75e:	08 95       	ret

00000760 <ASA_SDC00_Init>:
}

char ASA_SDC00_Init(char ASA_ID)
{
     760:	cf 93       	push	r28
     762:	c8 2f       	mov	r28, r24
	////		res = 2;
	////return ARRTC_INVALID_ERR;
	//}


	ASA_SDC00_Select(0);
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	d3 df       	rcall	.-90     	; 0x70e <ASA_SDC00_Select>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     768:	87 ea       	ldi	r24, 0xA7	; 167
     76a:	91 e6       	ldi	r25, 0x61	; 97
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <ASA_SDC00_Init+0xc>
     770:	00 c0       	rjmp	.+0      	; 0x772 <ASA_SDC00_Init+0x12>
     772:	00 00       	nop
	return 1;
}

inline char ASA_ID_set(unsigned char ASA_ID)
{
    DDRB |= 0b11100000;
     774:	87 b3       	in	r24, 0x17	; 23
     776:	80 6e       	ori	r24, 0xE0	; 224
     778:	87 bb       	out	0x17, r24	; 23
	if(ASA_ID>=0 && ASA_ID<=7)
     77a:	c8 30       	cpi	r28, 0x08	; 8
     77c:	40 f4       	brcc	.+16     	; 0x78e <ASA_SDC00_Init+0x2e>
	{
		unsigned char ASA_ID_temp;

		ASA_ID_temp = ADDR_PORT;
     77e:	28 b3       	in	r18, 0x18	; 24
		ASA_ID_temp &= ~(0x07 << ADDR0);
		ASA_ID_temp |= ((ASA_ID & 0x07) << ADDR0);
     780:	30 e2       	ldi	r19, 0x20	; 32
     782:	c3 9f       	mul	r28, r19
     784:	c0 01       	movw	r24, r0
     786:	11 24       	eor	r1, r1
     788:	2f 71       	andi	r18, 0x1F	; 31
     78a:	82 2b       	or	r24, r18
		ADDR_PORT  = ASA_ID_temp;
     78c:	88 bb       	out	0x18, r24	; 24
#ifdef _DEBUG_INFO
	printf("Set ASA ID :%d \n", ASA_ID);
#endif
	ASA_ID_set(ASA_ID);

	if( f_mount(&FatFs[0], "", 1) != FR_OK )			// SD card mount a volume
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	6b e9       	ldi	r22, 0x9B	; 155
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	82 ed       	ldi	r24, 0xD2	; 210
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	0e 94 49 15 	call	0x2a92	; 0x2a92 <f_mount>
     79c:	81 11       	cpse	r24, r1
     79e:	28 c0       	rjmp	.+80     	; 0x7f0 <ASA_SDC00_Init+0x90>
	else {
		printf("Mount ID<%d> successful\n", ASA_ID);
	}
#endif

	if( f_chdir(ASA_DATA_Dir) != FR_OK )			// Trying goto ASA default directory
     7a0:	84 e1       	ldi	r24, 0x14	; 20
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <f_chdir>
     7a8:	88 23       	and	r24, r24
     7aa:	81 f0       	breq	.+32     	; 0x7cc <ASA_SDC00_Init+0x6c>
	{
		f_mkdir(ASA_DATA_Dir);						// If ASA Default directory don't exist, then create one
     7ac:	84 e1       	ldi	r24, 0x14	; 20
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <f_mkdir>
		if( f_chdir(ASA_DATA_Dir) != FR_OK ) {		// Goto ASA Default directory again
     7b4:	84 e1       	ldi	r24, 0x14	; 20
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <f_chdir>
     7bc:	81 11       	cpse	r24, r1
     7be:	14 c0       	rjmp	.+40     	; 0x7e8 <ASA_SDC00_Init+0x88>
			res += 1;
		}
		else {
			ASA_SDC00_ID = ASA_ID;
     7c0:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <ASA_SDC00_ID>
			ASA_DATA_Dir[0] = '\0';					// While successful goto default dir, reset ASA_DATA_Dir
     7c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ASA_DATA_Dir>

	ASA_SDC00_Select(0);

	_delay_ms(100);

	res = 0;
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	0f c0       	rjmp	.+30     	; 0x7ea <ASA_SDC00_Init+0x8a>
			ASA_DATA_Dir[0] = '\0';					// While successful goto default dir, reset ASA_DATA_Dir
		}
	}
	else
	{
		f_chdir("\\");
     7cc:	8c e9       	ldi	r24, 0x9C	; 156
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <f_chdir>
		f_chdir(ASA_DATA_Dir);
     7d4:	84 e1       	ldi	r24, 0x14	; 20
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <f_chdir>
		ASA_SDC00_ID = ASA_ID;
     7dc:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <ASA_SDC00_ID>
		ASA_DATA_Dir[0] = '\0';						// go to target folder and set default path to root
     7e0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ASA_DATA_Dir>

	ASA_SDC00_Select(0);

	_delay_ms(100);

	res = 0;
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <ASA_SDC00_Init+0x8a>
		f_chdir(ASA_DATA_Dir);
		ASA_SDC00_ID = ASA_ID;
		ASA_DATA_Dir[0] = '\0';						// go to target folder and set default path to root
	}

	ASA_SDC00_Deselect();
     7e8:	c1 e0       	ldi	r28, 0x01	; 1
     7ea:	aa df       	rcall	.-172    	; 0x740 <ASA_SDC00_Deselect>
#ifdef _DEBUG_INFO
	printf("<SDC00_Init> Initialize with result : %d \n", res);
#endif
	return res;
     7ec:	8c 2f       	mov	r24, r28
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <ASA_SDC00_Init+0x92>
	{
#ifdef _DEBUG_INFO
		printf("Mount ID<%d> Failed\n", ASA_ID);
#endif
		res = 1;
		return res;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
	ASA_SDC00_Deselect();
#ifdef _DEBUG_INFO
	printf("<SDC00_Init> Initialize with result : %d \n", res);
#endif
	return res;
}
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <ASA_SDC00_set>:

char ASA_SDC00_set(char ASA_ID, char LSByte, char Mask, char shift, char Data)
{
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	c8 2f       	mov	r28, r24
     802:	16 2f       	mov	r17, r22
     804:	f4 2e       	mov	r15, r20
     806:	d2 2f       	mov	r29, r18
	char set_Data = 0;
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
     808:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <SDC_Init_Success_Flag>
     80c:	81 11       	cpse	r24, r1
     80e:	07 c0       	rjmp	.+14     	; 0x81e <ASA_SDC00_set+0x28>
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
     810:	8c 2f       	mov	r24, r28
     812:	a6 df       	rcall	.-180    	; 0x760 <ASA_SDC00_Init>
     814:	81 11       	cpse	r24, r1
     816:	77 c0       	rjmp	.+238    	; 0x906 <ASA_SDC00_set+0x110>
		SDC_Init_Success_Flag = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <SDC_Init_Success_Flag>
		else
		return ARSDC_SDC_STATE_ERR;
	}
	if( ASA_SDC00_ID != ASA_ID )	// Not a valid ASA_ID
     81e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ASA_SDC00_ID>
     822:	c8 13       	cpse	r28, r24
     824:	72 c0       	rjmp	.+228    	; 0x90a <ASA_SDC00_set+0x114>
	return ARSDC_ID_ERR;
	if( shift > 7 || shift < 0 )	// Not a valid shift value ( 0 <= shift <= 7 )
     826:	d8 30       	cpi	r29, 0x08	; 8
     828:	08 f0       	brcs	.+2      	; 0x82c <ASA_SDC00_set+0x36>
     82a:	71 c0       	rjmp	.+226    	; 0x90e <ASA_SDC00_set+0x118>
	return ARSDC_SHIFT_ERR;
	set_Data = (set_Data & (~Mask)) | ((Data<<shift) & Mask);
	ASA_SDC00_Select(ASA_ID);
     82c:	8c 2f       	mov	r24, r28
     82e:	6f df       	rcall	.-290    	; 0x70e <ASA_SDC00_Select>
	switch(LSByte)
     830:	18 3c       	cpi	r17, 0xC8	; 200
     832:	09 f0       	breq	.+2      	; 0x836 <ASA_SDC00_set+0x40>
     834:	6e c0       	rjmp	.+220    	; 0x912 <ASA_SDC00_set+0x11c>
	{
		case LSBYTE_MODE:
		switch(set_Data)
     836:	40 2f       	mov	r20, r16
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <ASA_SDC00_set+0x4a>
     83c:	44 0f       	add	r20, r20
     83e:	55 1f       	adc	r21, r21
     840:	da 95       	dec	r29
     842:	e2 f7       	brpl	.-8      	; 0x83c <ASA_SDC00_set+0x46>
     844:	4f 21       	and	r20, r15
     846:	41 30       	cpi	r20, 0x01	; 1
     848:	91 f0       	breq	.+36     	; 0x86e <ASA_SDC00_set+0x78>
     84a:	1c f4       	brge	.+6      	; 0x852 <ASA_SDC00_set+0x5c>
     84c:	44 23       	and	r20, r20
     84e:	31 f0       	breq	.+12     	; 0x85c <ASA_SDC00_set+0x66>
     850:	62 c0       	rjmp	.+196    	; 0x916 <ASA_SDC00_set+0x120>
     852:	45 30       	cpi	r20, 0x05	; 5
     854:	e9 f0       	breq	.+58     	; 0x890 <ASA_SDC00_set+0x9a>
     856:	47 30       	cpi	r20, 0x07	; 7
     858:	a9 f1       	breq	.+106    	; 0x8c4 <ASA_SDC00_set+0xce>
     85a:	5d c0       	rjmp	.+186    	; 0x916 <ASA_SDC00_set+0x120>
		{
			case SDC_FCF_CLOSE:			// Close file
				f_close(&FileObj);
     85c:	88 e3       	ldi	r24, 0x38	; 56
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	0e 94 c5 1a 	call	0x358a	; 0x358a <f_close>
				SDC_State = 0;
     864:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <SDC_State>
				is_file_extcheck = 0;
     868:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <is_file_extcheck>
				break;
     86c:	49 c0       	rjmp	.+146    	; 0x900 <ASA_SDC00_set+0x10a>

			case SDC_FCF_READ:			// Open File (Read only)
				// Check there is a Closed file state
				if(SDC_State != 0) {
     86e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     872:	81 11       	cpse	r24, r1
     874:	52 c0       	rjmp	.+164    	; 0x91a <ASA_SDC00_set+0x124>
#endif
					return ARSDC_OPEN_FILE_ERR;
				}

				// TODO: need to make sure there is "FileName already setup"
				if( f_open(&FileObj, FileName, FA_READ) != FR_OK )
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	62 e8       	ldi	r22, 0x82	; 130
     87a:	77 e0       	ldi	r23, 0x07	; 7
     87c:	88 e3       	ldi	r24, 0x38	; 56
     87e:	97 e0       	ldi	r25, 0x07	; 7
     880:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <f_open>
     884:	81 11       	cpse	r24, r1
     886:	4b c0       	rjmp	.+150    	; 0x91e <ASA_SDC00_set+0x128>
					return ARSDC_OPEN_FILE_ERR;
				SDC_State = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SDC_State>
				break;
     88e:	38 c0       	rjmp	.+112    	; 0x900 <ASA_SDC00_set+0x10a>

			case SDC_FCF_OVERWRITE:		// if there is [Open file with override] mode
				// Check there is a Closed file state
				if(SDC_State != 0) {
     890:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     894:	81 11       	cpse	r24, r1
     896:	45 c0       	rjmp	.+138    	; 0x922 <ASA_SDC00_set+0x12c>
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
				}
				if( f_open(&FileObj, FileName, FA_CREATE_ALWAYS) != FR_OK )	// force create new file to override
     898:	48 e0       	ldi	r20, 0x08	; 8
     89a:	62 e8       	ldi	r22, 0x82	; 130
     89c:	77 e0       	ldi	r23, 0x07	; 7
     89e:	88 e3       	ldi	r24, 0x38	; 56
     8a0:	97 e0       	ldi	r25, 0x07	; 7
     8a2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <f_open>
     8a6:	81 11       	cpse	r24, r1
     8a8:	3e c0       	rjmp	.+124    	; 0x926 <ASA_SDC00_set+0x130>
					return ARSDC_SDC_STATE_ERR;
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
     8aa:	42 e0       	ldi	r20, 0x02	; 2
     8ac:	62 e8       	ldi	r22, 0x82	; 130
     8ae:	77 e0       	ldi	r23, 0x07	; 7
     8b0:	88 e3       	ldi	r24, 0x38	; 56
     8b2:	97 e0       	ldi	r25, 0x07	; 7
     8b4:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <f_open>
     8b8:	81 11       	cpse	r24, r1
     8ba:	37 c0       	rjmp	.+110    	; 0x92a <ASA_SDC00_set+0x134>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SDC_State>
				break;
     8c2:	1e c0       	rjmp	.+60     	; 0x900 <ASA_SDC00_set+0x10a>
			case SDC_FCF_CONTINUEWRITE:	// if there is [Open file with append] mode
				// Check there is a Closed file state
				if(SDC_State != 0) {
     8c4:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     8c8:	81 11       	cpse	r24, r1
     8ca:	31 c0       	rjmp	.+98     	; 0x92e <ASA_SDC00_set+0x138>
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
				}
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
     8cc:	42 e0       	ldi	r20, 0x02	; 2
     8ce:	62 e8       	ldi	r22, 0x82	; 130
     8d0:	77 e0       	ldi	r23, 0x07	; 7
     8d2:	88 e3       	ldi	r24, 0x38	; 56
     8d4:	97 e0       	ldi	r25, 0x07	; 7
     8d6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <f_open>
     8da:	81 11       	cpse	r24, r1
     8dc:	2a c0       	rjmp	.+84     	; 0x932 <ASA_SDC00_set+0x13c>
					return ARSDC_SDC_STATE_ERR;
				if( f_lseek(&FileObj, f_size(&FileObj)) != FR_OK )			// set data cursor to EOF to append data
     8de:	40 91 42 07 	lds	r20, 0x0742	; 0x800742 <FileObj+0xa>
     8e2:	50 91 43 07 	lds	r21, 0x0743	; 0x800743 <FileObj+0xb>
     8e6:	60 91 44 07 	lds	r22, 0x0744	; 0x800744 <FileObj+0xc>
     8ea:	70 91 45 07 	lds	r23, 0x0745	; 0x800745 <FileObj+0xd>
     8ee:	88 e3       	ldi	r24, 0x38	; 56
     8f0:	97 e0       	ldi	r25, 0x07	; 7
     8f2:	0e 94 37 1b 	call	0x366e	; 0x366e <f_lseek>
     8f6:	81 11       	cpse	r24, r1
     8f8:	1e c0       	rjmp	.+60     	; 0x936 <ASA_SDC00_set+0x140>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SDC_State>
		return ARSDC_LSBYTE_ERR;
		break;

	}

	ASA_SDC00_Deselect();
     900:	1f df       	rcall	.-450    	; 0x740 <ASA_SDC00_Deselect>

	return ARSDC_OK;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	19 c0       	rjmp	.+50     	; 0x938 <ASA_SDC00_set+0x142>
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
		SDC_Init_Success_Flag = 1;
		else
		return ARSDC_SDC_STATE_ERR;
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	17 c0       	rjmp	.+46     	; 0x938 <ASA_SDC00_set+0x142>
	}
	if( ASA_SDC00_ID != ASA_ID )	// Not a valid ASA_ID
	return ARSDC_ID_ERR;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	15 c0       	rjmp	.+42     	; 0x938 <ASA_SDC00_set+0x142>
	if( shift > 7 || shift < 0 )	// Not a valid shift value ( 0 <= shift <= 7 )
	return ARSDC_SHIFT_ERR;
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	13 c0       	rjmp	.+38     	; 0x938 <ASA_SDC00_set+0x142>
			default:	// Multiple command, command error
				return ARSDC_MUTI_SET_ERR;
		}
		break;
		default:	// LSByte error, not list on the register table
		return ARSDC_LSBYTE_ERR;
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	11 c0       	rjmp	.+34     	; 0x938 <ASA_SDC00_set+0x142>
					return ARSDC_SDC_STATE_ERR;
				SDC_State = 2;
				break;

			default:	// Multiple command, command error
				return ARSDC_MUTI_SET_ERR;
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	0f c0       	rjmp	.+30     	; 0x938 <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	0d c0       	rjmp	.+26     	; 0x938 <ASA_SDC00_set+0x142>
				}

				// TODO: need to make sure there is "FileName already setup"
				if( f_open(&FileObj, FileName, FA_READ) != FR_OK )
					return ARSDC_OPEN_FILE_ERR;
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	0b c0       	rjmp	.+22     	; 0x938 <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	09 c0       	rjmp	.+18     	; 0x938 <ASA_SDC00_set+0x142>
				}
				if( f_open(&FileObj, FileName, FA_CREATE_ALWAYS) != FR_OK )	// force create new file to override
					return ARSDC_SDC_STATE_ERR;
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	07 c0       	rjmp	.+14     	; 0x938 <ASA_SDC00_set+0x142>
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
					return ARSDC_SDC_STATE_ERR;
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	05 c0       	rjmp	.+10     	; 0x938 <ASA_SDC00_set+0x142>
				// Check there is a Closed file state
				if(SDC_State != 0) {
#ifdef _DEBUG_INFO
					printf("<SDC00_Set> Need to close file first, State <%d> \n", SDC_State);
#endif
					return ARSDC_OPEN_FILE_ERR;
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	03 c0       	rjmp	.+6      	; 0x938 <ASA_SDC00_set+0x142>
				}
				if( f_open(&FileObj, FileName, FA_WRITE) != FR_OK )			// open file and set WRITE mode
					return ARSDC_SDC_STATE_ERR;
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	01 c0       	rjmp	.+2      	; 0x938 <ASA_SDC00_set+0x142>
				if( f_lseek(&FileObj, f_size(&FileObj)) != FR_OK )			// set data cursor to EOF to append data
					return ARSDC_SDC_STATE_ERR;
     936:	87 e0       	ldi	r24, 0x07	; 7
	}

	ASA_SDC00_Deselect();

	return ARSDC_OK;
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	08 95       	ret

00000944 <ASA_SDC00_put>:

char ASA_SDC00_put(char ASA_ID, char LSByte, char Bytes, void *Data_p)
{
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	00 d0       	rcall	.+0      	; 0x954 <ASA_SDC00_put+0x10>
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	f8 2e       	mov	r15, r24
     95a:	16 2f       	mov	r17, r22
     95c:	04 2f       	mov	r16, r20
     95e:	69 01       	movw	r12, r18
	FRESULT res;
	unsigned int WriteBytes;

	if( LSByte == 200 )					// set File control flag register
     960:	68 3c       	cpi	r22, 0xC8	; 200
     962:	39 f4       	brne	.+14     	; 0x972 <ASA_SDC00_put+0x2e>
		return ASA_SDC00_set(ASA_ID, LSByte, 0xFF, 0x00, (char)((char*)Data_p)[0]);
     964:	f9 01       	movw	r30, r18
     966:	00 81       	ld	r16, Z
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	4f ef       	ldi	r20, 0xFF	; 255
     96c:	68 ec       	ldi	r22, 0xC8	; 200
     96e:	43 df       	rcall	.-378    	; 0x7f6 <ASA_SDC00_set>
     970:	f7 c0       	rjmp	.+494    	; 0xb60 <ASA_SDC00_put+0x21c>

	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
     972:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <SDC_Init_Success_Flag>
     976:	81 11       	cpse	r24, r1
     978:	07 c0       	rjmp	.+14     	; 0x988 <ASA_SDC00_put+0x44>
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
     97a:	8f 2d       	mov	r24, r15
     97c:	f1 de       	rcall	.-542    	; 0x760 <ASA_SDC00_Init>
     97e:	81 11       	cpse	r24, r1
     980:	bf c0       	rjmp	.+382    	; 0xb00 <ASA_SDC00_put+0x1bc>
		SDC_Init_Success_Flag = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <SDC_Init_Success_Flag>
		else
		return ARSDC_SDC_STATE_ERR;
	}
	if( ASA_SDC00_ID != ASA_ID )
     988:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ASA_SDC00_ID>
     98c:	f8 12       	cpse	r15, r24
     98e:	ba c0       	rjmp	.+372    	; 0xb04 <ASA_SDC00_put+0x1c0>
		return ARSDC_ID_ERR;
	if( LSByte == 0 )
     990:	11 11       	cpse	r17, r1
     992:	03 c0       	rjmp	.+6      	; 0x99a <ASA_SDC00_put+0x56>
		if( Bytes > 64 || Bytes < 0 )
     994:	01 34       	cpi	r16, 0x41	; 65
     996:	08 f0       	brcs	.+2      	; 0x99a <ASA_SDC00_put+0x56>
			return ARSDC_BYTES_ERR;

	ASA_SDC00_Select(ASA_ID);
     998:	b7 c0       	rjmp	.+366    	; 0xb08 <ASA_SDC00_put+0x1c4>
     99a:	8f 2d       	mov	r24, r15
     99c:	b8 de       	rcall	.-656    	; 0x70e <ASA_SDC00_Select>
	static char name_buffer[8];
	static char name_ext_buffer[3];
#ifdef _DEBUG_INFO
	printf("<State> SDC status: %d\n", SDC_State);
#endif
	switch(SDC_State)
     99e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <ASA_SDC00_put+0x64>
     9a6:	b2 c0       	rjmp	.+356    	; 0xb0c <ASA_SDC00_put+0x1c8>
     9a8:	20 f0       	brcs	.+8      	; 0x9b2 <ASA_SDC00_put+0x6e>
     9aa:	82 30       	cpi	r24, 0x02	; 2
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <ASA_SDC00_put+0x6c>
     9ae:	50 c0       	rjmp	.+160    	; 0xa50 <ASA_SDC00_put+0x10c>
     9b0:	5e c0       	rjmp	.+188    	; 0xa6e <ASA_SDC00_put+0x12a>
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
     9b2:	10 34       	cpi	r17, 0x40	; 64
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <ASA_SDC00_put+0x8c>
     9b6:	18 34       	cpi	r17, 0x48	; 72
     9b8:	09 f0       	breq	.+2      	; 0x9bc <ASA_SDC00_put+0x78>
     9ba:	aa c0       	rjmp	.+340    	; 0xb10 <ASA_SDC00_put+0x1cc>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     9bc:	f6 01       	movw	r30, r12
     9be:	20 81       	ld	r18, Z
     9c0:	22 23       	and	r18, r18
     9c2:	b1 f1       	breq	.+108    	; 0xa30 <ASA_SDC00_put+0xec>
     9c4:	80 2f       	mov	r24, r16
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	09 f0       	breq	.+2      	; 0x9ce <ASA_SDC00_put+0x8a>
     9cc:	b8 c0       	rjmp	.+368    	; 0xb3e <ASA_SDC00_put+0x1fa>
     9ce:	33 c0       	rjmp	.+102    	; 0xa36 <ASA_SDC00_put+0xf2>
				for(int i=0; i<SZ_NAME_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Namebuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte 7
					if(((char*)Data_p)[i] == '\0' || i ==(SZ_NAME_BUF-1) || i== Bytes) {
     9d0:	f6 01       	movw	r30, r12
     9d2:	20 81       	ld	r18, Z
     9d4:	22 23       	and	r18, r18
     9d6:	81 f0       	breq	.+32     	; 0x9f8 <ASA_SDC00_put+0xb4>
     9d8:	80 2f       	mov	r24, r16
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	09 f0       	breq	.+2      	; 0x9e2 <ASA_SDC00_put+0x9e>
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <ASA_SDC00_put+0x1e8>
     9e2:	0d c0       	rjmp	.+26     	; 0x9fe <ASA_SDC00_put+0xba>
     9e4:	41 91       	ld	r20, Z+
     9e6:	44 23       	and	r20, r20
     9e8:	61 f0       	breq	.+24     	; 0xa02 <ASA_SDC00_put+0xbe>
     9ea:	27 30       	cpi	r18, 0x07	; 7
     9ec:	31 05       	cpc	r19, r1
     9ee:	49 f0       	breq	.+18     	; 0xa02 <ASA_SDC00_put+0xbe>
     9f0:	82 17       	cp	r24, r18
     9f2:	93 07       	cpc	r25, r19
     9f4:	59 f4       	brne	.+22     	; 0xa0c <ASA_SDC00_put+0xc8>
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <ASA_SDC00_put+0xbe>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <ASA_SDC00_put+0xbe>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
						name_buffer[i] = '\0';
     a02:	f9 01       	movw	r30, r18
     a04:	eb 54       	subi	r30, 0x4B	; 75
     a06:	fd 4f       	sbci	r31, 0xFD	; 253
     a08:	10 82       	st	Z, r1
						break;
     a0a:	88 c0       	rjmp	.+272    	; 0xb1c <ASA_SDC00_put+0x1d8>
					}
					name_buffer[i] = ((char*)Data_p)[i];
     a0c:	4d 93       	st	X+, r20
	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
			case LSBYTE_NAME_BUF:
				for(int i=0; i<SZ_NAME_BUF; i++) {
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	28 30       	cpi	r18, 0x08	; 8
     a14:	31 05       	cpc	r19, r1
     a16:	31 f7       	brne	.-52     	; 0x9e4 <ASA_SDC00_put+0xa0>
     a18:	81 c0       	rjmp	.+258    	; 0xb1c <ASA_SDC00_put+0x1d8>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	10 c0       	rjmp	.+32     	; 0xa40 <ASA_SDC00_put+0xfc>
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0d c0       	rjmp	.+26     	; 0xa40 <ASA_SDC00_put+0xfc>
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     a26:	02 97       	sbiw	r24, 0x02	; 2
     a28:	81 f4       	brne	.+32     	; 0xa4a <ASA_SDC00_put+0x106>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <ASA_SDC00_put+0xfc>
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	05 c0       	rjmp	.+10     	; 0xa40 <ASA_SDC00_put+0xfc>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <ASA_SDC00_put+0xfc>
				}
				break;

			// Note: End of name_ext string is reach '\0' or Byte 2
			case LSBYTE_NAME_EXT_BUF:
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
						name_ext_buffer[i] = '\0';
     a40:	fc 01       	movw	r30, r24
     a42:	ee 54       	subi	r30, 0x4E	; 78
     a44:	fd 4f       	sbci	r31, 0xFD	; 253
     a46:	10 82       	st	Z, r1
						break;
     a48:	69 c0       	rjmp	.+210    	; 0xb1c <ASA_SDC00_put+0x1d8>
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     a4a:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <name_ext_buffer.2193+0x2>
     a4e:	66 c0       	rjmp	.+204    	; 0xb1c <ASA_SDC00_put+0x1d8>
			break;
		case 1:	// If current is at Opened file mode (Read Only)
			return ARSDC_READ_SETTING;
			break;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			if( LSByte == 0 ) {
     a50:	11 11       	cpse	r17, r1
     a52:	86 c0       	rjmp	.+268    	; 0xb60 <ASA_SDC00_put+0x21c>
					if((i+1)%8 == 0) {
						printf("\n");
					}
				}
#endif
				res = f_write(&FileObj, Data_p, Bytes, &WriteBytes);
     a54:	40 2f       	mov	r20, r16
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	9e 01       	movw	r18, r28
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	b6 01       	movw	r22, r12
     a60:	88 e3       	ldi	r24, 0x38	; 56
     a62:	97 e0       	ldi	r25, 0x07	; 7
     a64:	0e 94 a2 18 	call	0x3144	; 0x3144 <f_write>
				if( res ) {
     a68:	81 11       	cpse	r24, r1
     a6a:	54 c0       	rjmp	.+168    	; 0xb14 <ASA_SDC00_put+0x1d0>
			else
				return ARSDC_LSBYTE_ERR;
			break;
	}

	ASA_SDC00_Deselect();
     a6c:	57 c0       	rjmp	.+174    	; 0xb1c <ASA_SDC00_put+0x1d8>
     a6e:	68 de       	rcall	.-816    	; 0x740 <ASA_SDC00_Deselect>

	// While in closed file mode, then update full filename
	if(SDC_State == 0) {
     a70:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     a74:	81 11       	cpse	r24, r1
     a76:	50 c0       	rjmp	.+160    	; 0xb18 <ASA_SDC00_put+0x1d4>
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
			if(name_buffer[i] == '\0') {
     a78:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <name_buffer.2192>
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <ASA_SDC00_put+0x13e>
     a80:	6f c0       	rjmp	.+222    	; 0xb60 <ASA_SDC00_put+0x21c>
     a82:	e6 eb       	ldi	r30, 0xB6	; 182
     a84:	f2 e0       	ldi	r31, 0x02	; 2
	printf("name_buffer = %s\n", name_buffer);
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	30 e0       	ldi	r19, 0x00	; 0
			if(name_buffer[i] == '\0') {
     a8a:	81 91       	ld	r24, Z+
     a8c:	81 11       	cpse	r24, r1
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <ASA_SDC00_put+0x154>
				sz_name_buffer = i;
     a90:	42 2f       	mov	r20, r18
				break;
			}
		}

		if(sz_name_buffer > 0) {
     a92:	12 16       	cp	r1, r18
     a94:	44 f0       	brlt	.+16     	; 0xaa6 <ASA_SDC00_put+0x162>
     a96:	64 c0       	rjmp	.+200    	; 0xb60 <ASA_SDC00_put+0x21c>
	printf("name_buffer = %s\n", name_buffer);
	printf("name_ext_buf = %s\n", name_ext_buffer);
#endif
		// Check name_buffer actual size
		int8_t sz_name_buffer = -1;
		for(int i=0; i<8; i++) {
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	28 30       	cpi	r18, 0x08	; 8
     a9e:	31 05       	cpc	r19, r1
     aa0:	a1 f7       	brne	.-24     	; 0xa8a <ASA_SDC00_put+0x146>
#endif
		}

	}

	return 0;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	5d c0       	rjmp	.+186    	; 0xb60 <ASA_SDC00_put+0x21c>
				break;
			}
		}

		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
     aa6:	02 2e       	mov	r0, r18
     aa8:	00 0c       	add	r0, r0
     aaa:	33 0b       	sbc	r19, r19
     aac:	12 16       	cp	r1, r18
     aae:	13 06       	cpc	r1, r19
     ab0:	7c f4       	brge	.+30     	; 0xad0 <ASA_SDC00_put+0x18c>
     ab2:	e5 eb       	ldi	r30, 0xB5	; 181
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	a2 e8       	ldi	r26, 0x82	; 130
     ab8:	b7 e0       	ldi	r27, 0x07	; 7
     aba:	64 2f       	mov	r22, r20
     abc:	04 2e       	mov	r0, r20
     abe:	00 0c       	add	r0, r0
     ac0:	77 0b       	sbc	r23, r23
     ac2:	6b 54       	subi	r22, 0x4B	; 75
     ac4:	7d 4f       	sbci	r23, 0xFD	; 253
				FileName[i] = name_buffer[i];
     ac6:	91 91       	ld	r25, Z+
     ac8:	9d 93       	st	X+, r25
				break;
			}
		}

		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
     aca:	6e 17       	cp	r22, r30
     acc:	7f 07       	cpc	r23, r31
     ace:	d9 f7       	brne	.-10     	; 0xac6 <ASA_SDC00_put+0x182>
				FileName[i] = name_buffer[i];
			}
			FileName[sz_name_buffer] = '.';
     ad0:	9e e2       	ldi	r25, 0x2E	; 46
     ad2:	f9 01       	movw	r30, r18
     ad4:	ee 57       	subi	r30, 0x7E	; 126
     ad6:	f8 4f       	sbci	r31, 0xF8	; 248
     ad8:	90 83       	st	Z, r25
     ada:	a2 eb       	ldi	r26, 0xB2	; 178
     adc:	b2 e0       	ldi	r27, 0x02	; 2
     ade:	e4 2f       	mov	r30, r20
     ae0:	44 0f       	add	r20, r20
     ae2:	ff 0b       	sbc	r31, r31
     ae4:	ed 57       	subi	r30, 0x7D	; 125
     ae6:	f8 4f       	sbci	r31, 0xF8	; 248
     ae8:	45 eb       	ldi	r20, 0xB5	; 181
     aea:	52 e0       	ldi	r21, 0x02	; 2
			for(int i=0; i<3; i++) {
				FileName[sz_name_buffer+1+i] = name_ext_buffer[i];
     aec:	9d 91       	ld	r25, X+
     aee:	91 93       	st	Z+, r25
		if(sz_name_buffer > 0) {
			for(int i=0; i<sz_name_buffer; i++) {
				FileName[i] = name_buffer[i];
			}
			FileName[sz_name_buffer] = '.';
			for(int i=0; i<3; i++) {
     af0:	4a 17       	cp	r20, r26
     af2:	5b 07       	cpc	r21, r27
     af4:	d9 f7       	brne	.-10     	; 0xaec <ASA_SDC00_put+0x1a8>
				FileName[sz_name_buffer+1+i] = name_ext_buffer[i];
			}
			FileName[sz_name_buffer+4] = '\0';
     af6:	f9 01       	movw	r30, r18
     af8:	ee 57       	subi	r30, 0x7E	; 126
     afa:	f8 4f       	sbci	r31, 0xF8	; 248
     afc:	14 82       	std	Z+4, r1	; 0x04
     afe:	30 c0       	rjmp	.+96     	; 0xb60 <ASA_SDC00_put+0x21c>
	if( SDC_Init_Success_Flag == 0 )	// Initialize at first call
	{
		if( ASA_SDC00_Init(ASA_ID) == 0 )
		SDC_Init_Success_Flag = 1;
		else
		return ARSDC_SDC_STATE_ERR;
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	2e c0       	rjmp	.+92     	; 0xb60 <ASA_SDC00_put+0x21c>
	}
	if( ASA_SDC00_ID != ASA_ID )
		return ARSDC_ID_ERR;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	2c c0       	rjmp	.+88     	; 0xb60 <ASA_SDC00_put+0x21c>
	if( LSByte == 0 )
		if( Bytes > 64 || Bytes < 0 )
			return ARSDC_BYTES_ERR;
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	2a c0       	rjmp	.+84     	; 0xb60 <ASA_SDC00_put+0x21c>
			default:
				return ARSDC_NO_OPEN_FILE;
			}
			break;
		case 1:	// If current is at Opened file mode (Read Only)
			return ARSDC_READ_SETTING;
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	28 c0       	rjmp	.+80     	; 0xb60 <ASA_SDC00_put+0x21c>
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
				}
				break;
			default:
				return ARSDC_NO_OPEN_FILE;
     b10:	89 e0       	ldi	r24, 0x09	; 9
     b12:	26 c0       	rjmp	.+76     	; 0xb60 <ASA_SDC00_put+0x21c>
				res = f_write(&FileObj, Data_p, Bytes, &WriteBytes);
				if( res ) {
#ifdef _DEBUG_INFO
					printf("<FAT Write> write fail errorcode: %d\n", res);
#endif
					return ARSDC_SDC_STATE_ERR;
     b14:	87 e0       	ldi	r24, 0x07	; 7
#endif
		}

	}

	return 0;
     b16:	24 c0       	rjmp	.+72     	; 0xb60 <ASA_SDC00_put+0x21c>
     b18:	80 e0       	ldi	r24, 0x00	; 0
			else
				return ARSDC_LSBYTE_ERR;
			break;
	}

	ASA_SDC00_Deselect();
     b1a:	22 c0       	rjmp	.+68     	; 0xb60 <ASA_SDC00_put+0x21c>
     b1c:	11 de       	rcall	.-990    	; 0x740 <ASA_SDC00_Deselect>

	// While in closed file mode, then update full filename
	if(SDC_State == 0) {
     b1e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <ASA_SDC00_put+0x1e4>
     b26:	a8 cf       	rjmp	.-176    	; 0xa78 <ASA_SDC00_put+0x134>
#endif
		}

	}

	return 0;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	1a c0       	rjmp	.+52     	; 0xb60 <ASA_SDC00_put+0x21c>
					// Copy each byte until EOF or At byte 7
					if(((char*)Data_p)[i] == '\0' || i ==(SZ_NAME_BUF-1) || i== Bytes) {
						name_buffer[i] = '\0';
						break;
					}
					name_buffer[i] = ((char*)Data_p)[i];
     b2c:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <name_buffer.2192>
     b30:	f6 01       	movw	r30, r12
     b32:	31 96       	adiw	r30, 0x01	; 1
     b34:	a6 eb       	ldi	r26, 0xB6	; 182
     b36:	b2 e0       	ldi	r27, 0x02	; 2
	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			switch(LSByte) {
			case LSBYTE_NAME_BUF:
				for(int i=0; i<SZ_NAME_BUF; i++) {
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	53 cf       	rjmp	.-346    	; 0x9e4 <ASA_SDC00_put+0xa0>
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
						name_ext_buffer[i] = '\0';
						break;
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     b3e:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <name_ext_buffer.2193>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     b42:	f6 01       	movw	r30, r12
     b44:	21 81       	ldd	r18, Z+1	; 0x01
     b46:	22 23       	and	r18, r18
     b48:	09 f4       	brne	.+2      	; 0xb4c <ASA_SDC00_put+0x208>
     b4a:	67 cf       	rjmp	.-306    	; 0xa1a <ASA_SDC00_put+0xd6>
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	91 05       	cpc	r25, r1
     b50:	09 f4       	brne	.+2      	; 0xb54 <ASA_SDC00_put+0x210>
     b52:	74 cf       	rjmp	.-280    	; 0xa3c <ASA_SDC00_put+0xf8>
						name_ext_buffer[i] = '\0';
						break;
					}
					name_ext_buffer[i] = ((char*)Data_p)[i];
     b54:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <name_ext_buffer.2193+0x1>
				for(int i=0; i<SZ_NAME_EXT_BUF; i++) {
#ifdef _DEBUG_INFO
					printf("Nameextbuf[%d]: %c\n", i, ((char*)Data_p)[i]);
#endif
					// Copy each byte until EOF or At byte-2
					if(((char*)Data_p)[i] == '\0' || i==Bytes) {
     b58:	22 81       	ldd	r18, Z+2	; 0x02
     b5a:	21 11       	cpse	r18, r1
     b5c:	64 cf       	rjmp	.-312    	; 0xa26 <ASA_SDC00_put+0xe2>
     b5e:	60 cf       	rjmp	.-320    	; 0xa20 <ASA_SDC00_put+0xdc>
		}

	}

	return 0;
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <check_info>:
	ASA_SDC00_Deselect();

	return 0;
}

FRESULT check_info(char* file_name, FILINFO* p_fno) {
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	64 97       	sbiw	r28, 0x14	; 20
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	7b 01       	movw	r14, r22

	char file_path[20];

	sprintf(file_path,"/%s/%s", "ASA_DATA", file_name);
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	8e e9       	ldi	r24, 0x9E	; 158
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	87 ea       	ldi	r24, 0xA7	; 167
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	8e 01       	movw	r16, r28
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	1f 93       	push	r17
     bae:	0f 93       	push	r16
     bb0:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <sprintf>
#ifdef _DEBUG_INFO
	printf("Check info for '%s'...\n", file_path);
#endif

	// Check for file
	fr = f_stat(file_path, p_fno);
     bb4:	b7 01       	movw	r22, r14
     bb6:	c8 01       	movw	r24, r16
     bb8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <f_stat>
		default:
		printf("An error occurred. (%d)\n", fr);
	}
#endif

	return fr;
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
}
     bc6:	64 96       	adiw	r28, 0x14	; 20
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <ASA_SDC00_get>:

	return 0;
}

char ASA_SDC00_get(char ASA_ID, char LSByte, char Bytes, void *Data_p)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <ASA_SDC00_get+0xe>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	unsigned int ReadBytes;
	char* p_data = Data_p;
	static FILINFO fno;

	if( SDC_Init_Success_Flag == 0 )			// Check there is Initialized
     bf2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <SDC_Init_Success_Flag>
     bf6:	99 23       	and	r25, r25
     bf8:	09 f4       	brne	.+2      	; 0xbfc <ASA_SDC00_get+0x1c>
     bfa:	88 c0       	rjmp	.+272    	; 0xd0c <ASA_SDC00_get+0x12c>
		return ARSDC_SDC_STATE_ERR;
	if( ASA_SDC00_ID != ASA_ID )
     bfc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ASA_SDC00_ID>
     c00:	98 13       	cpse	r25, r24
     c02:	86 c0       	rjmp	.+268    	; 0xd10 <ASA_SDC00_get+0x130>
		return ARSDC_ID_ERR;
	// TODO: Modify valid LSByte section
	//if( LSByte > 101 || LSByte < 100 )
	//return ARSDC_LSBYTE_ERR;
	if( LSByte == LSBYTE_DATA_SWAP_BUF )
     c04:	61 11       	cpse	r22, r1
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <ASA_SDC00_get+0x2e>
		if( Bytes > 64 || Bytes < 0 )
     c08:	41 34       	cpi	r20, 0x41	; 65
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <ASA_SDC00_get+0x2e>
     c0c:	83 c0       	rjmp	.+262    	; 0xd14 <ASA_SDC00_get+0x134>
     c0e:	79 01       	movw	r14, r18
     c10:	04 2f       	mov	r16, r20
     c12:	16 2f       	mov	r17, r22
			return ARSDC_BYTES_ERR;

	ASA_SDC00_Select(ASA_ID);
     c14:	89 2f       	mov	r24, r25
     c16:	7b dd       	rcall	.-1290   	; 0x70e <ASA_SDC00_Select>

	switch(SDC_State)
     c18:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SDC_State>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	39 f0       	breq	.+14     	; 0xc2e <ASA_SDC00_get+0x4e>
     c20:	08 f4       	brcc	.+2      	; 0xc24 <ASA_SDC00_get+0x44>
     c22:	7a c0       	rjmp	.+244    	; 0xd18 <ASA_SDC00_get+0x138>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	09 f0       	breq	.+2      	; 0xc2a <ASA_SDC00_get+0x4a>
     c28:	6f c0       	rjmp	.+222    	; 0xd08 <ASA_SDC00_get+0x128>
			}

			// Successful operate
			return 0;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			return ARSDC_WRITE_SETTING;
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	7e c0       	rjmp	.+252    	; 0xd2a <ASA_SDC00_get+0x14a>
			return ARSDC_NO_OPEN_FILE;
			break;
		case 1:	// If current is at Opened file mode (Read Only)

			// Check there is same file that was Checked
			if(!is_file_extcheck) {
     c2e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <is_file_extcheck>
     c32:	81 11       	cpse	r24, r1
     c34:	0a c0       	rjmp	.+20     	; 0xc4a <ASA_SDC00_get+0x6a>
				// Fetch file information first
				if(check_info(FileName, &fno) != FR_OK)
     c36:	6c e9       	ldi	r22, 0x9C	; 156
     c38:	72 e0       	ldi	r23, 0x02	; 2
     c3a:	82 e8       	ldi	r24, 0x82	; 130
     c3c:	97 e0       	ldi	r25, 0x07	; 7
     c3e:	9a df       	rcall	.-204    	; 0xb74 <check_info>
     c40:	81 11       	cpse	r24, r1
     c42:	6c c0       	rjmp	.+216    	; 0xd1c <ASA_SDC00_get+0x13c>
					return ARSDC_OPEN_FILE_ERR;
				else
					// Mark that the file was Checked
					is_file_extcheck = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <is_file_extcheck>
			}

			switch(LSByte) {
     c4a:	1c 34       	cpi	r17, 0x4C	; 76
     c4c:	49 f1       	breq	.+82     	; 0xca0 <ASA_SDC00_get+0xc0>
     c4e:	28 f4       	brcc	.+10     	; 0xc5a <ASA_SDC00_get+0x7a>
     c50:	11 23       	and	r17, r17
     c52:	49 f0       	breq	.+18     	; 0xc66 <ASA_SDC00_get+0x86>
     c54:	1b 34       	cpi	r17, 0x4B	; 75
     c56:	c1 f1       	breq	.+112    	; 0xcc8 <ASA_SDC00_get+0xe8>
     c58:	63 c0       	rjmp	.+198    	; 0xd20 <ASA_SDC00_get+0x140>
     c5a:	1e 34       	cpi	r17, 0x4E	; 78
     c5c:	59 f1       	breq	.+86     	; 0xcb4 <ASA_SDC00_get+0xd4>
     c5e:	12 35       	cpi	r17, 0x52	; 82
     c60:	09 f4       	brne	.+2      	; 0xc64 <ASA_SDC00_get+0x84>
     c62:	40 c0       	rjmp	.+128    	; 0xce4 <ASA_SDC00_get+0x104>
     c64:	5d c0       	rjmp	.+186    	; 0xd20 <ASA_SDC00_get+0x140>
			case LSBYTE_DATA_SWAP_BUF:
				if(f_read(&FileObj, p_data, Bytes, &ReadBytes) != FR_OK)
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	9e 01       	movw	r18, r28
     c6a:	2f 5f       	subi	r18, 0xFF	; 255
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	a8 01       	movw	r20, r16
     c70:	b7 01       	movw	r22, r14
     c72:	88 e3       	ldi	r24, 0x38	; 56
     c74:	97 e0       	ldi	r25, 0x07	; 7
     c76:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <f_read>
     c7a:	81 11       	cpse	r24, r1
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <ASA_SDC00_get+0x144>
					return ARSDC_SDC_STATE_ERR;
				if(ReadBytes < Bytes) {								// While read bytes less than user setting,
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	80 17       	cp	r24, r16
     c84:	91 07       	cpc	r25, r17
     c86:	38 f4       	brcc	.+14     	; 0xc96 <ASA_SDC00_get+0xb6>
					((char*) p_data)[(int)Bytes-1] = ReadBytes; 	// then record received bytes at last byte in buffer
     c88:	f7 01       	movw	r30, r14
     c8a:	e0 0f       	add	r30, r16
     c8c:	f1 1f       	adc	r31, r17
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	80 83       	st	Z, r24
					return ARSDC_DATA_NUM_ENOUGH;
     c92:	8e e0       	ldi	r24, 0x0E	; 14
     c94:	4a c0       	rjmp	.+148    	; 0xd2a <ASA_SDC00_get+0x14a>
				}
				if(ReadBytes == 0) {
     c96:	89 2b       	or	r24, r25
     c98:	09 f4       	brne	.+2      	; 0xc9c <ASA_SDC00_get+0xbc>
     c9a:	46 c0       	rjmp	.+140    	; 0xd28 <ASA_SDC00_get+0x148>
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	45 c0       	rjmp	.+138    	; 0xd2a <ASA_SDC00_get+0x14a>
				break;
			case LSBYTE_ATTR_TIME:
#ifdef _DEBUG_INFO
				printf("<temp Raw data> fno.ftime = %x\n", fno.ftime);
#endif
				p_data[0] = (uint8_t)(fno.ftime);
     ca0:	ec e9       	ldi	r30, 0x9C	; 156
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	d7 01       	movw	r26, r14
     ca8:	8c 93       	st	X, r24
				p_data[1] = (uint8_t)(fno.ftime >> 8);
     caa:	87 81       	ldd	r24, Z+7	; 0x07
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 93       	st	X, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
				p_data[1] = (uint8_t)(fno.ftime >> 8);
#ifdef _DEBUG_INFO
				printf("<temp Raw data> p_data[0] = %x\n", p_data[0]);
				printf("<temp Raw data> p_data[1] = %x\n", p_data[1]);
#endif
				break;
     cb2:	3b c0       	rjmp	.+118    	; 0xd2a <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_DATE:
#ifdef _DEBUG_INFO
				printf("<temp Raw data> fno.fdate = %x\n", fno.fdate);
#endif
				p_data[0] = (uint8_t)(fno.fdate);
     cb4:	ec e9       	ldi	r30, 0x9C	; 156
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	84 81       	ldd	r24, Z+4	; 0x04
     cba:	d7 01       	movw	r26, r14
     cbc:	8c 93       	st	X, r24
				p_data[1] = (uint8_t)(fno.fdate >> 8);
     cbe:	85 81       	ldd	r24, Z+5	; 0x05
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	8c 93       	st	X, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
				p_data[1] = (uint8_t)(fno.fdate >> 8);
#ifdef _DEBUG_INFO
				printf("<temp Raw data> p_data[0] = %x\n", p_data[0]);
				printf("<temp Raw data> p_data[1] = %x\n", p_data[1]);
#endif
				break;
     cc6:	31 c0       	rjmp	.+98     	; 0xd2a <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_ACCESS:
				if(fno.fattrib & AM_RDO)
     cc8:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end+0x8>
     ccc:	80 ff       	sbrs	r24, 0
     cce:	05 c0       	rjmp	.+10     	; 0xcda <ASA_SDC00_get+0xfa>
					// forbidden writing
					p_data[0] = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	f7 01       	movw	r30, r14
     cd4:	80 83       	st	Z, r24
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	28 c0       	rjmp	.+80     	; 0xd2a <ASA_SDC00_get+0x14a>
			case LSBYTE_ATTR_ACCESS:
				if(fno.fattrib & AM_RDO)
					// forbidden writing
					p_data[0] = 1;
				else
					p_data[1] = 0;
     cda:	d7 01       	movw	r26, r14
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	1c 92       	st	X, r1
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	23 c0       	rjmp	.+70     	; 0xd2a <ASA_SDC00_get+0x14a>
					p_data[0] = 1;
				else
					p_data[1] = 0;
				break;
			case LSBYTE_FILE_SZ:
				p_data[0] = fno.fsize;
     ce4:	ec e9       	ldi	r30, 0x9C	; 156
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	80 81       	ld	r24, Z
     cea:	d7 01       	movw	r26, r14
     cec:	8c 93       	st	X, r24
				p_data[1] = fno.fsize >> 8;
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	8c 93       	st	X, r24
     cf4:	11 97       	sbiw	r26, 0x01	; 1
				p_data[2] = fno.fsize >> 16;
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8c 93       	st	X, r24
     cfc:	12 97       	sbiw	r26, 0x02	; 2
				p_data[3] = fno.fsize >> 24;
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	8c 93       	st	X, r24
				break;
			}

			// Successful operate
			return 0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
			case LSBYTE_FILE_SZ:
				p_data[0] = fno.fsize;
				p_data[1] = fno.fsize >> 8;
				p_data[2] = fno.fsize >> 16;
				p_data[3] = fno.fsize >> 24;
				break;
     d06:	11 c0       	rjmp	.+34     	; 0xd2a <ASA_SDC00_get+0x14a>
			// Successful operate
			return 0;
		case 2:	// If current is at Opened file mode ([Overlap/Continue] Write mode)
			return ARSDC_WRITE_SETTING;
		default:
			return ARSDC_LSBYTE_ERR;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	0f c0       	rjmp	.+30     	; 0xd2a <ASA_SDC00_get+0x14a>
	unsigned int ReadBytes;
	char* p_data = Data_p;
	static FILINFO fno;

	if( SDC_Init_Success_Flag == 0 )			// Check there is Initialized
		return ARSDC_SDC_STATE_ERR;
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	0d c0       	rjmp	.+26     	; 0xd2a <ASA_SDC00_get+0x14a>
	if( ASA_SDC00_ID != ASA_ID )
		return ARSDC_ID_ERR;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0b c0       	rjmp	.+22     	; 0xd2a <ASA_SDC00_get+0x14a>
	// TODO: Modify valid LSByte section
	//if( LSByte > 101 || LSByte < 100 )
	//return ARSDC_LSBYTE_ERR;
	if( LSByte == LSBYTE_DATA_SWAP_BUF )
		if( Bytes > 64 || Bytes < 0 )
			return ARSDC_BYTES_ERR;
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <ASA_SDC00_get+0x14a>
	ASA_SDC00_Select(ASA_ID);

	switch(SDC_State)
	{
		case 0:	// If current is in closed file mode
			return ARSDC_NO_OPEN_FILE;
     d18:	89 e0       	ldi	r24, 0x09	; 9
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <ASA_SDC00_get+0x14a>

			// Check there is same file that was Checked
			if(!is_file_extcheck) {
				// Fetch file information first
				if(check_info(FileName, &fno) != FR_OK)
					return ARSDC_OPEN_FILE_ERR;
     d1c:	86 e0       	ldi	r24, 0x06	; 6
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <ASA_SDC00_get+0x14a>
				p_data[3] = fno.fsize >> 24;
				break;
			}

			// Successful operate
			return 0;
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <ASA_SDC00_get+0x14a>
			}

			switch(LSByte) {
			case LSBYTE_DATA_SWAP_BUF:
				if(f_read(&FileObj, p_data, Bytes, &ReadBytes) != FR_OK)
					return ARSDC_SDC_STATE_ERR;
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <ASA_SDC00_get+0x14a>
				if(ReadBytes < Bytes) {								// While read bytes less than user setting,
					((char*) p_data)[(int)Bytes-1] = ReadBytes; 	// then record received bytes at last byte in buffer
					return ARSDC_DATA_NUM_ENOUGH;
				}
				if(ReadBytes == 0) {
					return ARSDC_NO_DATA_TO_READ;
     d28:	8d e0       	ldi	r24, 0x0D	; 13
	}

	ASA_SDC00_Deselect();

	return 0;
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     d3c:	81 11       	cpse	r24, r1
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
     d40:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <mmc_disk_status>
     d44:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     d46:	81 e0       	ldi	r24, 0x01	; 1
}
     d48:	08 95       	ret

00000d4a <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     d4a:	81 11       	cpse	r24, r1
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
     d4e:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <mmc_disk_initialize>
     d52:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     d54:	81 e0       	ldi	r24, 0x01	; 1
}
     d56:	08 95       	ret

00000d58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	fb 01       	movw	r30, r22
	switch (pdrv) {
     d5e:	81 11       	cpse	r24, r1
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <disk_read+0x18>
     d62:	ba 01       	movw	r22, r20
     d64:	a9 01       	movw	r20, r18
     d66:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     d68:	98 01       	movw	r18, r16
     d6a:	0e 94 fe 20 	call	0x41fc	; 0x41fc <mmc_disk_read>
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <disk_read+0x1a>
#endif
	}
	return RES_PARERR;
     d70:	84 e0       	ldi	r24, 0x04	; 4
}
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	fb 01       	movw	r30, r22
	switch (pdrv) {
     d7e:	81 11       	cpse	r24, r1
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <disk_write+0x18>
     d82:	ba 01       	movw	r22, r20
     d84:	a9 01       	movw	r20, r18
     d86:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     d88:	98 01       	movw	r18, r16
     d8a:	0e 94 48 21 	call	0x4290	; 0x4290 <mmc_disk_write>
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <disk_write+0x1a>
#endif
	}
	return RES_PARERR;
     d90:	84 e0       	ldi	r24, 0x04	; 4
}
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     d98:	81 11       	cpse	r24, r1
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <disk_ioctl+0xe>
     d9c:	86 2f       	mov	r24, r22
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     d9e:	ba 01       	movw	r22, r20
     da0:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <mmc_disk_ioctl>
     da4:	08 95       	ret
#endif
	}
	return RES_PARERR;
     da6:	84 e0       	ldi	r24, 0x04	; 4
}
     da8:	08 95       	ret

00000daa <ld_dword>:
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
     daa:	fc 01       	movw	r30, r24
     dac:	63 81       	ldd	r22, Z+3	; 0x03
     dae:	86 2f       	mov	r24, r22
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ba 2f       	mov	r27, r26
     db8:	a9 2f       	mov	r26, r25
     dba:	98 2f       	mov	r25, r24
     dbc:	88 27       	eor	r24, r24
     dbe:	22 81       	ldd	r18, Z+2	; 0x02
     dc0:	82 2b       	or	r24, r18
     dc2:	ba 2f       	mov	r27, r26
     dc4:	a9 2f       	mov	r26, r25
     dc6:	98 2f       	mov	r25, r24
     dc8:	88 27       	eor	r24, r24
     dca:	21 81       	ldd	r18, Z+1	; 0x01
     dcc:	82 2b       	or	r24, r18
     dce:	ba 2f       	mov	r27, r26
     dd0:	a9 2f       	mov	r26, r25
     dd2:	98 2f       	mov	r25, r24
     dd4:	88 27       	eor	r24, r24
     dd6:	20 81       	ld	r18, Z
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	62 2b       	or	r22, r18
     dde:	08 95       	ret

00000de0 <mem_cpy>:
     de0:	41 15       	cp	r20, r1
     de2:	51 05       	cpc	r21, r1
     de4:	51 f0       	breq	.+20     	; 0xdfa <mem_cpy+0x1a>
     de6:	a6 2f       	mov	r26, r22
     de8:	b7 2f       	mov	r27, r23
     dea:	fc 01       	movw	r30, r24
     dec:	48 0f       	add	r20, r24
     dee:	59 1f       	adc	r21, r25
     df0:	9d 91       	ld	r25, X+
     df2:	91 93       	st	Z+, r25
     df4:	e4 17       	cp	r30, r20
     df6:	f5 07       	cpc	r31, r21
     df8:	d9 f7       	brne	.-10     	; 0xdf0 <mem_cpy+0x10>
     dfa:	08 95       	ret

00000dfc <mem_set>:
     dfc:	fc 01       	movw	r30, r24
     dfe:	48 0f       	add	r20, r24
     e00:	59 1f       	adc	r21, r25
     e02:	61 93       	st	Z+, r22
     e04:	e4 17       	cp	r30, r20
     e06:	f5 07       	cpc	r31, r21
     e08:	e1 f7       	brne	.-8      	; 0xe02 <mem_set+0x6>
     e0a:	08 95       	ret

00000e0c <mem_cmp>:
     e0c:	dc 01       	movw	r26, r24
     e0e:	e6 2f       	mov	r30, r22
     e10:	f7 2f       	mov	r31, r23
     e12:	8d 91       	ld	r24, X+
     e14:	21 91       	ld	r18, Z+
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	82 1b       	sub	r24, r18
     e1a:	91 09       	sbc	r25, r1
     e1c:	41 50       	subi	r20, 0x01	; 1
     e1e:	51 09       	sbc	r21, r1
     e20:	11 f0       	breq	.+4      	; 0xe26 <mem_cmp+0x1a>
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	b1 f3       	breq	.-20     	; 0xe12 <mem_cmp+0x6>
     e26:	08 95       	ret

00000e28 <dbc_2nd>:
     e28:	80 34       	cpi	r24, 0x40	; 64
     e2a:	58 f0       	brcs	.+22     	; 0xe42 <dbc_2nd+0x1a>
     e2c:	90 e8       	ldi	r25, 0x80	; 128
     e2e:	98 0f       	add	r25, r24
     e30:	9d 37       	cpi	r25, 0x7D	; 125
     e32:	50 f0       	brcs	.+20     	; 0xe48 <dbc_2nd+0x20>
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	8f 37       	cpi	r24, 0x7F	; 127
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <dbc_2nd+0x16>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	82 2f       	mov	r24, r18
     e40:	08 95       	ret
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	08 95       	ret

00000e4e <clst2sect>:
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	fc 01       	movw	r30, r24
     e54:	9a 01       	movw	r18, r20
     e56:	ab 01       	movw	r20, r22
     e58:	22 50       	subi	r18, 0x02	; 2
     e5a:	31 09       	sbc	r19, r1
     e5c:	41 09       	sbc	r20, r1
     e5e:	51 09       	sbc	r21, r1
     e60:	87 89       	ldd	r24, Z+23	; 0x17
     e62:	90 8d       	ldd	r25, Z+24	; 0x18
     e64:	a1 8d       	ldd	r26, Z+25	; 0x19
     e66:	b2 8d       	ldd	r27, Z+26	; 0x1a
     e68:	02 97       	sbiw	r24, 0x02	; 2
     e6a:	a1 09       	sbc	r26, r1
     e6c:	b1 09       	sbc	r27, r1
     e6e:	28 17       	cp	r18, r24
     e70:	39 07       	cpc	r19, r25
     e72:	4a 07       	cpc	r20, r26
     e74:	5b 07       	cpc	r21, r27
     e76:	68 f4       	brcc	.+26     	; 0xe92 <clst2sect+0x44>
     e78:	a1 85       	ldd	r26, Z+9	; 0x09
     e7a:	b2 85       	ldd	r27, Z+10	; 0x0a
     e7c:	0e 94 07 32 	call	0x640e	; 0x640e <__muluhisi3>
     e80:	03 a5       	ldd	r16, Z+43	; 0x2b
     e82:	14 a5       	ldd	r17, Z+44	; 0x2c
     e84:	25 a5       	ldd	r18, Z+45	; 0x2d
     e86:	36 a5       	ldd	r19, Z+46	; 0x2e
     e88:	60 0f       	add	r22, r16
     e8a:	71 1f       	adc	r23, r17
     e8c:	82 1f       	adc	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <clst2sect+0x4a>
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	cb 01       	movw	r24, r22
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <get_fileinfo>:
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	fb 01       	movw	r30, r22
     eaa:	11 86       	std	Z+9, r1	; 0x09
     eac:	8e 89       	ldd	r24, Y+22	; 0x16
     eae:	9f 89       	ldd	r25, Y+23	; 0x17
     eb0:	a8 8d       	ldd	r26, Y+24	; 0x18
     eb2:	b9 8d       	ldd	r27, Y+25	; 0x19
     eb4:	89 2b       	or	r24, r25
     eb6:	8a 2b       	or	r24, r26
     eb8:	8b 2b       	or	r24, r27
     eba:	09 f4       	brne	.+2      	; 0xebe <get_fileinfo+0x20>
     ebc:	41 c0       	rjmp	.+130    	; 0xf40 <get_fileinfo+0xa2>
     ebe:	e0 e0       	ldi	r30, 0x00	; 0
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	1e e2       	ldi	r17, 0x2E	; 46
     ec8:	85 ee       	ldi	r24, 0xE5	; 229
     eca:	a9 01       	movw	r20, r18
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	aa 8d       	ldd	r26, Y+26	; 0x1a
     ed2:	bb 8d       	ldd	r27, Y+27	; 0x1b
     ed4:	a2 0f       	add	r26, r18
     ed6:	b3 1f       	adc	r27, r19
     ed8:	9c 91       	ld	r25, X
     eda:	90 32       	cpi	r25, 0x20	; 32
     edc:	91 f0       	breq	.+36     	; 0xf02 <get_fileinfo+0x64>
     ede:	95 30       	cpi	r25, 0x05	; 5
     ee0:	09 f4       	brne	.+2      	; 0xee4 <get_fileinfo+0x46>
     ee2:	98 2f       	mov	r25, r24
     ee4:	49 30       	cpi	r20, 0x09	; 9
     ee6:	51 05       	cpc	r21, r1
     ee8:	31 f4       	brne	.+12     	; 0xef6 <get_fileinfo+0x58>
     eea:	db 01       	movw	r26, r22
     eec:	ae 0f       	add	r26, r30
     eee:	bf 1f       	adc	r27, r31
     ef0:	19 96       	adiw	r26, 0x09	; 9
     ef2:	1c 93       	st	X, r17
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	db 01       	movw	r26, r22
     ef8:	ae 0f       	add	r26, r30
     efa:	bf 1f       	adc	r27, r31
     efc:	19 96       	adiw	r26, 0x09	; 9
     efe:	9c 93       	st	X, r25
     f00:	31 96       	adiw	r30, 0x01	; 1
     f02:	9a 01       	movw	r18, r20
     f04:	4b 30       	cpi	r20, 0x0B	; 11
     f06:	51 05       	cpc	r21, r1
     f08:	01 f7       	brne	.-64     	; 0xeca <get_fileinfo+0x2c>
     f0a:	8b 01       	movw	r16, r22
     f0c:	e6 0f       	add	r30, r22
     f0e:	f7 1f       	adc	r31, r23
     f10:	11 86       	std	Z+9, r1	; 0x09
     f12:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f14:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f16:	83 85       	ldd	r24, Z+11	; 0x0b
     f18:	fb 01       	movw	r30, r22
     f1a:	80 87       	std	Z+8, r24	; 0x08
     f1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f20:	4c 96       	adiw	r24, 0x1c	; 28
     f22:	43 df       	rcall	.-378    	; 0xdaa <ld_dword>
     f24:	f8 01       	movw	r30, r16
     f26:	60 83       	st	Z, r22
     f28:	71 83       	std	Z+1, r23	; 0x01
     f2a:	82 83       	std	Z+2, r24	; 0x02
     f2c:	93 83       	std	Z+3, r25	; 0x03
     f2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f30:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f32:	46 96       	adiw	r24, 0x16	; 22
     f34:	3a df       	rcall	.-396    	; 0xdaa <ld_dword>
     f36:	f8 01       	movw	r30, r16
     f38:	77 83       	std	Z+7, r23	; 0x07
     f3a:	66 83       	std	Z+6, r22	; 0x06
     f3c:	95 83       	std	Z+5, r25	; 0x05
     f3e:	84 83       	std	Z+4, r24	; 0x04
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <get_ldnumber>:
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
     f50:	a8 81       	ld	r26, Y
     f52:	b9 81       	ldd	r27, Y+1	; 0x01
     f54:	10 97       	sbiw	r26, 0x00	; 0
     f56:	39 f1       	breq	.+78     	; 0xfa6 <get_ldnumber+0x5c>
     f58:	4c 91       	ld	r20, X
     f5a:	41 32       	cpi	r20, 0x21	; 33
     f5c:	58 f0       	brcs	.+22     	; 0xf74 <get_ldnumber+0x2a>
     f5e:	4a 33       	cpi	r20, 0x3A	; 58
     f60:	59 f1       	breq	.+86     	; 0xfb8 <get_ldnumber+0x6e>
     f62:	fd 01       	movw	r30, r26
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	9f 01       	movw	r18, r30
     f68:	91 91       	ld	r25, Z+
     f6a:	91 32       	cpi	r25, 0x21	; 33
     f6c:	28 f0       	brcs	.+10     	; 0xf78 <get_ldnumber+0x2e>
     f6e:	9a 33       	cpi	r25, 0x3A	; 58
     f70:	d1 f7       	brne	.-12     	; 0xf66 <get_ldnumber+0x1c>
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <get_ldnumber+0x32>
     f74:	94 2f       	mov	r25, r20
     f76:	9d 01       	movw	r18, r26
     f78:	9a 33       	cpi	r25, 0x3A	; 58
     f7a:	89 f4       	brne	.+34     	; 0xf9e <get_ldnumber+0x54>
     f7c:	cd 01       	movw	r24, r26
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	99 f4       	brne	.+38     	; 0xfac <get_ldnumber+0x62>
     f86:	80 ed       	ldi	r24, 0xD0	; 208
     f88:	84 0f       	add	r24, r20
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	90 f4       	brcc	.+36     	; 0xfb2 <get_ldnumber+0x68>
     f8e:	24 2f       	mov	r18, r20
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	c9 01       	movw	r24, r18
     f94:	c0 97       	sbiw	r24, 0x30	; 48
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	b9 83       	std	Y+1, r27	; 0x01
     f9a:	a8 83       	st	Y, r26
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <get_ldnumber+0x72>
     f9e:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <CurrVol>
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <get_ldnumber+0x72>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <get_ldnumber+0x72>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <get_ldnumber+0x72>
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	9f ef       	ldi	r25, 0xFF	; 255
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <get_ldnumber+0x72>
     fb8:	9d 01       	movw	r18, r26
     fba:	e0 cf       	rjmp	.-64     	; 0xf7c <get_ldnumber+0x32>
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <validate>:
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
     fcc:	8b 01       	movw	r16, r22
     fce:	89 2b       	or	r24, r25
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <validate+0x46>
     fd2:	e8 81       	ld	r30, Y
     fd4:	f9 81       	ldd	r31, Y+1	; 0x01
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	b9 f0       	breq	.+46     	; 0x1008 <validate+0x46>
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	a1 f0       	breq	.+40     	; 0x1008 <validate+0x46>
     fe0:	2a 81       	ldd	r18, Y+2	; 0x02
     fe2:	3b 81       	ldd	r19, Y+3	; 0x03
     fe4:	85 81       	ldd	r24, Z+5	; 0x05
     fe6:	96 81       	ldd	r25, Z+6	; 0x06
     fe8:	28 17       	cp	r18, r24
     fea:	39 07       	cpc	r19, r25
     fec:	69 f4       	brne	.+26     	; 0x1008 <validate+0x46>
     fee:	81 81       	ldd	r24, Z+1	; 0x01
     ff0:	a5 de       	rcall	.-694    	; 0xd3c <disk_status>
     ff2:	80 fd       	sbrc	r24, 0
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <validate+0x46>
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <validate+0x3e>
     ff8:	f8 01       	movw	r30, r16
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	20 83       	st	Z, r18
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <validate+0x4e>
    1000:	28 81       	ld	r18, Y
    1002:	39 81       	ldd	r19, Y+1	; 0x01
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	f8 cf       	rjmp	.-16     	; 0xff8 <validate+0x36>
    1008:	89 e0       	ldi	r24, 0x09	; 9
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f4 cf       	rjmp	.-24     	; 0xff8 <validate+0x36>
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <sync_window>:
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	fc 01       	movw	r30, r24
    1030:	23 81       	ldd	r18, Z+3	; 0x03
    1032:	22 23       	and	r18, r18
    1034:	c1 f1       	breq	.+112    	; 0x10a6 <sync_window+0x8c>
    1036:	ec 01       	movw	r28, r24
    1038:	7c 01       	movw	r14, r24
    103a:	f3 e3       	ldi	r31, 0x33	; 51
    103c:	ef 0e       	add	r14, r31
    103e:	f1 1c       	adc	r15, r1
    1040:	2f a5       	ldd	r18, Y+47	; 0x2f
    1042:	38 a9       	ldd	r19, Y+48	; 0x30
    1044:	49 a9       	ldd	r20, Y+49	; 0x31
    1046:	5a a9       	ldd	r21, Y+50	; 0x32
    1048:	01 e0       	ldi	r16, 0x01	; 1
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	b7 01       	movw	r22, r14
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	93 de       	rcall	.-730    	; 0xd78 <disk_write>
    1052:	81 11       	cpse	r24, r1
    1054:	2a c0       	rjmp	.+84     	; 0x10aa <sync_window+0x90>
    1056:	1b 82       	std	Y+3, r1	; 0x03
    1058:	0f a5       	ldd	r16, Y+47	; 0x2f
    105a:	18 a9       	ldd	r17, Y+48	; 0x30
    105c:	29 a9       	ldd	r18, Y+49	; 0x31
    105e:	3a a9       	ldd	r19, Y+50	; 0x32
    1060:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1062:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1064:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1066:	be 8d       	ldd	r27, Y+30	; 0x1e
    1068:	8b a0       	ldd	r8, Y+35	; 0x23
    106a:	9c a0       	ldd	r9, Y+36	; 0x24
    106c:	ad a0       	ldd	r10, Y+37	; 0x25
    106e:	be a0       	ldd	r11, Y+38	; 0x26
    1070:	b9 01       	movw	r22, r18
    1072:	a8 01       	movw	r20, r16
    1074:	48 19       	sub	r20, r8
    1076:	59 09       	sbc	r21, r9
    1078:	6a 09       	sbc	r22, r10
    107a:	7b 09       	sbc	r23, r11
    107c:	48 17       	cp	r20, r24
    107e:	59 07       	cpc	r21, r25
    1080:	6a 07       	cpc	r22, r26
    1082:	7b 07       	cpc	r23, r27
    1084:	a0 f4       	brcc	.+40     	; 0x10ae <sync_window+0x94>
    1086:	6a 81       	ldd	r22, Y+2	; 0x02
    1088:	62 30       	cpi	r22, 0x02	; 2
    108a:	99 f4       	brne	.+38     	; 0x10b2 <sync_window+0x98>
    108c:	a9 01       	movw	r20, r18
    108e:	98 01       	movw	r18, r16
    1090:	28 0f       	add	r18, r24
    1092:	39 1f       	adc	r19, r25
    1094:	4a 1f       	adc	r20, r26
    1096:	5b 1f       	adc	r21, r27
    1098:	01 e0       	ldi	r16, 0x01	; 1
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	b7 01       	movw	r22, r14
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	6b de       	rcall	.-810    	; 0xd78 <disk_write>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <sync_window+0x9a>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <sync_window+0x9a>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <sync_window+0x9a>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <sync_window+0x9a>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	08 95       	ret

000010ca <move_window>:
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
    10de:	4a 01       	movw	r8, r20
    10e0:	5b 01       	movw	r10, r22
    10e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e4:	98 a9       	ldd	r25, Y+48	; 0x30
    10e6:	a9 a9       	ldd	r26, Y+49	; 0x31
    10e8:	ba a9       	ldd	r27, Y+50	; 0x32
    10ea:	84 17       	cp	r24, r20
    10ec:	95 07       	cpc	r25, r21
    10ee:	a6 07       	cpc	r26, r22
    10f0:	b7 07       	cpc	r27, r23
    10f2:	d9 f0       	breq	.+54     	; 0x112a <__stack+0x2b>
    10f4:	ce 01       	movw	r24, r28
    10f6:	91 df       	rcall	.-222    	; 0x101a <sync_window>
    10f8:	f8 2e       	mov	r15, r24
    10fa:	81 11       	cpse	r24, r1
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <__stack+0x2d>
    10fe:	01 e0       	ldi	r16, 0x01	; 1
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	a5 01       	movw	r20, r10
    1104:	94 01       	movw	r18, r8
    1106:	be 01       	movw	r22, r28
    1108:	6d 5c       	subi	r22, 0xCD	; 205
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	24 de       	rcall	.-952    	; 0xd58 <disk_read>
    1110:	88 23       	and	r24, r24
    1112:	31 f0       	breq	.+12     	; 0x1120 <__stack+0x21>
    1114:	ff 24       	eor	r15, r15
    1116:	f3 94       	inc	r15
    1118:	88 24       	eor	r8, r8
    111a:	8a 94       	dec	r8
    111c:	98 2c       	mov	r9, r8
    111e:	54 01       	movw	r10, r8
    1120:	8f a6       	std	Y+47, r8	; 0x2f
    1122:	98 aa       	std	Y+48, r9	; 0x30
    1124:	a9 aa       	std	Y+49, r10	; 0x31
    1126:	ba aa       	std	Y+50, r11	; 0x32
    1128:	01 c0       	rjmp	.+2      	; 0x112c <__stack+0x2d>
    112a:	f1 2c       	mov	r15, r1
    112c:	8f 2d       	mov	r24, r15
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	08 95       	ret

00001142 <dir_clear>:
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	7c 01       	movw	r14, r24
    115c:	4a 01       	movw	r8, r20
    115e:	5b 01       	movw	r10, r22
    1160:	5c df       	rcall	.-328    	; 0x101a <sync_window>
    1162:	81 11       	cpse	r24, r1
    1164:	3e c0       	rjmp	.+124    	; 0x11e2 <dir_clear+0xa0>
    1166:	b5 01       	movw	r22, r10
    1168:	a4 01       	movw	r20, r8
    116a:	c7 01       	movw	r24, r14
    116c:	70 de       	rcall	.-800    	; 0xe4e <clst2sect>
    116e:	4b 01       	movw	r8, r22
    1170:	5c 01       	movw	r10, r24
    1172:	f7 01       	movw	r30, r14
    1174:	67 a7       	std	Z+47, r22	; 0x2f
    1176:	70 ab       	std	Z+48, r23	; 0x30
    1178:	81 ab       	std	Z+49, r24	; 0x31
    117a:	92 ab       	std	Z+50, r25	; 0x32
    117c:	67 01       	movw	r12, r14
    117e:	f3 e3       	ldi	r31, 0x33	; 51
    1180:	cf 0e       	add	r12, r31
    1182:	d1 1c       	adc	r13, r1
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	52 e0       	ldi	r21, 0x02	; 2
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	c6 01       	movw	r24, r12
    118e:	36 de       	rcall	.-916    	; 0xdfc <mem_set>
    1190:	f7 01       	movw	r30, r14
    1192:	81 85       	ldd	r24, Z+9	; 0x09
    1194:	92 85       	ldd	r25, Z+10	; 0x0a
    1196:	89 2b       	or	r24, r25
    1198:	59 f4       	brne	.+22     	; 0x11b0 <dir_clear+0x6e>
    119a:	c0 e0       	ldi	r28, 0x00	; 0
    119c:	d0 e0       	ldi	r29, 0x00	; 0
    119e:	18 c0       	rjmp	.+48     	; 0x11d0 <dir_clear+0x8e>
    11a0:	21 96       	adiw	r28, 0x01	; 1
    11a2:	f7 01       	movw	r30, r14
    11a4:	81 85       	ldd	r24, Z+9	; 0x09
    11a6:	92 85       	ldd	r25, Z+10	; 0x0a
    11a8:	c8 17       	cp	r28, r24
    11aa:	d9 07       	cpc	r29, r25
    11ac:	18 f0       	brcs	.+6      	; 0x11b4 <dir_clear+0x72>
    11ae:	10 c0       	rjmp	.+32     	; 0x11d0 <dir_clear+0x8e>
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	01 e0       	ldi	r16, 0x01	; 1
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	a5 01       	movw	r20, r10
    11ba:	94 01       	movw	r18, r8
    11bc:	2c 0f       	add	r18, r28
    11be:	3d 1f       	adc	r19, r29
    11c0:	41 1d       	adc	r20, r1
    11c2:	51 1d       	adc	r21, r1
    11c4:	b6 01       	movw	r22, r12
    11c6:	f7 01       	movw	r30, r14
    11c8:	81 81       	ldd	r24, Z+1	; 0x01
    11ca:	d6 dd       	rcall	.-1108   	; 0xd78 <disk_write>
    11cc:	88 23       	and	r24, r24
    11ce:	41 f3       	breq	.-48     	; 0x11a0 <dir_clear+0x5e>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	f7 01       	movw	r30, r14
    11d4:	21 85       	ldd	r18, Z+9	; 0x09
    11d6:	32 85       	ldd	r19, Z+10	; 0x0a
    11d8:	2c 17       	cp	r18, r28
    11da:	3d 07       	cpc	r19, r29
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <dir_clear+0xa2>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <dir_clear+0xa2>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	08 95       	ret

000011fe <sync_fs>:
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
    120c:	06 df       	rcall	.-500    	; 0x101a <sync_window>
    120e:	98 2f       	mov	r25, r24
    1210:	81 11       	cpse	r24, r1
    1212:	5f c0       	rjmp	.+190    	; 0x12d2 <sync_fs+0xd4>
    1214:	88 81       	ld	r24, Y
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	09 f0       	breq	.+2      	; 0x121c <sync_fs+0x1e>
    121a:	52 c0       	rjmp	.+164    	; 0x12c0 <sync_fs+0xc2>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <sync_fs+0x26>
    1222:	4e c0       	rjmp	.+156    	; 0x12c0 <sync_fs+0xc2>
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	52 e0       	ldi	r21, 0x02	; 2
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	7e 01       	movw	r14, r28
    122e:	83 e3       	ldi	r24, 0x33	; 51
    1230:	e8 0e       	add	r14, r24
    1232:	f1 1c       	adc	r15, r1
    1234:	c7 01       	movw	r24, r14
    1236:	e2 dd       	rcall	.-1084   	; 0xdfc <mem_set>
    1238:	85 e5       	ldi	r24, 0x55	; 85
    123a:	fe 01       	movw	r30, r28
    123c:	ef 5c       	subi	r30, 0xCF	; 207
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	80 83       	st	Z, r24
    1242:	8a ea       	ldi	r24, 0xAA	; 170
    1244:	31 96       	adiw	r30, 0x01	; 1
    1246:	80 83       	st	Z, r24
    1248:	82 e5       	ldi	r24, 0x52	; 82
    124a:	8b ab       	std	Y+51, r24	; 0x33
    124c:	8c ab       	std	Y+52, r24	; 0x34
    124e:	81 e6       	ldi	r24, 0x61	; 97
    1250:	8d ab       	std	Y+53, r24	; 0x35
    1252:	91 e4       	ldi	r25, 0x41	; 65
    1254:	9e ab       	std	Y+54, r25	; 0x36
    1256:	22 e7       	ldi	r18, 0x72	; 114
    1258:	7b 97       	sbiw	r30, 0x1b	; 27
    125a:	20 83       	st	Z, r18
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	20 83       	st	Z, r18
    1260:	31 96       	adiw	r30, 0x01	; 1
    1262:	90 83       	st	Z, r25
    1264:	31 96       	adiw	r30, 0x01	; 1
    1266:	80 83       	st	Z, r24
    1268:	3f 85       	ldd	r19, Y+15	; 0x0f
    126a:	28 89       	ldd	r18, Y+16	; 0x10
    126c:	99 89       	ldd	r25, Y+17	; 0x11
    126e:	8a 89       	ldd	r24, Y+18	; 0x12
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	30 83       	st	Z, r19
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	20 83       	st	Z, r18
    1278:	31 96       	adiw	r30, 0x01	; 1
    127a:	90 83       	st	Z, r25
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	80 83       	st	Z, r24
    1280:	3b 85       	ldd	r19, Y+11	; 0x0b
    1282:	2c 85       	ldd	r18, Y+12	; 0x0c
    1284:	9d 85       	ldd	r25, Y+13	; 0x0d
    1286:	8e 85       	ldd	r24, Y+14	; 0x0e
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	30 83       	st	Z, r19
    128c:	31 96       	adiw	r30, 0x01	; 1
    128e:	20 83       	st	Z, r18
    1290:	31 96       	adiw	r30, 0x01	; 1
    1292:	90 83       	st	Z, r25
    1294:	31 96       	adiw	r30, 0x01	; 1
    1296:	80 83       	st	Z, r24
    1298:	8f 8d       	ldd	r24, Y+31	; 0x1f
    129a:	98 a1       	ldd	r25, Y+32	; 0x20
    129c:	a9 a1       	ldd	r26, Y+33	; 0x21
    129e:	ba a1       	ldd	r27, Y+34	; 0x22
    12a0:	9c 01       	movw	r18, r24
    12a2:	ad 01       	movw	r20, r26
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	4f 4f       	sbci	r20, 0xFF	; 255
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	2f a7       	std	Y+47, r18	; 0x2f
    12ae:	38 ab       	std	Y+48, r19	; 0x30
    12b0:	49 ab       	std	Y+49, r20	; 0x31
    12b2:	5a ab       	std	Y+50, r21	; 0x32
    12b4:	01 e0       	ldi	r16, 0x01	; 1
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	b7 01       	movw	r22, r14
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	5d dd       	rcall	.-1350   	; 0xd78 <disk_write>
    12be:	1c 82       	std	Y+4, r1	; 0x04
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	67 dd       	rcall	.-1330   	; 0xd98 <disk_ioctl>
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	81 11       	cpse	r24, r1
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <sync_fs+0xd4>
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	89 2f       	mov	r24, r25
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <put_fat>:
    12e2:	2f 92       	push	r2
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	42 30       	cpi	r20, 0x02	; 2
    1308:	51 05       	cpc	r21, r1
    130a:	61 05       	cpc	r22, r1
    130c:	71 05       	cpc	r23, r1
    130e:	08 f4       	brcc	.+2      	; 0x1312 <put_fat+0x30>
    1310:	cc c0       	rjmp	.+408    	; 0x14aa <put_fat+0x1c8>
    1312:	fc 01       	movw	r30, r24
    1314:	c7 88       	ldd	r12, Z+23	; 0x17
    1316:	d0 8c       	ldd	r13, Z+24	; 0x18
    1318:	e1 8c       	ldd	r14, Z+25	; 0x19
    131a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    131c:	4c 15       	cp	r20, r12
    131e:	5d 05       	cpc	r21, r13
    1320:	6e 05       	cpc	r22, r14
    1322:	7f 05       	cpc	r23, r15
    1324:	08 f0       	brcs	.+2      	; 0x1328 <put_fat+0x46>
    1326:	c3 c0       	rjmp	.+390    	; 0x14ae <put_fat+0x1cc>
    1328:	28 01       	movw	r4, r16
    132a:	39 01       	movw	r6, r18
    132c:	6a 01       	movw	r12, r20
    132e:	7b 01       	movw	r14, r22
    1330:	ec 01       	movw	r28, r24
    1332:	80 81       	ld	r24, Z
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	09 f4       	brne	.+2      	; 0x133a <put_fat+0x58>
    1338:	61 c0       	rjmp	.+194    	; 0x13fc <put_fat+0x11a>
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	09 f4       	brne	.+2      	; 0x1340 <put_fat+0x5e>
    133e:	7e c0       	rjmp	.+252    	; 0x143c <put_fat+0x15a>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <put_fat+0x64>
    1344:	b6 c0       	rjmp	.+364    	; 0x14b2 <put_fat+0x1d0>
    1346:	5a 01       	movw	r10, r20
    1348:	b6 94       	lsr	r11
    134a:	a7 94       	ror	r10
    134c:	a4 0e       	add	r10, r20
    134e:	b5 1e       	adc	r11, r21
    1350:	c5 01       	movw	r24, r10
    1352:	89 2f       	mov	r24, r25
    1354:	99 27       	eor	r25, r25
    1356:	86 95       	lsr	r24
    1358:	43 a1       	ldd	r20, Z+35	; 0x23
    135a:	54 a1       	ldd	r21, Z+36	; 0x24
    135c:	65 a1       	ldd	r22, Z+37	; 0x25
    135e:	76 a1       	ldd	r23, Z+38	; 0x26
    1360:	48 0f       	add	r20, r24
    1362:	59 1f       	adc	r21, r25
    1364:	61 1d       	adc	r22, r1
    1366:	71 1d       	adc	r23, r1
    1368:	cf 01       	movw	r24, r30
    136a:	af de       	rcall	.-674    	; 0x10ca <move_window>
    136c:	18 2f       	mov	r17, r24
    136e:	81 11       	cpse	r24, r1
    1370:	c0 c0       	rjmp	.+384    	; 0x14f2 <put_fat+0x210>
    1372:	1e 01       	movw	r2, r28
    1374:	f3 e3       	ldi	r31, 0x33	; 51
    1376:	2f 0e       	add	r2, r31
    1378:	31 1c       	adc	r3, r1
    137a:	45 01       	movw	r8, r10
    137c:	2f ef       	ldi	r18, 0xFF	; 255
    137e:	82 1a       	sub	r8, r18
    1380:	92 0a       	sbc	r9, r18
    1382:	31 e0       	ldi	r19, 0x01	; 1
    1384:	b3 22       	and	r11, r19
    1386:	f1 01       	movw	r30, r2
    1388:	ea 0d       	add	r30, r10
    138a:	fb 1d       	adc	r31, r11
    138c:	c0 fe       	sbrs	r12, 0
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <put_fat+0xe8>
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	2f 70       	andi	r18, 0x0F	; 15
    1396:	30 e1       	ldi	r19, 0x10	; 16
    1398:	43 9e       	mul	r4, r19
    139a:	c0 01       	movw	r24, r0
    139c:	11 24       	eor	r1, r1
    139e:	82 2b       	or	r24, r18
    13a0:	80 83       	st	Z, r24
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	4b a1       	ldd	r20, Y+35	; 0x23
    13a8:	5c a1       	ldd	r21, Y+36	; 0x24
    13aa:	6d a1       	ldd	r22, Y+37	; 0x25
    13ac:	7e a1       	ldd	r23, Y+38	; 0x26
    13ae:	c4 01       	movw	r24, r8
    13b0:	89 2f       	mov	r24, r25
    13b2:	99 27       	eor	r25, r25
    13b4:	86 95       	lsr	r24
    13b6:	48 0f       	add	r20, r24
    13b8:	59 1f       	adc	r21, r25
    13ba:	61 1d       	adc	r22, r1
    13bc:	71 1d       	adc	r23, r1
    13be:	ce 01       	movw	r24, r28
    13c0:	84 de       	rcall	.-760    	; 0x10ca <move_window>
    13c2:	88 23       	and	r24, r24
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <put_fat+0xe6>
    13c6:	7b c0       	rjmp	.+246    	; 0x14be <put_fat+0x1dc>
    13c8:	76 c0       	rjmp	.+236    	; 0x14b6 <put_fat+0x1d4>
    13ca:	40 82       	st	Z, r4
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	4b a1       	ldd	r20, Y+35	; 0x23
    13d2:	5c a1       	ldd	r21, Y+36	; 0x24
    13d4:	6d a1       	ldd	r22, Y+37	; 0x25
    13d6:	7e a1       	ldd	r23, Y+38	; 0x26
    13d8:	c4 01       	movw	r24, r8
    13da:	89 2f       	mov	r24, r25
    13dc:	99 27       	eor	r25, r25
    13de:	86 95       	lsr	r24
    13e0:	48 0f       	add	r20, r24
    13e2:	59 1f       	adc	r21, r25
    13e4:	61 1d       	adc	r22, r1
    13e6:	71 1d       	adc	r23, r1
    13e8:	ce 01       	movw	r24, r28
    13ea:	6f de       	rcall	.-802    	; 0x10ca <move_window>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <put_fat+0x110>
    13f0:	74 c0       	rjmp	.+232    	; 0x14da <put_fat+0x1f8>
    13f2:	63 c0       	rjmp	.+198    	; 0x14ba <put_fat+0x1d8>
    13f4:	40 82       	st	Z, r4
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	7b c0       	rjmp	.+246    	; 0x14f2 <put_fat+0x210>
    13fc:	45 2f       	mov	r20, r21
    13fe:	56 2f       	mov	r21, r22
    1400:	67 2f       	mov	r22, r23
    1402:	77 27       	eor	r23, r23
    1404:	83 a1       	ldd	r24, Z+35	; 0x23
    1406:	94 a1       	ldd	r25, Z+36	; 0x24
    1408:	a5 a1       	ldd	r26, Z+37	; 0x25
    140a:	b6 a1       	ldd	r27, Z+38	; 0x26
    140c:	48 0f       	add	r20, r24
    140e:	59 1f       	adc	r21, r25
    1410:	6a 1f       	adc	r22, r26
    1412:	7b 1f       	adc	r23, r27
    1414:	cf 01       	movw	r24, r30
    1416:	59 de       	rcall	.-846    	; 0x10ca <move_window>
    1418:	18 2f       	mov	r17, r24
    141a:	81 11       	cpse	r24, r1
    141c:	6a c0       	rjmp	.+212    	; 0x14f2 <put_fat+0x210>
    141e:	fe 01       	movw	r30, r28
    1420:	f3 96       	adiw	r30, 0x33	; 51
    1422:	cc 0c       	add	r12, r12
    1424:	dd 1c       	adc	r13, r13
    1426:	e8 94       	clt
    1428:	c0 f8       	bld	r12, 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	d8 22       	and	r13, r24
    142e:	ec 0d       	add	r30, r12
    1430:	fd 1d       	adc	r31, r13
    1432:	40 82       	st	Z, r4
    1434:	51 82       	std	Z+1, r5	; 0x01
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	5b c0       	rjmp	.+182    	; 0x14f2 <put_fat+0x210>
    143c:	83 a1       	ldd	r24, Z+35	; 0x23
    143e:	94 a1       	ldd	r25, Z+36	; 0x24
    1440:	a5 a1       	ldd	r26, Z+37	; 0x25
    1442:	b6 a1       	ldd	r27, Z+38	; 0x26
    1444:	68 94       	set
    1446:	16 f8       	bld	r1, 6
    1448:	76 95       	lsr	r23
    144a:	67 95       	ror	r22
    144c:	57 95       	ror	r21
    144e:	47 95       	ror	r20
    1450:	16 94       	lsr	r1
    1452:	d1 f7       	brne	.-12     	; 0x1448 <put_fat+0x166>
    1454:	48 0f       	add	r20, r24
    1456:	59 1f       	adc	r21, r25
    1458:	6a 1f       	adc	r22, r26
    145a:	7b 1f       	adc	r23, r27
    145c:	cf 01       	movw	r24, r30
    145e:	35 de       	rcall	.-918    	; 0x10ca <move_window>
    1460:	18 2f       	mov	r17, r24
    1462:	81 11       	cpse	r24, r1
    1464:	46 c0       	rjmp	.+140    	; 0x14f2 <put_fat+0x210>
    1466:	ef e0       	ldi	r30, 0x0F	; 15
    1468:	7e 22       	and	r7, r30
    146a:	ce 01       	movw	r24, r28
    146c:	c3 96       	adiw	r24, 0x33	; 51
    146e:	cc 0c       	add	r12, r12
    1470:	dd 1c       	adc	r13, r13
    1472:	cc 0c       	add	r12, r12
    1474:	dd 1c       	adc	r13, r13
    1476:	fc ef       	ldi	r31, 0xFC	; 252
    1478:	cf 22       	and	r12, r31
    147a:	f1 e0       	ldi	r31, 0x01	; 1
    147c:	df 22       	and	r13, r31
    147e:	c8 0e       	add	r12, r24
    1480:	d9 1e       	adc	r13, r25
    1482:	c6 01       	movw	r24, r12
    1484:	92 dc       	rcall	.-1756   	; 0xdaa <ld_dword>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	88 27       	eor	r24, r24
    148c:	99 27       	eor	r25, r25
    148e:	aa 27       	eor	r26, r26
    1490:	b0 7f       	andi	r27, 0xF0	; 240
    1492:	48 2a       	or	r4, r24
    1494:	59 2a       	or	r5, r25
    1496:	6a 2a       	or	r6, r26
    1498:	7b 2a       	or	r7, r27
    149a:	f6 01       	movw	r30, r12
    149c:	40 82       	st	Z, r4
    149e:	51 82       	std	Z+1, r5	; 0x01
    14a0:	62 82       	std	Z+2, r6	; 0x02
    14a2:	73 82       	std	Z+3, r7	; 0x03
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	24 c0       	rjmp	.+72     	; 0x14f2 <put_fat+0x210>
    14aa:	12 e0       	ldi	r17, 0x02	; 2
    14ac:	22 c0       	rjmp	.+68     	; 0x14f2 <put_fat+0x210>
    14ae:	12 e0       	ldi	r17, 0x02	; 2
    14b0:	20 c0       	rjmp	.+64     	; 0x14f2 <put_fat+0x210>
    14b2:	12 e0       	ldi	r17, 0x02	; 2
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <put_fat+0x210>
    14b6:	18 2f       	mov	r17, r24
    14b8:	1c c0       	rjmp	.+56     	; 0x14f2 <put_fat+0x210>
    14ba:	18 2f       	mov	r17, r24
    14bc:	1a c0       	rjmp	.+52     	; 0x14f2 <put_fat+0x210>
    14be:	f1 e0       	ldi	r31, 0x01	; 1
    14c0:	9f 22       	and	r9, r31
    14c2:	f1 01       	movw	r30, r2
    14c4:	e8 0d       	add	r30, r8
    14c6:	f9 1d       	adc	r31, r9
    14c8:	68 94       	set
    14ca:	13 f8       	bld	r1, 3
    14cc:	76 94       	lsr	r7
    14ce:	67 94       	ror	r6
    14d0:	57 94       	ror	r5
    14d2:	47 94       	ror	r4
    14d4:	16 94       	lsr	r1
    14d6:	d1 f7       	brne	.-12     	; 0x14cc <put_fat+0x1ea>
    14d8:	8d cf       	rjmp	.-230    	; 0x13f4 <put_fat+0x112>
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	92 22       	and	r9, r18
    14de:	f1 01       	movw	r30, r2
    14e0:	e8 0d       	add	r30, r8
    14e2:	f9 1d       	adc	r31, r9
    14e4:	90 81       	ld	r25, Z
    14e6:	90 7f       	andi	r25, 0xF0	; 240
    14e8:	85 2d       	mov	r24, r5
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	49 2e       	mov	r4, r25
    14ee:	48 2a       	or	r4, r24
    14f0:	81 cf       	rjmp	.-254    	; 0x13f4 <put_fat+0x112>
    14f2:	81 2f       	mov	r24, r17
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	9f 90       	pop	r9
    150a:	8f 90       	pop	r8
    150c:	7f 90       	pop	r7
    150e:	6f 90       	pop	r6
    1510:	5f 90       	pop	r5
    1512:	4f 90       	pop	r4
    1514:	3f 90       	pop	r3
    1516:	2f 90       	pop	r2
    1518:	08 95       	ret

0000151a <st_clust>:
    151a:	fb 01       	movw	r30, r22
    151c:	22 8f       	std	Z+26, r18	; 0x1a
    151e:	33 8f       	std	Z+27, r19	; 0x1b
    1520:	dc 01       	movw	r26, r24
    1522:	8c 91       	ld	r24, X
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	29 f4       	brne	.+10     	; 0x1532 <st_clust+0x18>
    1528:	ca 01       	movw	r24, r20
    152a:	aa 27       	eor	r26, r26
    152c:	bb 27       	eor	r27, r27
    152e:	84 8b       	std	Z+20, r24	; 0x14
    1530:	95 8b       	std	Z+21, r25	; 0x15
    1532:	08 95       	ret

00001534 <get_fat>:
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	42 30       	cpi	r20, 0x02	; 2
    154a:	51 05       	cpc	r21, r1
    154c:	61 05       	cpc	r22, r1
    154e:	71 05       	cpc	r23, r1
    1550:	08 f4       	brcc	.+2      	; 0x1554 <get_fat+0x20>
    1552:	a1 c0       	rjmp	.+322    	; 0x1696 <get_fat+0x162>
    1554:	fc 01       	movw	r30, r24
    1556:	c0 81       	ld	r28, Z
    1558:	d1 81       	ldd	r29, Z+1	; 0x01
    155a:	8f 89       	ldd	r24, Y+23	; 0x17
    155c:	98 8d       	ldd	r25, Y+24	; 0x18
    155e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1560:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1562:	48 17       	cp	r20, r24
    1564:	59 07       	cpc	r21, r25
    1566:	6a 07       	cpc	r22, r26
    1568:	7b 07       	cpc	r23, r27
    156a:	08 f0       	brcs	.+2      	; 0x156e <get_fat+0x3a>
    156c:	99 c0       	rjmp	.+306    	; 0x16a0 <get_fat+0x16c>
    156e:	6a 01       	movw	r12, r20
    1570:	7b 01       	movw	r14, r22
    1572:	88 81       	ld	r24, Y
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	09 f4       	brne	.+2      	; 0x157a <get_fat+0x46>
    1578:	4b c0       	rjmp	.+150    	; 0x1610 <get_fat+0xdc>
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	09 f4       	brne	.+2      	; 0x1580 <get_fat+0x4c>
    157e:	69 c0       	rjmp	.+210    	; 0x1652 <get_fat+0x11e>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <get_fat+0x52>
    1584:	92 c0       	rjmp	.+292    	; 0x16aa <get_fat+0x176>
    1586:	8a 01       	movw	r16, r20
    1588:	16 95       	lsr	r17
    158a:	07 95       	ror	r16
    158c:	04 0f       	add	r16, r20
    158e:	15 1f       	adc	r17, r21
    1590:	c8 01       	movw	r24, r16
    1592:	89 2f       	mov	r24, r25
    1594:	99 27       	eor	r25, r25
    1596:	86 95       	lsr	r24
    1598:	4b a1       	ldd	r20, Y+35	; 0x23
    159a:	5c a1       	ldd	r21, Y+36	; 0x24
    159c:	6d a1       	ldd	r22, Y+37	; 0x25
    159e:	7e a1       	ldd	r23, Y+38	; 0x26
    15a0:	48 0f       	add	r20, r24
    15a2:	59 1f       	adc	r21, r25
    15a4:	61 1d       	adc	r22, r1
    15a6:	71 1d       	adc	r23, r1
    15a8:	ce 01       	movw	r24, r28
    15aa:	8f dd       	rcall	.-1250   	; 0x10ca <move_window>
    15ac:	81 11       	cpse	r24, r1
    15ae:	82 c0       	rjmp	.+260    	; 0x16b4 <get_fat+0x180>
    15b0:	58 01       	movw	r10, r16
    15b2:	ff ef       	ldi	r31, 0xFF	; 255
    15b4:	af 1a       	sub	r10, r31
    15b6:	bf 0a       	sbc	r11, r31
    15b8:	11 70       	andi	r17, 0x01	; 1
    15ba:	fe 01       	movw	r30, r28
    15bc:	e0 0f       	add	r30, r16
    15be:	f1 1f       	adc	r31, r17
    15c0:	13 a9       	ldd	r17, Z+51	; 0x33
    15c2:	c5 01       	movw	r24, r10
    15c4:	89 2f       	mov	r24, r25
    15c6:	99 27       	eor	r25, r25
    15c8:	86 95       	lsr	r24
    15ca:	4b a1       	ldd	r20, Y+35	; 0x23
    15cc:	5c a1       	ldd	r21, Y+36	; 0x24
    15ce:	6d a1       	ldd	r22, Y+37	; 0x25
    15d0:	7e a1       	ldd	r23, Y+38	; 0x26
    15d2:	48 0f       	add	r20, r24
    15d4:	59 1f       	adc	r21, r25
    15d6:	61 1d       	adc	r22, r1
    15d8:	71 1d       	adc	r23, r1
    15da:	ce 01       	movw	r24, r28
    15dc:	76 dd       	rcall	.-1300   	; 0x10ca <move_window>
    15de:	81 11       	cpse	r24, r1
    15e0:	6d c0       	rjmp	.+218    	; 0x16bc <get_fat+0x188>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	b8 22       	and	r11, r24
    15e6:	ca 0d       	add	r28, r10
    15e8:	db 1d       	adc	r29, r11
    15ea:	8b a9       	ldd	r24, Y+51	; 0x33
    15ec:	61 2f       	mov	r22, r17
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	78 2b       	or	r23, r24
    15f2:	c0 fe       	sbrs	r12, 0
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <get_fat+0xd4>
    15f6:	72 95       	swap	r23
    15f8:	62 95       	swap	r22
    15fa:	6f 70       	andi	r22, 0x0F	; 15
    15fc:	67 27       	eor	r22, r23
    15fe:	7f 70       	andi	r23, 0x0F	; 15
    1600:	67 27       	eor	r22, r23
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	65 c0       	rjmp	.+202    	; 0x16d2 <get_fat+0x19e>
    1608:	7f 70       	andi	r23, 0x0F	; 15
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	61 c0       	rjmp	.+194    	; 0x16d2 <get_fat+0x19e>
    1610:	45 2f       	mov	r20, r21
    1612:	56 2f       	mov	r21, r22
    1614:	67 2f       	mov	r22, r23
    1616:	77 27       	eor	r23, r23
    1618:	8b a1       	ldd	r24, Y+35	; 0x23
    161a:	9c a1       	ldd	r25, Y+36	; 0x24
    161c:	ad a1       	ldd	r26, Y+37	; 0x25
    161e:	be a1       	ldd	r27, Y+38	; 0x26
    1620:	48 0f       	add	r20, r24
    1622:	59 1f       	adc	r21, r25
    1624:	6a 1f       	adc	r22, r26
    1626:	7b 1f       	adc	r23, r27
    1628:	ce 01       	movw	r24, r28
    162a:	4f dd       	rcall	.-1378   	; 0x10ca <move_window>
    162c:	81 11       	cpse	r24, r1
    162e:	4a c0       	rjmp	.+148    	; 0x16c4 <get_fat+0x190>
    1630:	e3 96       	adiw	r28, 0x33	; 51
    1632:	a6 01       	movw	r20, r12
    1634:	44 0f       	add	r20, r20
    1636:	55 1f       	adc	r21, r21
    1638:	4e 7f       	andi	r20, 0xFE	; 254
    163a:	51 70       	andi	r21, 0x01	; 1
    163c:	c4 0f       	add	r28, r20
    163e:	d5 1f       	adc	r29, r21
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	76 2f       	mov	r23, r22
    1646:	66 27       	eor	r22, r22
    1648:	88 81       	ld	r24, Y
    164a:	68 2b       	or	r22, r24
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <get_fat+0x19e>
    1652:	8b a1       	ldd	r24, Y+35	; 0x23
    1654:	9c a1       	ldd	r25, Y+36	; 0x24
    1656:	ad a1       	ldd	r26, Y+37	; 0x25
    1658:	be a1       	ldd	r27, Y+38	; 0x26
    165a:	68 94       	set
    165c:	16 f8       	bld	r1, 6
    165e:	76 95       	lsr	r23
    1660:	67 95       	ror	r22
    1662:	57 95       	ror	r21
    1664:	47 95       	ror	r20
    1666:	16 94       	lsr	r1
    1668:	d1 f7       	brne	.-12     	; 0x165e <get_fat+0x12a>
    166a:	48 0f       	add	r20, r24
    166c:	59 1f       	adc	r21, r25
    166e:	6a 1f       	adc	r22, r26
    1670:	7b 1f       	adc	r23, r27
    1672:	ce 01       	movw	r24, r28
    1674:	2a dd       	rcall	.-1452   	; 0x10ca <move_window>
    1676:	81 11       	cpse	r24, r1
    1678:	29 c0       	rjmp	.+82     	; 0x16cc <get_fat+0x198>
    167a:	e3 96       	adiw	r28, 0x33	; 51
    167c:	a6 01       	movw	r20, r12
    167e:	44 0f       	add	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	44 0f       	add	r20, r20
    1684:	55 1f       	adc	r21, r21
    1686:	ca 01       	movw	r24, r20
    1688:	8c 7f       	andi	r24, 0xFC	; 252
    168a:	91 70       	andi	r25, 0x01	; 1
    168c:	8c 0f       	add	r24, r28
    168e:	9d 1f       	adc	r25, r29
    1690:	8c db       	rcall	.-2280   	; 0xdaa <ld_dword>
    1692:	9f 70       	andi	r25, 0x0F	; 15
    1694:	1e c0       	rjmp	.+60     	; 0x16d2 <get_fat+0x19e>
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	19 c0       	rjmp	.+50     	; 0x16d2 <get_fat+0x19e>
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <get_fat+0x19e>
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <get_fat+0x19e>
    16b4:	6f ef       	ldi	r22, 0xFF	; 255
    16b6:	7f ef       	ldi	r23, 0xFF	; 255
    16b8:	cb 01       	movw	r24, r22
    16ba:	0b c0       	rjmp	.+22     	; 0x16d2 <get_fat+0x19e>
    16bc:	6f ef       	ldi	r22, 0xFF	; 255
    16be:	7f ef       	ldi	r23, 0xFF	; 255
    16c0:	cb 01       	movw	r24, r22
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <get_fat+0x19e>
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	7f ef       	ldi	r23, 0xFF	; 255
    16c8:	cb 01       	movw	r24, r22
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <get_fat+0x19e>
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f ef       	ldi	r23, 0xFF	; 255
    16d0:	cb 01       	movw	r24, r22
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	08 95       	ret

000016e8 <dir_sdi>:
    16e8:	4f 92       	push	r4
    16ea:	5f 92       	push	r5
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    170a:	6a 01       	movw	r12, r20
    170c:	7b 01       	movw	r14, r22
    170e:	41 15       	cp	r20, r1
    1710:	51 05       	cpc	r21, r1
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	68 07       	cpc	r22, r24
    1716:	71 05       	cpc	r23, r1
    1718:	08 f0       	brcs	.+2      	; 0x171c <dir_sdi+0x34>
    171a:	b1 c0       	rjmp	.+354    	; 0x187e <dir_sdi+0x196>
    171c:	db 01       	movw	r26, r22
    171e:	ca 01       	movw	r24, r20
    1720:	8f 71       	andi	r24, 0x1F	; 31
    1722:	99 27       	eor	r25, r25
    1724:	aa 27       	eor	r26, r26
    1726:	bb 27       	eor	r27, r27
    1728:	89 2b       	or	r24, r25
    172a:	8a 2b       	or	r24, r26
    172c:	8b 2b       	or	r24, r27
    172e:	09 f0       	breq	.+2      	; 0x1732 <dir_sdi+0x4a>
    1730:	a8 c0       	rjmp	.+336    	; 0x1882 <dir_sdi+0x19a>
    1732:	08 81       	ld	r16, Y
    1734:	19 81       	ldd	r17, Y+1	; 0x01
    1736:	4e 87       	std	Y+14, r20	; 0x0e
    1738:	5f 87       	std	Y+15, r21	; 0x0f
    173a:	68 8b       	std	Y+16, r22	; 0x10
    173c:	79 8b       	std	Y+17, r23	; 0x11
    173e:	8e 80       	ldd	r8, Y+6	; 0x06
    1740:	9f 80       	ldd	r9, Y+7	; 0x07
    1742:	a8 84       	ldd	r10, Y+8	; 0x08
    1744:	b9 84       	ldd	r11, Y+9	; 0x09
    1746:	81 14       	cp	r8, r1
    1748:	91 04       	cpc	r9, r1
    174a:	a1 04       	cpc	r10, r1
    174c:	b1 04       	cpc	r11, r1
    174e:	61 f5       	brne	.+88     	; 0x17a8 <dir_sdi+0xc0>
    1750:	f8 01       	movw	r30, r16
    1752:	80 81       	ld	r24, Z
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	40 f0       	brcs	.+16     	; 0x1768 <dir_sdi+0x80>
    1758:	87 a1       	ldd	r24, Z+39	; 0x27
    175a:	90 a5       	ldd	r25, Z+40	; 0x28
    175c:	a1 a5       	ldd	r26, Z+41	; 0x29
    175e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	a1 05       	cpc	r26, r1
    1764:	b1 05       	cpc	r27, r1
    1766:	f1 f4       	brne	.+60     	; 0x17a4 <dir_sdi+0xbc>
    1768:	f8 01       	movw	r30, r16
    176a:	87 81       	ldd	r24, Z+7	; 0x07
    176c:	90 85       	ldd	r25, Z+8	; 0x08
    176e:	a0 e0       	ldi	r26, 0x00	; 0
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	b7 01       	movw	r22, r14
    1774:	a6 01       	movw	r20, r12
    1776:	68 94       	set
    1778:	14 f8       	bld	r1, 4
    177a:	76 95       	lsr	r23
    177c:	67 95       	ror	r22
    177e:	57 95       	ror	r21
    1780:	47 95       	ror	r20
    1782:	16 94       	lsr	r1
    1784:	d1 f7       	brne	.-12     	; 0x177a <dir_sdi+0x92>
    1786:	48 17       	cp	r20, r24
    1788:	59 07       	cpc	r21, r25
    178a:	6a 07       	cpc	r22, r26
    178c:	7b 07       	cpc	r23, r27
    178e:	08 f0       	brcs	.+2      	; 0x1792 <dir_sdi+0xaa>
    1790:	7a c0       	rjmp	.+244    	; 0x1886 <dir_sdi+0x19e>
    1792:	87 a1       	ldd	r24, Z+39	; 0x27
    1794:	90 a5       	ldd	r25, Z+40	; 0x28
    1796:	a1 a5       	ldd	r26, Z+41	; 0x29
    1798:	b2 a5       	ldd	r27, Z+42	; 0x2a
    179a:	8e 8b       	std	Y+22, r24	; 0x16
    179c:	9f 8b       	std	Y+23, r25	; 0x17
    179e:	a8 8f       	std	Y+24, r26	; 0x18
    17a0:	b9 8f       	std	Y+25, r27	; 0x19
    17a2:	44 c0       	rjmp	.+136    	; 0x182c <dir_sdi+0x144>
    17a4:	4c 01       	movw	r8, r24
    17a6:	5d 01       	movw	r10, r26
    17a8:	f8 01       	movw	r30, r16
    17aa:	41 84       	ldd	r4, Z+9	; 0x09
    17ac:	52 84       	ldd	r5, Z+10	; 0x0a
    17ae:	61 2c       	mov	r6, r1
    17b0:	71 2c       	mov	r7, r1
    17b2:	03 2e       	mov	r0, r19
    17b4:	39 e0       	ldi	r19, 0x09	; 9
    17b6:	44 0c       	add	r4, r4
    17b8:	55 1c       	adc	r5, r5
    17ba:	66 1c       	adc	r6, r6
    17bc:	77 1c       	adc	r7, r7
    17be:	3a 95       	dec	r19
    17c0:	d1 f7       	brne	.-12     	; 0x17b6 <dir_sdi+0xce>
    17c2:	30 2d       	mov	r19, r0
    17c4:	c4 14       	cp	r12, r4
    17c6:	d5 04       	cpc	r13, r5
    17c8:	e6 04       	cpc	r14, r6
    17ca:	f7 04       	cpc	r15, r7
    17cc:	38 f1       	brcs	.+78     	; 0x181c <dir_sdi+0x134>
    17ce:	b5 01       	movw	r22, r10
    17d0:	a4 01       	movw	r20, r8
    17d2:	ce 01       	movw	r24, r28
    17d4:	af de       	rcall	.-674    	; 0x1534 <get_fat>
    17d6:	4b 01       	movw	r8, r22
    17d8:	5c 01       	movw	r10, r24
    17da:	6f 3f       	cpi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <dir_sdi+0xfe>
    17e4:	52 c0       	rjmp	.+164    	; 0x188a <dir_sdi+0x1a2>
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	88 16       	cp	r8, r24
    17ea:	91 04       	cpc	r9, r1
    17ec:	a1 04       	cpc	r10, r1
    17ee:	b1 04       	cpc	r11, r1
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <dir_sdi+0x10c>
    17f2:	4d c0       	rjmp	.+154    	; 0x188e <dir_sdi+0x1a6>
    17f4:	f8 01       	movw	r30, r16
    17f6:	87 89       	ldd	r24, Z+23	; 0x17
    17f8:	90 8d       	ldd	r25, Z+24	; 0x18
    17fa:	a1 8d       	ldd	r26, Z+25	; 0x19
    17fc:	b2 8d       	ldd	r27, Z+26	; 0x1a
    17fe:	88 16       	cp	r8, r24
    1800:	99 06       	cpc	r9, r25
    1802:	aa 06       	cpc	r10, r26
    1804:	bb 06       	cpc	r11, r27
    1806:	08 f0       	brcs	.+2      	; 0x180a <dir_sdi+0x122>
    1808:	44 c0       	rjmp	.+136    	; 0x1892 <dir_sdi+0x1aa>
    180a:	c4 18       	sub	r12, r4
    180c:	d5 08       	sbc	r13, r5
    180e:	e6 08       	sbc	r14, r6
    1810:	f7 08       	sbc	r15, r7
    1812:	c4 14       	cp	r12, r4
    1814:	d5 04       	cpc	r13, r5
    1816:	e6 04       	cpc	r14, r6
    1818:	f7 04       	cpc	r15, r7
    181a:	c8 f6       	brcc	.-78     	; 0x17ce <dir_sdi+0xe6>
    181c:	b5 01       	movw	r22, r10
    181e:	a4 01       	movw	r20, r8
    1820:	c8 01       	movw	r24, r16
    1822:	15 db       	rcall	.-2518   	; 0xe4e <clst2sect>
    1824:	6e 8b       	std	Y+22, r22	; 0x16
    1826:	7f 8b       	std	Y+23, r23	; 0x17
    1828:	88 8f       	std	Y+24, r24	; 0x18
    182a:	99 8f       	std	Y+25, r25	; 0x19
    182c:	8a 8a       	std	Y+18, r8	; 0x12
    182e:	9b 8a       	std	Y+19, r9	; 0x13
    1830:	ac 8a       	std	Y+20, r10	; 0x14
    1832:	bd 8a       	std	Y+21, r11	; 0x15
    1834:	8e 89       	ldd	r24, Y+22	; 0x16
    1836:	9f 89       	ldd	r25, Y+23	; 0x17
    1838:	a8 8d       	ldd	r26, Y+24	; 0x18
    183a:	b9 8d       	ldd	r27, Y+25	; 0x19
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	a1 05       	cpc	r26, r1
    1840:	b1 05       	cpc	r27, r1
    1842:	49 f1       	breq	.+82     	; 0x1896 <dir_sdi+0x1ae>
    1844:	b7 01       	movw	r22, r14
    1846:	a6 01       	movw	r20, r12
    1848:	03 2e       	mov	r0, r19
    184a:	39 e0       	ldi	r19, 0x09	; 9
    184c:	76 95       	lsr	r23
    184e:	67 95       	ror	r22
    1850:	57 95       	ror	r21
    1852:	47 95       	ror	r20
    1854:	3a 95       	dec	r19
    1856:	d1 f7       	brne	.-12     	; 0x184c <dir_sdi+0x164>
    1858:	30 2d       	mov	r19, r0
    185a:	84 0f       	add	r24, r20
    185c:	95 1f       	adc	r25, r21
    185e:	a6 1f       	adc	r26, r22
    1860:	b7 1f       	adc	r27, r23
    1862:	8e 8b       	std	Y+22, r24	; 0x16
    1864:	9f 8b       	std	Y+23, r25	; 0x17
    1866:	a8 8f       	std	Y+24, r26	; 0x18
    1868:	b9 8f       	std	Y+25, r27	; 0x19
    186a:	0d 5c       	subi	r16, 0xCD	; 205
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	df 22       	and	r13, r31
    1872:	c0 0e       	add	r12, r16
    1874:	d1 1e       	adc	r13, r17
    1876:	db 8e       	std	Y+27, r13	; 0x1b
    1878:	ca 8e       	std	Y+26, r12	; 0x1a
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <dir_sdi+0x1b0>
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <dir_sdi+0x1b0>
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <dir_sdi+0x1b0>
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <dir_sdi+0x1b0>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <dir_sdi+0x1b0>
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <dir_sdi+0x1b0>
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <dir_sdi+0x1b0>
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	4f 90       	pop	r4
    18b8:	08 95       	ret

000018ba <create_chain>:
    18ba:	4f 92       	push	r4
    18bc:	5f 92       	push	r5
    18be:	6f 92       	push	r6
    18c0:	7f 92       	push	r7
    18c2:	8f 92       	push	r8
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	8c 01       	movw	r16, r24
    18dc:	2a 01       	movw	r4, r20
    18de:	3b 01       	movw	r6, r22
    18e0:	fc 01       	movw	r30, r24
    18e2:	c0 81       	ld	r28, Z
    18e4:	d1 81       	ldd	r29, Z+1	; 0x01
    18e6:	41 15       	cp	r20, r1
    18e8:	51 05       	cpc	r21, r1
    18ea:	61 05       	cpc	r22, r1
    18ec:	71 05       	cpc	r23, r1
    18ee:	c9 f4       	brne	.+50     	; 0x1922 <create_chain+0x68>
    18f0:	8b 84       	ldd	r8, Y+11	; 0x0b
    18f2:	9c 84       	ldd	r9, Y+12	; 0x0c
    18f4:	ad 84       	ldd	r10, Y+13	; 0x0d
    18f6:	be 84       	ldd	r11, Y+14	; 0x0e
    18f8:	81 14       	cp	r8, r1
    18fa:	91 04       	cpc	r9, r1
    18fc:	a1 04       	cpc	r10, r1
    18fe:	b1 04       	cpc	r11, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <create_chain+0x4a>
    1902:	1d c1       	rjmp	.+570    	; 0x1b3e <create_chain+0x284>
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	a9 8d       	ldd	r26, Y+25	; 0x19
    190a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    190c:	88 16       	cp	r8, r24
    190e:	99 06       	cpc	r9, r25
    1910:	aa 06       	cpc	r10, r26
    1912:	bb 06       	cpc	r11, r27
    1914:	08 f4       	brcc	.+2      	; 0x1918 <create_chain+0x5e>
    1916:	17 c1       	rjmp	.+558    	; 0x1b46 <create_chain+0x28c>
    1918:	81 2c       	mov	r8, r1
    191a:	91 2c       	mov	r9, r1
    191c:	54 01       	movw	r10, r8
    191e:	83 94       	inc	r8
    1920:	12 c1       	rjmp	.+548    	; 0x1b46 <create_chain+0x28c>
    1922:	08 de       	rcall	.-1008   	; 0x1534 <get_fat>
    1924:	62 30       	cpi	r22, 0x02	; 2
    1926:	71 05       	cpc	r23, r1
    1928:	81 05       	cpc	r24, r1
    192a:	91 05       	cpc	r25, r1
    192c:	08 f4       	brcc	.+2      	; 0x1930 <create_chain+0x76>
    192e:	cf c0       	rjmp	.+414    	; 0x1ace <create_chain+0x214>
    1930:	6f 3f       	cpi	r22, 0xFF	; 255
    1932:	ff ef       	ldi	r31, 0xFF	; 255
    1934:	7f 07       	cpc	r23, r31
    1936:	8f 07       	cpc	r24, r31
    1938:	9f 07       	cpc	r25, r31
    193a:	09 f4       	brne	.+2      	; 0x193e <create_chain+0x84>
    193c:	cd c0       	rjmp	.+410    	; 0x1ad8 <create_chain+0x21e>
    193e:	cf 88       	ldd	r12, Y+23	; 0x17
    1940:	d8 8c       	ldd	r13, Y+24	; 0x18
    1942:	e9 8c       	ldd	r14, Y+25	; 0x19
    1944:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1946:	6c 15       	cp	r22, r12
    1948:	7d 05       	cpc	r23, r13
    194a:	8e 05       	cpc	r24, r14
    194c:	9f 05       	cpc	r25, r15
    194e:	08 f0       	brcs	.+2      	; 0x1952 <create_chain+0x98>
    1950:	e5 c0       	rjmp	.+458    	; 0x1b1c <create_chain+0x262>
    1952:	03 c1       	rjmp	.+518    	; 0x1b5a <create_chain+0x2a0>
    1954:	73 01       	movw	r14, r6
    1956:	62 01       	movw	r12, r4
    1958:	2f ef       	ldi	r18, 0xFF	; 255
    195a:	c2 1a       	sub	r12, r18
    195c:	d2 0a       	sbc	r13, r18
    195e:	e2 0a       	sbc	r14, r18
    1960:	f2 0a       	sbc	r15, r18
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	a9 8d       	ldd	r26, Y+25	; 0x19
    1968:	ba 8d       	ldd	r27, Y+26	; 0x1a
    196a:	c8 16       	cp	r12, r24
    196c:	d9 06       	cpc	r13, r25
    196e:	ea 06       	cpc	r14, r26
    1970:	fb 06       	cpc	r15, r27
    1972:	28 f0       	brcs	.+10     	; 0x197e <create_chain+0xc4>
    1974:	c1 2c       	mov	r12, r1
    1976:	d1 2c       	mov	r13, r1
    1978:	76 01       	movw	r14, r12
    197a:	68 94       	set
    197c:	c1 f8       	bld	r12, 1
    197e:	b7 01       	movw	r22, r14
    1980:	a6 01       	movw	r20, r12
    1982:	c8 01       	movw	r24, r16
    1984:	d7 dd       	rcall	.-1106   	; 0x1534 <get_fat>
    1986:	61 30       	cpi	r22, 0x01	; 1
    1988:	71 05       	cpc	r23, r1
    198a:	81 05       	cpc	r24, r1
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <create_chain+0xd8>
    1990:	a7 c0       	rjmp	.+334    	; 0x1ae0 <create_chain+0x226>
    1992:	6f 3f       	cpi	r22, 0xFF	; 255
    1994:	ef ef       	ldi	r30, 0xFF	; 255
    1996:	7e 07       	cpc	r23, r30
    1998:	8e 07       	cpc	r24, r30
    199a:	9e 07       	cpc	r25, r30
    199c:	09 f4       	brne	.+2      	; 0x19a0 <create_chain+0xe6>
    199e:	a5 c0       	rjmp	.+330    	; 0x1aea <create_chain+0x230>
    19a0:	67 2b       	or	r22, r23
    19a2:	68 2b       	or	r22, r24
    19a4:	69 2b       	or	r22, r25
    19a6:	b1 f0       	breq	.+44     	; 0x19d4 <create_chain+0x11a>
    19a8:	8b 84       	ldd	r8, Y+11	; 0x0b
    19aa:	9c 84       	ldd	r9, Y+12	; 0x0c
    19ac:	ad 84       	ldd	r10, Y+13	; 0x0d
    19ae:	be 84       	ldd	r11, Y+14	; 0x0e
    19b0:	f2 e0       	ldi	r31, 0x02	; 2
    19b2:	8f 16       	cp	r8, r31
    19b4:	91 04       	cpc	r9, r1
    19b6:	a1 04       	cpc	r10, r1
    19b8:	b1 04       	cpc	r11, r1
    19ba:	08 f4       	brcc	.+2      	; 0x19be <create_chain+0x104>
    19bc:	ba c0       	rjmp	.+372    	; 0x1b32 <create_chain+0x278>
    19be:	8f 89       	ldd	r24, Y+23	; 0x17
    19c0:	98 8d       	ldd	r25, Y+24	; 0x18
    19c2:	a9 8d       	ldd	r26, Y+25	; 0x19
    19c4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19c6:	88 16       	cp	r8, r24
    19c8:	99 06       	cpc	r9, r25
    19ca:	aa 06       	cpc	r10, r26
    19cc:	bb 06       	cpc	r11, r27
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <create_chain+0x118>
    19d0:	b3 c0       	rjmp	.+358    	; 0x1b38 <create_chain+0x27e>
    19d2:	07 c0       	rjmp	.+14     	; 0x19e2 <create_chain+0x128>
    19d4:	c1 14       	cp	r12, r1
    19d6:	d1 04       	cpc	r13, r1
    19d8:	e1 04       	cpc	r14, r1
    19da:	f1 04       	cpc	r15, r1
    19dc:	c9 f5       	brne	.+114    	; 0x1a50 <create_chain+0x196>
    19de:	53 01       	movw	r10, r6
    19e0:	42 01       	movw	r8, r4
    19e2:	75 01       	movw	r14, r10
    19e4:	64 01       	movw	r12, r8
    19e6:	2f ef       	ldi	r18, 0xFF	; 255
    19e8:	c2 1a       	sub	r12, r18
    19ea:	d2 0a       	sbc	r13, r18
    19ec:	e2 0a       	sbc	r14, r18
    19ee:	f2 0a       	sbc	r15, r18
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    19f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19f8:	c8 16       	cp	r12, r24
    19fa:	d9 06       	cpc	r13, r25
    19fc:	ea 06       	cpc	r14, r26
    19fe:	fb 06       	cpc	r15, r27
    1a00:	60 f0       	brcs	.+24     	; 0x1a1a <create_chain+0x160>
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	88 16       	cp	r8, r24
    1a06:	91 04       	cpc	r9, r1
    1a08:	a1 04       	cpc	r10, r1
    1a0a:	b1 04       	cpc	r11, r1
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <create_chain+0x156>
    1a0e:	71 c0       	rjmp	.+226    	; 0x1af2 <create_chain+0x238>
    1a10:	c1 2c       	mov	r12, r1
    1a12:	d1 2c       	mov	r13, r1
    1a14:	76 01       	movw	r14, r12
    1a16:	68 94       	set
    1a18:	c1 f8       	bld	r12, 1
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	a6 01       	movw	r20, r12
    1a1e:	c8 01       	movw	r24, r16
    1a20:	89 dd       	rcall	.-1262   	; 0x1534 <get_fat>
    1a22:	61 15       	cp	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	81 05       	cpc	r24, r1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	91 f0       	breq	.+36     	; 0x1a50 <create_chain+0x196>
    1a2c:	61 30       	cpi	r22, 0x01	; 1
    1a2e:	71 05       	cpc	r23, r1
    1a30:	81 05       	cpc	r24, r1
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <create_chain+0x17e>
    1a36:	61 c0       	rjmp	.+194    	; 0x1afa <create_chain+0x240>
    1a38:	6f 3f       	cpi	r22, 0xFF	; 255
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <create_chain+0x18a>
    1a42:	60 c0       	rjmp	.+192    	; 0x1b04 <create_chain+0x24a>
    1a44:	c8 14       	cp	r12, r8
    1a46:	d9 04       	cpc	r13, r9
    1a48:	ea 04       	cpc	r14, r10
    1a4a:	fb 04       	cpc	r15, r11
    1a4c:	61 f6       	brne	.-104    	; 0x19e6 <create_chain+0x12c>
    1a4e:	5e c0       	rjmp	.+188    	; 0x1b0c <create_chain+0x252>
    1a50:	0f ef       	ldi	r16, 0xFF	; 255
    1a52:	1f ef       	ldi	r17, 0xFF	; 255
    1a54:	98 01       	movw	r18, r16
    1a56:	b7 01       	movw	r22, r14
    1a58:	a6 01       	movw	r20, r12
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	42 dc       	rcall	.-1916   	; 0x12e2 <put_fat>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	2f c0       	rjmp	.+94     	; 0x1ac0 <create_chain+0x206>
    1a62:	41 14       	cp	r4, r1
    1a64:	51 04       	cpc	r5, r1
    1a66:	61 04       	cpc	r6, r1
    1a68:	71 04       	cpc	r7, r1
    1a6a:	41 f0       	breq	.+16     	; 0x1a7c <create_chain+0x1c2>
    1a6c:	97 01       	movw	r18, r14
    1a6e:	86 01       	movw	r16, r12
    1a70:	b3 01       	movw	r22, r6
    1a72:	a2 01       	movw	r20, r4
    1a74:	ce 01       	movw	r24, r28
    1a76:	35 dc       	rcall	.-1942   	; 0x12e2 <put_fat>
    1a78:	81 11       	cpse	r24, r1
    1a7a:	22 c0       	rjmp	.+68     	; 0x1ac0 <create_chain+0x206>
    1a7c:	cb 86       	std	Y+11, r12	; 0x0b
    1a7e:	dc 86       	std	Y+12, r13	; 0x0c
    1a80:	ed 86       	std	Y+13, r14	; 0x0d
    1a82:	fe 86       	std	Y+14, r15	; 0x0e
    1a84:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a86:	58 89       	ldd	r21, Y+16	; 0x10
    1a88:	69 89       	ldd	r22, Y+17	; 0x11
    1a8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	a9 8d       	ldd	r26, Y+25	; 0x19
    1a92:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a94:	02 97       	sbiw	r24, 0x02	; 2
    1a96:	a1 09       	sbc	r26, r1
    1a98:	b1 09       	sbc	r27, r1
    1a9a:	84 17       	cp	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	a6 07       	cpc	r26, r22
    1aa0:	b7 07       	cpc	r27, r23
    1aa2:	40 f0       	brcs	.+16     	; 0x1ab4 <create_chain+0x1fa>
    1aa4:	41 50       	subi	r20, 0x01	; 1
    1aa6:	51 09       	sbc	r21, r1
    1aa8:	61 09       	sbc	r22, r1
    1aaa:	71 09       	sbc	r23, r1
    1aac:	4f 87       	std	Y+15, r20	; 0x0f
    1aae:	58 8b       	std	Y+16, r21	; 0x10
    1ab0:	69 8b       	std	Y+17, r22	; 0x11
    1ab2:	7a 8b       	std	Y+18, r23	; 0x12
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	81 60       	ori	r24, 0x01	; 1
    1ab8:	8c 83       	std	Y+4, r24	; 0x04
    1aba:	c7 01       	movw	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	4d c0       	rjmp	.+154    	; 0x1b5a <create_chain+0x2a0>
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	41 f1       	breq	.+80     	; 0x1b14 <create_chain+0x25a>
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	46 c0       	rjmp	.+140    	; 0x1b5a <create_chain+0x2a0>
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	41 c0       	rjmp	.+130    	; 0x1b5a <create_chain+0x2a0>
    1ad8:	6f ef       	ldi	r22, 0xFF	; 255
    1ada:	7f ef       	ldi	r23, 0xFF	; 255
    1adc:	cb 01       	movw	r24, r22
    1ade:	3d c0       	rjmp	.+122    	; 0x1b5a <create_chain+0x2a0>
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	38 c0       	rjmp	.+112    	; 0x1b5a <create_chain+0x2a0>
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f ef       	ldi	r23, 0xFF	; 255
    1aee:	cb 01       	movw	r24, r22
    1af0:	34 c0       	rjmp	.+104    	; 0x1b5a <create_chain+0x2a0>
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	cb 01       	movw	r24, r22
    1af8:	30 c0       	rjmp	.+96     	; 0x1b5a <create_chain+0x2a0>
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	2b c0       	rjmp	.+86     	; 0x1b5a <create_chain+0x2a0>
    1b04:	6f ef       	ldi	r22, 0xFF	; 255
    1b06:	7f ef       	ldi	r23, 0xFF	; 255
    1b08:	cb 01       	movw	r24, r22
    1b0a:	27 c0       	rjmp	.+78     	; 0x1b5a <create_chain+0x2a0>
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	cb 01       	movw	r24, r22
    1b12:	23 c0       	rjmp	.+70     	; 0x1b5a <create_chain+0x2a0>
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	7f ef       	ldi	r23, 0xFF	; 255
    1b18:	cb 01       	movw	r24, r22
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <create_chain+0x2a0>
    1b1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b1e:	78 89       	ldd	r23, Y+16	; 0x10
    1b20:	89 89       	ldd	r24, Y+17	; 0x11
    1b22:	9a 89       	ldd	r25, Y+18	; 0x12
    1b24:	61 15       	cp	r22, r1
    1b26:	71 05       	cpc	r23, r1
    1b28:	81 05       	cpc	r24, r1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <create_chain+0x276>
    1b2e:	12 cf       	rjmp	.-476    	; 0x1954 <create_chain+0x9a>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <create_chain+0x2a0>
    1b32:	53 01       	movw	r10, r6
    1b34:	42 01       	movw	r8, r4
    1b36:	55 cf       	rjmp	.-342    	; 0x19e2 <create_chain+0x128>
    1b38:	53 01       	movw	r10, r6
    1b3a:	42 01       	movw	r8, r4
    1b3c:	52 cf       	rjmp	.-348    	; 0x19e2 <create_chain+0x128>
    1b3e:	81 2c       	mov	r8, r1
    1b40:	91 2c       	mov	r9, r1
    1b42:	54 01       	movw	r10, r8
    1b44:	83 94       	inc	r8
    1b46:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b48:	78 89       	ldd	r23, Y+16	; 0x10
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	61 15       	cp	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	81 05       	cpc	r24, r1
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <create_chain+0x2a0>
    1b58:	44 cf       	rjmp	.-376    	; 0x19e2 <create_chain+0x128>
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	7f 90       	pop	r7
    1b74:	6f 90       	pop	r6
    1b76:	5f 90       	pop	r5
    1b78:	4f 90       	pop	r4
    1b7a:	08 95       	ret

00001b7c <remove_chain>:
    1b7c:	4f 92       	push	r4
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	5c 01       	movw	r10, r24
    1b9a:	6a 01       	movw	r12, r20
    1b9c:	7b 01       	movw	r14, r22
    1b9e:	b9 01       	movw	r22, r18
    1ba0:	a8 01       	movw	r20, r16
    1ba2:	22 e0       	ldi	r18, 0x02	; 2
    1ba4:	c2 16       	cp	r12, r18
    1ba6:	d1 04       	cpc	r13, r1
    1ba8:	e1 04       	cpc	r14, r1
    1baa:	f1 04       	cpc	r15, r1
    1bac:	08 f4       	brcc	.+2      	; 0x1bb0 <remove_chain+0x34>
    1bae:	60 c0       	rjmp	.+192    	; 0x1c70 <remove_chain+0xf4>
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	c0 81       	ld	r28, Z
    1bb4:	d1 81       	ldd	r29, Z+1	; 0x01
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bbc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bbe:	c8 16       	cp	r12, r24
    1bc0:	d9 06       	cpc	r13, r25
    1bc2:	ea 06       	cpc	r14, r26
    1bc4:	fb 06       	cpc	r15, r27
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <remove_chain+0x4e>
    1bc8:	55 c0       	rjmp	.+170    	; 0x1c74 <remove_chain+0xf8>
    1bca:	41 15       	cp	r20, r1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	61 05       	cpc	r22, r1
    1bd0:	71 05       	cpc	r23, r1
    1bd2:	39 f0       	breq	.+14     	; 0x1be2 <remove_chain+0x66>
    1bd4:	0f ef       	ldi	r16, 0xFF	; 255
    1bd6:	1f ef       	ldi	r17, 0xFF	; 255
    1bd8:	98 01       	movw	r18, r16
    1bda:	ce 01       	movw	r24, r28
    1bdc:	82 db       	rcall	.-2300   	; 0x12e2 <put_fat>
    1bde:	81 11       	cpse	r24, r1
    1be0:	50 c0       	rjmp	.+160    	; 0x1c82 <remove_chain+0x106>
    1be2:	b7 01       	movw	r22, r14
    1be4:	a6 01       	movw	r20, r12
    1be6:	c5 01       	movw	r24, r10
    1be8:	a5 dc       	rcall	.-1718   	; 0x1534 <get_fat>
    1bea:	2b 01       	movw	r4, r22
    1bec:	3c 01       	movw	r6, r24
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	81 05       	cpc	r24, r1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <remove_chain+0x7e>
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <remove_chain+0xfc>
    1bfa:	61 30       	cpi	r22, 0x01	; 1
    1bfc:	71 05       	cpc	r23, r1
    1bfe:	81 05       	cpc	r24, r1
    1c00:	91 05       	cpc	r25, r1
    1c02:	e1 f1       	breq	.+120    	; 0x1c7c <remove_chain+0x100>
    1c04:	6f 3f       	cpi	r22, 0xFF	; 255
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	c9 f1       	breq	.+114    	; 0x1c80 <remove_chain+0x104>
    1c0e:	00 e0       	ldi	r16, 0x00	; 0
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	98 01       	movw	r18, r16
    1c14:	b7 01       	movw	r22, r14
    1c16:	a6 01       	movw	r20, r12
    1c18:	ce 01       	movw	r24, r28
    1c1a:	63 db       	rcall	.-2362   	; 0x12e2 <put_fat>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	31 c0       	rjmp	.+98     	; 0x1c82 <remove_chain+0x106>
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	a9 89       	ldd	r26, Y+17	; 0x11
    1c26:	ba 89       	ldd	r27, Y+18	; 0x12
    1c28:	4f 89       	ldd	r20, Y+23	; 0x17
    1c2a:	58 8d       	ldd	r21, Y+24	; 0x18
    1c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c30:	6a 01       	movw	r12, r20
    1c32:	7b 01       	movw	r14, r22
    1c34:	e2 e0       	ldi	r30, 0x02	; 2
    1c36:	ce 1a       	sub	r12, r30
    1c38:	d1 08       	sbc	r13, r1
    1c3a:	e1 08       	sbc	r14, r1
    1c3c:	f1 08       	sbc	r15, r1
    1c3e:	8c 15       	cp	r24, r12
    1c40:	9d 05       	cpc	r25, r13
    1c42:	ae 05       	cpc	r26, r14
    1c44:	bf 05       	cpc	r27, r15
    1c46:	50 f4       	brcc	.+20     	; 0x1c5c <remove_chain+0xe0>
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	a1 1d       	adc	r26, r1
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	8f 87       	std	Y+15, r24	; 0x0f
    1c50:	98 8b       	std	Y+16, r25	; 0x10
    1c52:	a9 8b       	std	Y+17, r26	; 0x11
    1c54:	ba 8b       	std	Y+18, r27	; 0x12
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	8c 83       	std	Y+4, r24	; 0x04
    1c5c:	73 01       	movw	r14, r6
    1c5e:	62 01       	movw	r12, r4
    1c60:	44 16       	cp	r4, r20
    1c62:	55 06       	cpc	r5, r21
    1c64:	66 06       	cpc	r6, r22
    1c66:	77 06       	cpc	r7, r23
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <remove_chain+0xf0>
    1c6a:	bb cf       	rjmp	.-138    	; 0x1be2 <remove_chain+0x66>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <remove_chain+0x106>
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <remove_chain+0x106>
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <remove_chain+0x106>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <remove_chain+0x106>
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <remove_chain+0x106>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	bf 90       	pop	r11
    1c94:	af 90       	pop	r10
    1c96:	7f 90       	pop	r7
    1c98:	6f 90       	pop	r6
    1c9a:	5f 90       	pop	r5
    1c9c:	4f 90       	pop	r4
    1c9e:	08 95       	ret

00001ca0 <dir_next>:
    1ca0:	4f 92       	push	r4
    1ca2:	5f 92       	push	r5
    1ca4:	6f 92       	push	r6
    1ca6:	7f 92       	push	r7
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8b 01       	movw	r16, r22
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	46 89       	ldd	r20, Z+22	; 0x16
    1cc2:	57 89       	ldd	r21, Z+23	; 0x17
    1cc4:	60 8d       	ldd	r22, Z+24	; 0x18
    1cc6:	71 8d       	ldd	r23, Z+25	; 0x19
    1cc8:	41 15       	cp	r20, r1
    1cca:	51 05       	cpc	r21, r1
    1ccc:	61 05       	cpc	r22, r1
    1cce:	71 05       	cpc	r23, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <dir_next+0x34>
    1cd2:	be c0       	rjmp	.+380    	; 0x1e50 <dir_next+0x1b0>
    1cd4:	c6 84       	ldd	r12, Z+14	; 0x0e
    1cd6:	d7 84       	ldd	r13, Z+15	; 0x0f
    1cd8:	e0 88       	ldd	r14, Z+16	; 0x10
    1cda:	f1 88       	ldd	r15, Z+17	; 0x11
    1cdc:	f0 e2       	ldi	r31, 0x20	; 32
    1cde:	cf 0e       	add	r12, r31
    1ce0:	d1 1c       	adc	r13, r1
    1ce2:	e1 1c       	adc	r14, r1
    1ce4:	f1 1c       	adc	r15, r1
    1ce6:	c1 14       	cp	r12, r1
    1ce8:	d1 04       	cpc	r13, r1
    1cea:	20 e2       	ldi	r18, 0x20	; 32
    1cec:	e2 06       	cpc	r14, r18
    1cee:	f1 04       	cpc	r15, r1
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <dir_next+0x54>
    1cf2:	b0 c0       	rjmp	.+352    	; 0x1e54 <dir_next+0x1b4>
    1cf4:	ec 01       	movw	r28, r24
    1cf6:	a8 80       	ld	r10, Y
    1cf8:	b9 80       	ldd	r11, Y+1	; 0x01
    1cfa:	d7 01       	movw	r26, r14
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	91 70       	andi	r25, 0x01	; 1
    1d00:	aa 27       	eor	r26, r26
    1d02:	bb 27       	eor	r27, r27
    1d04:	89 2b       	or	r24, r25
    1d06:	8a 2b       	or	r24, r26
    1d08:	8b 2b       	or	r24, r27
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <dir_next+0x6e>
    1d0c:	92 c0       	rjmp	.+292    	; 0x1e32 <dir_next+0x192>
    1d0e:	4f 5f       	subi	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	6f 4f       	sbci	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	4e 8b       	std	Y+22, r20	; 0x16
    1d18:	5f 8b       	std	Y+23, r21	; 0x17
    1d1a:	68 8f       	std	Y+24, r22	; 0x18
    1d1c:	79 8f       	std	Y+25, r23	; 0x19
    1d1e:	4a 89       	ldd	r20, Y+18	; 0x12
    1d20:	5b 89       	ldd	r21, Y+19	; 0x13
    1d22:	6c 89       	ldd	r22, Y+20	; 0x14
    1d24:	7d 89       	ldd	r23, Y+21	; 0x15
    1d26:	41 15       	cp	r20, r1
    1d28:	51 05       	cpc	r21, r1
    1d2a:	61 05       	cpc	r22, r1
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	d9 f4       	brne	.+54     	; 0x1d66 <dir_next+0xc6>
    1d30:	f5 01       	movw	r30, r10
    1d32:	87 81       	ldd	r24, Z+7	; 0x07
    1d34:	90 85       	ldd	r25, Z+8	; 0x08
    1d36:	a0 e0       	ldi	r26, 0x00	; 0
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	a6 01       	movw	r20, r12
    1d3e:	68 94       	set
    1d40:	14 f8       	bld	r1, 4
    1d42:	76 95       	lsr	r23
    1d44:	67 95       	ror	r22
    1d46:	57 95       	ror	r21
    1d48:	47 95       	ror	r20
    1d4a:	16 94       	lsr	r1
    1d4c:	d1 f7       	brne	.-12     	; 0x1d42 <dir_next+0xa2>
    1d4e:	48 17       	cp	r20, r24
    1d50:	59 07       	cpc	r21, r25
    1d52:	6a 07       	cpc	r22, r26
    1d54:	7b 07       	cpc	r23, r27
    1d56:	08 f4       	brcc	.+2      	; 0x1d5a <dir_next+0xba>
    1d58:	6c c0       	rjmp	.+216    	; 0x1e32 <dir_next+0x192>
    1d5a:	1e 8a       	std	Y+22, r1	; 0x16
    1d5c:	1f 8a       	std	Y+23, r1	; 0x17
    1d5e:	18 8e       	std	Y+24, r1	; 0x18
    1d60:	19 8e       	std	Y+25, r1	; 0x19
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	84 c0       	rjmp	.+264    	; 0x1e6e <dir_next+0x1ce>
    1d66:	f5 01       	movw	r30, r10
    1d68:	81 85       	ldd	r24, Z+9	; 0x09
    1d6a:	92 85       	ldd	r25, Z+10	; 0x0a
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	26 01       	movw	r4, r12
    1d74:	37 01       	movw	r6, r14
    1d76:	03 2e       	mov	r0, r19
    1d78:	39 e0       	ldi	r19, 0x09	; 9
    1d7a:	76 94       	lsr	r7
    1d7c:	67 94       	ror	r6
    1d7e:	57 94       	ror	r5
    1d80:	47 94       	ror	r4
    1d82:	3a 95       	dec	r19
    1d84:	d1 f7       	brne	.-12     	; 0x1d7a <dir_next+0xda>
    1d86:	30 2d       	mov	r19, r0
    1d88:	84 21       	and	r24, r4
    1d8a:	95 21       	and	r25, r5
    1d8c:	a6 21       	and	r26, r6
    1d8e:	b7 21       	and	r27, r7
    1d90:	89 2b       	or	r24, r25
    1d92:	8a 2b       	or	r24, r26
    1d94:	8b 2b       	or	r24, r27
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <dir_next+0xfa>
    1d98:	4c c0       	rjmp	.+152    	; 0x1e32 <dir_next+0x192>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	cb db       	rcall	.-2154   	; 0x1534 <get_fat>
    1d9e:	2b 01       	movw	r4, r22
    1da0:	3c 01       	movw	r6, r24
    1da2:	62 30       	cpi	r22, 0x02	; 2
    1da4:	71 05       	cpc	r23, r1
    1da6:	81 05       	cpc	r24, r1
    1da8:	91 05       	cpc	r25, r1
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <dir_next+0x10e>
    1dac:	55 c0       	rjmp	.+170    	; 0x1e58 <dir_next+0x1b8>
    1dae:	6f 3f       	cpi	r22, 0xFF	; 255
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	09 f4       	brne	.+2      	; 0x1dba <dir_next+0x11a>
    1db8:	51 c0       	rjmp	.+162    	; 0x1e5c <dir_next+0x1bc>
    1dba:	f5 01       	movw	r30, r10
    1dbc:	87 89       	ldd	r24, Z+23	; 0x17
    1dbe:	90 8d       	ldd	r25, Z+24	; 0x18
    1dc0:	a1 8d       	ldd	r26, Z+25	; 0x19
    1dc2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1dc4:	48 16       	cp	r4, r24
    1dc6:	59 06       	cpc	r5, r25
    1dc8:	6a 06       	cpc	r6, r26
    1dca:	7b 06       	cpc	r7, r27
    1dcc:	30 f1       	brcs	.+76     	; 0x1e1a <dir_next+0x17a>
    1dce:	01 2b       	or	r16, r17
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <dir_next+0x13e>
    1dd2:	1e 8a       	std	Y+22, r1	; 0x16
    1dd4:	1f 8a       	std	Y+23, r1	; 0x17
    1dd6:	18 8e       	std	Y+24, r1	; 0x18
    1dd8:	19 8e       	std	Y+25, r1	; 0x19
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	48 c0       	rjmp	.+144    	; 0x1e6e <dir_next+0x1ce>
    1dde:	4a 89       	ldd	r20, Y+18	; 0x12
    1de0:	5b 89       	ldd	r21, Y+19	; 0x13
    1de2:	6c 89       	ldd	r22, Y+20	; 0x14
    1de4:	7d 89       	ldd	r23, Y+21	; 0x15
    1de6:	ce 01       	movw	r24, r28
    1de8:	68 dd       	rcall	.-1328   	; 0x18ba <create_chain>
    1dea:	2b 01       	movw	r4, r22
    1dec:	3c 01       	movw	r6, r24
    1dee:	61 15       	cp	r22, r1
    1df0:	71 05       	cpc	r23, r1
    1df2:	81 05       	cpc	r24, r1
    1df4:	91 05       	cpc	r25, r1
    1df6:	a1 f1       	breq	.+104    	; 0x1e60 <dir_next+0x1c0>
    1df8:	61 30       	cpi	r22, 0x01	; 1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	81 05       	cpc	r24, r1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	89 f1       	breq	.+98     	; 0x1e64 <dir_next+0x1c4>
    1e02:	6f 3f       	cpi	r22, 0xFF	; 255
    1e04:	2f ef       	ldi	r18, 0xFF	; 255
    1e06:	72 07       	cpc	r23, r18
    1e08:	82 07       	cpc	r24, r18
    1e0a:	92 07       	cpc	r25, r18
    1e0c:	69 f1       	breq	.+90     	; 0x1e68 <dir_next+0x1c8>
    1e0e:	ab 01       	movw	r20, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	c5 01       	movw	r24, r10
    1e14:	96 d9       	rcall	.-3284   	; 0x1142 <dir_clear>
    1e16:	81 11       	cpse	r24, r1
    1e18:	29 c0       	rjmp	.+82     	; 0x1e6c <dir_next+0x1cc>
    1e1a:	4a 8a       	std	Y+18, r4	; 0x12
    1e1c:	5b 8a       	std	Y+19, r5	; 0x13
    1e1e:	6c 8a       	std	Y+20, r6	; 0x14
    1e20:	7d 8a       	std	Y+21, r7	; 0x15
    1e22:	b3 01       	movw	r22, r6
    1e24:	a2 01       	movw	r20, r4
    1e26:	c5 01       	movw	r24, r10
    1e28:	12 d8       	rcall	.-4060   	; 0xe4e <clst2sect>
    1e2a:	6e 8b       	std	Y+22, r22	; 0x16
    1e2c:	7f 8b       	std	Y+23, r23	; 0x17
    1e2e:	88 8f       	std	Y+24, r24	; 0x18
    1e30:	99 8f       	std	Y+25, r25	; 0x19
    1e32:	ce 86       	std	Y+14, r12	; 0x0e
    1e34:	df 86       	std	Y+15, r13	; 0x0f
    1e36:	e8 8a       	std	Y+16, r14	; 0x10
    1e38:	f9 8a       	std	Y+17, r15	; 0x11
    1e3a:	83 e3       	ldi	r24, 0x33	; 51
    1e3c:	a8 0e       	add	r10, r24
    1e3e:	b1 1c       	adc	r11, r1
    1e40:	e1 e0       	ldi	r30, 0x01	; 1
    1e42:	de 22       	and	r13, r30
    1e44:	ca 0c       	add	r12, r10
    1e46:	db 1c       	adc	r13, r11
    1e48:	db 8e       	std	Y+27, r13	; 0x1b
    1e4a:	ca 8e       	std	Y+26, r12	; 0x1a
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <dir_next+0x1ce>
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <dir_next+0x1ce>
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	0b c0       	rjmp	.+22     	; 0x1e6e <dir_next+0x1ce>
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <dir_next+0x1ce>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <dir_next+0x1ce>
    1e60:	87 e0       	ldi	r24, 0x07	; 7
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <dir_next+0x1ce>
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <dir_next+0x1ce>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <dir_next+0x1ce>
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	bf 90       	pop	r11
    1e80:	af 90       	pop	r10
    1e82:	7f 90       	pop	r7
    1e84:	6f 90       	pop	r6
    1e86:	5f 90       	pop	r5
    1e88:	4f 90       	pop	r4
    1e8a:	08 95       	ret

00001e8c <dir_alloc>:
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	ec 01       	movw	r28, r24
    1e9e:	6b 01       	movw	r12, r22
    1ea0:	e8 80       	ld	r14, Y
    1ea2:	f9 80       	ldd	r15, Y+1	; 0x01
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	ba 01       	movw	r22, r20
    1eaa:	1e dc       	rcall	.-1988   	; 0x16e8 <dir_sdi>
    1eac:	81 11       	cpse	r24, r1
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <dir_alloc+0x62>
    1eb0:	00 e0       	ldi	r16, 0x00	; 0
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
    1eb4:	4e 89       	ldd	r20, Y+22	; 0x16
    1eb6:	5f 89       	ldd	r21, Y+23	; 0x17
    1eb8:	68 8d       	ldd	r22, Y+24	; 0x18
    1eba:	79 8d       	ldd	r23, Y+25	; 0x19
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	05 d9       	rcall	.-3574   	; 0x10ca <move_window>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	15 c0       	rjmp	.+42     	; 0x1eee <dir_alloc+0x62>
    1ec4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ec6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1ec8:	90 81       	ld	r25, Z
    1eca:	95 3e       	cpi	r25, 0xE5	; 229
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <dir_alloc+0x46>
    1ece:	91 11       	cpse	r25, r1
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <dir_alloc+0x52>
    1ed2:	0f 5f       	subi	r16, 0xFF	; 255
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	0c 15       	cp	r16, r12
    1ed8:	1d 05       	cpc	r17, r13
    1eda:	19 f4       	brne	.+6      	; 0x1ee2 <dir_alloc+0x56>
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <dir_alloc+0x68>
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	db de       	rcall	.-586    	; 0x1ca0 <dir_next>
    1eea:	88 23       	and	r24, r24
    1eec:	19 f3       	breq	.-58     	; 0x1eb4 <dir_alloc+0x28>
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <dir_alloc+0x68>
    1ef2:	87 e0       	ldi	r24, 0x07	; 7
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	08 95       	ret

00001f06 <dir_register>:
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	ec 01       	movw	r28, r24
    1f12:	e8 80       	ld	r14, Y
    1f14:	f9 80       	ldd	r15, Y+1	; 0x01
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	b8 df       	rcall	.-144    	; 0x1e8c <dir_alloc>
    1f1c:	18 2f       	mov	r17, r24
    1f1e:	81 11       	cpse	r24, r1
    1f20:	1d c0       	rjmp	.+58     	; 0x1f5c <dir_register+0x56>
    1f22:	4e 89       	ldd	r20, Y+22	; 0x16
    1f24:	5f 89       	ldd	r21, Y+23	; 0x17
    1f26:	68 8d       	ldd	r22, Y+24	; 0x18
    1f28:	79 8d       	ldd	r23, Y+25	; 0x19
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	ce d8       	rcall	.-3684   	; 0x10ca <move_window>
    1f2e:	18 2f       	mov	r17, r24
    1f30:	81 11       	cpse	r24, r1
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <dir_register+0x56>
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f40:	0e 94 fe 06 	call	0xdfc	; 0xdfc <mem_set>
    1f44:	be 01       	movw	r22, r28
    1f46:	64 5e       	subi	r22, 0xE4	; 228
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	4b e0       	ldi	r20, 0x0B	; 11
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f52:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	f7 01       	movw	r30, r14
    1f5a:	83 83       	std	Z+3, r24	; 0x03
    1f5c:	81 2f       	mov	r24, r17
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	08 95       	ret

00001f6a <check_fs>:
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	ec 01       	movw	r28, r24
    1f70:	1b 82       	std	Y+3, r1	; 0x03
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    1f76:	dc 01       	movw	r26, r24
    1f78:	8f a7       	std	Y+47, r24	; 0x2f
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	a9 ab       	std	Y+49, r26	; 0x31
    1f7e:	ba ab       	std	Y+50, r27	; 0x32
    1f80:	ce 01       	movw	r24, r28
    1f82:	a3 d8       	rcall	.-3770   	; 0x10ca <move_window>
    1f84:	81 11       	cpse	r24, r1
    1f86:	2d c0       	rjmp	.+90     	; 0x1fe2 <check_fs+0x78>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ee 5c       	subi	r30, 0xCE	; 206
    1f8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8e:	80 81       	ld	r24, Z
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	98 2f       	mov	r25, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	31 97       	sbiw	r30, 0x01	; 1
    1f98:	20 81       	ld	r18, Z
    1f9a:	82 2b       	or	r24, r18
    1f9c:	85 35       	cpi	r24, 0x55	; 85
    1f9e:	9a 4a       	sbci	r25, 0xAA	; 170
    1fa0:	11 f5       	brne	.+68     	; 0x1fe6 <check_fs+0x7c>
    1fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa4:	89 3e       	cpi	r24, 0xE9	; 233
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <check_fs+0x48>
    1fa8:	8b 3e       	cpi	r24, 0xEB	; 235
    1faa:	f9 f4       	brne	.+62     	; 0x1fea <check_fs+0x80>
    1fac:	8d a9       	ldd	r24, Y+53	; 0x35
    1fae:	80 39       	cpi	r24, 0x90	; 144
    1fb0:	f1 f4       	brne	.+60     	; 0x1fee <check_fs+0x84>
    1fb2:	43 e0       	ldi	r20, 0x03	; 3
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	6e ea       	ldi	r22, 0xAE	; 174
    1fb8:	71 e0       	ldi	r23, 0x01	; 1
    1fba:	ce 01       	movw	r24, r28
    1fbc:	87 59       	subi	r24, 0x97	; 151
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	0e 94 06 07 	call	0xe0c	; 0xe0c <mem_cmp>
    1fc4:	89 2b       	or	r24, r25
    1fc6:	a9 f0       	breq	.+42     	; 0x1ff2 <check_fs+0x88>
    1fc8:	45 e0       	ldi	r20, 0x05	; 5
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	62 eb       	ldi	r22, 0xB2	; 178
    1fce:	71 e0       	ldi	r23, 0x01	; 1
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	8b 57       	subi	r24, 0x7B	; 123
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	0e 94 06 07 	call	0xe0c	; 0xe0c <mem_cmp>
    1fda:	89 2b       	or	r24, r25
    1fdc:	61 f0       	breq	.+24     	; 0x1ff6 <check_fs+0x8c>
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <check_fs+0x8e>
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <check_fs+0x8e>
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <check_fs+0x8e>
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <check_fs+0x8e>
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <check_fs+0x8e>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <check_fs+0x8e>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <find_volume>:
    1ffe:	2f 92       	push	r2
    2000:	3f 92       	push	r3
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	6e 97       	sbiw	r28, 0x1e	; 30
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	6b 01       	movw	r12, r22
    2034:	b4 2e       	mov	r11, r20
    2036:	db 01       	movw	r26, r22
    2038:	1d 92       	st	X+, r1
    203a:	1c 92       	st	X, r1
    203c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_ldnumber>
    2040:	7c 01       	movw	r14, r24
    2042:	99 23       	and	r25, r25
    2044:	0c f4       	brge	.+2      	; 0x2048 <find_volume+0x4a>
    2046:	4e c2       	rjmp	.+1180   	; 0x24e4 <find_volume+0x4e6>
    2048:	fc 01       	movw	r30, r24
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	ed 53       	subi	r30, 0x3D	; 61
    2050:	fd 4f       	sbci	r31, 0xFD	; 253
    2052:	00 81       	ld	r16, Z
    2054:	11 81       	ldd	r17, Z+1	; 0x01
    2056:	01 15       	cp	r16, r1
    2058:	11 05       	cpc	r17, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <find_volume+0x60>
    205c:	45 c2       	rjmp	.+1162   	; 0x24e8 <find_volume+0x4ea>
    205e:	f6 01       	movw	r30, r12
    2060:	11 83       	std	Z+1, r17	; 0x01
    2062:	00 83       	st	Z, r16
    2064:	fb 2d       	mov	r31, r11
    2066:	fe 7f       	andi	r31, 0xFE	; 254
    2068:	bf 2e       	mov	r11, r31
    206a:	d8 01       	movw	r26, r16
    206c:	8c 91       	ld	r24, X
    206e:	88 23       	and	r24, r24
    2070:	69 f0       	breq	.+26     	; 0x208c <find_volume+0x8e>
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	8c 91       	ld	r24, X
    2076:	0e 94 9e 06 	call	0xd3c	; 0xd3c <disk_status>
    207a:	80 fd       	sbrc	r24, 0
    207c:	07 c0       	rjmp	.+14     	; 0x208c <find_volume+0x8e>
    207e:	bb 20       	and	r11, r11
    2080:	09 f4       	brne	.+2      	; 0x2084 <find_volume+0x86>
    2082:	34 c2       	rjmp	.+1128   	; 0x24ec <find_volume+0x4ee>
    2084:	82 ff       	sbrs	r24, 2
    2086:	34 c2       	rjmp	.+1128   	; 0x24f0 <find_volume+0x4f2>
    2088:	8a e0       	ldi	r24, 0x0A	; 10
    208a:	e7 c2       	rjmp	.+1486   	; 0x265a <find_volume+0x65c>
    208c:	f8 01       	movw	r30, r16
    208e:	10 82       	st	Z, r1
    2090:	e1 82       	std	Z+1, r14	; 0x01
    2092:	8e 2d       	mov	r24, r14
    2094:	0e 94 a5 06 	call	0xd4a	; 0xd4a <disk_initialize>
    2098:	80 fd       	sbrc	r24, 0
    209a:	2c c2       	rjmp	.+1112   	; 0x24f4 <find_volume+0x4f6>
    209c:	bb 20       	and	r11, r11
    209e:	09 f4       	brne	.+2      	; 0x20a2 <find_volume+0xa4>
    20a0:	4f c2       	rjmp	.+1182   	; 0x2540 <find_volume+0x542>
    20a2:	82 fd       	sbrc	r24, 2
    20a4:	29 c2       	rjmp	.+1106   	; 0x24f8 <find_volume+0x4fa>
    20a6:	4c c2       	rjmp	.+1176   	; 0x2540 <find_volume+0x542>
    20a8:	f7 01       	movw	r30, r14
    20aa:	34 97       	sbiw	r30, 0x04	; 4
    20ac:	80 81       	ld	r24, Z
    20ae:	88 23       	and	r24, r24
    20b0:	21 f0       	breq	.+8      	; 0x20ba <find_volume+0xbc>
    20b2:	c7 01       	movw	r24, r14
    20b4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <find_volume+0xc4>
    20ba:	64 2d       	mov	r22, r4
    20bc:	75 2d       	mov	r23, r5
    20be:	86 2d       	mov	r24, r6
    20c0:	97 2d       	mov	r25, r7
    20c2:	d6 01       	movw	r26, r12
    20c4:	6d 93       	st	X+, r22
    20c6:	7d 93       	st	X+, r23
    20c8:	8d 93       	st	X+, r24
    20ca:	9d 93       	st	X+, r25
    20cc:	6d 01       	movw	r12, r26
    20ce:	b0 e1       	ldi	r27, 0x10	; 16
    20d0:	eb 0e       	add	r14, r27
    20d2:	f1 1c       	adc	r15, r1
    20d4:	e8 14       	cp	r14, r8
    20d6:	f9 04       	cpc	r15, r9
    20d8:	39 f7       	brne	.-50     	; 0x20a8 <find_volume+0xaa>
    20da:	4e 01       	movw	r8, r28
    20dc:	e1 e1       	ldi	r30, 0x11	; 17
    20de:	8e 0e       	add	r8, r30
    20e0:	91 1c       	adc	r9, r1
    20e2:	0f 2e       	mov	r0, r31
    20e4:	f3 e0       	ldi	r31, 0x03	; 3
    20e6:	7f 2e       	mov	r7, r31
    20e8:	f0 2d       	mov	r31, r0
    20ea:	d5 01       	movw	r26, r10
    20ec:	cd 90       	ld	r12, X+
    20ee:	dd 90       	ld	r13, X+
    20f0:	ed 90       	ld	r14, X+
    20f2:	fd 90       	ld	r15, X+
    20f4:	5d 01       	movw	r10, r26
    20f6:	c1 14       	cp	r12, r1
    20f8:	d1 04       	cpc	r13, r1
    20fa:	e1 04       	cpc	r14, r1
    20fc:	f1 04       	cpc	r15, r1
    20fe:	39 f0       	breq	.+14     	; 0x210e <find_volume+0x110>
    2100:	b7 01       	movw	r22, r14
    2102:	a6 01       	movw	r20, r12
    2104:	c8 01       	movw	r24, r16
    2106:	31 df       	rcall	.-414    	; 0x1f6a <check_fs>
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	10 f4       	brcc	.+4      	; 0x2110 <find_volume+0x112>
    210c:	34 c2       	rjmp	.+1128   	; 0x2576 <find_volume+0x578>
    210e:	87 2d       	mov	r24, r7
    2110:	a8 14       	cp	r10, r8
    2112:	b9 04       	cpc	r11, r9
    2114:	51 f7       	brne	.-44     	; 0x20ea <find_volume+0xec>
    2116:	03 c0       	rjmp	.+6      	; 0x211e <find_volume+0x120>
    2118:	c1 2c       	mov	r12, r1
    211a:	d1 2c       	mov	r13, r1
    211c:	76 01       	movw	r14, r12
    211e:	84 30       	cpi	r24, 0x04	; 4
    2120:	09 f4       	brne	.+2      	; 0x2124 <find_volume+0x126>
    2122:	ec c1       	rjmp	.+984    	; 0x24fc <find_volume+0x4fe>
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	08 f0       	brcs	.+2      	; 0x212a <find_volume+0x12c>
    2128:	eb c1       	rjmp	.+982    	; 0x2500 <find_volume+0x502>
    212a:	f8 01       	movw	r30, r16
    212c:	87 ad       	ldd	r24, Z+63	; 0x3f
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	98 2f       	mov	r25, r24
    2132:	88 27       	eor	r24, r24
    2134:	26 ad       	ldd	r18, Z+62	; 0x3e
    2136:	82 2b       	or	r24, r18
    2138:	81 15       	cp	r24, r1
    213a:	92 40       	sbci	r25, 0x02	; 2
    213c:	09 f0       	breq	.+2      	; 0x2140 <find_volume+0x142>
    213e:	e2 c1       	rjmp	.+964    	; 0x2504 <find_volume+0x506>
    2140:	f8 01       	movw	r30, r16
    2142:	e6 5b       	subi	r30, 0xB6	; 182
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	40 80       	ld	r4, Z
    2148:	51 2c       	mov	r5, r1
    214a:	54 2c       	mov	r5, r4
    214c:	44 24       	eor	r4, r4
    214e:	31 97       	sbiw	r30, 0x01	; 1
    2150:	80 81       	ld	r24, Z
    2152:	48 2a       	or	r4, r24
    2154:	61 2c       	mov	r6, r1
    2156:	71 2c       	mov	r7, r1
    2158:	41 14       	cp	r4, r1
    215a:	51 04       	cpc	r5, r1
    215c:	61 04       	cpc	r6, r1
    215e:	71 04       	cpc	r7, r1
    2160:	39 f4       	brne	.+14     	; 0x2170 <find_volume+0x172>
    2162:	c8 01       	movw	r24, r16
    2164:	89 5a       	subi	r24, 0xA9	; 169
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    216c:	2b 01       	movw	r4, r22
    216e:	3c 01       	movw	r6, r24
    2170:	d8 01       	movw	r26, r16
    2172:	5b 96       	adiw	r26, 0x1b	; 27
    2174:	4d 92       	st	X+, r4
    2176:	5d 92       	st	X+, r5
    2178:	6d 92       	st	X+, r6
    217a:	7c 92       	st	X, r7
    217c:	5e 97       	sbiw	r26, 0x1e	; 30
    217e:	f8 01       	movw	r30, r16
    2180:	ed 5b       	subi	r30, 0xBD	; 189
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	b0 81       	ld	r27, Z
    2186:	b9 8b       	std	Y+17, r27	; 0x11
    2188:	f8 01       	movw	r30, r16
    218a:	b2 83       	std	Z+2, r27	; 0x02
    218c:	8b 2f       	mov	r24, r27
    218e:	81 50       	subi	r24, 0x01	; 1
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	08 f0       	brcs	.+2      	; 0x2196 <find_volume+0x198>
    2194:	b9 c1       	rjmp	.+882    	; 0x2508 <find_volume+0x50a>
    2196:	e0 5c       	subi	r30, 0xC0	; 192
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	30 81       	ld	r19, Z
    219c:	3e 8f       	std	Y+30, r19	; 0x1e
    219e:	83 2f       	mov	r24, r19
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	d8 01       	movw	r26, r16
    21a4:	1a 96       	adiw	r26, 0x0a	; 10
    21a6:	9c 93       	st	X, r25
    21a8:	8e 93       	st	-X, r24
    21aa:	19 97       	sbiw	r26, 0x09	; 9
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <find_volume+0x1b4>
    21b0:	ad c1       	rjmp	.+858    	; 0x250c <find_volume+0x50e>
    21b2:	9c 01       	movw	r18, r24
    21b4:	21 50       	subi	r18, 0x01	; 1
    21b6:	31 09       	sbc	r19, r1
    21b8:	82 23       	and	r24, r18
    21ba:	93 23       	and	r25, r19
    21bc:	89 2b       	or	r24, r25
    21be:	09 f0       	breq	.+2      	; 0x21c2 <find_volume+0x1c4>
    21c0:	a7 c1       	rjmp	.+846    	; 0x2510 <find_volume+0x512>
    21c2:	35 96       	adiw	r30, 0x05	; 5
    21c4:	80 81       	ld	r24, Z
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	98 2f       	mov	r25, r24
    21ca:	88 27       	eor	r24, r24
    21cc:	31 97       	sbiw	r30, 0x01	; 1
    21ce:	20 81       	ld	r18, Z
    21d0:	1c 01       	movw	r2, r24
    21d2:	22 2a       	or	r2, r18
    21d4:	f8 01       	movw	r30, r16
    21d6:	30 86       	std	Z+8, r3	; 0x08
    21d8:	27 82       	std	Z+7, r2	; 0x07
    21da:	c1 01       	movw	r24, r2
    21dc:	8f 70       	andi	r24, 0x0F	; 15
    21de:	99 27       	eor	r25, r25
    21e0:	89 2b       	or	r24, r25
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <find_volume+0x1e8>
    21e4:	97 c1       	rjmp	.+814    	; 0x2514 <find_volume+0x516>
    21e6:	e9 5b       	subi	r30, 0xB9	; 185
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 80       	ld	r8, Z
    21ec:	91 2c       	mov	r9, r1
    21ee:	98 2c       	mov	r9, r8
    21f0:	88 24       	eor	r8, r8
    21f2:	31 97       	sbiw	r30, 0x01	; 1
    21f4:	80 81       	ld	r24, Z
    21f6:	88 2a       	or	r8, r24
    21f8:	a1 2c       	mov	r10, r1
    21fa:	b1 2c       	mov	r11, r1
    21fc:	81 14       	cp	r8, r1
    21fe:	91 04       	cpc	r9, r1
    2200:	a1 04       	cpc	r10, r1
    2202:	b1 04       	cpc	r11, r1
    2204:	39 f4       	brne	.+14     	; 0x2214 <find_volume+0x216>
    2206:	c8 01       	movw	r24, r16
    2208:	8d 5a       	subi	r24, 0xAD	; 173
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    2210:	4b 01       	movw	r8, r22
    2212:	5c 01       	movw	r10, r24
    2214:	f8 01       	movw	r30, r16
    2216:	ee 5b       	subi	r30, 0xBE	; 190
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	e0 81       	ld	r30, Z
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	fe 2f       	mov	r31, r30
    2220:	ee 27       	eor	r30, r30
    2222:	d8 01       	movw	r26, r16
    2224:	af 5b       	subi	r26, 0xBF	; 191
    2226:	bf 4f       	sbci	r27, 0xFF	; 255
    2228:	8c 91       	ld	r24, X
    222a:	e8 2b       	or	r30, r24
    222c:	30 97       	sbiw	r30, 0x00	; 0
    222e:	09 f4       	brne	.+2      	; 0x2232 <find_volume+0x234>
    2230:	73 c1       	rjmp	.+742    	; 0x2518 <find_volume+0x51a>
    2232:	29 89       	ldd	r18, Y+17	; 0x11
    2234:	a2 2f       	mov	r26, r18
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	a3 01       	movw	r20, r6
    223a:	92 01       	movw	r18, r4
    223c:	0e 94 07 32 	call	0x640e	; 0x640e <__muluhisi3>
    2240:	6a 8f       	std	Y+26, r22	; 0x1a
    2242:	7b 8f       	std	Y+27, r23	; 0x1b
    2244:	8c 8f       	std	Y+28, r24	; 0x1c
    2246:	9d 8f       	std	Y+29, r25	; 0x1d
    2248:	cf 01       	movw	r24, r30
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	8e 8b       	std	Y+22, r24	; 0x16
    2250:	9f 8b       	std	Y+23, r25	; 0x17
    2252:	a8 8f       	std	Y+24, r26	; 0x18
    2254:	b9 8f       	std	Y+25, r27	; 0x19
    2256:	c1 01       	movw	r24, r2
    2258:	92 95       	swap	r25
    225a:	82 95       	swap	r24
    225c:	8f 70       	andi	r24, 0x0F	; 15
    225e:	89 27       	eor	r24, r25
    2260:	9f 70       	andi	r25, 0x0F	; 15
    2262:	89 27       	eor	r24, r25
    2264:	2e 89       	ldd	r18, Y+22	; 0x16
    2266:	3f 89       	ldd	r19, Y+23	; 0x17
    2268:	48 8d       	ldd	r20, Y+24	; 0x18
    226a:	59 8d       	ldd	r21, Y+25	; 0x19
    226c:	28 0f       	add	r18, r24
    226e:	39 1f       	adc	r19, r25
    2270:	41 1d       	adc	r20, r1
    2272:	51 1d       	adc	r21, r1
    2274:	da 01       	movw	r26, r20
    2276:	c9 01       	movw	r24, r18
    2278:	2a 8d       	ldd	r18, Y+26	; 0x1a
    227a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    227c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    227e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2280:	28 0f       	add	r18, r24
    2282:	39 1f       	adc	r19, r25
    2284:	4a 1f       	adc	r20, r26
    2286:	5b 1f       	adc	r21, r27
    2288:	2a 8b       	std	Y+18, r18	; 0x12
    228a:	3b 8b       	std	Y+19, r19	; 0x13
    228c:	4c 8b       	std	Y+20, r20	; 0x14
    228e:	5d 8b       	std	Y+21, r21	; 0x15
    2290:	82 16       	cp	r8, r18
    2292:	93 06       	cpc	r9, r19
    2294:	a4 06       	cpc	r10, r20
    2296:	b5 06       	cpc	r11, r21
    2298:	08 f4       	brcc	.+2      	; 0x229c <find_volume+0x29e>
    229a:	40 c1       	rjmp	.+640    	; 0x251c <find_volume+0x51e>
    229c:	c5 01       	movw	r24, r10
    229e:	b4 01       	movw	r22, r8
    22a0:	62 1b       	sub	r22, r18
    22a2:	73 0b       	sbc	r23, r19
    22a4:	84 0b       	sbc	r24, r20
    22a6:	95 0b       	sbc	r25, r21
    22a8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    22aa:	2a 2f       	mov	r18, r26
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__udivmodsi4>
    22b6:	da 01       	movw	r26, r20
    22b8:	c9 01       	movw	r24, r18
    22ba:	21 15       	cp	r18, r1
    22bc:	31 05       	cpc	r19, r1
    22be:	41 05       	cpc	r20, r1
    22c0:	51 05       	cpc	r21, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <find_volume+0x2c8>
    22c4:	2d c1       	rjmp	.+602    	; 0x2520 <find_volume+0x522>
    22c6:	26 3f       	cpi	r18, 0xF6	; 246
    22c8:	ef ef       	ldi	r30, 0xFF	; 255
    22ca:	3e 07       	cpc	r19, r30
    22cc:	4e 07       	cpc	r20, r30
    22ce:	ef e0       	ldi	r30, 0x0F	; 15
    22d0:	5e 07       	cpc	r21, r30
    22d2:	18 f4       	brcc	.+6      	; 0x22da <find_volume+0x2dc>
    22d4:	f3 e0       	ldi	r31, 0x03	; 3
    22d6:	f9 8b       	std	Y+17, r31	; 0x11
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <find_volume+0x2de>
    22da:	19 8a       	std	Y+17, r1	; 0x11
    22dc:	86 3f       	cpi	r24, 0xF6	; 246
    22de:	6f ef       	ldi	r22, 0xFF	; 255
    22e0:	96 07       	cpc	r25, r22
    22e2:	a1 05       	cpc	r26, r1
    22e4:	b1 05       	cpc	r27, r1
    22e6:	10 f4       	brcc	.+4      	; 0x22ec <find_volume+0x2ee>
    22e8:	e2 e0       	ldi	r30, 0x02	; 2
    22ea:	e9 8b       	std	Y+17, r30	; 0x11
    22ec:	86 3f       	cpi	r24, 0xF6	; 246
    22ee:	9f 40       	sbci	r25, 0x0F	; 15
    22f0:	a1 05       	cpc	r26, r1
    22f2:	b1 05       	cpc	r27, r1
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <find_volume+0x2fa>
    22f6:	83 c1       	rjmp	.+774    	; 0x25fe <find_volume+0x600>
    22f8:	69 89       	ldd	r22, Y+17	; 0x11
    22fa:	66 23       	and	r22, r22
    22fc:	09 f4       	brne	.+2      	; 0x2300 <find_volume+0x302>
    22fe:	12 c1       	rjmp	.+548    	; 0x2524 <find_volume+0x526>
    2300:	49 01       	movw	r8, r18
    2302:	5a 01       	movw	r10, r20
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	88 0e       	add	r8, r24
    2308:	91 1c       	adc	r9, r1
    230a:	a1 1c       	adc	r10, r1
    230c:	b1 1c       	adc	r11, r1
    230e:	d8 01       	movw	r26, r16
    2310:	57 96       	adiw	r26, 0x17	; 23
    2312:	8d 92       	st	X+, r8
    2314:	9d 92       	st	X+, r9
    2316:	ad 92       	st	X+, r10
    2318:	bc 92       	st	X, r11
    231a:	5a 97       	sbiw	r26, 0x1a	; 26
    231c:	f8 01       	movw	r30, r16
    231e:	c7 8e       	std	Z+31, r12	; 0x1f
    2320:	d0 a2       	std	Z+32, r13	; 0x20
    2322:	e1 a2       	std	Z+33, r14	; 0x21
    2324:	f2 a2       	std	Z+34, r15	; 0x22
    2326:	8e 89       	ldd	r24, Y+22	; 0x16
    2328:	9f 89       	ldd	r25, Y+23	; 0x17
    232a:	a8 8d       	ldd	r26, Y+24	; 0x18
    232c:	b9 8d       	ldd	r27, Y+25	; 0x19
    232e:	8c 0d       	add	r24, r12
    2330:	9d 1d       	adc	r25, r13
    2332:	ae 1d       	adc	r26, r14
    2334:	bf 1d       	adc	r27, r15
    2336:	83 a3       	std	Z+35, r24	; 0x23
    2338:	94 a3       	std	Z+36, r25	; 0x24
    233a:	a5 a3       	std	Z+37, r26	; 0x25
    233c:	b6 a3       	std	Z+38, r27	; 0x26
    233e:	4a 89       	ldd	r20, Y+18	; 0x12
    2340:	5b 89       	ldd	r21, Y+19	; 0x13
    2342:	6c 89       	ldd	r22, Y+20	; 0x14
    2344:	7d 89       	ldd	r23, Y+21	; 0x15
    2346:	4c 0d       	add	r20, r12
    2348:	5d 1d       	adc	r21, r13
    234a:	6e 1d       	adc	r22, r14
    234c:	7f 1d       	adc	r23, r15
    234e:	43 a7       	std	Z+43, r20	; 0x2b
    2350:	54 a7       	std	Z+44, r21	; 0x2c
    2352:	65 a7       	std	Z+45, r22	; 0x2d
    2354:	76 a7       	std	Z+46, r23	; 0x2e
    2356:	f9 89       	ldd	r31, Y+17	; 0x11
    2358:	f3 30       	cpi	r31, 0x03	; 3
    235a:	d1 f5       	brne	.+116    	; 0x23d0 <find_volume+0x3d2>
    235c:	f8 01       	movw	r30, r16
    235e:	e2 5a       	subi	r30, 0xA2	; 162
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 81       	ld	r24, Z
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	98 2f       	mov	r25, r24
    2368:	88 27       	eor	r24, r24
    236a:	31 97       	sbiw	r30, 0x01	; 1
    236c:	20 81       	ld	r18, Z
    236e:	82 2b       	or	r24, r18
    2370:	89 2b       	or	r24, r25
    2372:	09 f0       	breq	.+2      	; 0x2376 <find_volume+0x378>
    2374:	d9 c0       	rjmp	.+434    	; 0x2528 <find_volume+0x52a>
    2376:	23 28       	or	r2, r3
    2378:	09 f0       	breq	.+2      	; 0x237c <find_volume+0x37e>
    237a:	d8 c0       	rjmp	.+432    	; 0x252c <find_volume+0x52e>
    237c:	c8 01       	movw	r24, r16
    237e:	81 5a       	subi	r24, 0xA1	; 161
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    2386:	d8 01       	movw	r26, r16
    2388:	97 96       	adiw	r26, 0x27	; 39
    238a:	6d 93       	st	X+, r22
    238c:	7d 93       	st	X+, r23
    238e:	8d 93       	st	X+, r24
    2390:	9c 93       	st	X, r25
    2392:	9a 97       	sbiw	r26, 0x2a	; 42
    2394:	88 0c       	add	r8, r8
    2396:	99 1c       	adc	r9, r9
    2398:	aa 1c       	adc	r10, r10
    239a:	bb 1c       	adc	r11, r11
    239c:	88 0c       	add	r8, r8
    239e:	99 1c       	adc	r9, r9
    23a0:	aa 1c       	adc	r10, r10
    23a2:	bb 1c       	adc	r11, r11
    23a4:	bf ef       	ldi	r27, 0xFF	; 255
    23a6:	8b 0e       	add	r8, r27
    23a8:	b1 e0       	ldi	r27, 0x01	; 1
    23aa:	9b 1e       	adc	r9, r27
    23ac:	a1 1c       	adc	r10, r1
    23ae:	b1 1c       	adc	r11, r1
    23b0:	07 2e       	mov	r0, r23
    23b2:	79 e0       	ldi	r23, 0x09	; 9
    23b4:	b6 94       	lsr	r11
    23b6:	a7 94       	ror	r10
    23b8:	97 94       	ror	r9
    23ba:	87 94       	ror	r8
    23bc:	7a 95       	dec	r23
    23be:	d1 f7       	brne	.-12     	; 0x23b4 <find_volume+0x3b6>
    23c0:	70 2d       	mov	r23, r0
    23c2:	48 14       	cp	r4, r8
    23c4:	59 04       	cpc	r5, r9
    23c6:	6a 04       	cpc	r6, r10
    23c8:	7b 04       	cpc	r7, r11
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <find_volume+0x3d0>
    23cc:	b1 c0       	rjmp	.+354    	; 0x2530 <find_volume+0x532>
    23ce:	fc c0       	rjmp	.+504    	; 0x25c8 <find_volume+0x5ca>
    23d0:	23 28       	or	r2, r3
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <find_volume+0x3d8>
    23d4:	af c0       	rjmp	.+350    	; 0x2534 <find_volume+0x536>
    23d6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    23d8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    23da:	4c 8d       	ldd	r20, Y+28	; 0x1c
    23dc:	5d 8d       	ldd	r21, Y+29	; 0x1d
    23de:	82 0f       	add	r24, r18
    23e0:	93 1f       	adc	r25, r19
    23e2:	a4 1f       	adc	r26, r20
    23e4:	b5 1f       	adc	r27, r21
    23e6:	f8 01       	movw	r30, r16
    23e8:	87 a3       	std	Z+39, r24	; 0x27
    23ea:	90 a7       	std	Z+40, r25	; 0x28
    23ec:	a1 a7       	std	Z+41, r26	; 0x29
    23ee:	b2 a7       	std	Z+42, r27	; 0x2a
    23f0:	f9 89       	ldd	r31, Y+17	; 0x11
    23f2:	f2 30       	cpi	r31, 0x02	; 2
    23f4:	29 f4       	brne	.+10     	; 0x2400 <find_volume+0x402>
    23f6:	88 0c       	add	r8, r8
    23f8:	99 1c       	adc	r9, r9
    23fa:	aa 1c       	adc	r10, r10
    23fc:	bb 1c       	adc	r11, r11
    23fe:	ce c0       	rjmp	.+412    	; 0x259c <find_volume+0x59e>
    2400:	a3 e0       	ldi	r26, 0x03	; 3
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	a5 01       	movw	r20, r10
    2406:	94 01       	movw	r18, r8
    2408:	0e 94 07 32 	call	0x640e	; 0x640e <__muluhisi3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	b6 95       	lsr	r27
    2412:	a7 95       	ror	r26
    2414:	97 95       	ror	r25
    2416:	87 95       	ror	r24
    2418:	21 e0       	ldi	r18, 0x01	; 1
    241a:	82 22       	and	r8, r18
    241c:	99 24       	eor	r9, r9
    241e:	aa 24       	eor	r10, r10
    2420:	bb 24       	eor	r11, r11
    2422:	88 0e       	add	r8, r24
    2424:	99 1e       	adc	r9, r25
    2426:	aa 1e       	adc	r10, r26
    2428:	bb 1e       	adc	r11, r27
    242a:	b8 c0       	rjmp	.+368    	; 0x259c <find_volume+0x59e>
    242c:	b7 01       	movw	r22, r14
    242e:	a6 01       	movw	r20, r12
    2430:	4f 5f       	subi	r20, 0xFF	; 255
    2432:	5f 4f       	sbci	r21, 0xFF	; 255
    2434:	6f 4f       	sbci	r22, 0xFF	; 255
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	c8 01       	movw	r24, r16
    243a:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    243e:	81 11       	cpse	r24, r1
    2440:	39 c0       	rjmp	.+114    	; 0x24b4 <find_volume+0x4b6>
    2442:	d8 01       	movw	r26, r16
    2444:	14 96       	adiw	r26, 0x04	; 4
    2446:	1c 92       	st	X, r1
    2448:	f8 01       	movw	r30, r16
    244a:	ee 5c       	subi	r30, 0xCE	; 206
    244c:	fd 4f       	sbci	r31, 0xFD	; 253
    244e:	80 81       	ld	r24, Z
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	98 2f       	mov	r25, r24
    2454:	88 27       	eor	r24, r24
    2456:	31 97       	sbiw	r30, 0x01	; 1
    2458:	20 81       	ld	r18, Z
    245a:	82 2b       	or	r24, r18
    245c:	85 35       	cpi	r24, 0x55	; 85
    245e:	9a 4a       	sbci	r25, 0xAA	; 170
    2460:	49 f5       	brne	.+82     	; 0x24b4 <find_volume+0x4b6>
    2462:	c8 01       	movw	r24, r16
    2464:	c3 96       	adiw	r24, 0x33	; 51
    2466:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    246a:	62 35       	cpi	r22, 0x52	; 82
    246c:	72 45       	sbci	r23, 0x52	; 82
    246e:	81 46       	sbci	r24, 0x61	; 97
    2470:	91 44       	sbci	r25, 0x41	; 65
    2472:	01 f5       	brne	.+64     	; 0x24b4 <find_volume+0x4b6>
    2474:	c8 01       	movw	r24, r16
    2476:	89 5e       	subi	r24, 0xE9	; 233
    2478:	9d 4f       	sbci	r25, 0xFD	; 253
    247a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    247e:	62 37       	cpi	r22, 0x72	; 114
    2480:	72 47       	sbci	r23, 0x72	; 114
    2482:	81 44       	sbci	r24, 0x41	; 65
    2484:	91 46       	sbci	r25, 0x61	; 97
    2486:	b1 f4       	brne	.+44     	; 0x24b4 <find_volume+0x4b6>
    2488:	c8 01       	movw	r24, r16
    248a:	85 5e       	subi	r24, 0xE5	; 229
    248c:	9d 4f       	sbci	r25, 0xFD	; 253
    248e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    2492:	d8 01       	movw	r26, r16
    2494:	1f 96       	adiw	r26, 0x0f	; 15
    2496:	6d 93       	st	X+, r22
    2498:	7d 93       	st	X+, r23
    249a:	8d 93       	st	X+, r24
    249c:	9c 93       	st	X, r25
    249e:	52 97       	sbiw	r26, 0x12	; 18
    24a0:	c8 01       	movw	r24, r16
    24a2:	81 5e       	subi	r24, 0xE1	; 225
    24a4:	9d 4f       	sbci	r25, 0xFD	; 253
    24a6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    24aa:	f8 01       	movw	r30, r16
    24ac:	63 87       	std	Z+11, r22	; 0x0b
    24ae:	74 87       	std	Z+12, r23	; 0x0c
    24b0:	85 87       	std	Z+13, r24	; 0x0d
    24b2:	96 87       	std	Z+14, r25	; 0x0e
    24b4:	e9 89       	ldd	r30, Y+17	; 0x11
    24b6:	d8 01       	movw	r26, r16
    24b8:	ec 93       	st	X, r30
    24ba:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <Fsid>
    24be:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <Fsid+0x1>
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <Fsid+0x1>
    24c8:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <Fsid>
    24cc:	16 96       	adiw	r26, 0x06	; 6
    24ce:	9c 93       	st	X, r25
    24d0:	8e 93       	st	-X, r24
    24d2:	15 97       	sbiw	r26, 0x05	; 5
    24d4:	53 96       	adiw	r26, 0x13	; 19
    24d6:	1d 92       	st	X+, r1
    24d8:	1d 92       	st	X+, r1
    24da:	1d 92       	st	X+, r1
    24dc:	1c 92       	st	X, r1
    24de:	56 97       	sbiw	r26, 0x16	; 22
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	bb c0       	rjmp	.+374    	; 0x265a <find_volume+0x65c>
    24e4:	8b e0       	ldi	r24, 0x0B	; 11
    24e6:	b9 c0       	rjmp	.+370    	; 0x265a <find_volume+0x65c>
    24e8:	8c e0       	ldi	r24, 0x0C	; 12
    24ea:	b7 c0       	rjmp	.+366    	; 0x265a <find_volume+0x65c>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	b5 c0       	rjmp	.+362    	; 0x265a <find_volume+0x65c>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	b3 c0       	rjmp	.+358    	; 0x265a <find_volume+0x65c>
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	b1 c0       	rjmp	.+354    	; 0x265a <find_volume+0x65c>
    24f8:	8a e0       	ldi	r24, 0x0A	; 10
    24fa:	af c0       	rjmp	.+350    	; 0x265a <find_volume+0x65c>
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	ad c0       	rjmp	.+346    	; 0x265a <find_volume+0x65c>
    2500:	8d e0       	ldi	r24, 0x0D	; 13
    2502:	ab c0       	rjmp	.+342    	; 0x265a <find_volume+0x65c>
    2504:	8d e0       	ldi	r24, 0x0D	; 13
    2506:	a9 c0       	rjmp	.+338    	; 0x265a <find_volume+0x65c>
    2508:	8d e0       	ldi	r24, 0x0D	; 13
    250a:	a7 c0       	rjmp	.+334    	; 0x265a <find_volume+0x65c>
    250c:	8d e0       	ldi	r24, 0x0D	; 13
    250e:	a5 c0       	rjmp	.+330    	; 0x265a <find_volume+0x65c>
    2510:	8d e0       	ldi	r24, 0x0D	; 13
    2512:	a3 c0       	rjmp	.+326    	; 0x265a <find_volume+0x65c>
    2514:	8d e0       	ldi	r24, 0x0D	; 13
    2516:	a1 c0       	rjmp	.+322    	; 0x265a <find_volume+0x65c>
    2518:	8d e0       	ldi	r24, 0x0D	; 13
    251a:	9f c0       	rjmp	.+318    	; 0x265a <find_volume+0x65c>
    251c:	8d e0       	ldi	r24, 0x0D	; 13
    251e:	9d c0       	rjmp	.+314    	; 0x265a <find_volume+0x65c>
    2520:	8d e0       	ldi	r24, 0x0D	; 13
    2522:	9b c0       	rjmp	.+310    	; 0x265a <find_volume+0x65c>
    2524:	8d e0       	ldi	r24, 0x0D	; 13
    2526:	99 c0       	rjmp	.+306    	; 0x265a <find_volume+0x65c>
    2528:	8d e0       	ldi	r24, 0x0D	; 13
    252a:	97 c0       	rjmp	.+302    	; 0x265a <find_volume+0x65c>
    252c:	8d e0       	ldi	r24, 0x0D	; 13
    252e:	95 c0       	rjmp	.+298    	; 0x265a <find_volume+0x65c>
    2530:	8d e0       	ldi	r24, 0x0D	; 13
    2532:	93 c0       	rjmp	.+294    	; 0x265a <find_volume+0x65c>
    2534:	8d e0       	ldi	r24, 0x0D	; 13
    2536:	91 c0       	rjmp	.+290    	; 0x265a <find_volume+0x65c>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	8f c0       	rjmp	.+286    	; 0x265a <find_volume+0x65c>
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	8d c0       	rjmp	.+282    	; 0x265a <find_volume+0x65c>
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	ba 01       	movw	r22, r20
    2546:	c8 01       	movw	r24, r16
    2548:	10 dd       	rcall	.-1504   	; 0x1f6a <check_fs>
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	09 f0       	breq	.+2      	; 0x2550 <find_volume+0x552>
    254e:	e4 cd       	rjmp	.-1080   	; 0x2118 <find_volume+0x11a>
    2550:	fe 01       	movw	r30, r28
    2552:	31 96       	adiw	r30, 0x01	; 1
    2554:	5f 01       	movw	r10, r30
    2556:	78 01       	movw	r14, r16
    2558:	f7 e0       	ldi	r31, 0x07	; 7
    255a:	ef 1a       	sub	r14, r31
    255c:	fe ef       	ldi	r31, 0xFE	; 254
    255e:	ff 0a       	sbc	r15, r31
    2560:	48 01       	movw	r8, r16
    2562:	27 ec       	ldi	r18, 0xC7	; 199
    2564:	82 1a       	sub	r8, r18
    2566:	2d ef       	ldi	r18, 0xFD	; 253
    2568:	92 0a       	sbc	r9, r18
    256a:	65 01       	movw	r12, r10
    256c:	41 2c       	mov	r4, r1
    256e:	51 2c       	mov	r5, r1
    2570:	61 2c       	mov	r6, r1
    2572:	71 2c       	mov	r7, r1
    2574:	99 cd       	rjmp	.-1230   	; 0x20a8 <find_volume+0xaa>
    2576:	84 30       	cpi	r24, 0x04	; 4
    2578:	09 f0       	breq	.+2      	; 0x257c <find_volume+0x57e>
    257a:	d7 cd       	rjmp	.-1106   	; 0x212a <find_volume+0x12c>
    257c:	dd cf       	rjmp	.-70     	; 0x2538 <find_volume+0x53a>
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	9f ef       	ldi	r25, 0xFF	; 255
    2582:	dc 01       	movw	r26, r24
    2584:	f8 01       	movw	r30, r16
    2586:	87 87       	std	Z+15, r24	; 0x0f
    2588:	90 8b       	std	Z+16, r25	; 0x10
    258a:	a1 8b       	std	Z+17, r26	; 0x11
    258c:	b2 8b       	std	Z+18, r27	; 0x12
    258e:	83 87       	std	Z+11, r24	; 0x0b
    2590:	94 87       	std	Z+12, r25	; 0x0c
    2592:	a5 87       	std	Z+13, r26	; 0x0d
    2594:	b6 87       	std	Z+14, r27	; 0x0e
    2596:	80 e8       	ldi	r24, 0x80	; 128
    2598:	84 83       	std	Z+4, r24	; 0x04
    259a:	8c cf       	rjmp	.-232    	; 0x24b4 <find_volume+0x4b6>
    259c:	ff ef       	ldi	r31, 0xFF	; 255
    259e:	8f 0e       	add	r8, r31
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	9f 1e       	adc	r9, r31
    25a4:	a1 1c       	adc	r10, r1
    25a6:	b1 1c       	adc	r11, r1
    25a8:	07 2e       	mov	r0, r23
    25aa:	79 e0       	ldi	r23, 0x09	; 9
    25ac:	b6 94       	lsr	r11
    25ae:	a7 94       	ror	r10
    25b0:	97 94       	ror	r9
    25b2:	87 94       	ror	r8
    25b4:	7a 95       	dec	r23
    25b6:	d1 f7       	brne	.-12     	; 0x25ac <find_volume+0x5ae>
    25b8:	70 2d       	mov	r23, r0
    25ba:	48 14       	cp	r4, r8
    25bc:	59 04       	cpc	r5, r9
    25be:	6a 04       	cpc	r6, r10
    25c0:	7b 04       	cpc	r7, r11
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <find_volume+0x5c8>
    25c4:	bb cf       	rjmp	.-138    	; 0x253c <find_volume+0x53e>
    25c6:	db cf       	rjmp	.-74     	; 0x257e <find_volume+0x580>
    25c8:	8f ef       	ldi	r24, 0xFF	; 255
    25ca:	9f ef       	ldi	r25, 0xFF	; 255
    25cc:	dc 01       	movw	r26, r24
    25ce:	f8 01       	movw	r30, r16
    25d0:	87 87       	std	Z+15, r24	; 0x0f
    25d2:	90 8b       	std	Z+16, r25	; 0x10
    25d4:	a1 8b       	std	Z+17, r26	; 0x11
    25d6:	b2 8b       	std	Z+18, r27	; 0x12
    25d8:	83 87       	std	Z+11, r24	; 0x0b
    25da:	94 87       	std	Z+12, r25	; 0x0c
    25dc:	a5 87       	std	Z+13, r26	; 0x0d
    25de:	b6 87       	std	Z+14, r27	; 0x0e
    25e0:	80 e8       	ldi	r24, 0x80	; 128
    25e2:	84 83       	std	Z+4, r24	; 0x04
    25e4:	ec 59       	subi	r30, 0x9C	; 156
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	98 2f       	mov	r25, r24
    25ee:	88 27       	eor	r24, r24
    25f0:	31 97       	sbiw	r30, 0x01	; 1
    25f2:	20 81       	ld	r18, Z
    25f4:	82 2b       	or	r24, r18
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	09 f0       	breq	.+2      	; 0x25fc <find_volume+0x5fe>
    25fa:	5c cf       	rjmp	.-328    	; 0x24b4 <find_volume+0x4b6>
    25fc:	17 cf       	rjmp	.-466    	; 0x242c <find_volume+0x42e>
    25fe:	49 01       	movw	r8, r18
    2600:	5a 01       	movw	r10, r20
    2602:	f2 e0       	ldi	r31, 0x02	; 2
    2604:	8f 0e       	add	r8, r31
    2606:	91 1c       	adc	r9, r1
    2608:	a1 1c       	adc	r10, r1
    260a:	b1 1c       	adc	r11, r1
    260c:	d8 01       	movw	r26, r16
    260e:	57 96       	adiw	r26, 0x17	; 23
    2610:	8d 92       	st	X+, r8
    2612:	9d 92       	st	X+, r9
    2614:	ad 92       	st	X+, r10
    2616:	bc 92       	st	X, r11
    2618:	5a 97       	sbiw	r26, 0x1a	; 26
    261a:	f8 01       	movw	r30, r16
    261c:	c7 8e       	std	Z+31, r12	; 0x1f
    261e:	d0 a2       	std	Z+32, r13	; 0x20
    2620:	e1 a2       	std	Z+33, r14	; 0x21
    2622:	f2 a2       	std	Z+34, r15	; 0x22
    2624:	8e 89       	ldd	r24, Y+22	; 0x16
    2626:	9f 89       	ldd	r25, Y+23	; 0x17
    2628:	a8 8d       	ldd	r26, Y+24	; 0x18
    262a:	b9 8d       	ldd	r27, Y+25	; 0x19
    262c:	8c 0d       	add	r24, r12
    262e:	9d 1d       	adc	r25, r13
    2630:	ae 1d       	adc	r26, r14
    2632:	bf 1d       	adc	r27, r15
    2634:	83 a3       	std	Z+35, r24	; 0x23
    2636:	94 a3       	std	Z+36, r25	; 0x24
    2638:	a5 a3       	std	Z+37, r26	; 0x25
    263a:	b6 a3       	std	Z+38, r27	; 0x26
    263c:	2a 89       	ldd	r18, Y+18	; 0x12
    263e:	3b 89       	ldd	r19, Y+19	; 0x13
    2640:	4c 89       	ldd	r20, Y+20	; 0x14
    2642:	5d 89       	ldd	r21, Y+21	; 0x15
    2644:	c2 0e       	add	r12, r18
    2646:	d3 1e       	adc	r13, r19
    2648:	e4 1e       	adc	r14, r20
    264a:	f5 1e       	adc	r15, r21
    264c:	c3 a6       	std	Z+43, r12	; 0x2b
    264e:	d4 a6       	std	Z+44, r13	; 0x2c
    2650:	e5 a6       	std	Z+45, r14	; 0x2d
    2652:	f6 a6       	std	Z+46, r15	; 0x2e
    2654:	f1 e0       	ldi	r31, 0x01	; 1
    2656:	f9 8b       	std	Y+17, r31	; 0x11
    2658:	bb ce       	rjmp	.-650    	; 0x23d0 <find_volume+0x3d2>
    265a:	6e 96       	adiw	r28, 0x1e	; 30
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	9f 90       	pop	r9
    267c:	8f 90       	pop	r8
    267e:	7f 90       	pop	r7
    2680:	6f 90       	pop	r6
    2682:	5f 90       	pop	r5
    2684:	4f 90       	pop	r4
    2686:	3f 90       	pop	r3
    2688:	2f 90       	pop	r2
    268a:	08 95       	ret

0000268c <ld_clust>:
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	dc 01       	movw	r26, r24
    2692:	fb 01       	movw	r30, r22
    2694:	93 8d       	ldd	r25, Z+27	; 0x1b
    2696:	69 2f       	mov	r22, r25
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	76 2f       	mov	r23, r22
    269c:	66 27       	eor	r22, r22
    269e:	82 8d       	ldd	r24, Z+26	; 0x1a
    26a0:	68 2b       	or	r22, r24
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	2c 91       	ld	r18, X
    26a8:	23 30       	cpi	r18, 0x03	; 3
    26aa:	79 f4       	brne	.+30     	; 0x26ca <ld_clust+0x3e>
    26ac:	05 89       	ldd	r16, Z+21	; 0x15
    26ae:	10 e0       	ldi	r17, 0x00	; 0
    26b0:	10 2f       	mov	r17, r16
    26b2:	00 27       	eor	r16, r16
    26b4:	24 89       	ldd	r18, Z+20	; 0x14
    26b6:	02 2b       	or	r16, r18
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	98 01       	movw	r18, r16
    26be:	11 27       	eor	r17, r17
    26c0:	00 27       	eor	r16, r16
    26c2:	60 2b       	or	r22, r16
    26c4:	71 2b       	or	r23, r17
    26c6:	82 2b       	or	r24, r18
    26c8:	93 2b       	or	r25, r19
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	08 95       	ret

000026d0 <follow_path>:
    26d0:	2f 92       	push	r2
    26d2:	3f 92       	push	r3
    26d4:	4f 92       	push	r4
    26d6:	5f 92       	push	r5
    26d8:	6f 92       	push	r6
    26da:	7f 92       	push	r7
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	af 92       	push	r10
    26e2:	bf 92       	push	r11
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	27 97       	sbiw	r28, 0x07	; 7
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	7b 01       	movw	r14, r22
    270a:	dc 01       	movw	r26, r24
    270c:	2d 90       	ld	r2, X+
    270e:	3c 90       	ld	r3, X
    2710:	fb 01       	movw	r30, r22
    2712:	80 81       	ld	r24, Z
    2714:	8f 32       	cpi	r24, 0x2F	; 47
    2716:	11 f4       	brne	.+4      	; 0x271c <follow_path+0x4c>
    2718:	f7 01       	movw	r30, r14
    271a:	0e c0       	rjmp	.+28     	; 0x2738 <follow_path+0x68>
    271c:	8c 35       	cpi	r24, 0x5C	; 92
    271e:	e1 f3       	breq	.-8      	; 0x2718 <follow_path+0x48>
    2720:	f1 01       	movw	r30, r2
    2722:	83 89       	ldd	r24, Z+19	; 0x13
    2724:	94 89       	ldd	r25, Z+20	; 0x14
    2726:	a5 89       	ldd	r26, Z+21	; 0x15
    2728:	b6 89       	ldd	r27, Z+22	; 0x16
    272a:	e9 81       	ldd	r30, Y+1	; 0x01
    272c:	fa 81       	ldd	r31, Y+2	; 0x02
    272e:	86 83       	std	Z+6, r24	; 0x06
    2730:	97 83       	std	Z+7, r25	; 0x07
    2732:	a0 87       	std	Z+8, r26	; 0x08
    2734:	b1 87       	std	Z+9, r27	; 0x09
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <follow_path+0x86>
    2738:	7f 01       	movw	r14, r30
    273a:	81 91       	ld	r24, Z+
    273c:	8f 32       	cpi	r24, 0x2F	; 47
    273e:	e1 f3       	breq	.-8      	; 0x2738 <follow_path+0x68>
    2740:	8c 35       	cpi	r24, 0x5C	; 92
    2742:	d1 f3       	breq	.-12     	; 0x2738 <follow_path+0x68>
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	dc 01       	movw	r26, r24
    274a:	16 96       	adiw	r26, 0x06	; 6
    274c:	1d 92       	st	X+, r1
    274e:	1d 92       	st	X+, r1
    2750:	1d 92       	st	X+, r1
    2752:	1c 92       	st	X, r1
    2754:	19 97       	sbiw	r26, 0x09	; 9
    2756:	f7 01       	movw	r30, r14
    2758:	80 81       	ld	r24, Z
    275a:	80 32       	cpi	r24, 0x20	; 32
    275c:	70 f4       	brcc	.+28     	; 0x277a <follow_path+0xaa>
    275e:	80 e8       	ldi	r24, 0x80	; 128
    2760:	a9 81       	ldd	r26, Y+1	; 0x01
    2762:	ba 81       	ldd	r27, Y+2	; 0x02
    2764:	97 96       	adiw	r26, 0x27	; 39
    2766:	8c 93       	st	X, r24
    2768:	97 97       	sbiw	r26, 0x27	; 39
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	ba 01       	movw	r22, r20
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <dir_sdi>
    2776:	18 2f       	mov	r17, r24
    2778:	72 c1       	rjmp	.+740    	; 0x2a5e <follow_path+0x38e>
    277a:	49 80       	ldd	r4, Y+1	; 0x01
    277c:	5a 80       	ldd	r5, Y+2	; 0x02
    277e:	bc e1       	ldi	r27, 0x1C	; 28
    2780:	4b 0e       	add	r4, r27
    2782:	51 1c       	adc	r5, r1
    2784:	0f 2e       	mov	r0, r31
    2786:	fb e0       	ldi	r31, 0x0B	; 11
    2788:	7f 2e       	mov	r7, r31
    278a:	f0 2d       	mov	r31, r0
    278c:	0f 2e       	mov	r0, r31
    278e:	fe e2       	ldi	r31, 0x2E	; 46
    2790:	6f 2e       	mov	r6, r31
    2792:	f0 2d       	mov	r31, r0
    2794:	7d 82       	std	Y+5, r7	; 0x05
    2796:	1e 82       	std	Y+6, r1	; 0x06
    2798:	f1 01       	movw	r30, r2
    279a:	f3 96       	adiw	r30, 0x33	; 51
    279c:	fc 83       	std	Y+4, r31	; 0x04
    279e:	eb 83       	std	Y+3, r30	; 0x03
    27a0:	47 2d       	mov	r20, r7
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	60 e2       	ldi	r22, 0x20	; 32
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	c2 01       	movw	r24, r4
    27aa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <mem_set>
    27ae:	d7 01       	movw	r26, r14
    27b0:	8c 91       	ld	r24, X
    27b2:	8e 32       	cpi	r24, 0x2E	; 46
    27b4:	11 f5       	brne	.+68     	; 0x27fa <follow_path+0x12a>
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	64 8e       	std	Z+28, r6	; 0x1c
    27bc:	11 96       	adiw	r26, 0x01	; 1
    27be:	8c 91       	ld	r24, X
    27c0:	11 97       	sbiw	r26, 0x01	; 1
    27c2:	8e 32       	cpi	r24, 0x2E	; 46
    27c4:	49 f4       	brne	.+18     	; 0x27d8 <follow_path+0x108>
    27c6:	65 8e       	std	Z+29, r6	; 0x1d
    27c8:	12 96       	adiw	r26, 0x02	; 2
    27ca:	8c 91       	ld	r24, X
    27cc:	8e 32       	cpi	r24, 0x2E	; 46
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <follow_path+0x102>
    27d0:	91 c0       	rjmp	.+290    	; 0x28f4 <follow_path+0x224>
    27d2:	23 e0       	ldi	r18, 0x03	; 3
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <follow_path+0x10c>
    27d8:	22 e0       	ldi	r18, 0x02	; 2
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	8f 32       	cpi	r24, 0x2F	; 47
    27de:	09 f4       	brne	.+2      	; 0x27e2 <follow_path+0x112>
    27e0:	e6 c0       	rjmp	.+460    	; 0x29ae <follow_path+0x2de>
    27e2:	8c 35       	cpi	r24, 0x5C	; 92
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <follow_path+0x118>
    27e6:	e3 c0       	rjmp	.+454    	; 0x29ae <follow_path+0x2de>
    27e8:	81 32       	cpi	r24, 0x21	; 33
    27ea:	08 f4       	brcc	.+2      	; 0x27ee <follow_path+0x11e>
    27ec:	e4 c0       	rjmp	.+456    	; 0x29b6 <follow_path+0x2e6>
    27ee:	05 c1       	rjmp	.+522    	; 0x29fa <follow_path+0x32a>
    27f0:	a9 81       	ldd	r26, Y+1	; 0x01
    27f2:	ba 81       	ldd	r27, Y+2	; 0x02
    27f4:	97 96       	adiw	r26, 0x27	; 39
    27f6:	8c 93       	st	X, r24
    27f8:	02 c1       	rjmp	.+516    	; 0x29fe <follow_path+0x32e>
    27fa:	a1 2c       	mov	r10, r1
    27fc:	b1 2c       	mov	r11, r1
    27fe:	00 e0       	ldi	r16, 0x00	; 0
    2800:	10 e0       	ldi	r17, 0x00	; 0
    2802:	68 94       	set
    2804:	cc 24       	eor	r12, r12
    2806:	c3 f8       	bld	r12, 3
    2808:	d1 2c       	mov	r13, r1
    280a:	98 01       	movw	r18, r16
    280c:	2f 5f       	subi	r18, 0xFF	; 255
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	f7 01       	movw	r30, r14
    2812:	e0 0f       	add	r30, r16
    2814:	f1 1f       	adc	r31, r17
    2816:	80 81       	ld	r24, Z
    2818:	8f 83       	std	Y+7, r24	; 0x07
    281a:	81 32       	cpi	r24, 0x21	; 33
    281c:	08 f4       	brcc	.+2      	; 0x2820 <follow_path+0x150>
    281e:	4f c0       	rjmp	.+158    	; 0x28be <follow_path+0x1ee>
    2820:	8f 32       	cpi	r24, 0x2F	; 47
    2822:	11 f0       	breq	.+4      	; 0x2828 <follow_path+0x158>
    2824:	8c 35       	cpi	r24, 0x5C	; 92
    2826:	69 f4       	brne	.+26     	; 0x2842 <follow_path+0x172>
    2828:	9f 80       	ldd	r9, Y+7	; 0x07
    282a:	f7 01       	movw	r30, r14
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <follow_path+0x166>
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	81 91       	ld	r24, Z+
    2838:	8f 32       	cpi	r24, 0x2F	; 47
    283a:	d9 f3       	breq	.-10     	; 0x2832 <follow_path+0x162>
    283c:	8c 35       	cpi	r24, 0x5C	; 92
    283e:	c9 f3       	breq	.-14     	; 0x2832 <follow_path+0x162>
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <follow_path+0x1f0>
    2842:	ff 81       	ldd	r31, Y+7	; 0x07
    2844:	fe 32       	cpi	r31, 0x2E	; 46
    2846:	09 f4       	brne	.+2      	; 0x284a <follow_path+0x17a>
    2848:	fe c0       	rjmp	.+508    	; 0x2a46 <follow_path+0x376>
    284a:	ac 14       	cp	r10, r12
    284c:	bd 04       	cpc	r11, r13
    284e:	08 f0       	brcs	.+2      	; 0x2852 <follow_path+0x182>
    2850:	d4 c0       	rjmp	.+424    	; 0x29fa <follow_path+0x32a>
    2852:	f1 38       	cpi	r31, 0x81	; 129
    2854:	08 f4       	brcc	.+2      	; 0x2858 <follow_path+0x188>
    2856:	c0 c0       	rjmp	.+384    	; 0x29d8 <follow_path+0x308>
    2858:	f0 3a       	cpi	r31, 0xA0	; 160
    285a:	08 f4       	brcc	.+2      	; 0x285e <follow_path+0x18e>
    285c:	b0 c0       	rjmp	.+352    	; 0x29be <follow_path+0x2ee>
    285e:	8f 2f       	mov	r24, r31
    2860:	80 5e       	subi	r24, 0xE0	; 224
    2862:	8d 31       	cpi	r24, 0x1D	; 29
    2864:	08 f4       	brcc	.+2      	; 0x2868 <follow_path+0x198>
    2866:	ab c0       	rjmp	.+342    	; 0x29be <follow_path+0x2ee>
    2868:	b7 c0       	rjmp	.+366    	; 0x29d8 <follow_path+0x308>
    286a:	c6 01       	movw	r24, r12
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	a8 16       	cp	r10, r24
    2870:	b9 06       	cpc	r11, r25
    2872:	08 f0       	brcs	.+2      	; 0x2876 <follow_path+0x1a6>
    2874:	c2 c0       	rjmp	.+388    	; 0x29fa <follow_path+0x32a>
    2876:	f2 01       	movw	r30, r4
    2878:	ea 0d       	add	r30, r10
    287a:	fb 1d       	adc	r31, r11
    287c:	8f 81       	ldd	r24, Y+7	; 0x07
    287e:	80 83       	st	Z, r24
    2880:	f5 01       	movw	r30, r10
    2882:	31 96       	adiw	r30, 0x01	; 1
    2884:	e4 0d       	add	r30, r4
    2886:	f5 1d       	adc	r31, r5
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	a9 0e       	add	r10, r25
    288c:	b1 1c       	adc	r11, r1
    288e:	80 82       	st	Z, r8
    2890:	bc cf       	rjmp	.-136    	; 0x280a <follow_path+0x13a>
    2892:	81 91       	ld	r24, Z+
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <follow_path+0x1ca>
    2898:	a9 c0       	rjmp	.+338    	; 0x29ec <follow_path+0x31c>
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	48 17       	cp	r20, r24
    289e:	59 07       	cpc	r21, r25
    28a0:	c1 f7       	brne	.-16     	; 0x2892 <follow_path+0x1c2>
    28a2:	28 c0       	rjmp	.+80     	; 0x28f4 <follow_path+0x224>
    28a4:	af 81       	ldd	r26, Y+7	; 0x07
    28a6:	a0 52       	subi	r26, 0x20	; 32
    28a8:	af 83       	std	Y+7, r26	; 0x07
    28aa:	f2 01       	movw	r30, r4
    28ac:	ea 0d       	add	r30, r10
    28ae:	fb 1d       	adc	r31, r11
    28b0:	bf 81       	ldd	r27, Y+7	; 0x07
    28b2:	b0 83       	st	Z, r27
    28b4:	f5 01       	movw	r30, r10
    28b6:	31 96       	adiw	r30, 0x01	; 1
    28b8:	5f 01       	movw	r10, r30
    28ba:	89 01       	movw	r16, r18
    28bc:	a6 cf       	rjmp	.-180    	; 0x280a <follow_path+0x13a>
    28be:	9f 80       	ldd	r9, Y+7	; 0x07
    28c0:	ab 28       	or	r10, r11
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <follow_path+0x1f6>
    28c4:	9a c0       	rjmp	.+308    	; 0x29fa <follow_path+0x32a>
    28c6:	a9 81       	ldd	r26, Y+1	; 0x01
    28c8:	ba 81       	ldd	r27, Y+2	; 0x02
    28ca:	5c 96       	adiw	r26, 0x1c	; 28
    28cc:	8c 91       	ld	r24, X
    28ce:	5c 97       	sbiw	r26, 0x1c	; 28
    28d0:	85 3e       	cpi	r24, 0xE5	; 229
    28d2:	19 f4       	brne	.+6      	; 0x28da <follow_path+0x20a>
    28d4:	e5 e0       	ldi	r30, 0x05	; 5
    28d6:	5c 96       	adiw	r26, 0x1c	; 28
    28d8:	ec 93       	st	X, r30
    28da:	f0 e2       	ldi	r31, 0x20	; 32
    28dc:	f9 15       	cp	r31, r9
    28de:	10 f4       	brcc	.+4      	; 0x28e4 <follow_path+0x214>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <follow_path+0x216>
    28e4:	84 e0       	ldi	r24, 0x04	; 4
    28e6:	e2 0e       	add	r14, r18
    28e8:	f3 1e       	adc	r15, r19
    28ea:	a9 81       	ldd	r26, Y+1	; 0x01
    28ec:	ba 81       	ldd	r27, Y+2	; 0x02
    28ee:	97 96       	adiw	r26, 0x27	; 39
    28f0:	8c 93       	st	X, r24
    28f2:	85 c0       	rjmp	.+266    	; 0x29fe <follow_path+0x32e>
    28f4:	16 e0       	ldi	r17, 0x06	; 6
    28f6:	b3 c0       	rjmp	.+358    	; 0x2a5e <follow_path+0x38e>
    28f8:	a9 81       	ldd	r26, Y+1	; 0x01
    28fa:	ba 81       	ldd	r27, Y+2	; 0x02
    28fc:	56 96       	adiw	r26, 0x16	; 22
    28fe:	4d 91       	ld	r20, X+
    2900:	5d 91       	ld	r21, X+
    2902:	6d 91       	ld	r22, X+
    2904:	7c 91       	ld	r23, X
    2906:	59 97       	sbiw	r26, 0x19	; 25
    2908:	c6 01       	movw	r24, r12
    290a:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    290e:	18 2f       	mov	r17, r24
    2910:	81 11       	cpse	r24, r1
    2912:	85 c0       	rjmp	.+266    	; 0x2a1e <follow_path+0x34e>
    2914:	a9 81       	ldd	r26, Y+1	; 0x01
    2916:	ba 81       	ldd	r27, Y+2	; 0x02
    2918:	5a 96       	adiw	r26, 0x1a	; 26
    291a:	ed 91       	ld	r30, X+
    291c:	fc 91       	ld	r31, X
    291e:	5b 97       	sbiw	r26, 0x1b	; 27
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	09 f4       	brne	.+2      	; 0x2928 <follow_path+0x258>
    2926:	83 c0       	rjmp	.+262    	; 0x2a2e <follow_path+0x35e>
    2928:	03 85       	ldd	r16, Z+11	; 0x0b
    292a:	80 2f       	mov	r24, r16
    292c:	8f 73       	andi	r24, 0x3F	; 63
    292e:	14 96       	adiw	r26, 0x04	; 4
    2930:	8c 93       	st	X, r24
    2932:	83 85       	ldd	r24, Z+11	; 0x0b
    2934:	83 fd       	sbrc	r24, 3
    2936:	09 c0       	rjmp	.+18     	; 0x294a <follow_path+0x27a>
    2938:	47 2d       	mov	r20, r7
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	b2 01       	movw	r22, r4
    293e:	cf 01       	movw	r24, r30
    2940:	0e 94 06 07 	call	0xe0c	; 0xe0c <mem_cmp>
    2944:	89 2b       	or	r24, r25
    2946:	09 f4       	brne	.+2      	; 0x294a <follow_path+0x27a>
    2948:	76 c0       	rjmp	.+236    	; 0x2a36 <follow_path+0x366>
    294a:	60 e0       	ldi	r22, 0x00	; 0
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	a6 d9       	rcall	.-3252   	; 0x1ca0 <dir_next>
    2954:	18 2f       	mov	r17, r24
    2956:	88 23       	and	r24, r24
    2958:	79 f2       	breq	.-98     	; 0x28f8 <follow_path+0x228>
    295a:	61 c0       	rjmp	.+194    	; 0x2a1e <follow_path+0x34e>
    295c:	85 ff       	sbrs	r24, 5
    295e:	09 c0       	rjmp	.+18     	; 0x2972 <follow_path+0x2a2>
    2960:	82 ff       	sbrs	r24, 2
    2962:	1e cf       	rjmp	.-452    	; 0x27a0 <follow_path+0xd0>
    2964:	80 e8       	ldi	r24, 0x80	; 128
    2966:	a9 81       	ldd	r26, Y+1	; 0x01
    2968:	ba 81       	ldd	r27, Y+2	; 0x02
    296a:	97 96       	adiw	r26, 0x27	; 39
    296c:	8c 93       	st	X, r24
    296e:	10 e0       	ldi	r17, 0x00	; 0
    2970:	76 c0       	rjmp	.+236    	; 0x2a5e <follow_path+0x38e>
    2972:	82 fd       	sbrc	r24, 2
    2974:	18 c0       	rjmp	.+48     	; 0x29a6 <follow_path+0x2d6>
    2976:	15 e0       	ldi	r17, 0x05	; 5
    2978:	72 c0       	rjmp	.+228    	; 0x2a5e <follow_path+0x38e>
    297a:	04 ff       	sbrs	r16, 4
    297c:	16 c0       	rjmp	.+44     	; 0x29aa <follow_path+0x2da>
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	66 85       	ldd	r22, Z+14	; 0x0e
    2984:	77 85       	ldd	r23, Z+15	; 0x0f
    2986:	71 70       	andi	r23, 0x01	; 1
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	68 0f       	add	r22, r24
    298e:	79 1f       	adc	r23, r25
    2990:	c1 01       	movw	r24, r2
    2992:	7c de       	rcall	.-776    	; 0x268c <ld_clust>
    2994:	a9 81       	ldd	r26, Y+1	; 0x01
    2996:	ba 81       	ldd	r27, Y+2	; 0x02
    2998:	16 96       	adiw	r26, 0x06	; 6
    299a:	6d 93       	st	X+, r22
    299c:	7d 93       	st	X+, r23
    299e:	8d 93       	st	X+, r24
    29a0:	9c 93       	st	X, r25
    29a2:	19 97       	sbiw	r26, 0x09	; 9
    29a4:	fd ce       	rjmp	.-518    	; 0x27a0 <follow_path+0xd0>
    29a6:	14 e0       	ldi	r17, 0x04	; 4
    29a8:	5a c0       	rjmp	.+180    	; 0x2a5e <follow_path+0x38e>
    29aa:	15 e0       	ldi	r17, 0x05	; 5
    29ac:	58 c0       	rjmp	.+176    	; 0x2a5e <follow_path+0x38e>
    29ae:	e2 0e       	add	r14, r18
    29b0:	f3 1e       	adc	r15, r19
    29b2:	80 e2       	ldi	r24, 0x20	; 32
    29b4:	1d cf       	rjmp	.-454    	; 0x27f0 <follow_path+0x120>
    29b6:	e2 0e       	add	r14, r18
    29b8:	f3 1e       	adc	r15, r19
    29ba:	84 e2       	ldi	r24, 0x24	; 36
    29bc:	19 cf       	rjmp	.-462    	; 0x27f0 <follow_path+0x120>
    29be:	0e 5f       	subi	r16, 0xFE	; 254
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	f7 01       	movw	r30, r14
    29c4:	e2 0f       	add	r30, r18
    29c6:	f3 1f       	adc	r31, r19
    29c8:	80 80       	ld	r8, Z
    29ca:	88 2d       	mov	r24, r8
    29cc:	0e 94 14 07 	call	0xe28	; 0xe28 <dbc_2nd>
    29d0:	89 2b       	or	r24, r25
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <follow_path+0x306>
    29d4:	4a cf       	rjmp	.-364    	; 0x286a <follow_path+0x19a>
    29d6:	11 c0       	rjmp	.+34     	; 0x29fa <follow_path+0x32a>
    29d8:	bf 81       	ldd	r27, Y+7	; 0x07
    29da:	4b 2f       	mov	r20, r27
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	42 32       	cpi	r20, 0x22	; 34
    29e0:	51 05       	cpc	r21, r1
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <follow_path+0x316>
    29e4:	87 cf       	rjmp	.-242    	; 0x28f4 <follow_path+0x224>
    29e6:	e9 eb       	ldi	r30, 0xB9	; 185
    29e8:	f1 e0       	ldi	r31, 0x01	; 1
    29ea:	53 cf       	rjmp	.-346    	; 0x2892 <follow_path+0x1c2>
    29ec:	ef 81       	ldd	r30, Y+7	; 0x07
    29ee:	8e 2f       	mov	r24, r30
    29f0:	81 56       	subi	r24, 0x61	; 97
    29f2:	8a 31       	cpi	r24, 0x1A	; 26
    29f4:	08 f4       	brcc	.+2      	; 0x29f8 <follow_path+0x328>
    29f6:	56 cf       	rjmp	.-340    	; 0x28a4 <follow_path+0x1d4>
    29f8:	58 cf       	rjmp	.-336    	; 0x28aa <follow_path+0x1da>
    29fa:	16 e0       	ldi	r17, 0x06	; 6
    29fc:	30 c0       	rjmp	.+96     	; 0x2a5e <follow_path+0x38e>
    29fe:	a9 81       	ldd	r26, Y+1	; 0x01
    2a00:	ba 81       	ldd	r27, Y+2	; 0x02
    2a02:	cd 90       	ld	r12, X+
    2a04:	dc 90       	ld	r13, X
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	ba 01       	movw	r22, r20
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <dir_sdi>
    2a14:	18 2f       	mov	r17, r24
    2a16:	88 23       	and	r24, r24
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <follow_path+0x34c>
    2a1a:	6e cf       	rjmp	.-292    	; 0x28f8 <follow_path+0x228>
    2a1c:	00 c0       	rjmp	.+0      	; 0x2a1e <follow_path+0x34e>
    2a1e:	a9 81       	ldd	r26, Y+1	; 0x01
    2a20:	ba 81       	ldd	r27, Y+2	; 0x02
    2a22:	97 96       	adiw	r26, 0x27	; 39
    2a24:	8c 91       	ld	r24, X
    2a26:	14 30       	cpi	r17, 0x04	; 4
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <follow_path+0x35c>
    2a2a:	98 cf       	rjmp	.-208    	; 0x295c <follow_path+0x28c>
    2a2c:	18 c0       	rjmp	.+48     	; 0x2a5e <follow_path+0x38e>
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	87 a1       	ldd	r24, Z+39	; 0x27
    2a34:	93 cf       	rjmp	.-218    	; 0x295c <follow_path+0x28c>
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	97 96       	adiw	r26, 0x27	; 39
    2a3e:	8c 91       	ld	r24, X
    2a40:	82 ff       	sbrs	r24, 2
    2a42:	9b cf       	rjmp	.-202    	; 0x297a <follow_path+0x2aa>
    2a44:	0c c0       	rjmp	.+24     	; 0x2a5e <follow_path+0x38e>
    2a46:	bb e0       	ldi	r27, 0x0B	; 11
    2a48:	cb 16       	cp	r12, r27
    2a4a:	d1 04       	cpc	r13, r1
    2a4c:	b1 f2       	breq	.-84     	; 0x29fa <follow_path+0x32a>
    2a4e:	89 01       	movw	r16, r18
    2a50:	68 94       	set
    2a52:	aa 24       	eor	r10, r10
    2a54:	a3 f8       	bld	r10, 3
    2a56:	b1 2c       	mov	r11, r1
    2a58:	cd 80       	ldd	r12, Y+5	; 0x05
    2a5a:	de 80       	ldd	r13, Y+6	; 0x06
    2a5c:	d6 ce       	rjmp	.-596    	; 0x280a <follow_path+0x13a>
    2a5e:	81 2f       	mov	r24, r17
    2a60:	27 96       	adiw	r28, 0x07	; 7
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	ff 90       	pop	r15
    2a76:	ef 90       	pop	r14
    2a78:	df 90       	pop	r13
    2a7a:	cf 90       	pop	r12
    2a7c:	bf 90       	pop	r11
    2a7e:	af 90       	pop	r10
    2a80:	9f 90       	pop	r9
    2a82:	8f 90       	pop	r8
    2a84:	7f 90       	pop	r7
    2a86:	6f 90       	pop	r6
    2a88:	5f 90       	pop	r5
    2a8a:	4f 90       	pop	r4
    2a8c:	3f 90       	pop	r3
    2a8e:	2f 90       	pop	r2
    2a90:	08 95       	ret

00002a92 <f_mount>:
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <f_mount+0x8>
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <f_mount+0xa>
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <f_mount+0xc>
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	7e 83       	std	Y+6, r23	; 0x06
    2aa8:	6d 83       	std	Y+5, r22	; 0x05
    2aaa:	14 2f       	mov	r17, r20
    2aac:	7a 83       	std	Y+2, r23	; 0x02
    2aae:	69 83       	std	Y+1, r22	; 0x01
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_ldnumber>
    2ab8:	99 23       	and	r25, r25
    2aba:	1c f1       	brlt	.+70     	; 0x2b02 <f_mount+0x70>
    2abc:	fc 01       	movw	r30, r24
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	ed 53       	subi	r30, 0x3D	; 61
    2ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	f0 81       	ld	r31, Z
    2aca:	e0 2d       	mov	r30, r0
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <f_mount+0x40>
    2ad0:	10 82       	st	Z, r1
    2ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad6:	30 97       	sbiw	r30, 0x00	; 0
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <f_mount+0x4a>
    2ada:	10 82       	st	Z, r1
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	ed 53       	subi	r30, 0x3D	; 61
    2ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	11 23       	and	r17, r17
    2af0:	51 f0       	breq	.+20     	; 0x2b06 <f_mount+0x74>
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	be 01       	movw	r22, r28
    2af6:	6d 5f       	subi	r22, 0xFD	; 253
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	ce 01       	movw	r24, r28
    2afc:	05 96       	adiw	r24, 0x05	; 5
    2afe:	7f da       	rcall	.-2818   	; 0x1ffe <find_volume>
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <f_mount+0x76>
    2b02:	8b e0       	ldi	r24, 0x0B	; 11
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <f_mount+0x76>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	26 96       	adiw	r28, 0x06	; 6
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	08 95       	ret

00002b1c <f_open>:
    2b1c:	2f 92       	push	r2
    2b1e:	3f 92       	push	r3
    2b20:	4f 92       	push	r4
    2b22:	5f 92       	push	r5
    2b24:	6f 92       	push	r6
    2b26:	7f 92       	push	r7
    2b28:	8f 92       	push	r8
    2b2a:	9f 92       	push	r9
    2b2c:	af 92       	push	r10
    2b2e:	bf 92       	push	r11
    2b30:	cf 92       	push	r12
    2b32:	df 92       	push	r13
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	ac 97       	sbiw	r28, 0x2c	; 44
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	7c a7       	std	Y+44, r23	; 0x2c
    2b52:	6b a7       	std	Y+43, r22	; 0x2b
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <f_open+0x3e>
    2b58:	18 c1       	rjmp	.+560    	; 0x2d8a <f_open+0x26e>
    2b5a:	14 2f       	mov	r17, r20
    2b5c:	1c 01       	movw	r2, r24
    2b5e:	84 2f       	mov	r24, r20
    2b60:	8f 73       	andi	r24, 0x3F	; 63
    2b62:	d8 2e       	mov	r13, r24
    2b64:	48 2f       	mov	r20, r24
    2b66:	be 01       	movw	r22, r28
    2b68:	67 5d       	subi	r22, 0xD7	; 215
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	8b 96       	adiw	r24, 0x2b	; 43
    2b70:	46 da       	rcall	.-2932   	; 0x1ffe <find_volume>
    2b72:	81 11       	cpse	r24, r1
    2b74:	06 c1       	rjmp	.+524    	; 0x2d82 <f_open+0x266>
    2b76:	89 a5       	ldd	r24, Y+41	; 0x29
    2b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	6b a5       	ldd	r22, Y+43	; 0x2b
    2b80:	7c a5       	ldd	r23, Y+44	; 0x2c
    2b82:	ce 01       	movw	r24, r28
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	a4 dd       	rcall	.-1208   	; 0x26d0 <follow_path>
    2b88:	81 11       	cpse	r24, r1
    2b8a:	01 c1       	rjmp	.+514    	; 0x2d8e <f_open+0x272>
    2b8c:	88 a5       	ldd	r24, Y+40	; 0x28
    2b8e:	88 23       	and	r24, r24
    2b90:	0c f0       	brlt	.+2      	; 0x2b94 <f_open+0x78>
    2b92:	06 c1       	rjmp	.+524    	; 0x2da0 <f_open+0x284>
    2b94:	00 c1       	rjmp	.+512    	; 0x2d96 <f_open+0x27a>
    2b96:	84 30       	cpi	r24, 0x04	; 4
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <f_open+0x80>
    2b9a:	29 c1       	rjmp	.+594    	; 0x2dee <f_open+0x2d2>
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	b2 d9       	rcall	.-3228   	; 0x1f06 <dir_register>
    2ba2:	9d 2d       	mov	r25, r13
    2ba4:	98 60       	ori	r25, 0x08	; 8
    2ba6:	d9 2e       	mov	r13, r25
    2ba8:	88 23       	and	r24, r24
    2baa:	39 f0       	breq	.+14     	; 0x2bba <f_open+0x9e>
    2bac:	ea c0       	rjmp	.+468    	; 0x2d82 <f_open+0x266>
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	81 71       	andi	r24, 0x11	; 17
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <f_open+0x9a>
    2bb4:	43 c1       	rjmp	.+646    	; 0x2e3c <f_open+0x320>
    2bb6:	12 fd       	sbrc	r17, 2
    2bb8:	43 c1       	rjmp	.+646    	; 0x2e40 <f_open+0x324>
    2bba:	d3 fe       	sbrs	r13, 3
    2bbc:	57 c0       	rjmp	.+174    	; 0x2c6c <f_open+0x150>
    2bbe:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2bc0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2bc2:	a9 a4       	ldd	r10, Y+41	; 0x29
    2bc4:	ba a4       	ldd	r11, Y+42	; 0x2a
    2bc6:	b8 01       	movw	r22, r16
    2bc8:	c5 01       	movw	r24, r10
    2bca:	60 dd       	rcall	.-1344   	; 0x268c <ld_clust>
    2bcc:	2b 01       	movw	r4, r22
    2bce:	3c 01       	movw	r6, r24
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	16 86       	std	Z+14, r1	; 0x0e
    2bd4:	17 86       	std	Z+15, r1	; 0x0f
    2bd6:	81 e2       	ldi	r24, 0x21	; 33
    2bd8:	80 8b       	std	Z+16, r24	; 0x10
    2bda:	88 e4       	ldi	r24, 0x48	; 72
    2bdc:	81 8b       	std	Z+17, r24	; 0x11
    2bde:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2be0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2be2:	80 e2       	ldi	r24, 0x20	; 32
    2be4:	83 87       	std	Z+11, r24	; 0x0b
    2be6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2be8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	a9 01       	movw	r20, r18
    2bf0:	c5 01       	movw	r24, r10
    2bf2:	0e 94 8d 0a 	call	0x151a	; 0x151a <st_clust>
    2bf6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2bf8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2bfa:	14 8e       	std	Z+28, r1	; 0x1c
    2bfc:	15 8e       	std	Z+29, r1	; 0x1d
    2bfe:	16 8e       	std	Z+30, r1	; 0x1e
    2c00:	17 8e       	std	Z+31, r1	; 0x1f
    2c02:	e9 a5       	ldd	r30, Y+41	; 0x29
    2c04:	fa a5       	ldd	r31, Y+42	; 0x2a
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	83 83       	std	Z+3, r24	; 0x03
    2c0a:	41 14       	cp	r4, r1
    2c0c:	51 04       	cpc	r5, r1
    2c0e:	61 04       	cpc	r6, r1
    2c10:	71 04       	cpc	r7, r1
    2c12:	49 f1       	breq	.+82     	; 0x2c66 <f_open+0x14a>
    2c14:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c16:	90 a8       	ldd	r9, Z+48	; 0x30
    2c18:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c1a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c1c:	00 e0       	ldi	r16, 0x00	; 0
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	98 01       	movw	r18, r16
    2c22:	b3 01       	movw	r22, r6
    2c24:	a2 01       	movw	r20, r4
    2c26:	ce 01       	movw	r24, r28
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <remove_chain>
    2c2e:	81 11       	cpse	r24, r1
    2c30:	a8 c0       	rjmp	.+336    	; 0x2d82 <f_open+0x266>
    2c32:	b5 01       	movw	r22, r10
    2c34:	a4 01       	movw	r20, r8
    2c36:	89 a5       	ldd	r24, Y+41	; 0x29
    2c38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c3a:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    2c3e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2c40:	fa a5       	ldd	r31, Y+42	; 0x2a
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	49 1a       	sub	r4, r25
    2c46:	51 08       	sbc	r5, r1
    2c48:	61 08       	sbc	r6, r1
    2c4a:	71 08       	sbc	r7, r1
    2c4c:	43 86       	std	Z+11, r4	; 0x0b
    2c4e:	54 86       	std	Z+12, r5	; 0x0c
    2c50:	65 86       	std	Z+13, r6	; 0x0d
    2c52:	76 86       	std	Z+14, r7	; 0x0e
    2c54:	88 23       	and	r24, r24
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <f_open+0x14a>
    2c58:	94 c0       	rjmp	.+296    	; 0x2d82 <f_open+0x266>
    2c5a:	11 ff       	sbrs	r17, 1
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <f_open+0x146>
    2c5e:	80 fd       	sbrc	r24, 0
    2c60:	f1 c0       	rjmp	.+482    	; 0x2e44 <f_open+0x328>
    2c62:	13 ff       	sbrs	r17, 3
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <f_open+0x150>
    2c66:	ed 2d       	mov	r30, r13
    2c68:	e0 64       	ori	r30, 0x40	; 64
    2c6a:	de 2e       	mov	r13, r30
    2c6c:	e9 a5       	ldd	r30, Y+41	; 0x29
    2c6e:	fa a5       	ldd	r31, Y+42	; 0x2a
    2c70:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c72:	90 a9       	ldd	r25, Z+48	; 0x30
    2c74:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c76:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c78:	f1 01       	movw	r30, r2
    2c7a:	84 8f       	std	Z+28, r24	; 0x1c
    2c7c:	95 8f       	std	Z+29, r25	; 0x1d
    2c7e:	a6 8f       	std	Z+30, r26	; 0x1e
    2c80:	b7 8f       	std	Z+31, r27	; 0x1f
    2c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c86:	91 a3       	std	Z+33, r25	; 0x21
    2c88:	80 a3       	std	Z+32, r24	; 0x20
    2c8a:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2c8c:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2c8e:	09 a5       	ldd	r16, Y+41	; 0x29
    2c90:	1a a5       	ldd	r17, Y+42	; 0x2a
    2c92:	b5 01       	movw	r22, r10
    2c94:	c8 01       	movw	r24, r16
    2c96:	fa dc       	rcall	.-1548   	; 0x268c <ld_clust>
    2c98:	2b 01       	movw	r4, r22
    2c9a:	3c 01       	movw	r6, r24
    2c9c:	f1 01       	movw	r30, r2
    2c9e:	66 83       	std	Z+6, r22	; 0x06
    2ca0:	77 83       	std	Z+7, r23	; 0x07
    2ca2:	80 87       	std	Z+8, r24	; 0x08
    2ca4:	91 87       	std	Z+9, r25	; 0x09
    2ca6:	c5 01       	movw	r24, r10
    2ca8:	4c 96       	adiw	r24, 0x1c	; 28
    2caa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ld_dword>
    2cae:	4b 01       	movw	r8, r22
    2cb0:	5c 01       	movw	r10, r24
    2cb2:	f1 01       	movw	r30, r2
    2cb4:	62 87       	std	Z+10, r22	; 0x0a
    2cb6:	73 87       	std	Z+11, r23	; 0x0b
    2cb8:	84 87       	std	Z+12, r24	; 0x0c
    2cba:	95 87       	std	Z+13, r25	; 0x0d
    2cbc:	11 83       	std	Z+1, r17	; 0x01
    2cbe:	00 83       	st	Z, r16
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	85 81       	ldd	r24, Z+5	; 0x05
    2cc4:	96 81       	ldd	r25, Z+6	; 0x06
    2cc6:	f1 01       	movw	r30, r2
    2cc8:	93 83       	std	Z+3, r25	; 0x03
    2cca:	82 83       	std	Z+2, r24	; 0x02
    2ccc:	d6 86       	std	Z+14, r13	; 0x0e
    2cce:	17 86       	std	Z+15, r1	; 0x0f
    2cd0:	10 8e       	std	Z+24, r1	; 0x18
    2cd2:	11 8e       	std	Z+25, r1	; 0x19
    2cd4:	12 8e       	std	Z+26, r1	; 0x1a
    2cd6:	13 8e       	std	Z+27, r1	; 0x1b
    2cd8:	10 8a       	std	Z+16, r1	; 0x10
    2cda:	11 8a       	std	Z+17, r1	; 0x11
    2cdc:	12 8a       	std	Z+18, r1	; 0x12
    2cde:	13 8a       	std	Z+19, r1	; 0x13
    2ce0:	d5 fe       	sbrs	r13, 5
    2ce2:	82 c0       	rjmp	.+260    	; 0x2de8 <f_open+0x2cc>
    2ce4:	81 14       	cp	r8, r1
    2ce6:	91 04       	cpc	r9, r1
    2ce8:	a1 04       	cpc	r10, r1
    2cea:	b1 04       	cpc	r11, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <f_open+0x1d4>
    2cee:	7c c0       	rjmp	.+248    	; 0x2de8 <f_open+0x2cc>
    2cf0:	80 8a       	std	Z+16, r8	; 0x10
    2cf2:	91 8a       	std	Z+17, r9	; 0x11
    2cf4:	a2 8a       	std	Z+18, r10	; 0x12
    2cf6:	b3 8a       	std	Z+19, r11	; 0x13
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	81 85       	ldd	r24, Z+9	; 0x09
    2cfc:	92 85       	ldd	r25, Z+10	; 0x0a
    2cfe:	a0 e0       	ldi	r26, 0x00	; 0
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	6c 01       	movw	r12, r24
    2d04:	7d 01       	movw	r14, r26
    2d06:	0b 2e       	mov	r0, r27
    2d08:	b9 e0       	ldi	r27, 0x09	; 9
    2d0a:	cc 0c       	add	r12, r12
    2d0c:	dd 1c       	adc	r13, r13
    2d0e:	ee 1c       	adc	r14, r14
    2d10:	ff 1c       	adc	r15, r15
    2d12:	ba 95       	dec	r27
    2d14:	d1 f7       	brne	.-12     	; 0x2d0a <f_open+0x1ee>
    2d16:	b0 2d       	mov	r27, r0
    2d18:	c8 14       	cp	r12, r8
    2d1a:	d9 04       	cpc	r13, r9
    2d1c:	ea 04       	cpc	r14, r10
    2d1e:	fb 04       	cpc	r15, r11
    2d20:	08 f0       	brcs	.+2      	; 0x2d24 <f_open+0x208>
    2d22:	50 c0       	rjmp	.+160    	; 0x2dc4 <f_open+0x2a8>
    2d24:	b3 01       	movw	r22, r6
    2d26:	a2 01       	movw	r20, r4
    2d28:	c1 01       	movw	r24, r2
    2d2a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_fat>
    2d2e:	2b 01       	movw	r4, r22
    2d30:	3c 01       	movw	r6, r24
    2d32:	62 30       	cpi	r22, 0x02	; 2
    2d34:	71 05       	cpc	r23, r1
    2d36:	81 05       	cpc	r24, r1
    2d38:	91 05       	cpc	r25, r1
    2d3a:	08 f0       	brcs	.+2      	; 0x2d3e <f_open+0x222>
    2d3c:	78 c0       	rjmp	.+240    	; 0x2e2e <f_open+0x312>
    2d3e:	66 c0       	rjmp	.+204    	; 0x2e0c <f_open+0x2f0>
    2d40:	b3 01       	movw	r22, r6
    2d42:	a2 01       	movw	r20, r4
    2d44:	89 a5       	ldd	r24, Y+41	; 0x29
    2d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d48:	0e 94 27 07 	call	0xe4e	; 0xe4e <clst2sect>
    2d4c:	61 15       	cp	r22, r1
    2d4e:	71 05       	cpc	r23, r1
    2d50:	81 05       	cpc	r24, r1
    2d52:	91 05       	cpc	r25, r1
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <f_open+0x23c>
    2d56:	46 c0       	rjmp	.+140    	; 0x2de4 <f_open+0x2c8>
    2d58:	07 2e       	mov	r0, r23
    2d5a:	79 e0       	ldi	r23, 0x09	; 9
    2d5c:	b6 94       	lsr	r11
    2d5e:	a7 94       	ror	r10
    2d60:	97 94       	ror	r9
    2d62:	87 94       	ror	r8
    2d64:	7a 95       	dec	r23
    2d66:	d1 f7       	brne	.-12     	; 0x2d5c <f_open+0x240>
    2d68:	70 2d       	mov	r23, r0
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	88 0d       	add	r24, r8
    2d70:	99 1d       	adc	r25, r9
    2d72:	aa 1d       	adc	r26, r10
    2d74:	bb 1d       	adc	r27, r11
    2d76:	f1 01       	movw	r30, r2
    2d78:	80 8f       	std	Z+24, r24	; 0x18
    2d7a:	91 8f       	std	Z+25, r25	; 0x19
    2d7c:	a2 8f       	std	Z+26, r26	; 0x1a
    2d7e:	b3 8f       	std	Z+27, r27	; 0x1b
    2d80:	33 c0       	rjmp	.+102    	; 0x2de8 <f_open+0x2cc>
    2d82:	f1 01       	movw	r30, r2
    2d84:	11 82       	std	Z+1, r1	; 0x01
    2d86:	10 82       	st	Z, r1
    2d88:	61 c0       	rjmp	.+194    	; 0x2e4c <f_open+0x330>
    2d8a:	89 e0       	ldi	r24, 0x09	; 9
    2d8c:	5f c0       	rjmp	.+190    	; 0x2e4c <f_open+0x330>
    2d8e:	41 2f       	mov	r20, r17
    2d90:	4c 71       	andi	r20, 0x1C	; 28
    2d92:	59 f0       	breq	.+22     	; 0x2daa <f_open+0x28e>
    2d94:	00 cf       	rjmp	.-512    	; 0x2b96 <f_open+0x7a>
    2d96:	41 2f       	mov	r20, r17
    2d98:	4c 71       	andi	r20, 0x1C	; 28
    2d9a:	41 f5       	brne	.+80     	; 0x2dec <f_open+0x2d0>
    2d9c:	86 e0       	ldi	r24, 0x06	; 6
    2d9e:	05 c0       	rjmp	.+10     	; 0x2daa <f_open+0x28e>
    2da0:	81 2f       	mov	r24, r17
    2da2:	8c 71       	andi	r24, 0x1C	; 28
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <f_open+0x28c>
    2da6:	03 cf       	rjmp	.-506    	; 0x2bae <f_open+0x92>
    2da8:	26 c0       	rjmp	.+76     	; 0x2df6 <f_open+0x2da>
    2daa:	81 11       	cpse	r24, r1
    2dac:	ea cf       	rjmp	.-44     	; 0x2d82 <f_open+0x266>
    2dae:	6d cf       	rjmp	.-294    	; 0x2c8a <f_open+0x16e>
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	9f ef       	ldi	r25, 0xFF	; 255
    2db4:	dc 01       	movw	r26, r24
    2db6:	f1 01       	movw	r30, r2
    2db8:	84 8b       	std	Z+20, r24	; 0x14
    2dba:	95 8b       	std	Z+21, r25	; 0x15
    2dbc:	a6 8b       	std	Z+22, r26	; 0x16
    2dbe:	b7 8b       	std	Z+23, r27	; 0x17
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	df cf       	rjmp	.-66     	; 0x2d82 <f_open+0x266>
    2dc4:	f1 01       	movw	r30, r2
    2dc6:	44 8a       	std	Z+20, r4	; 0x14
    2dc8:	55 8a       	std	Z+21, r5	; 0x15
    2dca:	66 8a       	std	Z+22, r6	; 0x16
    2dcc:	77 8a       	std	Z+23, r7	; 0x17
    2dce:	d5 01       	movw	r26, r10
    2dd0:	c4 01       	movw	r24, r8
    2dd2:	91 70       	andi	r25, 0x01	; 1
    2dd4:	aa 27       	eor	r26, r26
    2dd6:	bb 27       	eor	r27, r27
    2dd8:	89 2b       	or	r24, r25
    2dda:	8a 2b       	or	r24, r26
    2ddc:	8b 2b       	or	r24, r27
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <f_open+0x2c6>
    2de0:	af cf       	rjmp	.-162    	; 0x2d40 <f_open+0x224>
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <f_open+0x2cc>
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	cd cf       	rjmp	.-102    	; 0x2d82 <f_open+0x266>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	30 c0       	rjmp	.+96     	; 0x2e4c <f_open+0x330>
    2dec:	86 e0       	ldi	r24, 0x06	; 6
    2dee:	fd 2d       	mov	r31, r13
    2df0:	f8 60       	ori	r31, 0x08	; 8
    2df2:	df 2e       	mov	r13, r31
    2df4:	da cf       	rjmp	.-76     	; 0x2daa <f_open+0x28e>
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	84 fd       	sbrc	r24, 4
    2dfa:	26 c0       	rjmp	.+76     	; 0x2e48 <f_open+0x32c>
    2dfc:	2e cf       	rjmp	.-420    	; 0x2c5a <f_open+0x13e>
    2dfe:	f1 01       	movw	r30, r2
    2e00:	44 8a       	std	Z+20, r4	; 0x14
    2e02:	55 8a       	std	Z+21, r5	; 0x15
    2e04:	66 8a       	std	Z+22, r6	; 0x16
    2e06:	77 8a       	std	Z+23, r7	; 0x17
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	bb cf       	rjmp	.-138    	; 0x2d82 <f_open+0x266>
    2e0c:	6f 3f       	cpi	r22, 0xFF	; 255
    2e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e10:	8f 4f       	sbci	r24, 0xFF	; 255
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	69 f2       	breq	.-102    	; 0x2db0 <f_open+0x294>
    2e16:	f3 cf       	rjmp	.-26     	; 0x2dfe <f_open+0x2e2>
    2e18:	8c 18       	sub	r8, r12
    2e1a:	9d 08       	sbc	r9, r13
    2e1c:	ae 08       	sbc	r10, r14
    2e1e:	bf 08       	sbc	r11, r15
    2e20:	c8 14       	cp	r12, r8
    2e22:	d9 04       	cpc	r13, r9
    2e24:	ea 04       	cpc	r14, r10
    2e26:	fb 04       	cpc	r15, r11
    2e28:	08 f4       	brcc	.+2      	; 0x2e2c <f_open+0x310>
    2e2a:	7c cf       	rjmp	.-264    	; 0x2d24 <f_open+0x208>
    2e2c:	cb cf       	rjmp	.-106    	; 0x2dc4 <f_open+0x2a8>
    2e2e:	8f ef       	ldi	r24, 0xFF	; 255
    2e30:	48 16       	cp	r4, r24
    2e32:	58 06       	cpc	r5, r24
    2e34:	68 06       	cpc	r6, r24
    2e36:	78 06       	cpc	r7, r24
    2e38:	79 f7       	brne	.-34     	; 0x2e18 <f_open+0x2fc>
    2e3a:	ba cf       	rjmp	.-140    	; 0x2db0 <f_open+0x294>
    2e3c:	87 e0       	ldi	r24, 0x07	; 7
    2e3e:	a1 cf       	rjmp	.-190    	; 0x2d82 <f_open+0x266>
    2e40:	88 e0       	ldi	r24, 0x08	; 8
    2e42:	9f cf       	rjmp	.-194    	; 0x2d82 <f_open+0x266>
    2e44:	87 e0       	ldi	r24, 0x07	; 7
    2e46:	9d cf       	rjmp	.-198    	; 0x2d82 <f_open+0x266>
    2e48:	84 e0       	ldi	r24, 0x04	; 4
    2e4a:	9b cf       	rjmp	.-202    	; 0x2d82 <f_open+0x266>
    2e4c:	ac 96       	adiw	r28, 0x2c	; 44
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	bf 90       	pop	r11
    2e6a:	af 90       	pop	r10
    2e6c:	9f 90       	pop	r9
    2e6e:	8f 90       	pop	r8
    2e70:	7f 90       	pop	r7
    2e72:	6f 90       	pop	r6
    2e74:	5f 90       	pop	r5
    2e76:	4f 90       	pop	r4
    2e78:	3f 90       	pop	r3
    2e7a:	2f 90       	pop	r2
    2e7c:	08 95       	ret

00002e7e <f_read>:
    2e7e:	2f 92       	push	r2
    2e80:	3f 92       	push	r3
    2e82:	4f 92       	push	r4
    2e84:	5f 92       	push	r5
    2e86:	6f 92       	push	r6
    2e88:	7f 92       	push	r7
    2e8a:	8f 92       	push	r8
    2e8c:	9f 92       	push	r9
    2e8e:	af 92       	push	r10
    2e90:	bf 92       	push	r11
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <f_read+0x26>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <f_read+0x28>
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <f_read+0x2a>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	7c 01       	movw	r14, r24
    2eae:	3b 01       	movw	r6, r22
    2eb0:	5a 01       	movw	r10, r20
    2eb2:	49 01       	movw	r8, r18
    2eb4:	f9 01       	movw	r30, r18
    2eb6:	11 82       	std	Z+1, r1	; 0x01
    2eb8:	10 82       	st	Z, r1
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	fe 82       	std	Y+6, r15	; 0x06
    2ebe:	be 01       	movw	r22, r28
    2ec0:	6f 5f       	subi	r22, 0xFF	; 255
    2ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <validate>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	23 c1       	rjmp	.+582    	; 0x3112 <f_read+0x294>
    2ecc:	f7 01       	movw	r30, r14
    2ece:	87 85       	ldd	r24, Z+15	; 0x0f
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	1f c1       	rjmp	.+574    	; 0x3112 <f_read+0x294>
    2ed4:	86 85       	ldd	r24, Z+14	; 0x0e
    2ed6:	80 ff       	sbrs	r24, 0
    2ed8:	19 c1       	rjmp	.+562    	; 0x310c <f_read+0x28e>
    2eda:	82 85       	ldd	r24, Z+10	; 0x0a
    2edc:	93 85       	ldd	r25, Z+11	; 0x0b
    2ede:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ee0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ee2:	40 89       	ldd	r20, Z+16	; 0x10
    2ee4:	51 89       	ldd	r21, Z+17	; 0x11
    2ee6:	62 89       	ldd	r22, Z+18	; 0x12
    2ee8:	73 89       	ldd	r23, Z+19	; 0x13
    2eea:	84 1b       	sub	r24, r20
    2eec:	95 0b       	sbc	r25, r21
    2eee:	a6 0b       	sbc	r26, r22
    2ef0:	b7 0b       	sbc	r27, r23
    2ef2:	a5 01       	movw	r20, r10
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	84 17       	cp	r24, r20
    2efa:	95 07       	cpc	r25, r21
    2efc:	a6 07       	cpc	r26, r22
    2efe:	b7 07       	cpc	r27, r23
    2f00:	08 f4       	brcc	.+2      	; 0x2f04 <f_read+0x86>
    2f02:	5c 01       	movw	r10, r24
    2f04:	a1 14       	cp	r10, r1
    2f06:	b1 04       	cpc	r11, r1
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <f_read+0x8e>
    2f0a:	02 c1       	rjmp	.+516    	; 0x3110 <f_read+0x292>
    2f0c:	f7 01       	movw	r30, r14
    2f0e:	80 89       	ldd	r24, Z+16	; 0x10
    2f10:	91 89       	ldd	r25, Z+17	; 0x11
    2f12:	a2 89       	ldd	r26, Z+18	; 0x12
    2f14:	b3 89       	ldd	r27, Z+19	; 0x13
    2f16:	ac 01       	movw	r20, r24
    2f18:	bd 01       	movw	r22, r26
    2f1a:	51 70       	andi	r21, 0x01	; 1
    2f1c:	66 27       	eor	r22, r22
    2f1e:	77 27       	eor	r23, r23
    2f20:	45 2b       	or	r20, r21
    2f22:	46 2b       	or	r20, r22
    2f24:	47 2b       	or	r20, r23
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <f_read+0xac>
    2f28:	a9 c0       	rjmp	.+338    	; 0x307c <f_read+0x1fe>
    2f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2e:	01 85       	ldd	r16, Z+9	; 0x09
    2f30:	12 85       	ldd	r17, Z+10	; 0x0a
    2f32:	01 50       	subi	r16, 0x01	; 1
    2f34:	11 09       	sbc	r17, r1
    2f36:	ac 01       	movw	r20, r24
    2f38:	bd 01       	movw	r22, r26
    2f3a:	03 2e       	mov	r0, r19
    2f3c:	39 e0       	ldi	r19, 0x09	; 9
    2f3e:	76 95       	lsr	r23
    2f40:	67 95       	ror	r22
    2f42:	57 95       	ror	r21
    2f44:	47 95       	ror	r20
    2f46:	3a 95       	dec	r19
    2f48:	d1 f7       	brne	.-12     	; 0x2f3e <f_read+0xc0>
    2f4a:	30 2d       	mov	r19, r0
    2f4c:	04 23       	and	r16, r20
    2f4e:	15 23       	and	r17, r21
    2f50:	01 15       	cp	r16, r1
    2f52:	11 05       	cpc	r17, r1
    2f54:	59 f5       	brne	.+86     	; 0x2fac <f_read+0x12e>
    2f56:	89 2b       	or	r24, r25
    2f58:	8a 2b       	or	r24, r26
    2f5a:	8b 2b       	or	r24, r27
    2f5c:	31 f4       	brne	.+12     	; 0x2f6a <f_read+0xec>
    2f5e:	f7 01       	movw	r30, r14
    2f60:	66 81       	ldd	r22, Z+6	; 0x06
    2f62:	77 81       	ldd	r23, Z+7	; 0x07
    2f64:	80 85       	ldd	r24, Z+8	; 0x08
    2f66:	91 85       	ldd	r25, Z+9	; 0x09
    2f68:	09 c0       	rjmp	.+18     	; 0x2f7c <f_read+0xfe>
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	44 89       	ldd	r20, Z+20	; 0x14
    2f6e:	55 89       	ldd	r21, Z+21	; 0x15
    2f70:	66 89       	ldd	r22, Z+22	; 0x16
    2f72:	77 89       	ldd	r23, Z+23	; 0x17
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_fat>
    2f7c:	62 30       	cpi	r22, 0x02	; 2
    2f7e:	71 05       	cpc	r23, r1
    2f80:	81 05       	cpc	r24, r1
    2f82:	91 05       	cpc	r25, r1
    2f84:	20 f4       	brcc	.+8      	; 0x2f8e <f_read+0x110>
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	f7 01       	movw	r30, r14
    2f8a:	87 87       	std	Z+15, r24	; 0x0f
    2f8c:	c2 c0       	rjmp	.+388    	; 0x3112 <f_read+0x294>
    2f8e:	6f 3f       	cpi	r22, 0xFF	; 255
    2f90:	ff ef       	ldi	r31, 0xFF	; 255
    2f92:	7f 07       	cpc	r23, r31
    2f94:	8f 07       	cpc	r24, r31
    2f96:	9f 07       	cpc	r25, r31
    2f98:	21 f4       	brne	.+8      	; 0x2fa2 <f_read+0x124>
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	f7 01       	movw	r30, r14
    2f9e:	87 87       	std	Z+15, r24	; 0x0f
    2fa0:	b8 c0       	rjmp	.+368    	; 0x3112 <f_read+0x294>
    2fa2:	f7 01       	movw	r30, r14
    2fa4:	64 8b       	std	Z+20, r22	; 0x14
    2fa6:	75 8b       	std	Z+21, r23	; 0x15
    2fa8:	86 8b       	std	Z+22, r24	; 0x16
    2faa:	97 8b       	std	Z+23, r25	; 0x17
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
    2fb4:	f7 01       	movw	r30, r14
    2fb6:	44 89       	ldd	r20, Z+20	; 0x14
    2fb8:	55 89       	ldd	r21, Z+21	; 0x15
    2fba:	66 89       	ldd	r22, Z+22	; 0x16
    2fbc:	77 89       	ldd	r23, Z+23	; 0x17
    2fbe:	0e 94 27 07 	call	0xe4e	; 0xe4e <clst2sect>
    2fc2:	61 15       	cp	r22, r1
    2fc4:	71 05       	cpc	r23, r1
    2fc6:	81 05       	cpc	r24, r1
    2fc8:	91 05       	cpc	r25, r1
    2fca:	21 f4       	brne	.+8      	; 0x2fd4 <f_read+0x156>
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	f7 01       	movw	r30, r14
    2fd0:	87 87       	std	Z+15, r24	; 0x0f
    2fd2:	9f c0       	rjmp	.+318    	; 0x3112 <f_read+0x294>
    2fd4:	1b 01       	movw	r2, r22
    2fd6:	2c 01       	movw	r4, r24
    2fd8:	20 0e       	add	r2, r16
    2fda:	31 1e       	adc	r3, r17
    2fdc:	41 1c       	adc	r4, r1
    2fde:	51 1c       	adc	r5, r1
    2fe0:	65 01       	movw	r12, r10
    2fe2:	cd 2c       	mov	r12, r13
    2fe4:	dd 24       	eor	r13, r13
    2fe6:	c6 94       	lsr	r12
    2fe8:	c1 14       	cp	r12, r1
    2fea:	d1 04       	cpc	r13, r1
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <f_read+0x172>
    2fee:	41 c0       	rjmp	.+130    	; 0x3072 <f_read+0x1f4>
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	81 85       	ldd	r24, Z+9	; 0x09
    2ff6:	92 85       	ldd	r25, Z+10	; 0x0a
    2ff8:	98 01       	movw	r18, r16
    2ffa:	2c 0d       	add	r18, r12
    2ffc:	3d 1d       	adc	r19, r13
    2ffe:	82 17       	cp	r24, r18
    3000:	93 07       	cpc	r25, r19
    3002:	18 f4       	brcc	.+6      	; 0x300a <f_read+0x18c>
    3004:	6c 01       	movw	r12, r24
    3006:	c0 1a       	sub	r12, r16
    3008:	d1 0a       	sbc	r13, r17
    300a:	86 01       	movw	r16, r12
    300c:	a2 01       	movw	r20, r4
    300e:	91 01       	movw	r18, r2
    3010:	b3 01       	movw	r22, r6
    3012:	eb 81       	ldd	r30, Y+3	; 0x03
    3014:	fc 81       	ldd	r31, Y+4	; 0x04
    3016:	81 81       	ldd	r24, Z+1	; 0x01
    3018:	0e 94 ac 06 	call	0xd58	; 0xd58 <disk_read>
    301c:	88 23       	and	r24, r24
    301e:	21 f0       	breq	.+8      	; 0x3028 <f_read+0x1aa>
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	f7 01       	movw	r30, r14
    3024:	87 87       	std	Z+15, r24	; 0x0f
    3026:	75 c0       	rjmp	.+234    	; 0x3112 <f_read+0x294>
    3028:	e9 81       	ldd	r30, Y+1	; 0x01
    302a:	fa 81       	ldd	r31, Y+2	; 0x02
    302c:	83 81       	ldd	r24, Z+3	; 0x03
    302e:	88 23       	and	r24, r24
    3030:	e1 f0       	breq	.+56     	; 0x306a <f_read+0x1ec>
    3032:	87 a5       	ldd	r24, Z+47	; 0x2f
    3034:	90 a9       	ldd	r25, Z+48	; 0x30
    3036:	a1 a9       	ldd	r26, Z+49	; 0x31
    3038:	b2 a9       	ldd	r27, Z+50	; 0x32
    303a:	82 19       	sub	r24, r2
    303c:	93 09       	sbc	r25, r3
    303e:	a4 09       	sbc	r26, r4
    3040:	b5 09       	sbc	r27, r5
    3042:	a6 01       	movw	r20, r12
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	84 17       	cp	r24, r20
    304a:	95 07       	cpc	r25, r21
    304c:	a6 07       	cpc	r26, r22
    304e:	b7 07       	cpc	r27, r23
    3050:	60 f4       	brcc	.+24     	; 0x306a <f_read+0x1ec>
    3052:	bf 01       	movw	r22, r30
    3054:	6d 5c       	subi	r22, 0xCD	; 205
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	98 2f       	mov	r25, r24
    305a:	88 27       	eor	r24, r24
    305c:	99 0f       	add	r25, r25
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	52 e0       	ldi	r21, 0x02	; 2
    3062:	86 0d       	add	r24, r6
    3064:	97 1d       	adc	r25, r7
    3066:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
    306a:	dc 2c       	mov	r13, r12
    306c:	cc 24       	eor	r12, r12
    306e:	dd 0c       	add	r13, r13
    3070:	2f c0       	rjmp	.+94     	; 0x30d0 <f_read+0x252>
    3072:	f7 01       	movw	r30, r14
    3074:	20 8e       	std	Z+24, r2	; 0x18
    3076:	31 8e       	std	Z+25, r3	; 0x19
    3078:	42 8e       	std	Z+26, r4	; 0x1a
    307a:	53 8e       	std	Z+27, r5	; 0x1b
    307c:	f7 01       	movw	r30, r14
    307e:	80 89       	ldd	r24, Z+16	; 0x10
    3080:	91 89       	ldd	r25, Z+17	; 0x11
    3082:	91 70       	andi	r25, 0x01	; 1
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	32 e0       	ldi	r19, 0x02	; 2
    3088:	69 01       	movw	r12, r18
    308a:	c8 1a       	sub	r12, r24
    308c:	d9 0a       	sbc	r13, r25
    308e:	ac 14       	cp	r10, r12
    3090:	bd 04       	cpc	r11, r13
    3092:	08 f4       	brcc	.+2      	; 0x3096 <f_read+0x218>
    3094:	65 01       	movw	r12, r10
    3096:	f7 01       	movw	r30, r14
    3098:	40 8d       	ldd	r20, Z+24	; 0x18
    309a:	51 8d       	ldd	r21, Z+25	; 0x19
    309c:	62 8d       	ldd	r22, Z+26	; 0x1a
    309e:	73 8d       	ldd	r23, Z+27	; 0x1b
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    30a8:	88 23       	and	r24, r24
    30aa:	21 f0       	breq	.+8      	; 0x30b4 <f_read+0x236>
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	f7 01       	movw	r30, r14
    30b0:	87 87       	std	Z+15, r24	; 0x0f
    30b2:	2f c0       	rjmp	.+94     	; 0x3112 <f_read+0x294>
    30b4:	69 81       	ldd	r22, Y+1	; 0x01
    30b6:	7a 81       	ldd	r23, Y+2	; 0x02
    30b8:	6d 5c       	subi	r22, 0xCD	; 205
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	f7 01       	movw	r30, r14
    30be:	80 89       	ldd	r24, Z+16	; 0x10
    30c0:	91 89       	ldd	r25, Z+17	; 0x11
    30c2:	91 70       	andi	r25, 0x01	; 1
    30c4:	68 0f       	add	r22, r24
    30c6:	79 1f       	adc	r23, r25
    30c8:	a6 01       	movw	r20, r12
    30ca:	c3 01       	movw	r24, r6
    30cc:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
    30d0:	ac 18       	sub	r10, r12
    30d2:	bd 08       	sbc	r11, r13
    30d4:	f4 01       	movw	r30, r8
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	8c 0d       	add	r24, r12
    30dc:	9d 1d       	adc	r25, r13
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	6c 0c       	add	r6, r12
    30e4:	7d 1c       	adc	r7, r13
    30e6:	f7 01       	movw	r30, r14
    30e8:	80 89       	ldd	r24, Z+16	; 0x10
    30ea:	91 89       	ldd	r25, Z+17	; 0x11
    30ec:	a2 89       	ldd	r26, Z+18	; 0x12
    30ee:	b3 89       	ldd	r27, Z+19	; 0x13
    30f0:	8c 0d       	add	r24, r12
    30f2:	9d 1d       	adc	r25, r13
    30f4:	a1 1d       	adc	r26, r1
    30f6:	b1 1d       	adc	r27, r1
    30f8:	80 8b       	std	Z+16, r24	; 0x10
    30fa:	91 8b       	std	Z+17, r25	; 0x11
    30fc:	a2 8b       	std	Z+18, r26	; 0x12
    30fe:	b3 8b       	std	Z+19, r27	; 0x13
    3100:	a1 14       	cp	r10, r1
    3102:	b1 04       	cpc	r11, r1
    3104:	09 f0       	breq	.+2      	; 0x3108 <f_read+0x28a>
    3106:	02 cf       	rjmp	.-508    	; 0x2f0c <f_read+0x8e>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <f_read+0x294>
    310c:	87 e0       	ldi	r24, 0x07	; 7
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <f_read+0x294>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	26 96       	adiw	r28, 0x06	; 6
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	ef 90       	pop	r14
    312a:	df 90       	pop	r13
    312c:	cf 90       	pop	r12
    312e:	bf 90       	pop	r11
    3130:	af 90       	pop	r10
    3132:	9f 90       	pop	r9
    3134:	8f 90       	pop	r8
    3136:	7f 90       	pop	r7
    3138:	6f 90       	pop	r6
    313a:	5f 90       	pop	r5
    313c:	4f 90       	pop	r4
    313e:	3f 90       	pop	r3
    3140:	2f 90       	pop	r2
    3142:	08 95       	ret

00003144 <f_write>:
    3144:	2f 92       	push	r2
    3146:	3f 92       	push	r3
    3148:	4f 92       	push	r4
    314a:	5f 92       	push	r5
    314c:	6f 92       	push	r6
    314e:	7f 92       	push	r7
    3150:	8f 92       	push	r8
    3152:	9f 92       	push	r9
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	00 d0       	rcall	.+0      	; 0x316a <f_write+0x26>
    316a:	00 d0       	rcall	.+0      	; 0x316c <f_write+0x28>
    316c:	00 d0       	rcall	.+0      	; 0x316e <f_write+0x2a>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	7c 01       	movw	r14, r24
    3174:	3b 01       	movw	r6, r22
    3176:	5a 01       	movw	r10, r20
    3178:	49 01       	movw	r8, r18
    317a:	f9 01       	movw	r30, r18
    317c:	11 82       	std	Z+1, r1	; 0x01
    317e:	10 82       	st	Z, r1
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	fe 82       	std	Y+6, r15	; 0x06
    3184:	be 01       	movw	r22, r28
    3186:	6f 5f       	subi	r22, 0xFF	; 255
    3188:	7f 4f       	sbci	r23, 0xFF	; 255
    318a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <validate>
    318e:	81 11       	cpse	r24, r1
    3190:	8d c1       	rjmp	.+794    	; 0x34ac <f_write+0x368>
    3192:	f7 01       	movw	r30, r14
    3194:	87 85       	ldd	r24, Z+15	; 0x0f
    3196:	81 11       	cpse	r24, r1
    3198:	89 c1       	rjmp	.+786    	; 0x34ac <f_write+0x368>
    319a:	86 85       	ldd	r24, Z+14	; 0x0e
    319c:	81 ff       	sbrs	r24, 1
    319e:	85 c1       	rjmp	.+778    	; 0x34aa <f_write+0x366>
    31a0:	80 89       	ldd	r24, Z+16	; 0x10
    31a2:	91 89       	ldd	r25, Z+17	; 0x11
    31a4:	a2 89       	ldd	r26, Z+18	; 0x12
    31a6:	b3 89       	ldd	r27, Z+19	; 0x13
    31a8:	ac 01       	movw	r20, r24
    31aa:	bd 01       	movw	r22, r26
    31ac:	4a 0d       	add	r20, r10
    31ae:	5b 1d       	adc	r21, r11
    31b0:	61 1d       	adc	r22, r1
    31b2:	71 1d       	adc	r23, r1
    31b4:	48 17       	cp	r20, r24
    31b6:	59 07       	cpc	r21, r25
    31b8:	6a 07       	cpc	r22, r26
    31ba:	7b 07       	cpc	r23, r27
    31bc:	18 f4       	brcc	.+6      	; 0x31c4 <f_write+0x80>
    31be:	5c 01       	movw	r10, r24
    31c0:	a0 94       	com	r10
    31c2:	b0 94       	com	r11
    31c4:	a1 14       	cp	r10, r1
    31c6:	b1 04       	cpc	r11, r1
    31c8:	09 f4       	brne	.+2      	; 0x31cc <f_write+0x88>
    31ca:	69 c1       	rjmp	.+722    	; 0x349e <f_write+0x35a>
    31cc:	f7 01       	movw	r30, r14
    31ce:	80 89       	ldd	r24, Z+16	; 0x10
    31d0:	91 89       	ldd	r25, Z+17	; 0x11
    31d2:	a2 89       	ldd	r26, Z+18	; 0x12
    31d4:	b3 89       	ldd	r27, Z+19	; 0x13
    31d6:	ac 01       	movw	r20, r24
    31d8:	bd 01       	movw	r22, r26
    31da:	51 70       	andi	r21, 0x01	; 1
    31dc:	66 27       	eor	r22, r22
    31de:	77 27       	eor	r23, r23
    31e0:	45 2b       	or	r20, r21
    31e2:	46 2b       	or	r20, r22
    31e4:	47 2b       	or	r20, r23
    31e6:	09 f0       	breq	.+2      	; 0x31ea <f_write+0xa6>
    31e8:	00 c1       	rjmp	.+512    	; 0x33ea <f_write+0x2a6>
    31ea:	e9 81       	ldd	r30, Y+1	; 0x01
    31ec:	fa 81       	ldd	r31, Y+2	; 0x02
    31ee:	01 85       	ldd	r16, Z+9	; 0x09
    31f0:	12 85       	ldd	r17, Z+10	; 0x0a
    31f2:	01 50       	subi	r16, 0x01	; 1
    31f4:	11 09       	sbc	r17, r1
    31f6:	ac 01       	movw	r20, r24
    31f8:	bd 01       	movw	r22, r26
    31fa:	03 2e       	mov	r0, r19
    31fc:	39 e0       	ldi	r19, 0x09	; 9
    31fe:	76 95       	lsr	r23
    3200:	67 95       	ror	r22
    3202:	57 95       	ror	r21
    3204:	47 95       	ror	r20
    3206:	3a 95       	dec	r19
    3208:	d1 f7       	brne	.-12     	; 0x31fe <f_write+0xba>
    320a:	30 2d       	mov	r19, r0
    320c:	04 23       	and	r16, r20
    320e:	15 23       	and	r17, r21
    3210:	01 15       	cp	r16, r1
    3212:	11 05       	cpc	r17, r1
    3214:	09 f0       	breq	.+2      	; 0x3218 <f_write+0xd4>
    3216:	49 c0       	rjmp	.+146    	; 0x32aa <f_write+0x166>
    3218:	89 2b       	or	r24, r25
    321a:	8a 2b       	or	r24, r26
    321c:	8b 2b       	or	r24, r27
    321e:	91 f4       	brne	.+36     	; 0x3244 <f_write+0x100>
    3220:	f7 01       	movw	r30, r14
    3222:	66 81       	ldd	r22, Z+6	; 0x06
    3224:	77 81       	ldd	r23, Z+7	; 0x07
    3226:	80 85       	ldd	r24, Z+8	; 0x08
    3228:	91 85       	ldd	r25, Z+9	; 0x09
    322a:	61 15       	cp	r22, r1
    322c:	71 05       	cpc	r23, r1
    322e:	81 05       	cpc	r24, r1
    3230:	91 05       	cpc	r25, r1
    3232:	b9 f4       	brne	.+46     	; 0x3262 <f_write+0x11e>
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	50 e0       	ldi	r21, 0x00	; 0
    3238:	ba 01       	movw	r22, r20
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <create_chain>
    3242:	09 c0       	rjmp	.+18     	; 0x3256 <f_write+0x112>
    3244:	f7 01       	movw	r30, r14
    3246:	44 89       	ldd	r20, Z+20	; 0x14
    3248:	55 89       	ldd	r21, Z+21	; 0x15
    324a:	66 89       	ldd	r22, Z+22	; 0x16
    324c:	77 89       	ldd	r23, Z+23	; 0x17
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <create_chain>
    3256:	61 15       	cp	r22, r1
    3258:	71 05       	cpc	r23, r1
    325a:	81 05       	cpc	r24, r1
    325c:	91 05       	cpc	r25, r1
    325e:	09 f4       	brne	.+2      	; 0x3262 <f_write+0x11e>
    3260:	1e c1       	rjmp	.+572    	; 0x349e <f_write+0x35a>
    3262:	61 30       	cpi	r22, 0x01	; 1
    3264:	71 05       	cpc	r23, r1
    3266:	81 05       	cpc	r24, r1
    3268:	91 05       	cpc	r25, r1
    326a:	21 f4       	brne	.+8      	; 0x3274 <f_write+0x130>
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	f7 01       	movw	r30, r14
    3270:	87 87       	std	Z+15, r24	; 0x0f
    3272:	1c c1       	rjmp	.+568    	; 0x34ac <f_write+0x368>
    3274:	6f 3f       	cpi	r22, 0xFF	; 255
    3276:	ff ef       	ldi	r31, 0xFF	; 255
    3278:	7f 07       	cpc	r23, r31
    327a:	8f 07       	cpc	r24, r31
    327c:	9f 07       	cpc	r25, r31
    327e:	21 f4       	brne	.+8      	; 0x3288 <f_write+0x144>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	f7 01       	movw	r30, r14
    3284:	87 87       	std	Z+15, r24	; 0x0f
    3286:	12 c1       	rjmp	.+548    	; 0x34ac <f_write+0x368>
    3288:	f7 01       	movw	r30, r14
    328a:	64 8b       	std	Z+20, r22	; 0x14
    328c:	75 8b       	std	Z+21, r23	; 0x15
    328e:	86 8b       	std	Z+22, r24	; 0x16
    3290:	97 8b       	std	Z+23, r25	; 0x17
    3292:	26 81       	ldd	r18, Z+6	; 0x06
    3294:	37 81       	ldd	r19, Z+7	; 0x07
    3296:	40 85       	ldd	r20, Z+8	; 0x08
    3298:	51 85       	ldd	r21, Z+9	; 0x09
    329a:	23 2b       	or	r18, r19
    329c:	24 2b       	or	r18, r20
    329e:	25 2b       	or	r18, r21
    32a0:	21 f4       	brne	.+8      	; 0x32aa <f_write+0x166>
    32a2:	66 83       	std	Z+6, r22	; 0x06
    32a4:	77 83       	std	Z+7, r23	; 0x07
    32a6:	80 87       	std	Z+8, r24	; 0x08
    32a8:	91 87       	std	Z+9, r25	; 0x09
    32aa:	29 81       	ldd	r18, Y+1	; 0x01
    32ac:	3a 81       	ldd	r19, Y+2	; 0x02
    32ae:	f9 01       	movw	r30, r18
    32b0:	47 a5       	ldd	r20, Z+47	; 0x2f
    32b2:	50 a9       	ldd	r21, Z+48	; 0x30
    32b4:	61 a9       	ldd	r22, Z+49	; 0x31
    32b6:	72 a9       	ldd	r23, Z+50	; 0x32
    32b8:	f7 01       	movw	r30, r14
    32ba:	80 8d       	ldd	r24, Z+24	; 0x18
    32bc:	91 8d       	ldd	r25, Z+25	; 0x19
    32be:	a2 8d       	ldd	r26, Z+26	; 0x1a
    32c0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    32c2:	48 17       	cp	r20, r24
    32c4:	59 07       	cpc	r21, r25
    32c6:	6a 07       	cpc	r22, r26
    32c8:	7b 07       	cpc	r23, r27
    32ca:	49 f4       	brne	.+18     	; 0x32de <f_write+0x19a>
    32cc:	c9 01       	movw	r24, r18
    32ce:	0e 94 0d 08 	call	0x101a	; 0x101a <sync_window>
    32d2:	88 23       	and	r24, r24
    32d4:	21 f0       	breq	.+8      	; 0x32de <f_write+0x19a>
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	f7 01       	movw	r30, r14
    32da:	87 87       	std	Z+15, r24	; 0x0f
    32dc:	e7 c0       	rjmp	.+462    	; 0x34ac <f_write+0x368>
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	8b 83       	std	Y+3, r24	; 0x03
    32e6:	f7 01       	movw	r30, r14
    32e8:	44 89       	ldd	r20, Z+20	; 0x14
    32ea:	55 89       	ldd	r21, Z+21	; 0x15
    32ec:	66 89       	ldd	r22, Z+22	; 0x16
    32ee:	77 89       	ldd	r23, Z+23	; 0x17
    32f0:	0e 94 27 07 	call	0xe4e	; 0xe4e <clst2sect>
    32f4:	61 15       	cp	r22, r1
    32f6:	71 05       	cpc	r23, r1
    32f8:	81 05       	cpc	r24, r1
    32fa:	91 05       	cpc	r25, r1
    32fc:	21 f4       	brne	.+8      	; 0x3306 <f_write+0x1c2>
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	f7 01       	movw	r30, r14
    3302:	87 87       	std	Z+15, r24	; 0x0f
    3304:	d3 c0       	rjmp	.+422    	; 0x34ac <f_write+0x368>
    3306:	1b 01       	movw	r2, r22
    3308:	2c 01       	movw	r4, r24
    330a:	20 0e       	add	r2, r16
    330c:	31 1e       	adc	r3, r17
    330e:	41 1c       	adc	r4, r1
    3310:	51 1c       	adc	r5, r1
    3312:	65 01       	movw	r12, r10
    3314:	cd 2c       	mov	r12, r13
    3316:	dd 24       	eor	r13, r13
    3318:	c6 94       	lsr	r12
    331a:	c1 14       	cp	r12, r1
    331c:	d1 04       	cpc	r13, r1
    331e:	09 f4       	brne	.+2      	; 0x3322 <f_write+0x1de>
    3320:	41 c0       	rjmp	.+130    	; 0x33a4 <f_write+0x260>
    3322:	eb 81       	ldd	r30, Y+3	; 0x03
    3324:	fc 81       	ldd	r31, Y+4	; 0x04
    3326:	81 85       	ldd	r24, Z+9	; 0x09
    3328:	92 85       	ldd	r25, Z+10	; 0x0a
    332a:	98 01       	movw	r18, r16
    332c:	2c 0d       	add	r18, r12
    332e:	3d 1d       	adc	r19, r13
    3330:	82 17       	cp	r24, r18
    3332:	93 07       	cpc	r25, r19
    3334:	18 f4       	brcc	.+6      	; 0x333c <f_write+0x1f8>
    3336:	6c 01       	movw	r12, r24
    3338:	c0 1a       	sub	r12, r16
    333a:	d1 0a       	sbc	r13, r17
    333c:	86 01       	movw	r16, r12
    333e:	a2 01       	movw	r20, r4
    3340:	91 01       	movw	r18, r2
    3342:	b3 01       	movw	r22, r6
    3344:	eb 81       	ldd	r30, Y+3	; 0x03
    3346:	fc 81       	ldd	r31, Y+4	; 0x04
    3348:	81 81       	ldd	r24, Z+1	; 0x01
    334a:	0e 94 bc 06 	call	0xd78	; 0xd78 <disk_write>
    334e:	88 23       	and	r24, r24
    3350:	21 f0       	breq	.+8      	; 0x335a <f_write+0x216>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	f7 01       	movw	r30, r14
    3356:	87 87       	std	Z+15, r24	; 0x0f
    3358:	a9 c0       	rjmp	.+338    	; 0x34ac <f_write+0x368>
    335a:	e9 81       	ldd	r30, Y+1	; 0x01
    335c:	fa 81       	ldd	r31, Y+2	; 0x02
    335e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3360:	50 a9       	ldd	r21, Z+48	; 0x30
    3362:	61 a9       	ldd	r22, Z+49	; 0x31
    3364:	72 a9       	ldd	r23, Z+50	; 0x32
    3366:	42 19       	sub	r20, r2
    3368:	53 09       	sbc	r21, r3
    336a:	64 09       	sbc	r22, r4
    336c:	75 09       	sbc	r23, r5
    336e:	c6 01       	movw	r24, r12
    3370:	a0 e0       	ldi	r26, 0x00	; 0
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	48 17       	cp	r20, r24
    3376:	59 07       	cpc	r21, r25
    3378:	6a 07       	cpc	r22, r26
    337a:	7b 07       	cpc	r23, r27
    337c:	78 f4       	brcc	.+30     	; 0x339c <f_write+0x258>
    337e:	54 2f       	mov	r21, r20
    3380:	44 27       	eor	r20, r20
    3382:	55 0f       	add	r21, r21
    3384:	b3 01       	movw	r22, r6
    3386:	64 0f       	add	r22, r20
    3388:	75 1f       	adc	r23, r21
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	52 e0       	ldi	r21, 0x02	; 2
    338e:	cf 01       	movw	r24, r30
    3390:	c3 96       	adiw	r24, 0x33	; 51
    3392:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
    3396:	e9 81       	ldd	r30, Y+1	; 0x01
    3398:	fa 81       	ldd	r31, Y+2	; 0x02
    339a:	13 82       	std	Z+3, r1	; 0x03
    339c:	dc 2c       	mov	r13, r12
    339e:	cc 24       	eor	r12, r12
    33a0:	dd 0c       	add	r13, r13
    33a2:	51 c0       	rjmp	.+162    	; 0x3446 <f_write+0x302>
    33a4:	f7 01       	movw	r30, r14
    33a6:	40 89       	ldd	r20, Z+16	; 0x10
    33a8:	51 89       	ldd	r21, Z+17	; 0x11
    33aa:	62 89       	ldd	r22, Z+18	; 0x12
    33ac:	73 89       	ldd	r23, Z+19	; 0x13
    33ae:	82 85       	ldd	r24, Z+10	; 0x0a
    33b0:	93 85       	ldd	r25, Z+11	; 0x0b
    33b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    33b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    33b6:	48 17       	cp	r20, r24
    33b8:	59 07       	cpc	r21, r25
    33ba:	6a 07       	cpc	r22, r26
    33bc:	7b 07       	cpc	r23, r27
    33be:	80 f0       	brcs	.+32     	; 0x33e0 <f_write+0x29c>
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	0e 94 0d 08 	call	0x101a	; 0x101a <sync_window>
    33c8:	88 23       	and	r24, r24
    33ca:	21 f0       	breq	.+8      	; 0x33d4 <f_write+0x290>
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	f7 01       	movw	r30, r14
    33d0:	87 87       	std	Z+15, r24	; 0x0f
    33d2:	6c c0       	rjmp	.+216    	; 0x34ac <f_write+0x368>
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	fa 81       	ldd	r31, Y+2	; 0x02
    33d8:	27 a6       	std	Z+47, r2	; 0x2f
    33da:	30 aa       	std	Z+48, r3	; 0x30
    33dc:	41 aa       	std	Z+49, r4	; 0x31
    33de:	52 aa       	std	Z+50, r5	; 0x32
    33e0:	f7 01       	movw	r30, r14
    33e2:	20 8e       	std	Z+24, r2	; 0x18
    33e4:	31 8e       	std	Z+25, r3	; 0x19
    33e6:	42 8e       	std	Z+26, r4	; 0x1a
    33e8:	53 8e       	std	Z+27, r5	; 0x1b
    33ea:	f7 01       	movw	r30, r14
    33ec:	80 89       	ldd	r24, Z+16	; 0x10
    33ee:	91 89       	ldd	r25, Z+17	; 0x11
    33f0:	91 70       	andi	r25, 0x01	; 1
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	32 e0       	ldi	r19, 0x02	; 2
    33f6:	69 01       	movw	r12, r18
    33f8:	c8 1a       	sub	r12, r24
    33fa:	d9 0a       	sbc	r13, r25
    33fc:	ac 14       	cp	r10, r12
    33fe:	bd 04       	cpc	r11, r13
    3400:	08 f4       	brcc	.+2      	; 0x3404 <f_write+0x2c0>
    3402:	65 01       	movw	r12, r10
    3404:	f7 01       	movw	r30, r14
    3406:	40 8d       	ldd	r20, Z+24	; 0x18
    3408:	51 8d       	ldd	r21, Z+25	; 0x19
    340a:	62 8d       	ldd	r22, Z+26	; 0x1a
    340c:	73 8d       	ldd	r23, Z+27	; 0x1b
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    3416:	88 23       	and	r24, r24
    3418:	21 f0       	breq	.+8      	; 0x3422 <f_write+0x2de>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	f7 01       	movw	r30, r14
    341e:	87 87       	std	Z+15, r24	; 0x0f
    3420:	45 c0       	rjmp	.+138    	; 0x34ac <f_write+0x368>
    3422:	29 81       	ldd	r18, Y+1	; 0x01
    3424:	3a 81       	ldd	r19, Y+2	; 0x02
    3426:	2d 5c       	subi	r18, 0xCD	; 205
    3428:	3f 4f       	sbci	r19, 0xFF	; 255
    342a:	f7 01       	movw	r30, r14
    342c:	80 89       	ldd	r24, Z+16	; 0x10
    342e:	91 89       	ldd	r25, Z+17	; 0x11
    3430:	91 70       	andi	r25, 0x01	; 1
    3432:	a6 01       	movw	r20, r12
    3434:	b3 01       	movw	r22, r6
    3436:	82 0f       	add	r24, r18
    3438:	93 1f       	adc	r25, r19
    343a:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
    343e:	e9 81       	ldd	r30, Y+1	; 0x01
    3440:	fa 81       	ldd	r31, Y+2	; 0x02
    3442:	21 e0       	ldi	r18, 0x01	; 1
    3444:	23 83       	std	Z+3, r18	; 0x03
    3446:	ac 18       	sub	r10, r12
    3448:	bd 08       	sbc	r11, r13
    344a:	f4 01       	movw	r30, r8
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	8c 0d       	add	r24, r12
    3452:	9d 1d       	adc	r25, r13
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
    3458:	6c 0c       	add	r6, r12
    345a:	7d 1c       	adc	r7, r13
    345c:	f7 01       	movw	r30, r14
    345e:	80 89       	ldd	r24, Z+16	; 0x10
    3460:	91 89       	ldd	r25, Z+17	; 0x11
    3462:	a2 89       	ldd	r26, Z+18	; 0x12
    3464:	b3 89       	ldd	r27, Z+19	; 0x13
    3466:	8c 0d       	add	r24, r12
    3468:	9d 1d       	adc	r25, r13
    346a:	a1 1d       	adc	r26, r1
    346c:	b1 1d       	adc	r27, r1
    346e:	80 8b       	std	Z+16, r24	; 0x10
    3470:	91 8b       	std	Z+17, r25	; 0x11
    3472:	a2 8b       	std	Z+18, r26	; 0x12
    3474:	b3 8b       	std	Z+19, r27	; 0x13
    3476:	42 85       	ldd	r20, Z+10	; 0x0a
    3478:	53 85       	ldd	r21, Z+11	; 0x0b
    347a:	64 85       	ldd	r22, Z+12	; 0x0c
    347c:	75 85       	ldd	r23, Z+13	; 0x0d
    347e:	48 17       	cp	r20, r24
    3480:	59 07       	cpc	r21, r25
    3482:	6a 07       	cpc	r22, r26
    3484:	7b 07       	cpc	r23, r27
    3486:	10 f4       	brcc	.+4      	; 0x348c <f_write+0x348>
    3488:	ac 01       	movw	r20, r24
    348a:	bd 01       	movw	r22, r26
    348c:	f7 01       	movw	r30, r14
    348e:	42 87       	std	Z+10, r20	; 0x0a
    3490:	53 87       	std	Z+11, r21	; 0x0b
    3492:	64 87       	std	Z+12, r22	; 0x0c
    3494:	75 87       	std	Z+13, r23	; 0x0d
    3496:	a1 14       	cp	r10, r1
    3498:	b1 04       	cpc	r11, r1
    349a:	09 f0       	breq	.+2      	; 0x349e <f_write+0x35a>
    349c:	97 ce       	rjmp	.-722    	; 0x31cc <f_write+0x88>
    349e:	f7 01       	movw	r30, r14
    34a0:	86 85       	ldd	r24, Z+14	; 0x0e
    34a2:	80 64       	ori	r24, 0x40	; 64
    34a4:	86 87       	std	Z+14, r24	; 0x0e
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	01 c0       	rjmp	.+2      	; 0x34ac <f_write+0x368>
    34aa:	87 e0       	ldi	r24, 0x07	; 7
    34ac:	26 96       	adiw	r28, 0x06	; 6
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	ff 90       	pop	r15
    34c2:	ef 90       	pop	r14
    34c4:	df 90       	pop	r13
    34c6:	cf 90       	pop	r12
    34c8:	bf 90       	pop	r11
    34ca:	af 90       	pop	r10
    34cc:	9f 90       	pop	r9
    34ce:	8f 90       	pop	r8
    34d0:	7f 90       	pop	r7
    34d2:	6f 90       	pop	r6
    34d4:	5f 90       	pop	r5
    34d6:	4f 90       	pop	r4
    34d8:	3f 90       	pop	r3
    34da:	2f 90       	pop	r2
    34dc:	08 95       	ret

000034de <f_sync>:
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <f_sync+0xe>
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	8c 01       	movw	r16, r24
    34f2:	be 01       	movw	r22, r28
    34f4:	6f 5f       	subi	r22, 0xFF	; 255
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <validate>
    34fc:	81 11       	cpse	r24, r1
    34fe:	3c c0       	rjmp	.+120    	; 0x3578 <f_sync+0x9a>
    3500:	f8 01       	movw	r30, r16
    3502:	96 85       	ldd	r25, Z+14	; 0x0e
    3504:	96 ff       	sbrs	r25, 6
    3506:	38 c0       	rjmp	.+112    	; 0x3578 <f_sync+0x9a>
    3508:	44 8d       	ldd	r20, Z+28	; 0x1c
    350a:	55 8d       	ldd	r21, Z+29	; 0x1d
    350c:	66 8d       	ldd	r22, Z+30	; 0x1e
    350e:	77 8d       	ldd	r23, Z+31	; 0x1f
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
    3514:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_window>
    3518:	81 11       	cpse	r24, r1
    351a:	2e c0       	rjmp	.+92     	; 0x3578 <f_sync+0x9a>
    351c:	f8 01       	movw	r30, r16
    351e:	e0 a0       	ldd	r14, Z+32	; 0x20
    3520:	f1 a0       	ldd	r15, Z+33	; 0x21
    3522:	f7 01       	movw	r30, r14
    3524:	83 85       	ldd	r24, Z+11	; 0x0b
    3526:	80 62       	ori	r24, 0x20	; 32
    3528:	83 87       	std	Z+11, r24	; 0x0b
    352a:	f8 01       	movw	r30, r16
    352c:	26 81       	ldd	r18, Z+6	; 0x06
    352e:	37 81       	ldd	r19, Z+7	; 0x07
    3530:	40 85       	ldd	r20, Z+8	; 0x08
    3532:	51 85       	ldd	r21, Z+9	; 0x09
    3534:	b7 01       	movw	r22, r14
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	0e 94 8d 0a 	call	0x151a	; 0x151a <st_clust>
    353e:	f8 01       	movw	r30, r16
    3540:	32 85       	ldd	r19, Z+10	; 0x0a
    3542:	23 85       	ldd	r18, Z+11	; 0x0b
    3544:	94 85       	ldd	r25, Z+12	; 0x0c
    3546:	85 85       	ldd	r24, Z+13	; 0x0d
    3548:	f7 01       	movw	r30, r14
    354a:	34 8f       	std	Z+28, r19	; 0x1c
    354c:	25 8f       	std	Z+29, r18	; 0x1d
    354e:	96 8f       	std	Z+30, r25	; 0x1e
    3550:	87 8f       	std	Z+31, r24	; 0x1f
    3552:	16 8a       	std	Z+22, r1	; 0x16
    3554:	17 8a       	std	Z+23, r1	; 0x17
    3556:	81 e2       	ldi	r24, 0x21	; 33
    3558:	80 8f       	std	Z+24, r24	; 0x18
    355a:	88 e4       	ldi	r24, 0x48	; 72
    355c:	81 8f       	std	Z+25, r24	; 0x19
    355e:	12 8a       	std	Z+18, r1	; 0x12
    3560:	13 8a       	std	Z+19, r1	; 0x13
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	9a 81       	ldd	r25, Y+2	; 0x02
    3566:	21 e0       	ldi	r18, 0x01	; 1
    3568:	fc 01       	movw	r30, r24
    356a:	23 83       	std	Z+3, r18	; 0x03
    356c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <sync_fs>
    3570:	f8 01       	movw	r30, r16
    3572:	96 85       	ldd	r25, Z+14	; 0x0e
    3574:	9f 7b       	andi	r25, 0xBF	; 191
    3576:	96 87       	std	Z+14, r25	; 0x0e
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	08 95       	ret

0000358a <f_close>:
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	00 d0       	rcall	.+0      	; 0x3594 <f_close+0xa>
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	8c 01       	movw	r16, r24
    359a:	a1 df       	rcall	.-190    	; 0x34de <f_sync>
    359c:	81 11       	cpse	r24, r1
    359e:	0b c0       	rjmp	.+22     	; 0x35b6 <f_close+0x2c>
    35a0:	be 01       	movw	r22, r28
    35a2:	6f 5f       	subi	r22, 0xFF	; 255
    35a4:	7f 4f       	sbci	r23, 0xFF	; 255
    35a6:	c8 01       	movw	r24, r16
    35a8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <validate>
    35ac:	81 11       	cpse	r24, r1
    35ae:	03 c0       	rjmp	.+6      	; 0x35b6 <f_close+0x2c>
    35b0:	f8 01       	movw	r30, r16
    35b2:	11 82       	std	Z+1, r1	; 0x01
    35b4:	10 82       	st	Z, r1
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	08 95       	ret

000035c4 <f_chdir>:
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	ac 97       	sbiw	r28, 0x2c	; 44
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	9c a7       	std	Y+44, r25	; 0x2c
    35e0:	8b a7       	std	Y+43, r24	; 0x2b
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	be 01       	movw	r22, r28
    35e6:	67 5d       	subi	r22, 0xD7	; 215
    35e8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ea:	ce 01       	movw	r24, r28
    35ec:	8b 96       	adiw	r24, 0x2b	; 43
    35ee:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <find_volume>
    35f2:	18 2f       	mov	r17, r24
    35f4:	81 11       	cpse	r24, r1
    35f6:	2e c0       	rjmp	.+92     	; 0x3654 <f_chdir+0x90>
    35f8:	89 a5       	ldd	r24, Y+41	; 0x29
    35fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    35fc:	9a 83       	std	Y+2, r25	; 0x02
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	6b a5       	ldd	r22, Y+43	; 0x2b
    3602:	7c a5       	ldd	r23, Y+44	; 0x2c
    3604:	ce 01       	movw	r24, r28
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	63 d8       	rcall	.-3898   	; 0x26d0 <follow_path>
    360a:	18 2f       	mov	r17, r24
    360c:	81 11       	cpse	r24, r1
    360e:	1d c0       	rjmp	.+58     	; 0x364a <f_chdir+0x86>
    3610:	88 a5       	ldd	r24, Y+40	; 0x28
    3612:	88 23       	and	r24, r24
    3614:	5c f4       	brge	.+22     	; 0x362c <f_chdir+0x68>
    3616:	e9 a5       	ldd	r30, Y+41	; 0x29
    3618:	fa a5       	ldd	r31, Y+42	; 0x2a
    361a:	8f 81       	ldd	r24, Y+7	; 0x07
    361c:	98 85       	ldd	r25, Y+8	; 0x08
    361e:	a9 85       	ldd	r26, Y+9	; 0x09
    3620:	ba 85       	ldd	r27, Y+10	; 0x0a
    3622:	83 8b       	std	Z+19, r24	; 0x13
    3624:	94 8b       	std	Z+20, r25	; 0x14
    3626:	a5 8b       	std	Z+21, r26	; 0x15
    3628:	b6 8b       	std	Z+22, r27	; 0x16
    362a:	14 c0       	rjmp	.+40     	; 0x3654 <f_chdir+0x90>
    362c:	8d 81       	ldd	r24, Y+5	; 0x05
    362e:	84 ff       	sbrs	r24, 4
    3630:	10 c0       	rjmp	.+32     	; 0x3652 <f_chdir+0x8e>
    3632:	e9 a4       	ldd	r14, Y+41	; 0x29
    3634:	fa a4       	ldd	r15, Y+42	; 0x2a
    3636:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3638:	7c 8d       	ldd	r23, Y+28	; 0x1c
    363a:	c7 01       	movw	r24, r14
    363c:	27 d8       	rcall	.-4018   	; 0x268c <ld_clust>
    363e:	f7 01       	movw	r30, r14
    3640:	63 8b       	std	Z+19, r22	; 0x13
    3642:	74 8b       	std	Z+20, r23	; 0x14
    3644:	85 8b       	std	Z+21, r24	; 0x15
    3646:	96 8b       	std	Z+22, r25	; 0x16
    3648:	05 c0       	rjmp	.+10     	; 0x3654 <f_chdir+0x90>
    364a:	84 30       	cpi	r24, 0x04	; 4
    364c:	19 f4       	brne	.+6      	; 0x3654 <f_chdir+0x90>
    364e:	15 e0       	ldi	r17, 0x05	; 5
    3650:	01 c0       	rjmp	.+2      	; 0x3654 <f_chdir+0x90>
    3652:	15 e0       	ldi	r17, 0x05	; 5
    3654:	81 2f       	mov	r24, r17
    3656:	ac 96       	adiw	r28, 0x2c	; 44
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	08 95       	ret

0000366e <f_lseek>:
    366e:	2f 92       	push	r2
    3670:	3f 92       	push	r3
    3672:	4f 92       	push	r4
    3674:	5f 92       	push	r5
    3676:	6f 92       	push	r6
    3678:	7f 92       	push	r7
    367a:	8f 92       	push	r8
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	00 d0       	rcall	.+0      	; 0x3694 <f_lseek+0x26>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <f_lseek+0x28>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <f_lseek+0x2a>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	8c 01       	movw	r16, r24
    369e:	6a 01       	movw	r12, r20
    36a0:	7b 01       	movw	r14, r22
    36a2:	78 2e       	mov	r7, r24
    36a4:	61 2e       	mov	r6, r17
    36a6:	be 01       	movw	r22, r28
    36a8:	6f 5f       	subi	r22, 0xFF	; 255
    36aa:	7f 4f       	sbci	r23, 0xFF	; 255
    36ac:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <validate>
    36b0:	81 11       	cpse	r24, r1
    36b2:	76 c1       	rjmp	.+748    	; 0x39a0 <f_lseek+0x332>
    36b4:	d8 01       	movw	r26, r16
    36b6:	1f 96       	adiw	r26, 0x0f	; 15
    36b8:	8c 91       	ld	r24, X
    36ba:	1f 97       	sbiw	r26, 0x0f	; 15
    36bc:	81 11       	cpse	r24, r1
    36be:	70 c1       	rjmp	.+736    	; 0x39a0 <f_lseek+0x332>
    36c0:	1a 96       	adiw	r26, 0x0a	; 10
    36c2:	8d 91       	ld	r24, X+
    36c4:	9d 91       	ld	r25, X+
    36c6:	0d 90       	ld	r0, X+
    36c8:	bc 91       	ld	r27, X
    36ca:	a0 2d       	mov	r26, r0
    36cc:	8c 15       	cp	r24, r12
    36ce:	9d 05       	cpc	r25, r13
    36d0:	ae 05       	cpc	r26, r14
    36d2:	bf 05       	cpc	r27, r15
    36d4:	30 f4       	brcc	.+12     	; 0x36e2 <f_lseek+0x74>
    36d6:	f8 01       	movw	r30, r16
    36d8:	26 85       	ldd	r18, Z+14	; 0x0e
    36da:	21 fd       	sbrc	r18, 1
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <f_lseek+0x74>
    36de:	6c 01       	movw	r12, r24
    36e0:	7d 01       	movw	r14, r26
    36e2:	f8 01       	movw	r30, r16
    36e4:	80 89       	ldd	r24, Z+16	; 0x10
    36e6:	91 89       	ldd	r25, Z+17	; 0x11
    36e8:	a2 89       	ldd	r26, Z+18	; 0x12
    36ea:	b3 89       	ldd	r27, Z+19	; 0x13
    36ec:	10 8a       	std	Z+16, r1	; 0x10
    36ee:	11 8a       	std	Z+17, r1	; 0x11
    36f0:	12 8a       	std	Z+18, r1	; 0x12
    36f2:	13 8a       	std	Z+19, r1	; 0x13
    36f4:	c1 14       	cp	r12, r1
    36f6:	d1 04       	cpc	r13, r1
    36f8:	e1 04       	cpc	r14, r1
    36fa:	f1 04       	cpc	r15, r1
    36fc:	09 f4       	brne	.+2      	; 0x3700 <f_lseek+0x92>
    36fe:	4b c1       	rjmp	.+662    	; 0x3996 <f_lseek+0x328>
    3700:	e9 81       	ldd	r30, Y+1	; 0x01
    3702:	fa 81       	ldd	r31, Y+2	; 0x02
    3704:	81 84       	ldd	r8, Z+9	; 0x09
    3706:	92 84       	ldd	r9, Z+10	; 0x0a
    3708:	a1 2c       	mov	r10, r1
    370a:	b1 2c       	mov	r11, r1
    370c:	07 2e       	mov	r0, r23
    370e:	79 e0       	ldi	r23, 0x09	; 9
    3710:	88 0c       	add	r8, r8
    3712:	99 1c       	adc	r9, r9
    3714:	aa 1c       	adc	r10, r10
    3716:	bb 1c       	adc	r11, r11
    3718:	7a 95       	dec	r23
    371a:	d1 f7       	brne	.-12     	; 0x3710 <f_lseek+0xa2>
    371c:	70 2d       	mov	r23, r0
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	a1 05       	cpc	r26, r1
    3722:	b1 05       	cpc	r27, r1
    3724:	e9 f1       	breq	.+122    	; 0x37a0 <f_lseek+0x132>
    3726:	1c 01       	movw	r2, r24
    3728:	2d 01       	movw	r4, r26
    372a:	f1 e0       	ldi	r31, 0x01	; 1
    372c:	2f 1a       	sub	r2, r31
    372e:	31 08       	sbc	r3, r1
    3730:	41 08       	sbc	r4, r1
    3732:	51 08       	sbc	r5, r1
    3734:	c7 01       	movw	r24, r14
    3736:	b6 01       	movw	r22, r12
    3738:	61 50       	subi	r22, 0x01	; 1
    373a:	71 09       	sbc	r23, r1
    373c:	81 09       	sbc	r24, r1
    373e:	91 09       	sbc	r25, r1
    3740:	a5 01       	movw	r20, r10
    3742:	94 01       	movw	r18, r8
    3744:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__udivmodsi4>
    3748:	2b 83       	std	Y+3, r18	; 0x03
    374a:	3c 83       	std	Y+4, r19	; 0x04
    374c:	4d 83       	std	Y+5, r20	; 0x05
    374e:	5e 83       	std	Y+6, r21	; 0x06
    3750:	c2 01       	movw	r24, r4
    3752:	b1 01       	movw	r22, r2
    3754:	a5 01       	movw	r20, r10
    3756:	94 01       	movw	r18, r8
    3758:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__udivmodsi4>
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	9c 81       	ldd	r25, Y+4	; 0x04
    3760:	ad 81       	ldd	r26, Y+5	; 0x05
    3762:	be 81       	ldd	r27, Y+6	; 0x06
    3764:	82 17       	cp	r24, r18
    3766:	93 07       	cpc	r25, r19
    3768:	a4 07       	cpc	r26, r20
    376a:	b5 07       	cpc	r27, r21
    376c:	c8 f0       	brcs	.+50     	; 0x37a0 <f_lseek+0x132>
    376e:	88 27       	eor	r24, r24
    3770:	99 27       	eor	r25, r25
    3772:	dc 01       	movw	r26, r24
    3774:	88 19       	sub	r24, r8
    3776:	99 09       	sbc	r25, r9
    3778:	aa 09       	sbc	r26, r10
    377a:	bb 09       	sbc	r27, r11
    377c:	82 21       	and	r24, r2
    377e:	93 21       	and	r25, r3
    3780:	a4 21       	and	r26, r4
    3782:	b5 21       	and	r27, r5
    3784:	f8 01       	movw	r30, r16
    3786:	80 8b       	std	Z+16, r24	; 0x10
    3788:	91 8b       	std	Z+17, r25	; 0x11
    378a:	a2 8b       	std	Z+18, r26	; 0x12
    378c:	b3 8b       	std	Z+19, r27	; 0x13
    378e:	c8 1a       	sub	r12, r24
    3790:	d9 0a       	sbc	r13, r25
    3792:	ea 0a       	sbc	r14, r26
    3794:	fb 0a       	sbc	r15, r27
    3796:	44 89       	ldd	r20, Z+20	; 0x14
    3798:	55 89       	ldd	r21, Z+21	; 0x15
    379a:	66 89       	ldd	r22, Z+22	; 0x16
    379c:	77 89       	ldd	r23, Z+23	; 0x17
    379e:	34 c0       	rjmp	.+104    	; 0x3808 <f_lseek+0x19a>
    37a0:	d8 01       	movw	r26, r16
    37a2:	16 96       	adiw	r26, 0x06	; 6
    37a4:	4d 91       	ld	r20, X+
    37a6:	5d 91       	ld	r21, X+
    37a8:	6d 91       	ld	r22, X+
    37aa:	7c 91       	ld	r23, X
    37ac:	19 97       	sbiw	r26, 0x09	; 9
    37ae:	41 15       	cp	r20, r1
    37b0:	51 05       	cpc	r21, r1
    37b2:	61 05       	cpc	r22, r1
    37b4:	71 05       	cpc	r23, r1
    37b6:	09 f5       	brne	.+66     	; 0x37fa <f_lseek+0x18c>
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	ba 01       	movw	r22, r20
    37be:	c8 01       	movw	r24, r16
    37c0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <create_chain>
    37c4:	ab 01       	movw	r20, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	41 30       	cpi	r20, 0x01	; 1
    37ca:	51 05       	cpc	r21, r1
    37cc:	61 05       	cpc	r22, r1
    37ce:	71 05       	cpc	r23, r1
    37d0:	21 f4       	brne	.+8      	; 0x37da <f_lseek+0x16c>
    37d2:	82 e0       	ldi	r24, 0x02	; 2
    37d4:	f8 01       	movw	r30, r16
    37d6:	87 87       	std	Z+15, r24	; 0x0f
    37d8:	e3 c0       	rjmp	.+454    	; 0x39a0 <f_lseek+0x332>
    37da:	4f 3f       	cpi	r20, 0xFF	; 255
    37dc:	ff ef       	ldi	r31, 0xFF	; 255
    37de:	5f 07       	cpc	r21, r31
    37e0:	6f 07       	cpc	r22, r31
    37e2:	7f 07       	cpc	r23, r31
    37e4:	29 f4       	brne	.+10     	; 0x37f0 <f_lseek+0x182>
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	d8 01       	movw	r26, r16
    37ea:	1f 96       	adiw	r26, 0x0f	; 15
    37ec:	8c 93       	st	X, r24
    37ee:	d8 c0       	rjmp	.+432    	; 0x39a0 <f_lseek+0x332>
    37f0:	f8 01       	movw	r30, r16
    37f2:	46 83       	std	Z+6, r20	; 0x06
    37f4:	57 83       	std	Z+7, r21	; 0x07
    37f6:	60 87       	std	Z+8, r22	; 0x08
    37f8:	71 87       	std	Z+9, r23	; 0x09
    37fa:	d8 01       	movw	r26, r16
    37fc:	54 96       	adiw	r26, 0x14	; 20
    37fe:	4d 93       	st	X+, r20
    3800:	5d 93       	st	X+, r21
    3802:	6d 93       	st	X+, r22
    3804:	7c 93       	st	X, r23
    3806:	57 97       	sbiw	r26, 0x17	; 23
    3808:	41 15       	cp	r20, r1
    380a:	51 05       	cpc	r21, r1
    380c:	61 05       	cpc	r22, r1
    380e:	71 05       	cpc	r23, r1
    3810:	09 f4       	brne	.+2      	; 0x3814 <f_lseek+0x1a6>
    3812:	8a c0       	rjmp	.+276    	; 0x3928 <f_lseek+0x2ba>
    3814:	8c 14       	cp	r8, r12
    3816:	9d 04       	cpc	r9, r13
    3818:	ae 04       	cpc	r10, r14
    381a:	bf 04       	cpc	r11, r15
    381c:	08 f0       	brcs	.+2      	; 0x3820 <f_lseek+0x1b2>
    381e:	52 c0       	rjmp	.+164    	; 0x38c4 <f_lseek+0x256>
    3820:	c8 18       	sub	r12, r8
    3822:	d9 08       	sbc	r13, r9
    3824:	ea 08       	sbc	r14, r10
    3826:	fb 08       	sbc	r15, r11
    3828:	f8 01       	movw	r30, r16
    382a:	80 89       	ldd	r24, Z+16	; 0x10
    382c:	91 89       	ldd	r25, Z+17	; 0x11
    382e:	a2 89       	ldd	r26, Z+18	; 0x12
    3830:	b3 89       	ldd	r27, Z+19	; 0x13
    3832:	88 0d       	add	r24, r8
    3834:	99 1d       	adc	r25, r9
    3836:	aa 1d       	adc	r26, r10
    3838:	bb 1d       	adc	r27, r11
    383a:	80 8b       	std	Z+16, r24	; 0x10
    383c:	91 8b       	std	Z+17, r25	; 0x11
    383e:	a2 8b       	std	Z+18, r26	; 0x12
    3840:	b3 8b       	std	Z+19, r27	; 0x13
    3842:	86 85       	ldd	r24, Z+14	; 0x0e
    3844:	81 ff       	sbrs	r24, 1
    3846:	0c c0       	rjmp	.+24     	; 0x3860 <f_lseek+0x1f2>
    3848:	87 2d       	mov	r24, r7
    384a:	96 2d       	mov	r25, r6
    384c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <create_chain>
    3850:	ab 01       	movw	r20, r22
    3852:	bc 01       	movw	r22, r24
    3854:	41 15       	cp	r20, r1
    3856:	51 05       	cpc	r21, r1
    3858:	61 05       	cpc	r22, r1
    385a:	71 05       	cpc	r23, r1
    385c:	39 f4       	brne	.+14     	; 0x386c <f_lseek+0x1fe>
    385e:	68 c0       	rjmp	.+208    	; 0x3930 <f_lseek+0x2c2>
    3860:	87 2d       	mov	r24, r7
    3862:	96 2d       	mov	r25, r6
    3864:	0e 94 9a 0a 	call	0x1534	; 0x1534 <get_fat>
    3868:	ab 01       	movw	r20, r22
    386a:	bc 01       	movw	r22, r24
    386c:	4f 3f       	cpi	r20, 0xFF	; 255
    386e:	ff ef       	ldi	r31, 0xFF	; 255
    3870:	5f 07       	cpc	r21, r31
    3872:	6f 07       	cpc	r22, r31
    3874:	7f 07       	cpc	r23, r31
    3876:	29 f4       	brne	.+10     	; 0x3882 <f_lseek+0x214>
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	d8 01       	movw	r26, r16
    387c:	1f 96       	adiw	r26, 0x0f	; 15
    387e:	8c 93       	st	X, r24
    3880:	8f c0       	rjmp	.+286    	; 0x39a0 <f_lseek+0x332>
    3882:	42 30       	cpi	r20, 0x02	; 2
    3884:	51 05       	cpc	r21, r1
    3886:	61 05       	cpc	r22, r1
    3888:	71 05       	cpc	r23, r1
    388a:	58 f0       	brcs	.+22     	; 0x38a2 <f_lseek+0x234>
    388c:	e9 81       	ldd	r30, Y+1	; 0x01
    388e:	fa 81       	ldd	r31, Y+2	; 0x02
    3890:	87 89       	ldd	r24, Z+23	; 0x17
    3892:	90 8d       	ldd	r25, Z+24	; 0x18
    3894:	a1 8d       	ldd	r26, Z+25	; 0x19
    3896:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3898:	48 17       	cp	r20, r24
    389a:	59 07       	cpc	r21, r25
    389c:	6a 07       	cpc	r22, r26
    389e:	7b 07       	cpc	r23, r27
    38a0:	20 f0       	brcs	.+8      	; 0x38aa <f_lseek+0x23c>
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	f8 01       	movw	r30, r16
    38a6:	87 87       	std	Z+15, r24	; 0x0f
    38a8:	7b c0       	rjmp	.+246    	; 0x39a0 <f_lseek+0x332>
    38aa:	d8 01       	movw	r26, r16
    38ac:	54 96       	adiw	r26, 0x14	; 20
    38ae:	4d 93       	st	X+, r20
    38b0:	5d 93       	st	X+, r21
    38b2:	6d 93       	st	X+, r22
    38b4:	7c 93       	st	X, r23
    38b6:	57 97       	sbiw	r26, 0x17	; 23
    38b8:	8c 14       	cp	r8, r12
    38ba:	9d 04       	cpc	r9, r13
    38bc:	ae 04       	cpc	r10, r14
    38be:	bf 04       	cpc	r11, r15
    38c0:	08 f4       	brcc	.+2      	; 0x38c4 <f_lseek+0x256>
    38c2:	ae cf       	rjmp	.-164    	; 0x3820 <f_lseek+0x1b2>
    38c4:	f8 01       	movw	r30, r16
    38c6:	80 89       	ldd	r24, Z+16	; 0x10
    38c8:	91 89       	ldd	r25, Z+17	; 0x11
    38ca:	a2 89       	ldd	r26, Z+18	; 0x12
    38cc:	b3 89       	ldd	r27, Z+19	; 0x13
    38ce:	8c 0d       	add	r24, r12
    38d0:	9d 1d       	adc	r25, r13
    38d2:	ae 1d       	adc	r26, r14
    38d4:	bf 1d       	adc	r27, r15
    38d6:	80 8b       	std	Z+16, r24	; 0x10
    38d8:	91 8b       	std	Z+17, r25	; 0x11
    38da:	a2 8b       	std	Z+18, r26	; 0x12
    38dc:	b3 8b       	std	Z+19, r27	; 0x13
    38de:	d7 01       	movw	r26, r14
    38e0:	c6 01       	movw	r24, r12
    38e2:	91 70       	andi	r25, 0x01	; 1
    38e4:	aa 27       	eor	r26, r26
    38e6:	bb 27       	eor	r27, r27
    38e8:	89 2b       	or	r24, r25
    38ea:	8a 2b       	or	r24, r26
    38ec:	8b 2b       	or	r24, r27
    38ee:	21 f1       	breq	.+72     	; 0x3938 <f_lseek+0x2ca>
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	0e 94 27 07 	call	0xe4e	; 0xe4e <clst2sect>
    38f8:	61 15       	cp	r22, r1
    38fa:	71 05       	cpc	r23, r1
    38fc:	81 05       	cpc	r24, r1
    38fe:	91 05       	cpc	r25, r1
    3900:	29 f4       	brne	.+10     	; 0x390c <f_lseek+0x29e>
    3902:	82 e0       	ldi	r24, 0x02	; 2
    3904:	d8 01       	movw	r26, r16
    3906:	1f 96       	adiw	r26, 0x0f	; 15
    3908:	8c 93       	st	X, r24
    390a:	4a c0       	rjmp	.+148    	; 0x39a0 <f_lseek+0x332>
    390c:	0b 2e       	mov	r0, r27
    390e:	b9 e0       	ldi	r27, 0x09	; 9
    3910:	f6 94       	lsr	r15
    3912:	e7 94       	ror	r14
    3914:	d7 94       	ror	r13
    3916:	c7 94       	ror	r12
    3918:	ba 95       	dec	r27
    391a:	d1 f7       	brne	.-12     	; 0x3910 <f_lseek+0x2a2>
    391c:	b0 2d       	mov	r27, r0
    391e:	c6 0e       	add	r12, r22
    3920:	d7 1e       	adc	r13, r23
    3922:	e8 1e       	adc	r14, r24
    3924:	f9 1e       	adc	r15, r25
    3926:	0b c0       	rjmp	.+22     	; 0x393e <f_lseek+0x2d0>
    3928:	c1 2c       	mov	r12, r1
    392a:	d1 2c       	mov	r13, r1
    392c:	76 01       	movw	r14, r12
    392e:	07 c0       	rjmp	.+14     	; 0x393e <f_lseek+0x2d0>
    3930:	c1 2c       	mov	r12, r1
    3932:	d1 2c       	mov	r13, r1
    3934:	76 01       	movw	r14, r12
    3936:	03 c0       	rjmp	.+6      	; 0x393e <f_lseek+0x2d0>
    3938:	c1 2c       	mov	r12, r1
    393a:	d1 2c       	mov	r13, r1
    393c:	76 01       	movw	r14, r12
    393e:	f8 01       	movw	r30, r16
    3940:	80 89       	ldd	r24, Z+16	; 0x10
    3942:	91 89       	ldd	r25, Z+17	; 0x11
    3944:	a2 89       	ldd	r26, Z+18	; 0x12
    3946:	b3 89       	ldd	r27, Z+19	; 0x13
    3948:	42 85       	ldd	r20, Z+10	; 0x0a
    394a:	53 85       	ldd	r21, Z+11	; 0x0b
    394c:	64 85       	ldd	r22, Z+12	; 0x0c
    394e:	75 85       	ldd	r23, Z+13	; 0x0d
    3950:	48 17       	cp	r20, r24
    3952:	59 07       	cpc	r21, r25
    3954:	6a 07       	cpc	r22, r26
    3956:	7b 07       	cpc	r23, r27
    3958:	38 f4       	brcc	.+14     	; 0x3968 <f_lseek+0x2fa>
    395a:	82 87       	std	Z+10, r24	; 0x0a
    395c:	93 87       	std	Z+11, r25	; 0x0b
    395e:	a4 87       	std	Z+12, r26	; 0x0c
    3960:	b5 87       	std	Z+13, r27	; 0x0d
    3962:	26 85       	ldd	r18, Z+14	; 0x0e
    3964:	20 64       	ori	r18, 0x40	; 64
    3966:	26 87       	std	Z+14, r18	; 0x0e
    3968:	91 70       	andi	r25, 0x01	; 1
    396a:	aa 27       	eor	r26, r26
    396c:	bb 27       	eor	r27, r27
    396e:	89 2b       	or	r24, r25
    3970:	8a 2b       	or	r24, r26
    3972:	8b 2b       	or	r24, r27
    3974:	91 f0       	breq	.+36     	; 0x399a <f_lseek+0x32c>
    3976:	f8 01       	movw	r30, r16
    3978:	80 8d       	ldd	r24, Z+24	; 0x18
    397a:	91 8d       	ldd	r25, Z+25	; 0x19
    397c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    397e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3980:	c8 16       	cp	r12, r24
    3982:	d9 06       	cpc	r13, r25
    3984:	ea 06       	cpc	r14, r26
    3986:	fb 06       	cpc	r15, r27
    3988:	51 f0       	breq	.+20     	; 0x399e <f_lseek+0x330>
    398a:	c0 8e       	std	Z+24, r12	; 0x18
    398c:	d1 8e       	std	Z+25, r13	; 0x19
    398e:	e2 8e       	std	Z+26, r14	; 0x1a
    3990:	f3 8e       	std	Z+27, r15	; 0x1b
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	05 c0       	rjmp	.+10     	; 0x39a0 <f_lseek+0x332>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	03 c0       	rjmp	.+6      	; 0x39a0 <f_lseek+0x332>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <f_lseek+0x332>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	26 96       	adiw	r28, 0x06	; 6
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	9f 90       	pop	r9
    39c2:	8f 90       	pop	r8
    39c4:	7f 90       	pop	r7
    39c6:	6f 90       	pop	r6
    39c8:	5f 90       	pop	r5
    39ca:	4f 90       	pop	r4
    39cc:	3f 90       	pop	r3
    39ce:	2f 90       	pop	r2
    39d0:	08 95       	ret

000039d2 <f_stat>:
    39d2:	ef 92       	push	r14
    39d4:	ff 92       	push	r15
    39d6:	1f 93       	push	r17
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	aa 97       	sbiw	r28, 0x2a	; 42
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	de bf       	out	0x3e, r29	; 62
    39e8:	0f be       	out	0x3f, r0	; 63
    39ea:	cd bf       	out	0x3d, r28	; 61
    39ec:	9a a7       	std	Y+42, r25	; 0x2a
    39ee:	89 a7       	std	Y+41, r24	; 0x29
    39f0:	7b 01       	movw	r14, r22
    39f2:	40 e0       	ldi	r20, 0x00	; 0
    39f4:	be 01       	movw	r22, r28
    39f6:	6f 5f       	subi	r22, 0xFF	; 255
    39f8:	7f 4f       	sbci	r23, 0xFF	; 255
    39fa:	ce 01       	movw	r24, r28
    39fc:	89 96       	adiw	r24, 0x29	; 41
    39fe:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <find_volume>
    3a02:	18 2f       	mov	r17, r24
    3a04:	81 11       	cpse	r24, r1
    3a06:	16 c0       	rjmp	.+44     	; 0x3a34 <f_stat+0x62>
    3a08:	69 a5       	ldd	r22, Y+41	; 0x29
    3a0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	0e 94 68 13 	call	0x26d0	; 0x26d0 <follow_path>
    3a14:	18 2f       	mov	r17, r24
    3a16:	81 11       	cpse	r24, r1
    3a18:	0d c0       	rjmp	.+26     	; 0x3a34 <f_stat+0x62>
    3a1a:	88 a5       	ldd	r24, Y+40	; 0x28
    3a1c:	88 23       	and	r24, r24
    3a1e:	4c f0       	brlt	.+18     	; 0x3a32 <f_stat+0x60>
    3a20:	e1 14       	cp	r14, r1
    3a22:	f1 04       	cpc	r15, r1
    3a24:	39 f0       	breq	.+14     	; 0x3a34 <f_stat+0x62>
    3a26:	b7 01       	movw	r22, r14
    3a28:	ce 01       	movw	r24, r28
    3a2a:	01 96       	adiw	r24, 0x01	; 1
    3a2c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fileinfo>
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <f_stat+0x62>
    3a32:	16 e0       	ldi	r17, 0x06	; 6
    3a34:	81 2f       	mov	r24, r17
    3a36:	aa 96       	adiw	r28, 0x2a	; 42
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	08 95       	ret

00003a4e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    3a4e:	7f 92       	push	r7
    3a50:	8f 92       	push	r8
    3a52:	9f 92       	push	r9
    3a54:	af 92       	push	r10
    3a56:	bf 92       	push	r11
    3a58:	cf 92       	push	r12
    3a5a:	df 92       	push	r13
    3a5c:	ef 92       	push	r14
    3a5e:	ff 92       	push	r15
    3a60:	0f 93       	push	r16
    3a62:	1f 93       	push	r17
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	ac 97       	sbiw	r28, 0x2c	; 44
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	9c a7       	std	Y+44, r25	; 0x2c
    3a7a:	8b a7       	std	Y+43, r24	; 0x2b
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
    3a7c:	42 e0       	ldi	r20, 0x02	; 2
    3a7e:	be 01       	movw	r22, r28
    3a80:	67 5d       	subi	r22, 0xD7	; 215
    3a82:	7f 4f       	sbci	r23, 0xFF	; 255
    3a84:	ce 01       	movw	r24, r28
    3a86:	8b 96       	adiw	r24, 0x2b	; 43
    3a88:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <find_volume>
    3a8c:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    3a8e:	81 11       	cpse	r24, r1
    3a90:	d2 c0       	rjmp	.+420    	; 0x3c36 <f_mkdir+0x1e8>
		dj.obj.fs = fs;
    3a92:	89 a5       	ldd	r24, Y+41	; 0x29
    3a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    3a9a:	6b a5       	ldd	r22, Y+43	; 0x2b
    3a9c:	7c a5       	ldd	r23, Y+44	; 0x2c
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3aa6:	88 23       	and	r24, r24
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <f_mkdir+0x5e>
    3aaa:	bf c0       	rjmp	.+382    	; 0x3c2a <f_mkdir+0x1dc>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
    3aac:	84 30       	cpi	r24, 0x04	; 4
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <f_mkdir+0x64>
    3ab0:	c1 c0       	rjmp	.+386    	; 0x3c34 <f_mkdir+0x1e6>
    3ab2:	88 a5       	ldd	r24, Y+40	; 0x28
    3ab4:	85 fd       	sbrc	r24, 5
    3ab6:	bd c0       	rjmp	.+378    	; 0x3c32 <f_mkdir+0x1e4>
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	ba 01       	movw	r22, r20
    3abe:	ce 01       	movw	r24, r28
    3ac0:	01 96       	adiw	r24, 0x01	; 1
    3ac2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <create_chain>
    3ac6:	4b 01       	movw	r8, r22
    3ac8:	5c 01       	movw	r10, r24
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    3aca:	e9 a5       	ldd	r30, Y+41	; 0x29
    3acc:	fa a5       	ldd	r31, Y+42	; 0x2a
    3ace:	41 85       	ldd	r20, Z+9	; 0x09
    3ad0:	52 85       	ldd	r21, Z+10	; 0x0a
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	03 2e       	mov	r0, r19
    3ad8:	39 e0       	ldi	r19, 0x09	; 9
    3ada:	44 0f       	add	r20, r20
    3adc:	55 1f       	adc	r21, r21
    3ade:	66 1f       	adc	r22, r22
    3ae0:	77 1f       	adc	r23, r23
    3ae2:	3a 95       	dec	r19
    3ae4:	d1 f7       	brne	.-12     	; 0x3ada <f_mkdir+0x8c>
    3ae6:	30 2d       	mov	r19, r0
    3ae8:	4b 87       	std	Y+11, r20	; 0x0b
    3aea:	5c 87       	std	Y+12, r21	; 0x0c
    3aec:	6d 87       	std	Y+13, r22	; 0x0d
    3aee:	7e 87       	std	Y+14, r23	; 0x0e
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3af0:	81 14       	cp	r8, r1
    3af2:	91 04       	cpc	r9, r1
    3af4:	a1 04       	cpc	r10, r1
    3af6:	b1 04       	cpc	r11, r1
    3af8:	79 f0       	breq	.+30     	; 0x3b18 <f_mkdir+0xca>
			if (dcl == 1) res = FR_INT_ERR;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	88 16       	cp	r8, r24
    3afe:	91 04       	cpc	r9, r1
    3b00:	a1 04       	cpc	r10, r1
    3b02:	b1 04       	cpc	r11, r1
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <f_mkdir+0xba>
    3b06:	84 c0       	rjmp	.+264    	; 0x3c10 <f_mkdir+0x1c2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3b08:	8f ef       	ldi	r24, 0xFF	; 255
    3b0a:	88 16       	cp	r8, r24
    3b0c:	98 06       	cpc	r9, r24
    3b0e:	a8 06       	cpc	r10, r24
    3b10:	b8 06       	cpc	r11, r24
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <f_mkdir+0xc8>
    3b14:	5d c0       	rjmp	.+186    	; 0x3bd0 <f_mkdir+0x182>
    3b16:	04 c0       	rjmp	.+8      	; 0x3b20 <f_mkdir+0xd2>
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3b18:	0f 2e       	mov	r0, r31
    3b1a:	f7 e0       	ldi	r31, 0x07	; 7
    3b1c:	ff 2e       	mov	r15, r31
    3b1e:	f0 2d       	mov	r31, r0
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    3b20:	f1 10       	cpse	r15, r1
    3b22:	79 c0       	rjmp	.+242    	; 0x3c16 <f_mkdir+0x1c8>
    3b24:	cf 01       	movw	r24, r30
    3b26:	0e 94 0d 08 	call	0x101a	; 0x101a <sync_window>
    3b2a:	f8 2e       	mov	r15, r24
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	73 c0       	rjmp	.+230    	; 0x3c16 <f_mkdir+0x1c8>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    3b30:	b5 01       	movw	r22, r10
    3b32:	a4 01       	movw	r20, r8
    3b34:	89 a5       	ldd	r24, Y+41	; 0x29
    3b36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b38:	0e 94 a1 08 	call	0x1142	; 0x1142 <dir_clear>
    3b3c:	f8 2e       	mov	r15, r24
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
    3b3e:	81 11       	cpse	r24, r1
    3b40:	6a c0       	rjmp	.+212    	; 0x3c16 <f_mkdir+0x1c8>
					dir = fs->win;
    3b42:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b44:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b46:	67 01       	movw	r12, r14
    3b48:	e3 e3       	ldi	r30, 0x33	; 51
    3b4a:	ce 0e       	add	r12, r30
    3b4c:	d1 1c       	adc	r13, r1
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
    3b4e:	4b e0       	ldi	r20, 0x0B	; 11
    3b50:	50 e0       	ldi	r21, 0x00	; 0
    3b52:	60 e2       	ldi	r22, 0x20	; 32
    3b54:	70 e0       	ldi	r23, 0x00	; 0
    3b56:	c6 01       	movw	r24, r12
    3b58:	0e 94 fe 06 	call	0xdfc	; 0xdfc <mem_set>
					dir[DIR_Name] = '.';
    3b5c:	0f 2e       	mov	r0, r31
    3b5e:	fe e2       	ldi	r31, 0x2E	; 46
    3b60:	7f 2e       	mov	r7, r31
    3b62:	f0 2d       	mov	r31, r0
    3b64:	f7 01       	movw	r30, r14
    3b66:	73 aa       	std	Z+51, r7	; 0x33
					dir[DIR_Attr] = AM_DIR;
    3b68:	80 e1       	ldi	r24, 0x10	; 16
    3b6a:	86 af       	std	Z+62, r24	; 0x3e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3b6c:	e7 5b       	subi	r30, 0xB7	; 183
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    3b72:	31 96       	adiw	r30, 0x01	; 1
    3b74:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    3b76:	31 96       	adiw	r30, 0x01	; 1
    3b78:	81 e2       	ldi	r24, 0x21	; 33
    3b7a:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    3b7c:	31 96       	adiw	r30, 0x01	; 1
    3b7e:	88 e4       	ldi	r24, 0x48	; 72
    3b80:	80 83       	st	Z, r24
					dir = fs->win;
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
    3b82:	a5 01       	movw	r20, r10
    3b84:	94 01       	movw	r18, r8
    3b86:	b6 01       	movw	r22, r12
    3b88:	89 a5       	ldd	r24, Y+41	; 0x29
    3b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b8c:	0e 94 8d 0a 	call	0x151a	; 0x151a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
    3b90:	87 01       	movw	r16, r14
    3b92:	0d 5a       	subi	r16, 0xAD	; 173
    3b94:	1f 4f       	sbci	r17, 0xFF	; 255
    3b96:	40 e2       	ldi	r20, 0x20	; 32
    3b98:	50 e0       	ldi	r21, 0x00	; 0
    3b9a:	b6 01       	movw	r22, r12
    3b9c:	c8 01       	movw	r24, r16
    3b9e:	0e 94 f0 06 	call	0xde0	; 0xde0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    3ba2:	f7 01       	movw	r30, r14
    3ba4:	ec 5a       	subi	r30, 0xAC	; 172
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	70 82       	st	Z, r7
					st_clust(fs, dir + SZDIRE, pcl);
    3baa:	2f 81       	ldd	r18, Y+7	; 0x07
    3bac:	38 85       	ldd	r19, Y+8	; 0x08
    3bae:	49 85       	ldd	r20, Y+9	; 0x09
    3bb0:	5a 85       	ldd	r21, Y+10	; 0x0a
    3bb2:	b8 01       	movw	r22, r16
    3bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bb8:	0e 94 8d 0a 	call	0x151a	; 0x151a <st_clust>
					fs->wflag = 1;
    3bbc:	e9 a5       	ldd	r30, Y+41	; 0x29
    3bbe:	fa a5       	ldd	r31, Y+42	; 0x2a
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_register(&dj);	/* Register the object to the directoy */
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	01 96       	adiw	r24, 0x01	; 1
    3bc8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <dir_register>
    3bcc:	f8 2e       	mov	r15, r24
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <f_mkdir+0x186>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3bd0:	ff 24       	eor	r15, r15
    3bd2:	f3 94       	inc	r15
				}
			}
			if (res == FR_OK) {
				res = dir_register(&dj);	/* Register the object to the directoy */
			}
			if (res == FR_OK) {
    3bd4:	f1 10       	cpse	r15, r1
    3bd6:	1f c0       	rjmp	.+62     	; 0x3c16 <f_mkdir+0x1c8>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    3bd8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3bda:	fc 8c       	ldd	r15, Y+28	; 0x1c
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3bdc:	f7 01       	movw	r30, r14
    3bde:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    3be0:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    3be2:	81 e2       	ldi	r24, 0x21	; 33
    3be4:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    3be6:	88 e4       	ldi	r24, 0x48	; 72
    3be8:	81 8f       	std	Z+25, r24	; 0x19
				} else
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
    3bea:	a5 01       	movw	r20, r10
    3bec:	94 01       	movw	r18, r8
    3bee:	b7 01       	movw	r22, r14
    3bf0:	89 a5       	ldd	r24, Y+41	; 0x29
    3bf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bf4:	0e 94 8d 0a 	call	0x151a	; 0x151a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    3bf8:	80 e1       	ldi	r24, 0x10	; 16
    3bfa:	f7 01       	movw	r30, r14
    3bfc:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    3bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    3c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c02:	21 e0       	ldi	r18, 0x01	; 1
    3c04:	fc 01       	movw	r30, r24
    3c06:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    3c08:	0e 94 ff 08 	call	0x11fe	; 0x11fe <sync_fs>
    3c0c:	f8 2e       	mov	r15, r24
    3c0e:	13 c0       	rjmp	.+38     	; 0x3c36 <f_mkdir+0x1e8>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    3c10:	68 94       	set
    3c12:	ff 24       	eor	r15, r15
    3c14:	f1 f8       	bld	r15, 1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    3c16:	00 e0       	ldi	r16, 0x00	; 0
    3c18:	10 e0       	ldi	r17, 0x00	; 0
    3c1a:	98 01       	movw	r18, r16
    3c1c:	b5 01       	movw	r22, r10
    3c1e:	a4 01       	movw	r20, r8
    3c20:	ce 01       	movw	r24, r28
    3c22:	01 96       	adiw	r24, 0x01	; 1
    3c24:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <remove_chain>
    3c28:	06 c0       	rjmp	.+12     	; 0x3c36 <f_mkdir+0x1e8>
	res = find_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3c2a:	68 94       	set
    3c2c:	ff 24       	eor	r15, r15
    3c2e:	f3 f8       	bld	r15, 3
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <f_mkdir+0x1e8>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
    3c32:	86 e0       	ldi	r24, 0x06	; 6
	res = find_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3c34:	f8 2e       	mov	r15, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3c36:	8f 2d       	mov	r24, r15
    3c38:	ac 96       	adiw	r28, 0x2c	; 44
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	1f 91       	pop	r17
    3c4a:	0f 91       	pop	r16
    3c4c:	ff 90       	pop	r15
    3c4e:	ef 90       	pop	r14
    3c50:	df 90       	pop	r13
    3c52:	cf 90       	pop	r12
    3c54:	bf 90       	pop	r11
    3c56:	af 90       	pop	r10
    3c58:	9f 90       	pop	r9
    3c5a:	8f 90       	pop	r8
    3c5c:	7f 90       	pop	r7
    3c5e:	08 95       	ret

00003c60 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    3c60:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3c62:	77 9b       	sbis	0x0e, 7	; 14
    3c64:	fe cf       	rjmp	.-4      	; 0x3c62 <xchg_spi+0x2>
	return SPDR;
    3c66:	8f b1       	in	r24, 0x0f	; 15
}
    3c68:	08 95       	ret

00003c6a <wait_ready>:
)
{
	BYTE d;


	Timer2 = 1000*wt;
    3c6a:	28 ee       	ldi	r18, 0xE8	; 232
    3c6c:	33 e0       	ldi	r19, 0x03	; 3
    3c6e:	ac 01       	movw	r20, r24
    3c70:	42 9f       	mul	r20, r18
    3c72:	c0 01       	movw	r24, r0
    3c74:	43 9f       	mul	r20, r19
    3c76:	90 0d       	add	r25, r0
    3c78:	52 9f       	mul	r21, r18
    3c7a:	90 0d       	add	r25, r0
    3c7c:	11 24       	eor	r1, r1
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <Timer2>
    3c86:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <Timer2+0x1>
    3c8a:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <Timer2+0x2>
    3c8e:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <Timer2+0x3>
	do {
		d = xchg_spi(0xFF);
    3c92:	8f ef       	ldi	r24, 0xFF	; 255
    3c94:	e5 df       	rcall	.-54     	; 0x3c60 <xchg_spi>
		if(Timer2 > 0) Timer2--;
    3c96:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <Timer2>
    3c9a:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <Timer2+0x1>
    3c9e:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <Timer2+0x2>
    3ca2:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <Timer2+0x3>
    3ca6:	45 2b       	or	r20, r21
    3ca8:	46 2b       	or	r20, r22
    3caa:	47 2b       	or	r20, r23
    3cac:	a1 f0       	breq	.+40     	; 0x3cd6 <wait_ready+0x6c>
    3cae:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <Timer2>
    3cb2:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <Timer2+0x1>
    3cb6:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <Timer2+0x2>
    3cba:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <Timer2+0x3>
    3cbe:	41 50       	subi	r20, 0x01	; 1
    3cc0:	51 09       	sbc	r21, r1
    3cc2:	61 09       	sbc	r22, r1
    3cc4:	71 09       	sbc	r23, r1
    3cc6:	40 93 c8 02 	sts	0x02C8, r20	; 0x8002c8 <Timer2>
    3cca:	50 93 c9 02 	sts	0x02C9, r21	; 0x8002c9 <Timer2+0x1>
    3cce:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <Timer2+0x2>
    3cd2:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <Timer2+0x3>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	}
	while (d != 0xFF && Timer2);
    3cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    3cd8:	61 f0       	breq	.+24     	; 0x3cf2 <wait_ready+0x88>
    3cda:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <Timer2>
    3cde:	50 91 c9 02 	lds	r21, 0x02C9	; 0x8002c9 <Timer2+0x1>
    3ce2:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <Timer2+0x2>
    3ce6:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <Timer2+0x3>
    3cea:	45 2b       	or	r20, r21
    3cec:	46 2b       	or	r20, r22
    3cee:	47 2b       	or	r20, r23
    3cf0:	81 f6       	brne	.-96     	; 0x3c92 <wait_ready+0x28>

	return (d == 0xFF) ? 1 : 0;
    3cf2:	21 e0       	ldi	r18, 0x01	; 1
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <wait_ready+0x94>
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
}
    3cfe:	c9 01       	movw	r24, r18
    3d00:	08 95       	ret

00003d02 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    3d02:	e2 e6       	ldi	r30, 0x62	; 98
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	80 61       	ori	r24, 0x10	; 16
    3d0a:	80 83       	st	Z, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3d0c:	8f ef       	ldi	r24, 0xFF	; 255
    3d0e:	a8 cf       	rjmp	.-176    	; 0x3c60 <xchg_spi>
    3d10:	08 95       	ret

00003d12 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    3d16:	e2 e6       	ldi	r30, 0x62	; 98
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	8f 7e       	andi	r24, 0xEF	; 239
    3d1e:	80 83       	st	Z, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    3d20:	8f ef       	ldi	r24, 0xFF	; 255
    3d22:	9e df       	rcall	.-196    	; 0x3c60 <xchg_spi>

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3d24:	84 ef       	ldi	r24, 0xF4	; 244
    3d26:	91 e0       	ldi	r25, 0x01	; 1
    3d28:	a0 df       	rcall	.-192    	; 0x3c6a <wait_ready>
    3d2a:	ec 01       	movw	r28, r24
    3d2c:	89 2b       	or	r24, r25

	deselect();		/* Timeout */
    3d2e:	11 f4       	brne	.+4      	; 0x3d34 <select+0x22>
    3d30:	e8 df       	rcall	.-48     	; 0x3d02 <deselect>
	return 0;
    3d32:	02 c0       	rjmp	.+4      	; 0x3d38 <select+0x26>
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
    3d34:	c1 e0       	ldi	r28, 0x01	; 1
    3d36:	d0 e0       	ldi	r29, 0x00	; 0

	deselect();		/* Timeout */
	return 0;
}
    3d38:	ce 01       	movw	r24, r28
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	08 95       	ret

00003d40 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3d40:	0f 93       	push	r16
    3d42:	1f 93       	push	r17
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	08 2f       	mov	r16, r24
    3d4a:	19 2f       	mov	r17, r25
    3d4c:	eb 01       	movw	r28, r22
	BYTE token;
	Timer1 = 10000;					// Set count-down initial at 10000, have't compute for delay 200ms
    3d4e:	80 e1       	ldi	r24, 0x10	; 16
    3d50:	97 e2       	ldi	r25, 0x27	; 39
    3d52:	a0 e0       	ldi	r26, 0x00	; 0
    3d54:	b0 e0       	ldi	r27, 0x00	; 0
    3d56:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    3d5a:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    3d5e:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    3d62:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    3d66:	8f ef       	ldi	r24, 0xFF	; 255
    3d68:	7b df       	rcall	.-266    	; 0x3c60 <xchg_spi>
		if(Timer1>0) Timer1--;
    3d6a:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <Timer1>
    3d6e:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <Timer1+0x1>
    3d72:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <Timer1+0x2>
    3d76:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <Timer1+0x3>
    3d7a:	45 2b       	or	r20, r21
    3d7c:	46 2b       	or	r20, r22
    3d7e:	47 2b       	or	r20, r23
    3d80:	a1 f0       	breq	.+40     	; 0x3daa <rcvr_datablock+0x6a>
    3d82:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <Timer1>
    3d86:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <Timer1+0x1>
    3d8a:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <Timer1+0x2>
    3d8e:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <Timer1+0x3>
    3d92:	41 50       	subi	r20, 0x01	; 1
    3d94:	51 09       	sbc	r21, r1
    3d96:	61 09       	sbc	r22, r1
    3d98:	71 09       	sbc	r23, r1
    3d9a:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <Timer1>
    3d9e:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <Timer1+0x1>
    3da2:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <Timer1+0x2>
    3da6:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <Timer1+0x3>
	} while ((token == 0xFF) && Timer1);
    3daa:	8f 3f       	cpi	r24, 0xFF	; 255
    3dac:	79 f4       	brne	.+30     	; 0x3dcc <rcvr_datablock+0x8c>
    3dae:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    3db2:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    3db6:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    3dba:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    3dbe:	89 2b       	or	r24, r25
    3dc0:	8a 2b       	or	r24, r26
    3dc2:	8b 2b       	or	r24, r27
    3dc4:	81 f6       	brne	.-96     	; 0x3d66 <rcvr_datablock+0x26>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	1e c0       	rjmp	.+60     	; 0x3e08 <rcvr_datablock+0xc8>
    3dcc:	8e 3f       	cpi	r24, 0xFE	; 254
    3dce:	d1 f4       	brne	.+52     	; 0x3e04 <rcvr_datablock+0xc4>
    3dd0:	e0 2f       	mov	r30, r16
    3dd2:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
    3dd4:	8f ef       	ldi	r24, 0xFF	; 255
    3dd6:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    3dd8:	77 9b       	sbis	0x0e, 7	; 14
    3dda:	fe cf       	rjmp	.-4      	; 0x3dd8 <rcvr_datablock+0x98>
		*p++ = SPDR;
    3ddc:	9f b1       	in	r25, 0x0f	; 15
    3dde:	df 01       	movw	r26, r30
    3de0:	90 83       	st	Z, r25
		SPDR = 0xFF;
    3de2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    3de4:	77 9b       	sbis	0x0e, 7	; 14
    3de6:	fe cf       	rjmp	.-4      	; 0x3de4 <rcvr_datablock+0xa4>
		*p++ = SPDR;
    3de8:	9f b1       	in	r25, 0x0f	; 15
    3dea:	11 96       	adiw	r26, 0x01	; 1
    3dec:	9c 93       	st	X, r25
	} while (cnt -= 2);
    3dee:	22 97       	sbiw	r28, 0x02	; 2
    3df0:	32 96       	adiw	r30, 0x02	; 2
    3df2:	20 97       	sbiw	r28, 0x00	; 0
    3df4:	81 f7       	brne	.-32     	; 0x3dd6 <rcvr_datablock+0x96>
		if(Timer1>0) Timer1--;
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    3df6:	8f ef       	ldi	r24, 0xFF	; 255
    3df8:	33 df       	rcall	.-410    	; 0x3c60 <xchg_spi>
	xchg_spi(0xFF);
    3dfa:	8f ef       	ldi	r24, 0xFF	; 255
    3dfc:	31 df       	rcall	.-414    	; 0x3c60 <xchg_spi>
    3dfe:	81 e0       	ldi	r24, 0x01	; 1

	return 1;						/* Return with success */
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <rcvr_datablock+0xc8>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
	Timer1 = 10000;					// Set count-down initial at 10000, have't compute for delay 200ms
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
		if(Timer1>0) Timer1--;
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	df 91       	pop	r29
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    3e0a:	cf 91       	pop	r28
    3e0c:	1f 91       	pop	r17
    3e0e:	0f 91       	pop	r16
    3e10:	08 95       	ret

00003e12 <xmit_datablock>:
    3e12:	1f 93       	push	r17
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	ec 01       	movw	r28, r24
    3e1a:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    3e1c:	84 ef       	ldi	r24, 0xF4	; 244
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	24 df       	rcall	.-440    	; 0x3c6a <wait_ready>
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	31 f1       	breq	.+76     	; 0x3e72 <xmit_datablock+0x60>

	xchg_spi(token);					/* Xmit data token */
    3e26:	81 2f       	mov	r24, r17
    3e28:	1b df       	rcall	.-458    	; 0x3c60 <xchg_spi>
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    3e2a:	1d 3f       	cpi	r17, 0xFD	; 253
    3e2c:	01 f1       	breq	.+64     	; 0x3e6e <xmit_datablock+0x5c>
    3e2e:	fe 01       	movw	r30, r28
    3e30:	9e 01       	movw	r18, r28
    3e32:	3e 5f       	subi	r19, 0xFE	; 254
    3e34:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
    3e36:	90 81       	ld	r25, Z
    3e38:	9f b9       	out	0x0f, r25	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    3e3a:	77 9b       	sbis	0x0e, 7	; 14
    3e3c:	fe cf       	rjmp	.-4      	; 0x3e3a <xmit_datablock+0x28>
		SPDR = *p++;
    3e3e:	11 96       	adiw	r26, 0x01	; 1
    3e40:	9c 91       	ld	r25, X
    3e42:	9f b9       	out	0x0f, r25	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    3e44:	77 9b       	sbis	0x0e, 7	; 14
    3e46:	fe cf       	rjmp	.-4      	; 0x3e44 <xmit_datablock+0x32>
    3e48:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    3e4a:	e2 17       	cp	r30, r18
    3e4c:	f3 07       	cpc	r31, r19

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */

	xmit_spi_multi(buff, 512);			/* Data */
	xchg_spi(0xFF); xchg_spi(0xFF);		/* Dummy CRC */
    3e4e:	91 f7       	brne	.-28     	; 0x3e34 <xmit_datablock+0x22>
    3e50:	8f ef       	ldi	r24, 0xFF	; 255
    3e52:	06 df       	rcall	.-500    	; 0x3c60 <xchg_spi>
    3e54:	8f ef       	ldi	r24, 0xFF	; 255

	resp = xchg_spi(0xFF);				/* Receive data resp */
    3e56:	04 df       	rcall	.-504    	; 0x3c60 <xchg_spi>
    3e58:	8f ef       	ldi	r24, 0xFF	; 255
    3e5a:	02 df       	rcall	.-508    	; 0x3c60 <xchg_spi>

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */
    3e5c:	8f 71       	andi	r24, 0x1F	; 31
    3e5e:	31 e0       	ldi	r19, 0x01	; 1
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	85 30       	cpi	r24, 0x05	; 5
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <xmit_datablock+0x56>
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	83 2f       	mov	r24, r19
    3e6a:	92 2f       	mov	r25, r18
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <xmit_datablock+0x60>


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
	resp = xchg_spi(0xFF);				/* Receive data resp */

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */

	/* Busy check is done at next transmission */
}
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	08 95       	ret

00003e7a <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    3e7a:	ff 92       	push	r15
    3e7c:	0f 93       	push	r16
    3e7e:	1f 93       	push	r17
    3e80:	cf 93       	push	r28
    3e82:	df 93       	push	r29
    3e84:	c8 2f       	mov	r28, r24
    3e86:	d4 2f       	mov	r29, r20
    3e88:	15 2f       	mov	r17, r21
    3e8a:	06 2f       	mov	r16, r22
    3e8c:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3e8e:	88 23       	and	r24, r24
    3e90:	4c f4       	brge	.+18     	; 0x3ea4 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	ba 01       	movw	r22, r20
    3e98:	87 e3       	ldi	r24, 0x37	; 55
    3e9a:	ef df       	rcall	.-34     	; 0x3e7a <send_cmd>
		if (res > 1) return res;
    3e9c:	82 30       	cpi	r24, 0x02	; 2
    3e9e:	08 f0       	brcs	.+2      	; 0x3ea2 <send_cmd+0x28>
    3ea0:	3c c0       	rjmp	.+120    	; 0x3f1a <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3ea2:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3ea4:	cc 30       	cpi	r28, 0x0C	; 12
		deselect();
    3ea6:	f1 f0       	breq	.+60     	; 0x3ee4 <send_cmd+0x6a>
		if (!select()) return 0xFF;
    3ea8:	2c df       	rcall	.-424    	; 0x3d02 <deselect>
    3eaa:	33 df       	rcall	.-410    	; 0x3d12 <select>
    3eac:	89 2b       	or	r24, r25
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    3eae:	c1 f0       	breq	.+48     	; 0x3ee0 <send_cmd+0x66>
    3eb0:	8c 2f       	mov	r24, r28
    3eb2:	80 64       	ori	r24, 0x40	; 64
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    3eb4:	d5 de       	rcall	.-598    	; 0x3c60 <xchg_spi>
    3eb6:	8f 2d       	mov	r24, r15
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    3eb8:	d3 de       	rcall	.-602    	; 0x3c60 <xchg_spi>
    3eba:	80 2f       	mov	r24, r16
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    3ebc:	d1 de       	rcall	.-606    	; 0x3c60 <xchg_spi>
    3ebe:	81 2f       	mov	r24, r17
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    3ec0:	cf de       	rcall	.-610    	; 0x3c60 <xchg_spi>
    3ec2:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    3ec4:	cd de       	rcall	.-614    	; 0x3c60 <xchg_spi>
    3ec6:	cc 23       	and	r28, r28
    3ec8:	29 f1       	breq	.+74     	; 0x3f14 <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    3eca:	21 c0       	rjmp	.+66     	; 0x3f0e <send_cmd+0x94>
    3ecc:	8f ef       	ldi	r24, 0xFF	; 255
    3ece:	c8 de       	rcall	.-624    	; 0x3c60 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    3ed0:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    3ed2:	8f ef       	ldi	r24, 0xFF	; 255
    3ed4:	c5 de       	rcall	.-630    	; 0x3c60 <xchg_spi>
	while ((res & 0x80) && --n);
    3ed6:	88 23       	and	r24, r24
    3ed8:	04 f5       	brge	.+64     	; 0x3f1a <send_cmd+0xa0>
    3eda:	c1 50       	subi	r28, 0x01	; 1
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    3edc:	d1 f7       	brne	.-12     	; 0x3ed2 <send_cmd+0x58>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    3ede:	1d c0       	rjmp	.+58     	; 0x3f1a <send_cmd+0xa0>
    3ee0:	8f ef       	ldi	r24, 0xFF	; 255
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    3ee2:	1b c0       	rjmp	.+54     	; 0x3f1a <send_cmd+0xa0>
    3ee4:	8c e4       	ldi	r24, 0x4C	; 76
    3ee6:	bc de       	rcall	.-648    	; 0x3c60 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    3ee8:	8f 2d       	mov	r24, r15
    3eea:	ba de       	rcall	.-652    	; 0x3c60 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    3eec:	80 2f       	mov	r24, r16
    3eee:	b8 de       	rcall	.-656    	; 0x3c60 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    3ef0:	81 2f       	mov	r24, r17
    3ef2:	b6 de       	rcall	.-660    	; 0x3c60 <xchg_spi>
    3ef4:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    3ef6:	b4 de       	rcall	.-664    	; 0x3c60 <xchg_spi>
    3ef8:	81 e0       	ldi	r24, 0x01	; 1

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    3efa:	b2 de       	rcall	.-668    	; 0x3c60 <xchg_spi>
    3efc:	cc 30       	cpi	r28, 0x0C	; 12
    3efe:	31 f3       	breq	.-52     	; 0x3ecc <send_cmd+0x52>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    3f00:	e7 cf       	rjmp	.-50     	; 0x3ed0 <send_cmd+0x56>
    3f02:	87 e8       	ldi	r24, 0x87	; 135
    3f04:	ad de       	rcall	.-678    	; 0x3c60 <xchg_spi>
    3f06:	e4 cf       	rjmp	.-56     	; 0x3ed0 <send_cmd+0x56>
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	aa de       	rcall	.-684    	; 0x3c60 <xchg_spi>
    3f0c:	e1 cf       	rjmp	.-62     	; 0x3ed0 <send_cmd+0x56>
    3f0e:	c8 30       	cpi	r28, 0x08	; 8
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    3f10:	c1 f3       	breq	.-16     	; 0x3f02 <send_cmd+0x88>
    3f12:	fa cf       	rjmp	.-12     	; 0x3f08 <send_cmd+0x8e>
    3f14:	85 e9       	ldi	r24, 0x95	; 149
	xchg_spi(n);
    3f16:	a4 de       	rcall	.-696    	; 0x3c60 <xchg_spi>
    3f18:	db cf       	rjmp	.-74     	; 0x3ed0 <send_cmd+0x56>
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	08 95       	ret

00003f26 <mmc_disk_initialize>:
    3f26:	cf 92       	push	r12
    3f28:	df 92       	push	r13
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    3f2a:	ef 92       	push	r14
    3f2c:	ff 92       	push	r15
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	00 d0       	rcall	.+0      	; 0x3f38 <mmc_disk_initialize+0x12>
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <mmc_disk_initialize+0x14>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 33511; Timer1; Timer1--) ;		/* Wait for 100ms  Loop once = 32.2uS, need Loop 311055 times*/
    3f3e:	87 ee       	ldi	r24, 0xE7	; 231
    3f40:	92 e8       	ldi	r25, 0x82	; 130
    3f42:	a0 e0       	ldi	r26, 0x00	; 0
    3f44:	b0 e0       	ldi	r27, 0x00	; 0
    3f46:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    3f4a:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    3f4e:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    3f52:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
    3f56:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    3f5a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    3f5e:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    3f62:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    3f66:	89 2b       	or	r24, r25
    3f68:	8a 2b       	or	r24, r26
    3f6a:	8b 2b       	or	r24, r27
    3f6c:	f9 f0       	breq	.+62     	; 0x3fac <mmc_disk_initialize+0x86>
    3f6e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    3f72:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    3f76:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    3f7a:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	a1 09       	sbc	r26, r1
    3f82:	b1 09       	sbc	r27, r1
    3f84:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    3f88:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    3f8c:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    3f90:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
    3f94:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    3f98:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    3f9c:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    3fa0:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    3fa4:	89 2b       	or	r24, r25
    3fa6:	8a 2b       	or	r24, r26
    3fa8:	8b 2b       	or	r24, r27
    3faa:	09 f7       	brne	.-62     	; 0x3f6e <mmc_disk_initialize+0x48>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
    3fac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    3fb0:	81 ff       	sbrs	r24, 1
    3fb2:	03 c0       	rjmp	.+6      	; 0x3fba <mmc_disk_initialize+0x94>
    3fb4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    3fb8:	11 c1       	rjmp	.+546    	; 0x41dc <mmc_disk_initialize+0x2b6>
	// The SDC00 is always power, don't need to power on


	/* Configure MOSI/MISO/SCLK/CS pins */
	// Configure PULL UP
	SFIOR &= ~(0x01 << PUD);
    3fba:	80 b5       	in	r24, 0x20	; 32
    3fbc:	8b 7f       	andi	r24, 0xFB	; 251
    3fbe:	80 bd       	out	0x20, r24	; 32

	// Configure /SS, MOSI, CLK output
	SPI_DDR &= ~(0x01 << SPI_MISO);
    3fc0:	bb 98       	cbi	0x17, 3	; 23
	SPI_DDR |= (0x01 << SPI_MOSI) | (0x01 << SPI_SCK) | (0x01 << SPI_SS);
    3fc2:	87 b3       	in	r24, 0x17	; 23
    3fc4:	87 60       	ori	r24, 0x07	; 7
    3fc6:	87 bb       	out	0x17, r24	; 23
	DDRF |= (0x01 << 4);
    3fc8:	e1 e6       	ldi	r30, 0x61	; 97
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	80 81       	ld	r24, Z
    3fce:	80 61       	ori	r24, 0x10	; 16
    3fd0:	80 83       	st	Z, r24

	// Pin Initial state 
	// Hi: MOSI & \SS
	// Lo: MISO & SCK

	SPI_PORT &= ~((0x01 << SPI_SCK) | (0x01 << SPI_MISO) );
    3fd2:	88 b3       	in	r24, 0x18	; 24
    3fd4:	85 7f       	andi	r24, 0xF5	; 245
    3fd6:	88 bb       	out	0x18, r24	; 24
	SPI_PORT |= (0x01 << SPI_MOSI) | (0x01 << SPI_SS) ;
    3fd8:	88 b3       	in	r24, 0x18	; 24
    3fda:	85 60       	ori	r24, 0x05	; 5
    3fdc:	88 bb       	out	0x18, r24	; 24

	// Enable SPI Interface and setup Clock rate clk/16
	//	7		6		5		4		3		2		1		0
	//	SPIE	SPE		DORD	MSTR	CPOL	CPHA	SPR1	SPR0
	//SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1<<CPOL) | (1<<CPHA) ;
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    3fde:	81 e5       	ldi	r24, 0x51	; 81
    3fe0:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X); // Not Use 2X Mode
    3fe2:	70 98       	cbi	0x0e, 0	; 14
	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 33511; Timer1; Timer1--) ;		/* Wait for 100ms  Loop once = 32.2uS, need Loop 311055 times*/
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    3fe4:	82 e5       	ldi	r24, 0x52	; 82
    3fe6:	8d b9       	out	0x0d, r24	; 13
    3fe8:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    3fea:	8f ef       	ldi	r24, 0xFF	; 255
    3fec:	39 de       	rcall	.-910    	; 0x3c60 <xchg_spi>
    3fee:	11 50       	subi	r17, 0x01	; 1
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <mmc_disk_initialize+0xc4>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	ba 01       	movw	r22, r20
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	3f df       	rcall	.-386    	; 0x3e7a <send_cmd>
    3ffc:	81 30       	cpi	r24, 0x01	; 1
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <mmc_disk_initialize+0xdc>
    4000:	e9 c0       	rjmp	.+466    	; 0x41d4 <mmc_disk_initialize+0x2ae>
		Timer1 = 10000;						/* Initialization timeout of 1000 msec, Count times have't compute*/
    4002:	80 e1       	ldi	r24, 0x10	; 16
    4004:	97 e2       	ldi	r25, 0x27	; 39
    4006:	a0 e0       	ldi	r26, 0x00	; 0
    4008:	b0 e0       	ldi	r27, 0x00	; 0
    400a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    400e:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    4012:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    4016:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    401a:	4a ea       	ldi	r20, 0xAA	; 170
    401c:	51 e0       	ldi	r21, 0x01	; 1
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	70 e0       	ldi	r23, 0x00	; 0
    4022:	88 e0       	ldi	r24, 0x08	; 8
    4024:	2a df       	rcall	.-428    	; 0x3e7a <send_cmd>
    4026:	81 30       	cpi	r24, 0x01	; 1
    4028:	09 f0       	breq	.+2      	; 0x402c <mmc_disk_initialize+0x106>
    402a:	6d c0       	rjmp	.+218    	; 0x4106 <mmc_disk_initialize+0x1e0>
    402c:	ce 01       	movw	r24, r28
    402e:	01 96       	adiw	r24, 0x01	; 1
    4030:	6c 01       	movw	r12, r24
    4032:	7e 01       	movw	r14, r28
    4034:	95 e0       	ldi	r25, 0x05	; 5
    4036:	e9 0e       	add	r14, r25
    4038:	f1 1c       	adc	r15, r1
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
    403a:	86 01       	movw	r16, r12
    403c:	8f ef       	ldi	r24, 0xFF	; 255
    403e:	10 de       	rcall	.-992    	; 0x3c60 <xchg_spi>
    4040:	f8 01       	movw	r30, r16
    4042:	81 93       	st	Z+, r24
    4044:	8f 01       	movw	r16, r30
    4046:	ee 15       	cp	r30, r14
    4048:	ff 05       	cpc	r31, r15
    404a:	c1 f7       	brne	.-16     	; 0x403c <mmc_disk_initialize+0x116>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    404c:	8b 81       	ldd	r24, Y+3	; 0x03
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	09 f0       	breq	.+2      	; 0x4054 <mmc_disk_initialize+0x12e>
    4052:	c0 c0       	rjmp	.+384    	; 0x41d4 <mmc_disk_initialize+0x2ae>
    4054:	8c 81       	ldd	r24, Y+4	; 0x04
    4056:	8a 3a       	cpi	r24, 0xAA	; 170
    4058:	09 f0       	breq	.+2      	; 0x405c <mmc_disk_initialize+0x136>
    405a:	bc c0       	rjmp	.+376    	; 0x41d4 <mmc_disk_initialize+0x2ae>
    405c:	1f c0       	rjmp	.+62     	; 0x409c <mmc_disk_initialize+0x176>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) { /* Wait for leaving idle state (ACMD41 with HCS bit) */
					if(Timer1>0) Timer1--;	
    405e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    4062:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    4066:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    406a:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    406e:	89 2b       	or	r24, r25
    4070:	8a 2b       	or	r24, r26
    4072:	8b 2b       	or	r24, r27
    4074:	99 f0       	breq	.+38     	; 0x409c <mmc_disk_initialize+0x176>
    4076:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    407a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    407e:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    4082:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	a1 09       	sbc	r26, r1
    408a:	b1 09       	sbc	r27, r1
    408c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    4090:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    4094:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    4098:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 10000;						/* Initialization timeout of 1000 msec, Count times have't compute*/
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) { /* Wait for leaving idle state (ACMD41 with HCS bit) */
    409c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    40a0:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    40a4:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    40a8:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    40ac:	89 2b       	or	r24, r25
    40ae:	8a 2b       	or	r24, r26
    40b0:	8b 2b       	or	r24, r27
    40b2:	41 f0       	breq	.+16     	; 0x40c4 <mmc_disk_initialize+0x19e>
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	60 e0       	ldi	r22, 0x00	; 0
    40ba:	70 e4       	ldi	r23, 0x40	; 64
    40bc:	89 ea       	ldi	r24, 0xA9	; 169
    40be:	dd de       	rcall	.-582    	; 0x3e7a <send_cmd>
    40c0:	81 11       	cpse	r24, r1
    40c2:	cd cf       	rjmp	.-102    	; 0x405e <mmc_disk_initialize+0x138>
					if(Timer1>0) Timer1--;	
				}
					
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    40c4:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    40c8:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    40cc:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    40d0:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    40d4:	89 2b       	or	r24, r25
    40d6:	8a 2b       	or	r24, r26
    40d8:	8b 2b       	or	r24, r27
    40da:	09 f4       	brne	.+2      	; 0x40de <mmc_disk_initialize+0x1b8>
    40dc:	7b c0       	rjmp	.+246    	; 0x41d4 <mmc_disk_initialize+0x2ae>
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	ba 01       	movw	r22, r20
    40e4:	8a e3       	ldi	r24, 0x3A	; 58
    40e6:	c9 de       	rcall	.-622    	; 0x3e7a <send_cmd>
    40e8:	81 11       	cpse	r24, r1
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    40ea:	74 c0       	rjmp	.+232    	; 0x41d4 <mmc_disk_initialize+0x2ae>
    40ec:	8f ef       	ldi	r24, 0xFF	; 255
    40ee:	b8 dd       	rcall	.-1168   	; 0x3c60 <xchg_spi>
    40f0:	f6 01       	movw	r30, r12
    40f2:	81 93       	st	Z+, r24
    40f4:	6f 01       	movw	r12, r30
    40f6:	ee 15       	cp	r30, r14
    40f8:	ff 05       	cpc	r31, r15
    40fa:	c1 f7       	brne	.-16     	; 0x40ec <mmc_disk_initialize+0x1c6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	86 fd       	sbrc	r24, 6
    4100:	64 c0       	rjmp	.+200    	; 0x41ca <mmc_disk_initialize+0x2a4>
    4102:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    4104:	63 c0       	rjmp	.+198    	; 0x41cc <mmc_disk_initialize+0x2a6>
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	ba 01       	movw	r22, r20
    410c:	89 ea       	ldi	r24, 0xA9	; 169
    410e:	b5 de       	rcall	.-662    	; 0x3e7a <send_cmd>
    4110:	82 30       	cpi	r24, 0x02	; 2
    4112:	18 f0       	brcs	.+6      	; 0x411a <mmc_disk_initialize+0x1f4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    4114:	01 e0       	ldi	r16, 0x01	; 1
    4116:	11 e0       	ldi	r17, 0x01	; 1
    4118:	22 c0       	rjmp	.+68     	; 0x415e <mmc_disk_initialize+0x238>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    411a:	02 e0       	ldi	r16, 0x02	; 2
    411c:	19 ea       	ldi	r17, 0xA9	; 169
    411e:	1f c0       	rjmp	.+62     	; 0x415e <mmc_disk_initialize+0x238>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0)) {			/* Wait for leaving idle state */
				if(Timer1 > 0)Timer1--;
    4120:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    4124:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    4128:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    412c:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    4130:	89 2b       	or	r24, r25
    4132:	8a 2b       	or	r24, r26
    4134:	8b 2b       	or	r24, r27
    4136:	99 f0       	breq	.+38     	; 0x415e <mmc_disk_initialize+0x238>
    4138:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    413c:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    4140:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    4144:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	a1 09       	sbc	r26, r1
    414c:	b1 09       	sbc	r27, r1
    414e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    4152:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    4156:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    415a:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0)) {			/* Wait for leaving idle state */
    415e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    4162:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    4166:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    416a:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    416e:	89 2b       	or	r24, r25
    4170:	8a 2b       	or	r24, r26
    4172:	8b 2b       	or	r24, r27
    4174:	39 f0       	breq	.+14     	; 0x4184 <mmc_disk_initialize+0x25e>
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	ba 01       	movw	r22, r20
    417c:	81 2f       	mov	r24, r17
    417e:	7d de       	rcall	.-774    	; 0x3e7a <send_cmd>
    4180:	81 11       	cpse	r24, r1
    4182:	ce cf       	rjmp	.-100    	; 0x4120 <mmc_disk_initialize+0x1fa>
				if(Timer1 > 0)Timer1--;
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    4184:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    4188:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    418c:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    4190:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    4194:	89 2b       	or	r24, r25
    4196:	8a 2b       	or	r24, r26
    4198:	8b 2b       	or	r24, r27
    419a:	e1 f0       	breq	.+56     	; 0x41d4 <mmc_disk_initialize+0x2ae>
    419c:	40 e0       	ldi	r20, 0x00	; 0
    419e:	52 e0       	ldi	r21, 0x02	; 2
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	80 e1       	ldi	r24, 0x10	; 16
    41a6:	69 de       	rcall	.-814    	; 0x3e7a <send_cmd>
    41a8:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
    41aa:	14 c0       	rjmp	.+40     	; 0x41d4 <mmc_disk_initialize+0x2ae>
    41ac:	00 93 c7 02 	sts	0x02C7, r16	; 0x8002c7 <CardType>
	deselect();
    41b0:	a8 dd       	rcall	.-1200   	; 0x3d02 <deselect>

	if (ty) {			/* Initialization succeded */
    41b2:	00 23       	and	r16, r16
    41b4:	39 f0       	breq	.+14     	; 0x41c4 <mmc_disk_initialize+0x29e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    41b6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    41ba:	8e 7f       	andi	r24, 0xFE	; 254
    41bc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Stat>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    41c0:	80 e5       	ldi	r24, 0x50	; 80
    41c2:	8d b9       	out	0x0d, r24	; 13
    41c4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    41c8:	09 c0       	rjmp	.+18     	; 0x41dc <mmc_disk_initialize+0x2b6>
    41ca:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
    41cc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <CardType>
    41d0:	98 dd       	rcall	.-1232   	; 0x3d02 <deselect>
			}
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    41d2:	f1 cf       	rjmp	.-30     	; 0x41b6 <mmc_disk_initialize+0x290>
    41d4:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <CardType>
	deselect();
    41d8:	94 dd       	rcall	.-1240   	; 0x3d02 <deselect>
    41da:	f4 cf       	rjmp	.-24     	; 0x41c4 <mmc_disk_initialize+0x29e>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	ff 90       	pop	r15
    41ee:	ef 90       	pop	r14
    41f0:	df 90       	pop	r13
    41f2:	cf 90       	pop	r12
    41f4:	08 95       	ret

000041f6 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
    41f6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
}
    41fa:	08 95       	ret

000041fc <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    41fc:	ff 92       	push	r15
    41fe:	0f 93       	push	r16
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	8c 01       	movw	r16, r24
    4208:	e9 01       	movw	r28, r18
	BYTE cmd;


	if (!count) return RES_PARERR;
    420a:	20 97       	sbiw	r28, 0x00	; 0
    420c:	c1 f1       	breq	.+112    	; 0x427e <mmc_disk_read+0x82>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    420e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    4212:	80 fd       	sbrc	r24, 0
    4214:	36 c0       	rjmp	.+108    	; 0x4282 <mmc_disk_read+0x86>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    4216:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <CardType>
    421a:	83 fd       	sbrc	r24, 3
    421c:	09 c0       	rjmp	.+18     	; 0x4230 <mmc_disk_read+0x34>
    421e:	03 2e       	mov	r0, r19
    4220:	39 e0       	ldi	r19, 0x09	; 9
    4222:	44 0f       	add	r20, r20
    4224:	55 1f       	adc	r21, r21
    4226:	66 1f       	adc	r22, r22
    4228:	77 1f       	adc	r23, r23
    422a:	3a 95       	dec	r19
    422c:	d1 f7       	brne	.-12     	; 0x4222 <mmc_disk_read+0x26>
    422e:	30 2d       	mov	r19, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4230:	c2 30       	cpi	r28, 0x02	; 2
    4232:	d1 05       	cpc	r29, r1
    4234:	28 f4       	brcc	.+10     	; 0x4240 <mmc_disk_read+0x44>
    4236:	0f 2e       	mov	r0, r31
    4238:	f1 e1       	ldi	r31, 0x11	; 17
    423a:	ff 2e       	mov	r15, r31
    423c:	f0 2d       	mov	r31, r0
    423e:	04 c0       	rjmp	.+8      	; 0x4248 <mmc_disk_read+0x4c>
    4240:	0f 2e       	mov	r0, r31
    4242:	f2 e1       	ldi	r31, 0x12	; 18
    4244:	ff 2e       	mov	r15, r31
    4246:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    4248:	8f 2d       	mov	r24, r15
    424a:	17 de       	rcall	.-978    	; 0x3e7a <send_cmd>
    424c:	81 11       	cpse	r24, r1
    424e:	11 c0       	rjmp	.+34     	; 0x4272 <mmc_disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	72 e0       	ldi	r23, 0x02	; 2
    4254:	c8 01       	movw	r24, r16
    4256:	74 dd       	rcall	.-1304   	; 0x3d40 <rcvr_datablock>
    4258:	89 2b       	or	r24, r25
    425a:	19 f0       	breq	.+6      	; 0x4262 <mmc_disk_read+0x66>
			buff += 512;
    425c:	1e 5f       	subi	r17, 0xFE	; 254
		} while (--count);
    425e:	21 97       	sbiw	r28, 0x01	; 1
    4260:	b9 f7       	brne	.-18     	; 0x4250 <mmc_disk_read+0x54>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4262:	82 e1       	ldi	r24, 0x12	; 18
    4264:	f8 12       	cpse	r15, r24
    4266:	05 c0       	rjmp	.+10     	; 0x4272 <mmc_disk_read+0x76>
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	ba 01       	movw	r22, r20
    426e:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
    4270:	04 de       	rcall	.-1016   	; 0x3e7a <send_cmd>
    4272:	47 dd       	rcall	.-1394   	; 0x3d02 <deselect>

	return count ? RES_ERROR : RES_OK;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	cd 2b       	or	r28, r29
    4278:	29 f4       	brne	.+10     	; 0x4284 <mmc_disk_read+0x88>
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	03 c0       	rjmp	.+6      	; 0x4284 <mmc_disk_read+0x88>
)
{
	BYTE cmd;


	if (!count) return RES_PARERR;
    427e:	84 e0       	ldi	r24, 0x04	; 4
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <mmc_disk_read+0x88>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4282:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4284:	df 91       	pop	r29
    4286:	cf 91       	pop	r28
    4288:	1f 91       	pop	r17
    428a:	0f 91       	pop	r16
    428c:	ff 90       	pop	r15
    428e:	08 95       	ret

00004290 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4290:	cf 92       	push	r12
    4292:	df 92       	push	r13
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	8c 01       	movw	r16, r24
    42a2:	6a 01       	movw	r12, r20
    42a4:	7b 01       	movw	r14, r22
    42a6:	e9 01       	movw	r28, r18
	if (!count) return RES_PARERR;
    42a8:	20 97       	sbiw	r28, 0x00	; 0
    42aa:	09 f4       	brne	.+2      	; 0x42ae <mmc_disk_write+0x1e>
    42ac:	4c c0       	rjmp	.+152    	; 0x4346 <mmc_disk_write+0xb6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    42ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    42b2:	80 fd       	sbrc	r24, 0
    42b4:	4a c0       	rjmp	.+148    	; 0x434a <mmc_disk_write+0xba>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    42b6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>
    42ba:	82 fd       	sbrc	r24, 2
    42bc:	48 c0       	rjmp	.+144    	; 0x434e <mmc_disk_write+0xbe>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    42be:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <CardType>
    42c2:	83 fd       	sbrc	r24, 3
    42c4:	09 c0       	rjmp	.+18     	; 0x42d8 <mmc_disk_write+0x48>
    42c6:	0b 2e       	mov	r0, r27
    42c8:	b9 e0       	ldi	r27, 0x09	; 9
    42ca:	cc 0c       	add	r12, r12
    42cc:	dd 1c       	adc	r13, r13
    42ce:	ee 1c       	adc	r14, r14
    42d0:	ff 1c       	adc	r15, r15
    42d2:	ba 95       	dec	r27
    42d4:	d1 f7       	brne	.-12     	; 0x42ca <mmc_disk_write+0x3a>
    42d6:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    42d8:	c1 30       	cpi	r28, 0x01	; 1
    42da:	d1 05       	cpc	r29, r1
    42dc:	89 f4       	brne	.+34     	; 0x4300 <mmc_disk_write+0x70>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    42de:	b7 01       	movw	r22, r14
    42e0:	a6 01       	movw	r20, r12
    42e2:	88 e1       	ldi	r24, 0x18	; 24
    42e4:	ca dd       	rcall	.-1132   	; 0x3e7a <send_cmd>
    42e6:	81 11       	cpse	r24, r1
    42e8:	28 c0       	rjmp	.+80     	; 0x433a <mmc_disk_write+0xaa>
			&& xmit_datablock(buff, 0xFE)) {
    42ea:	6e ef       	ldi	r22, 0xFE	; 254
    42ec:	c8 01       	movw	r24, r16
    42ee:	91 dd       	rcall	.-1246   	; 0x3e12 <xmit_datablock>
    42f0:	31 e0       	ldi	r19, 0x01	; 1
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	89 2b       	or	r24, r25
    42f6:	09 f0       	breq	.+2      	; 0x42fa <mmc_disk_write+0x6a>
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	c3 2f       	mov	r28, r19
    42fc:	d2 2f       	mov	r29, r18
    42fe:	1d c0       	rjmp	.+58     	; 0x433a <mmc_disk_write+0xaa>
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4300:	86 70       	andi	r24, 0x06	; 6
    4302:	29 f0       	breq	.+10     	; 0x430e <mmc_disk_write+0x7e>
    4304:	ae 01       	movw	r20, r28
    4306:	60 e0       	ldi	r22, 0x00	; 0
    4308:	70 e0       	ldi	r23, 0x00	; 0
    430a:	87 e9       	ldi	r24, 0x97	; 151
    430c:	b6 dd       	rcall	.-1172   	; 0x3e7a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    430e:	b7 01       	movw	r22, r14
    4310:	a6 01       	movw	r20, r12
    4312:	89 e1       	ldi	r24, 0x19	; 25
    4314:	b2 dd       	rcall	.-1180   	; 0x3e7a <send_cmd>
    4316:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4318:	10 c0       	rjmp	.+32     	; 0x433a <mmc_disk_write+0xaa>
    431a:	6c ef       	ldi	r22, 0xFC	; 252
    431c:	c8 01       	movw	r24, r16
    431e:	79 dd       	rcall	.-1294   	; 0x3e12 <xmit_datablock>
    4320:	89 2b       	or	r24, r25
    4322:	19 f0       	breq	.+6      	; 0x432a <mmc_disk_write+0x9a>
				buff += 512;
    4324:	1e 5f       	subi	r17, 0xFE	; 254
			} while (--count);
    4326:	21 97       	sbiw	r28, 0x01	; 1
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
    4328:	c1 f7       	brne	.-16     	; 0x431a <mmc_disk_write+0x8a>
    432a:	6d ef       	ldi	r22, 0xFD	; 253
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	70 dd       	rcall	.-1312   	; 0x3e12 <xmit_datablock>
    4332:	89 2b       	or	r24, r25
    4334:	11 f4       	brne	.+4      	; 0x433a <mmc_disk_write+0xaa>
    4336:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
	deselect();
    4338:	d0 e0       	ldi	r29, 0x00	; 0
    433a:	e3 dc       	rcall	.-1594   	; 0x3d02 <deselect>

	return count ? RES_ERROR : RES_OK;
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	cd 2b       	or	r28, r29
    4340:	39 f4       	brne	.+14     	; 0x4350 <mmc_disk_write+0xc0>
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <mmc_disk_write+0xc0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
    4346:	84 e0       	ldi	r24, 0x04	; 4
    4348:	03 c0       	rjmp	.+6      	; 0x4350 <mmc_disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    434a:	83 e0       	ldi	r24, 0x03	; 3
    434c:	01 c0       	rjmp	.+2      	; 0x4350 <mmc_disk_write+0xc0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    434e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
    4360:	08 95       	ret

00004362 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    4362:	8f 92       	push	r8
    4364:	9f 92       	push	r9
    4366:	af 92       	push	r10
    4368:	bf 92       	push	r11
    436a:	cf 92       	push	r12
    436c:	df 92       	push	r13
    436e:	ef 92       	push	r14
    4370:	ff 92       	push	r15
    4372:	0f 93       	push	r16
    4374:	1f 93       	push	r17
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	60 97       	sbiw	r28, 0x10	; 16
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	cd bf       	out	0x3d, r28	; 61
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    438a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Stat>
    438e:	90 fd       	sbrc	r25, 0
    4390:	0e c3       	rjmp	.+1564   	; 0x49ae <mmc_disk_ioctl+0x64c>

	res = RES_ERROR;
	switch (cmd) {
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	8a 33       	cpi	r24, 0x3A	; 58
    4396:	91 05       	cpc	r25, r1
    4398:	08 f0       	brcs	.+2      	; 0x439c <mmc_disk_ioctl+0x3a>
    439a:	0b c3       	rjmp	.+1558   	; 0x49b2 <mmc_disk_ioctl+0x650>
    439c:	8b 01       	movw	r16, r22
    439e:	fc 01       	movw	r30, r24
    43a0:	e1 5b       	subi	r30, 0xB1	; 177
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	0c 94 fe 31 	jmp	0x63fc	; 0x63fc <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    43a8:	b4 dc       	rcall	.-1688   	; 0x3d12 <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    43aa:	11 e0       	ldi	r17, 0x01	; 1
    43ac:	89 2b       	or	r24, r25
    43ae:	09 f0       	breq	.+2      	; 0x43b2 <mmc_disk_ioctl+0x50>
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		deselect();
    43b0:	10 e0       	ldi	r17, 0x00	; 0
    43b2:	a7 dc       	rcall	.-1714   	; 0x3d02 <deselect>
		break;
    43b4:	0b c3       	rjmp	.+1558   	; 0x49cc <mmc_disk_ioctl+0x66a>

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    43b6:	40 e0       	ldi	r20, 0x00	; 0
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	ba 01       	movw	r22, r20
    43bc:	89 e0       	ldi	r24, 0x09	; 9
    43be:	5d dd       	rcall	.-1350   	; 0x3e7a <send_cmd>
    43c0:	81 11       	cpse	r24, r1
    43c2:	6d c0       	rjmp	.+218    	; 0x449e <mmc_disk_ioctl+0x13c>
    43c4:	60 e1       	ldi	r22, 0x10	; 16
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	ce 01       	movw	r24, r28
    43ca:	01 96       	adiw	r24, 0x01	; 1
    43cc:	b9 dc       	rcall	.-1678   	; 0x3d40 <rcvr_datablock>
    43ce:	89 2b       	or	r24, r25
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <mmc_disk_ioctl+0x72>
    43d2:	67 c0       	rjmp	.+206    	; 0x44a2 <mmc_disk_ioctl+0x140>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	82 95       	swap	r24
    43d8:	86 95       	lsr	r24
    43da:	86 95       	lsr	r24
    43dc:	83 70       	andi	r24, 0x03	; 3
    43de:	81 30       	cpi	r24, 0x01	; 1
    43e0:	31 f5       	brne	.+76     	; 0x442e <mmc_disk_ioctl+0xcc>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    43e2:	29 85       	ldd	r18, Y+9	; 0x09
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	32 2f       	mov	r19, r18
    43e8:	22 27       	eor	r18, r18
    43ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    43ec:	28 0f       	add	r18, r24
    43ee:	31 1d       	adc	r19, r1
    43f0:	88 85       	ldd	r24, Y+8	; 0x08
    43f2:	8f 73       	andi	r24, 0x3F	; 63
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	a0 e0       	ldi	r26, 0x00	; 0
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	dc 01       	movw	r26, r24
    43fc:	99 27       	eor	r25, r25
    43fe:	88 27       	eor	r24, r24
    4400:	01 96       	adiw	r24, 0x01	; 1
    4402:	a1 1d       	adc	r26, r1
    4404:	b1 1d       	adc	r27, r1
    4406:	82 0f       	add	r24, r18
    4408:	93 1f       	adc	r25, r19
    440a:	a1 1d       	adc	r26, r1
    440c:	b1 1d       	adc	r27, r1
    440e:	07 2e       	mov	r0, r23
    4410:	7a e0       	ldi	r23, 0x0A	; 10
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	aa 1f       	adc	r26, r26
    4418:	bb 1f       	adc	r27, r27
    441a:	7a 95       	dec	r23
    441c:	d1 f7       	brne	.-12     	; 0x4412 <mmc_disk_ioctl+0xb0>
    441e:	70 2d       	mov	r23, r0
    4420:	f8 01       	movw	r30, r16
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	a2 83       	std	Z+2, r26	; 0x02
    4428:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    442a:	10 e0       	ldi	r17, 0x00	; 0
    442c:	3b c0       	rjmp	.+118    	; 0x44a4 <mmc_disk_ioctl+0x142>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    442e:	89 85       	ldd	r24, Y+9	; 0x09
    4430:	82 95       	swap	r24
    4432:	86 95       	lsr	r24
    4434:	86 95       	lsr	r24
    4436:	83 70       	andi	r24, 0x03	; 3
    4438:	28 85       	ldd	r18, Y+8	; 0x08
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	f4 e0       	ldi	r31, 0x04	; 4
    443e:	2f 9f       	mul	r18, r31
    4440:	80 0d       	add	r24, r0
    4442:	91 1d       	adc	r25, r1
    4444:	11 24       	eor	r1, r1
    4446:	9c 01       	movw	r18, r24
    4448:	2f 5f       	subi	r18, 0xFF	; 255
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	9f 81       	ldd	r25, Y+7	; 0x07
    444e:	93 70       	andi	r25, 0x03	; 3
    4450:	89 2f       	mov	r24, r25
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	98 2f       	mov	r25, r24
    4456:	88 27       	eor	r24, r24
    4458:	99 0f       	add	r25, r25
    445a:	99 0f       	add	r25, r25
    445c:	82 0f       	add	r24, r18
    445e:	93 1f       	adc	r25, r19
    4460:	a0 e0       	ldi	r26, 0x00	; 0
    4462:	b0 e0       	ldi	r27, 0x00	; 0
    4464:	3e 81       	ldd	r19, Y+6	; 0x06
    4466:	43 2f       	mov	r20, r19
    4468:	4f 70       	andi	r20, 0x0F	; 15
    446a:	3b 85       	ldd	r19, Y+11	; 0x0b
    446c:	23 2f       	mov	r18, r19
    446e:	22 1f       	adc	r18, r18
    4470:	22 27       	eor	r18, r18
    4472:	22 1f       	adc	r18, r18
    4474:	34 2f       	mov	r19, r20
    4476:	32 0f       	add	r19, r18
    4478:	2a 85       	ldd	r18, Y+10	; 0x0a
    447a:	23 70       	andi	r18, 0x03	; 3
    447c:	22 0f       	add	r18, r18
    447e:	23 0f       	add	r18, r19
    4480:	27 50       	subi	r18, 0x07	; 7
    4482:	04 c0       	rjmp	.+8      	; 0x448c <mmc_disk_ioctl+0x12a>
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	aa 1f       	adc	r26, r26
    448a:	bb 1f       	adc	r27, r27
    448c:	2a 95       	dec	r18
    448e:	d2 f7       	brpl	.-12     	; 0x4484 <mmc_disk_ioctl+0x122>
    4490:	f8 01       	movw	r30, r16
    4492:	80 83       	st	Z, r24
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	a2 83       	std	Z+2, r26	; 0x02
    4498:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    449a:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    449c:	03 c0       	rjmp	.+6      	; 0x44a4 <mmc_disk_ioctl+0x142>
    449e:	11 e0       	ldi	r17, 0x01	; 1
    44a0:	01 c0       	rjmp	.+2      	; 0x44a4 <mmc_disk_ioctl+0x142>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
		}
		deselect();
    44a2:	11 e0       	ldi	r17, 0x01	; 1
    44a4:	2e dc       	rcall	.-1956   	; 0x3d02 <deselect>
		break;
    44a6:	92 c2       	rjmp	.+1316   	; 0x49cc <mmc_disk_ioctl+0x66a>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    44a8:	f0 90 c7 02 	lds	r15, 0x02C7	; 0x8002c7 <CardType>
    44ac:	f2 fe       	sbrs	r15, 2
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    44ae:	2f c0       	rjmp	.+94     	; 0x450e <mmc_disk_ioctl+0x1ac>
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	ba 01       	movw	r22, r20
    44b6:	8d e8       	ldi	r24, 0x8D	; 141
    44b8:	e0 dc       	rcall	.-1600   	; 0x3e7a <send_cmd>
    44ba:	81 11       	cpse	r24, r1
				xchg_spi(0xFF);
    44bc:	85 c0       	rjmp	.+266    	; 0x45c8 <mmc_disk_ioctl+0x266>
    44be:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    44c0:	cf db       	rcall	.-2146   	; 0x3c60 <xchg_spi>
    44c2:	60 e1       	ldi	r22, 0x10	; 16
    44c4:	70 e0       	ldi	r23, 0x00	; 0
    44c6:	ce 01       	movw	r24, r28
    44c8:	01 96       	adiw	r24, 0x01	; 1
    44ca:	3a dc       	rcall	.-1932   	; 0x3d40 <rcvr_datablock>
    44cc:	89 2b       	or	r24, r25
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <mmc_disk_ioctl+0x170>
    44d0:	7d c0       	rjmp	.+250    	; 0x45cc <mmc_disk_ioctl+0x26a>
    44d2:	0f 2e       	mov	r0, r31
    44d4:	f0 e3       	ldi	r31, 0x30	; 48
    44d6:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    44d8:	f0 2d       	mov	r31, r0
    44da:	8f ef       	ldi	r24, 0xFF	; 255
    44dc:	c1 db       	rcall	.-2174   	; 0x3c60 <xchg_spi>
    44de:	fa 94       	dec	r15
    44e0:	f1 10       	cpse	r15, r1
    44e2:	fb cf       	rjmp	.-10     	; 0x44da <mmc_disk_ioctl+0x178>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    44e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    44e6:	22 95       	swap	r18
    44e8:	2f 70       	andi	r18, 0x0F	; 15
    44ea:	80 e1       	ldi	r24, 0x10	; 16
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	a0 e0       	ldi	r26, 0x00	; 0
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	04 c0       	rjmp	.+8      	; 0x44fc <mmc_disk_ioctl+0x19a>
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	aa 1f       	adc	r26, r26
    44fa:	bb 1f       	adc	r27, r27
    44fc:	2a 95       	dec	r18
    44fe:	d2 f7       	brpl	.-12     	; 0x44f4 <mmc_disk_ioctl+0x192>
    4500:	f8 01       	movw	r30, r16
    4502:	80 83       	st	Z, r24
    4504:	91 83       	std	Z+1, r25	; 0x01
    4506:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
    4508:	b3 83       	std	Z+3, r27	; 0x03
    450a:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    450c:	64 c0       	rjmp	.+200    	; 0x45d6 <mmc_disk_ioctl+0x274>
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	ba 01       	movw	r22, r20
    4514:	89 e0       	ldi	r24, 0x09	; 9
    4516:	b1 dc       	rcall	.-1694   	; 0x3e7a <send_cmd>
    4518:	81 11       	cpse	r24, r1
    451a:	5a c0       	rjmp	.+180    	; 0x45d0 <mmc_disk_ioctl+0x26e>
    451c:	60 e1       	ldi	r22, 0x10	; 16
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	ce 01       	movw	r24, r28
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	0d dc       	rcall	.-2022   	; 0x3d40 <rcvr_datablock>
    4526:	89 2b       	or	r24, r25
    4528:	09 f4       	brne	.+2      	; 0x452c <mmc_disk_ioctl+0x1ca>
    452a:	54 c0       	rjmp	.+168    	; 0x45d4 <mmc_disk_ioctl+0x272>
				if (CardType & CT_SD1) {	/* SDv1 */
    452c:	f1 fe       	sbrs	r15, 1
    452e:	22 c0       	rjmp	.+68     	; 0x4574 <mmc_disk_ioctl+0x212>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4530:	8b 85       	ldd	r24, Y+11	; 0x0b
    4532:	8f 73       	andi	r24, 0x3F	; 63
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	9c 01       	movw	r18, r24
    4538:	22 0f       	add	r18, r18
    453a:	33 1f       	adc	r19, r19
    453c:	8c 85       	ldd	r24, Y+12	; 0x0c
    453e:	88 1f       	adc	r24, r24
    4540:	88 27       	eor	r24, r24
    4542:	88 1f       	adc	r24, r24
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	01 96       	adiw	r24, 0x01	; 1
    4548:	82 0f       	add	r24, r18
    454a:	93 1f       	adc	r25, r19
    454c:	2e 85       	ldd	r18, Y+14	; 0x0e
    454e:	22 95       	swap	r18
    4550:	26 95       	lsr	r18
    4552:	26 95       	lsr	r18
    4554:	23 70       	andi	r18, 0x03	; 3
    4556:	21 50       	subi	r18, 0x01	; 1
    4558:	02 c0       	rjmp	.+4      	; 0x455e <mmc_disk_ioctl+0x1fc>
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	2a 95       	dec	r18
    4560:	e2 f7       	brpl	.-8      	; 0x455a <mmc_disk_ioctl+0x1f8>
    4562:	a0 e0       	ldi	r26, 0x00	; 0
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	f8 01       	movw	r30, r16
    4568:	80 83       	st	Z, r24
    456a:	91 83       	std	Z+1, r25	; 0x01
    456c:	a2 83       	std	Z+2, r26	; 0x02
    456e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    4570:	10 e0       	ldi	r17, 0x00	; 0
    4572:	31 c0       	rjmp	.+98     	; 0x45d6 <mmc_disk_ioctl+0x274>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    4574:	8c 85       	ldd	r24, Y+12	; 0x0c
    4576:	28 2f       	mov	r18, r24
    4578:	23 70       	andi	r18, 0x03	; 3
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	22 0f       	add	r18, r18
    457e:	33 1f       	adc	r19, r19
    4580:	22 0f       	add	r18, r18
    4582:	33 1f       	adc	r19, r19
    4584:	22 0f       	add	r18, r18
    4586:	33 1f       	adc	r19, r19
    4588:	82 95       	swap	r24
    458a:	86 95       	lsr	r24
    458c:	87 70       	andi	r24, 0x07	; 7
    458e:	28 0f       	add	r18, r24
    4590:	31 1d       	adc	r19, r1
    4592:	2f 5f       	subi	r18, 0xFF	; 255
    4594:	3f 4f       	sbci	r19, 0xFF	; 255
    4596:	8b 85       	ldd	r24, Y+11	; 0x0b
    4598:	8c 77       	andi	r24, 0x7C	; 124
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	95 95       	asr	r25
    459e:	87 95       	ror	r24
    45a0:	95 95       	asr	r25
    45a2:	87 95       	ror	r24
    45a4:	01 96       	adiw	r24, 0x01	; 1
    45a6:	28 9f       	mul	r18, r24
    45a8:	a0 01       	movw	r20, r0
    45aa:	29 9f       	mul	r18, r25
    45ac:	50 0d       	add	r21, r0
    45ae:	38 9f       	mul	r19, r24
    45b0:	50 0d       	add	r21, r0
    45b2:	11 24       	eor	r1, r1
    45b4:	ca 01       	movw	r24, r20
    45b6:	a0 e0       	ldi	r26, 0x00	; 0
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	f8 01       	movw	r30, r16
    45bc:	80 83       	st	Z, r24
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	a2 83       	std	Z+2, r26	; 0x02
				}
				res = RES_OK;
    45c2:	b3 83       	std	Z+3, r27	; 0x03
    45c4:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    45c6:	07 c0       	rjmp	.+14     	; 0x45d6 <mmc_disk_ioctl+0x274>
    45c8:	11 e0       	ldi	r17, 0x01	; 1
    45ca:	05 c0       	rjmp	.+10     	; 0x45d6 <mmc_disk_ioctl+0x274>
    45cc:	11 e0       	ldi	r17, 0x01	; 1
    45ce:	03 c0       	rjmp	.+6      	; 0x45d6 <mmc_disk_ioctl+0x274>
    45d0:	11 e0       	ldi	r17, 0x01	; 1
    45d2:	01 c0       	rjmp	.+2      	; 0x45d6 <mmc_disk_ioctl+0x274>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		deselect();
    45d4:	11 e0       	ldi	r17, 0x01	; 1
		break;
    45d6:	95 db       	rcall	.-2262   	; 0x3d02 <deselect>

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    45d8:	f9 c1       	rjmp	.+1010   	; 0x49cc <mmc_disk_ioctl+0x66a>
    45da:	f0 90 c7 02 	lds	r15, 0x02C7	; 0x8002c7 <CardType>
    45de:	8f 2d       	mov	r24, r15
    45e0:	86 70       	andi	r24, 0x06	; 6
    45e2:	09 f4       	brne	.+2      	; 0x45e6 <mmc_disk_ioctl+0x284>
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
    45e4:	e8 c1       	rjmp	.+976    	; 0x49b6 <mmc_disk_ioctl+0x654>
    45e6:	be 01       	movw	r22, r28
    45e8:	6f 5f       	subi	r22, 0xFF	; 255
    45ea:	7f 4f       	sbci	r23, 0xFF	; 255
    45ec:	83 e3       	ldi	r24, 0x33	; 51
    45ee:	b9 de       	rcall	.-654    	; 0x4362 <mmc_disk_ioctl>
    45f0:	81 11       	cpse	r24, r1
    45f2:	e3 c1       	rjmp	.+966    	; 0x49ba <mmc_disk_ioctl+0x658>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
    45f4:	89 81       	ldd	r24, Y+1	; 0x01
    45f6:	82 95       	swap	r24
    45f8:	86 95       	lsr	r24
    45fa:	86 95       	lsr	r24
    45fc:	83 70       	andi	r24, 0x03	; 3
    45fe:	19 f4       	brne	.+6      	; 0x4606 <mmc_disk_ioctl+0x2a4>
    4600:	8b 85       	ldd	r24, Y+11	; 0x0b
    4602:	86 ff       	sbrs	r24, 6
    4604:	dc c1       	rjmp	.+952    	; 0x49be <mmc_disk_ioctl+0x65c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
    4606:	f8 01       	movw	r30, r16
    4608:	40 81       	ld	r20, Z
    460a:	51 81       	ldd	r21, Z+1	; 0x01
    460c:	62 81       	ldd	r22, Z+2	; 0x02
    460e:	73 81       	ldd	r23, Z+3	; 0x03
    4610:	84 80       	ldd	r8, Z+4	; 0x04
    4612:	95 80       	ldd	r9, Z+5	; 0x05
    4614:	a6 80       	ldd	r10, Z+6	; 0x06
    4616:	b7 80       	ldd	r11, Z+7	; 0x07
		if (!(CardType & CT_BLOCK)) {
    4618:	f3 fc       	sbrc	r15, 3
    461a:	12 c0       	rjmp	.+36     	; 0x4640 <mmc_disk_ioctl+0x2de>
			st *= 512; ed *= 512;
    461c:	03 2e       	mov	r0, r19
    461e:	39 e0       	ldi	r19, 0x09	; 9
    4620:	44 0f       	add	r20, r20
    4622:	55 1f       	adc	r21, r21
    4624:	66 1f       	adc	r22, r22
    4626:	77 1f       	adc	r23, r23
    4628:	3a 95       	dec	r19
    462a:	d1 f7       	brne	.-12     	; 0x4620 <mmc_disk_ioctl+0x2be>
    462c:	30 2d       	mov	r19, r0
    462e:	07 2e       	mov	r0, r23
    4630:	79 e0       	ldi	r23, 0x09	; 9
    4632:	88 0c       	add	r8, r8
    4634:	99 1c       	adc	r9, r9
    4636:	aa 1c       	adc	r10, r10
    4638:	bb 1c       	adc	r11, r11
    463a:	7a 95       	dec	r23
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
    463c:	d1 f7       	brne	.-12     	; 0x4632 <mmc_disk_ioctl+0x2d0>
    463e:	70 2d       	mov	r23, r0
    4640:	80 e2       	ldi	r24, 0x20	; 32
    4642:	1b dc       	rcall	.-1994   	; 0x3e7a <send_cmd>
    4644:	81 11       	cpse	r24, r1
    4646:	bd c1       	rjmp	.+890    	; 0x49c2 <mmc_disk_ioctl+0x660>
    4648:	b5 01       	movw	r22, r10
    464a:	a4 01       	movw	r20, r8
    464c:	81 e2       	ldi	r24, 0x21	; 33
    464e:	15 dc       	rcall	.-2006   	; 0x3e7a <send_cmd>
    4650:	81 11       	cpse	r24, r1
    4652:	b9 c1       	rjmp	.+882    	; 0x49c6 <mmc_disk_ioctl+0x664>
    4654:	40 e0       	ldi	r20, 0x00	; 0
    4656:	50 e0       	ldi	r21, 0x00	; 0
    4658:	ba 01       	movw	r22, r20
    465a:	86 e2       	ldi	r24, 0x26	; 38
    465c:	0e dc       	rcall	.-2020   	; 0x3e7a <send_cmd>
    465e:	81 11       	cpse	r24, r1
    4660:	b4 c1       	rjmp	.+872    	; 0x49ca <mmc_disk_ioctl+0x668>
    4662:	80 e3       	ldi	r24, 0x30	; 48
    4664:	95 e7       	ldi	r25, 0x75	; 117
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4666:	01 db       	rcall	.-2558   	; 0x3c6a <wait_ready>
    4668:	11 e0       	ldi	r17, 0x01	; 1
    466a:	89 2b       	or	r24, r25
    466c:	09 f4       	brne	.+2      	; 0x4670 <mmc_disk_ioctl+0x30e>
    466e:	ae c1       	rjmp	.+860    	; 0x49cc <mmc_disk_ioctl+0x66a>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    4670:	10 e0       	ldi	r17, 0x00	; 0
    4672:	ac c1       	rjmp	.+856    	; 0x49cc <mmc_disk_ioctl+0x66a>
    4674:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <CardType>
		res = RES_OK;
    4678:	fb 01       	movw	r30, r22
		break;
    467a:	80 83       	st	Z, r24

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    467c:	10 e0       	ldi	r17, 0x00	; 0
    467e:	a6 c1       	rjmp	.+844    	; 0x49cc <mmc_disk_ioctl+0x66a>
    4680:	40 e0       	ldi	r20, 0x00	; 0
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	ba 01       	movw	r22, r20
    4686:	89 e0       	ldi	r24, 0x09	; 9
    4688:	f8 db       	rcall	.-2064   	; 0x3e7a <send_cmd>
    468a:	81 11       	cpse	r24, r1
    468c:	09 c0       	rjmp	.+18     	; 0x46a0 <mmc_disk_ioctl+0x33e>
    468e:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4690:	70 e0       	ldi	r23, 0x00	; 0
    4692:	c8 01       	movw	r24, r16
    4694:	55 db       	rcall	.-2390   	; 0x3d40 <rcvr_datablock>
    4696:	11 e0       	ldi	r17, 0x01	; 1
    4698:	89 2b       	or	r24, r25
    469a:	19 f0       	breq	.+6      	; 0x46a2 <mmc_disk_ioctl+0x340>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
			res = RES_OK;
		}
		deselect();
    469c:	10 e0       	ldi	r17, 0x00	; 0
		break;
    469e:	01 c0       	rjmp	.+2      	; 0x46a2 <mmc_disk_ioctl+0x340>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    46a0:	11 e0       	ldi	r17, 0x01	; 1
    46a2:	2f db       	rcall	.-2466   	; 0x3d02 <deselect>
    46a4:	93 c1       	rjmp	.+806    	; 0x49cc <mmc_disk_ioctl+0x66a>
    46a6:	40 e0       	ldi	r20, 0x00	; 0
    46a8:	50 e0       	ldi	r21, 0x00	; 0
    46aa:	ba 01       	movw	r22, r20
    46ac:	8a e0       	ldi	r24, 0x0A	; 10
    46ae:	e5 db       	rcall	.-2102   	; 0x3e7a <send_cmd>
    46b0:	81 11       	cpse	r24, r1
    46b2:	09 c0       	rjmp	.+18     	; 0x46c6 <mmc_disk_ioctl+0x364>
    46b4:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	c8 01       	movw	r24, r16
    46ba:	42 db       	rcall	.-2428   	; 0x3d40 <rcvr_datablock>
    46bc:	11 e0       	ldi	r17, 0x01	; 1
    46be:	89 2b       	or	r24, r25
    46c0:	19 f0       	breq	.+6      	; 0x46c8 <mmc_disk_ioctl+0x366>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
			res = RES_OK;
		}
		deselect();
    46c2:	10 e0       	ldi	r17, 0x00	; 0
		break;
    46c4:	01 c0       	rjmp	.+2      	; 0x46c8 <mmc_disk_ioctl+0x366>

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    46c6:	11 e0       	ldi	r17, 0x01	; 1
    46c8:	1c db       	rcall	.-2504   	; 0x3d02 <deselect>
    46ca:	80 c1       	rjmp	.+768    	; 0x49cc <mmc_disk_ioctl+0x66a>
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	ba 01       	movw	r22, r20
    46d2:	8a e3       	ldi	r24, 0x3A	; 58
    46d4:	d2 db       	rcall	.-2140   	; 0x3e7a <send_cmd>
    46d6:	81 11       	cpse	r24, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    46d8:	0d c0       	rjmp	.+26     	; 0x46f4 <mmc_disk_ioctl+0x392>
    46da:	78 01       	movw	r14, r16
    46dc:	0c 5f       	subi	r16, 0xFC	; 252
    46de:	1f 4f       	sbci	r17, 0xFF	; 255
    46e0:	8f ef       	ldi	r24, 0xFF	; 255
    46e2:	be da       	rcall	.-2692   	; 0x3c60 <xchg_spi>
    46e4:	f7 01       	movw	r30, r14
    46e6:	81 93       	st	Z+, r24
			res = RES_OK;
    46e8:	7f 01       	movw	r14, r30
    46ea:	0e 17       	cp	r16, r30
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    46ec:	1f 07       	cpc	r17, r31
	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
		}
		deselect();
    46ee:	c1 f7       	brne	.-16     	; 0x46e0 <mmc_disk_ioctl+0x37e>
    46f0:	10 e0       	ldi	r17, 0x00	; 0
		break;
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <mmc_disk_ioctl+0x394>

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    46f4:	11 e0       	ldi	r17, 0x01	; 1
    46f6:	05 db       	rcall	.-2550   	; 0x3d02 <deselect>
    46f8:	69 c1       	rjmp	.+722    	; 0x49cc <mmc_disk_ioctl+0x66a>
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	ba 01       	movw	r22, r20
    4700:	8d e8       	ldi	r24, 0x8D	; 141
    4702:	bb db       	rcall	.-2186   	; 0x3e7a <send_cmd>
			xchg_spi(0xFF);
    4704:	81 11       	cpse	r24, r1
    4706:	0b c0       	rjmp	.+22     	; 0x471e <mmc_disk_ioctl+0x3bc>
    4708:	8f ef       	ldi	r24, 0xFF	; 255
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    470a:	aa da       	rcall	.-2732   	; 0x3c60 <xchg_spi>
    470c:	60 e4       	ldi	r22, 0x40	; 64
    470e:	70 e0       	ldi	r23, 0x00	; 0
    4710:	c8 01       	movw	r24, r16
    4712:	16 db       	rcall	.-2516   	; 0x3d40 <rcvr_datablock>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4714:	11 e0       	ldi	r17, 0x01	; 1
    4716:	89 2b       	or	r24, r25
    4718:	19 f0       	breq	.+6      	; 0x4720 <mmc_disk_ioctl+0x3be>
    471a:	10 e0       	ldi	r17, 0x00	; 0
    471c:	01 c0       	rjmp	.+2      	; 0x4720 <mmc_disk_ioctl+0x3be>
    471e:	11 e0       	ldi	r17, 0x01	; 1
	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
		}
		deselect();
    4720:	f0 da       	rcall	.-2592   	; 0x3d02 <deselect>
    4722:	54 c1       	rjmp	.+680    	; 0x49cc <mmc_disk_ioctl+0x66a>
		break;
    4724:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Stat>

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    4728:	81 60       	ori	r24, 0x01	; 1
    472a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Stat>
    472e:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
    4730:	4d c1       	rjmp	.+666    	; 0x49cc <mmc_disk_ioctl+0x66a>
		break;
    4732:	fb 01       	movw	r30, r22
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4734:	43 81       	ldd	r20, Z+3	; 0x03
    4736:	54 81       	ldd	r21, Z+4	; 0x04
    4738:	65 81       	ldd	r22, Z+5	; 0x05
    473a:	76 81       	ldd	r23, Z+6	; 0x06
    473c:	03 2e       	mov	r0, r19
    473e:	39 e0       	ldi	r19, 0x09	; 9
    4740:	44 0f       	add	r20, r20
    4742:	55 1f       	adc	r21, r21
    4744:	66 1f       	adc	r22, r22
    4746:	77 1f       	adc	r23, r23
    4748:	3a 95       	dec	r19
    474a:	d1 f7       	brne	.-12     	; 0x4740 <mmc_disk_ioctl+0x3de>
    474c:	30 2d       	mov	r19, r0
    474e:	70 68       	ori	r23, 0x80	; 128
    4750:	80 81       	ld	r24, Z
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	a0 e0       	ldi	r26, 0x00	; 0
    4756:	b0 e0       	ldi	r27, 0x00	; 0
    4758:	07 2e       	mov	r0, r23
    475a:	7c e1       	ldi	r23, 0x1C	; 28
    475c:	88 0f       	add	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	aa 1f       	adc	r26, r26
    4762:	bb 1f       	adc	r27, r27
    4764:	7a 95       	dec	r23
    4766:	d1 f7       	brne	.-12     	; 0x475c <mmc_disk_ioctl+0x3fa>
    4768:	70 2d       	mov	r23, r0
    476a:	48 2b       	or	r20, r24
    476c:	59 2b       	or	r21, r25
    476e:	6a 2b       	or	r22, r26
    4770:	7b 2b       	or	r23, r27
    4772:	81 81       	ldd	r24, Z+1	; 0x01
    4774:	92 81       	ldd	r25, Z+2	; 0x02
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	91 70       	andi	r25, 0x01	; 1
    477a:	a0 e0       	ldi	r26, 0x00	; 0
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	48 2b       	or	r20, r24
    4780:	59 2b       	or	r21, r25
    4782:	6a 2b       	or	r22, r26
    4784:	7b 2b       	or	r23, r27
    4786:	80 e3       	ldi	r24, 0x30	; 48
    4788:	78 db       	rcall	.-2320   	; 0x3e7a <send_cmd>
    478a:	81 11       	cpse	r24, r1
    478c:	65 c0       	rjmp	.+202    	; 0x4858 <mmc_disk_ioctl+0x4f6>
    478e:	80 e1       	ldi	r24, 0x10	; 16
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
    4790:	97 e2       	ldi	r25, 0x27	; 39
    4792:	a0 e0       	ldi	r26, 0x00	; 0
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    479a:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    479e:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    47a2:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
    47a6:	1f c0       	rjmp	.+62     	; 0x47e6 <mmc_disk_ioctl+0x484>
    47a8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
				if(Timer1 > 0) Timer1--;
    47ac:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    47b0:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    47b4:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    47b8:	89 2b       	or	r24, r25
    47ba:	8a 2b       	or	r24, r26
    47bc:	8b 2b       	or	r24, r27
    47be:	99 f0       	breq	.+38     	; 0x47e6 <mmc_disk_ioctl+0x484>
    47c0:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    47c4:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    47c8:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    47cc:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	a1 09       	sbc	r26, r1
    47d4:	b1 09       	sbc	r27, r1
    47d6:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Timer1>
    47da:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <Timer1+0x1>
    47de:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <Timer1+0x2>
    47e2:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <Timer1+0x3>
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
    47e6:	8f ef       	ldi	r24, 0xFF	; 255
    47e8:	3b da       	rcall	.-2954   	; 0x3c60 <xchg_spi>
    47ea:	8f 3f       	cpi	r24, 0xFF	; 255
    47ec:	71 f4       	brne	.+28     	; 0x480a <mmc_disk_ioctl+0x4a8>
    47ee:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Timer1>
    47f2:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Timer1+0x1>
    47f6:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <Timer1+0x2>
    47fa:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <Timer1+0x3>
    47fe:	89 2b       	or	r24, r25
    4800:	8a 2b       	or	r24, r26
    4802:	8b 2b       	or	r24, r27
    4804:	89 f6       	brne	.-94     	; 0x47a8 <mmc_disk_ioctl+0x446>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4806:	11 e0       	ldi	r17, 0x01	; 1
    4808:	2c c0       	rjmp	.+88     	; 0x4862 <mmc_disk_ioctl+0x500>
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 10000; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) {	// Set Timer1 = 10000 for delay 100ms, have't compute
				if(Timer1 > 0) Timer1--;
			}
			if (rc == 0xFE) {
    480a:	8e 3f       	cpi	r24, 0xFE	; 254
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    480c:	39 f5       	brne	.+78     	; 0x485c <mmc_disk_ioctl+0x4fa>
    480e:	f8 01       	movw	r30, r16
    4810:	97 81       	ldd	r25, Z+7	; 0x07
    4812:	80 85       	ldd	r24, Z+8	; 0x08
    4814:	e1 80       	ldd	r14, Z+1	; 0x01
    4816:	f2 80       	ldd	r15, Z+2	; 0x02
    4818:	e1 14       	cp	r14, r1
    481a:	f1 04       	cpc	r15, r1
    481c:	a1 f0       	breq	.+40     	; 0x4846 <mmc_disk_ioctl+0x4e4>
    481e:	c9 2e       	mov	r12, r25
    4820:	d8 2e       	mov	r13, r24
    4822:	8f ef       	ldi	r24, 0xFF	; 255
    4824:	1d da       	rcall	.-3014   	; 0x3c60 <xchg_spi>
    4826:	f6 01       	movw	r30, r12
    4828:	81 93       	st	Z+, r24
    482a:	6f 01       	movw	r12, r30
    482c:	f1 e0       	ldi	r31, 0x01	; 1
    482e:	ef 1a       	sub	r14, r31
    4830:	f1 08       	sbc	r15, r1
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4832:	b9 f7       	brne	.-18     	; 0x4822 <mmc_disk_ioctl+0x4c0>
    4834:	f8 01       	movw	r30, r16
    4836:	81 81       	ldd	r24, Z+1	; 0x01
    4838:	92 81       	ldd	r25, Z+2	; 0x02
    483a:	02 e0       	ldi	r16, 0x02	; 2
    483c:	12 e0       	ldi	r17, 0x02	; 2
    483e:	08 1b       	sub	r16, r24
    4840:	19 0b       	sbc	r17, r25
    4842:	19 f4       	brne	.+6      	; 0x484a <mmc_disk_ioctl+0x4e8>
    4844:	0d c0       	rjmp	.+26     	; 0x4860 <mmc_disk_ioctl+0x4fe>
    4846:	02 e0       	ldi	r16, 0x02	; 2
    4848:	12 e0       	ldi	r17, 0x02	; 2
    484a:	8f ef       	ldi	r24, 0xFF	; 255
    484c:	09 da       	rcall	.-3054   	; 0x3c60 <xchg_spi>
    484e:	01 50       	subi	r16, 0x01	; 1
    4850:	11 09       	sbc	r17, r1
    4852:	d9 f7       	brne	.-10     	; 0x484a <mmc_disk_ioctl+0x4e8>
				res = RES_OK;
    4854:	10 e0       	ldi	r17, 0x00	; 0
    4856:	05 c0       	rjmp	.+10     	; 0x4862 <mmc_disk_ioctl+0x500>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4858:	11 e0       	ldi	r17, 0x01	; 1
    485a:	03 c0       	rjmp	.+6      	; 0x4862 <mmc_disk_ioctl+0x500>
    485c:	11 e0       	ldi	r17, 0x01	; 1
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <mmc_disk_ioctl+0x500>
				if(Timer1 > 0) Timer1--;
			}
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
				res = RES_OK;
    4860:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		deselect();
    4862:	4f da       	rcall	.-2914   	; 0x3d02 <deselect>
    4864:	b3 c0       	rjmp	.+358    	; 0x49cc <mmc_disk_ioctl+0x66a>
		break;
    4866:	fb 01       	movw	r30, r22

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4868:	43 81       	ldd	r20, Z+3	; 0x03
    486a:	54 81       	ldd	r21, Z+4	; 0x04
    486c:	65 81       	ldd	r22, Z+5	; 0x05
    486e:	76 81       	ldd	r23, Z+6	; 0x06
    4870:	03 2e       	mov	r0, r19
    4872:	39 e0       	ldi	r19, 0x09	; 9
    4874:	44 0f       	add	r20, r20
    4876:	55 1f       	adc	r21, r21
    4878:	66 1f       	adc	r22, r22
    487a:	77 1f       	adc	r23, r23
    487c:	3a 95       	dec	r19
    487e:	d1 f7       	brne	.-12     	; 0x4874 <mmc_disk_ioctl+0x512>
    4880:	30 2d       	mov	r19, r0
    4882:	70 68       	ori	r23, 0x80	; 128
    4884:	80 81       	ld	r24, Z
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	a0 e0       	ldi	r26, 0x00	; 0
    488a:	b0 e0       	ldi	r27, 0x00	; 0
    488c:	07 2e       	mov	r0, r23
    488e:	7c e1       	ldi	r23, 0x1C	; 28
    4890:	88 0f       	add	r24, r24
    4892:	99 1f       	adc	r25, r25
    4894:	aa 1f       	adc	r26, r26
    4896:	bb 1f       	adc	r27, r27
    4898:	7a 95       	dec	r23
    489a:	d1 f7       	brne	.-12     	; 0x4890 <mmc_disk_ioctl+0x52e>
    489c:	70 2d       	mov	r23, r0
    489e:	48 2b       	or	r20, r24
    48a0:	59 2b       	or	r21, r25
    48a2:	6a 2b       	or	r22, r26
    48a4:	7b 2b       	or	r23, r27
    48a6:	81 81       	ldd	r24, Z+1	; 0x01
    48a8:	92 81       	ldd	r25, Z+2	; 0x02
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	91 70       	andi	r25, 0x01	; 1
    48ae:	a0 e0       	ldi	r26, 0x00	; 0
    48b0:	b0 e0       	ldi	r27, 0x00	; 0
    48b2:	48 2b       	or	r20, r24
    48b4:	59 2b       	or	r21, r25
    48b6:	6a 2b       	or	r22, r26
    48b8:	7b 2b       	or	r23, r27
    48ba:	81 e3       	ldi	r24, 0x31	; 49
    48bc:	de da       	rcall	.-2628   	; 0x3e7a <send_cmd>
			xchg_spi(0xFF); xchg_spi(0xFE);
    48be:	81 11       	cpse	r24, r1
    48c0:	2e c0       	rjmp	.+92     	; 0x491e <mmc_disk_ioctl+0x5bc>
    48c2:	8f ef       	ldi	r24, 0xFF	; 255
    48c4:	cd d9       	rcall	.-3174   	; 0x3c60 <xchg_spi>
    48c6:	8e ef       	ldi	r24, 0xFE	; 254
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    48c8:	cb d9       	rcall	.-3178   	; 0x3c60 <xchg_spi>
    48ca:	f8 01       	movw	r30, r16
    48cc:	97 81       	ldd	r25, Z+7	; 0x07
    48ce:	80 85       	ldd	r24, Z+8	; 0x08
    48d0:	e1 80       	ldd	r14, Z+1	; 0x01
    48d2:	f2 80       	ldd	r15, Z+2	; 0x02
    48d4:	e1 14       	cp	r14, r1
    48d6:	f1 04       	cpc	r15, r1
    48d8:	99 f0       	breq	.+38     	; 0x4900 <mmc_disk_ioctl+0x59e>
    48da:	c9 2e       	mov	r12, r25
    48dc:	d8 2e       	mov	r13, r24
    48de:	f6 01       	movw	r30, r12
    48e0:	81 91       	ld	r24, Z+
    48e2:	6f 01       	movw	r12, r30
    48e4:	bd d9       	rcall	.-3206   	; 0x3c60 <xchg_spi>
    48e6:	f1 e0       	ldi	r31, 0x01	; 1
    48e8:	ef 1a       	sub	r14, r31
    48ea:	f1 08       	sbc	r15, r1
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    48ec:	c1 f7       	brne	.-16     	; 0x48de <mmc_disk_ioctl+0x57c>
    48ee:	f8 01       	movw	r30, r16
    48f0:	81 81       	ldd	r24, Z+1	; 0x01
    48f2:	92 81       	ldd	r25, Z+2	; 0x02
    48f4:	02 e0       	ldi	r16, 0x02	; 2
    48f6:	12 e0       	ldi	r17, 0x02	; 2
    48f8:	08 1b       	sub	r16, r24
    48fa:	19 0b       	sbc	r17, r25
    48fc:	19 f4       	brne	.+6      	; 0x4904 <mmc_disk_ioctl+0x5a2>
    48fe:	07 c0       	rjmp	.+14     	; 0x490e <mmc_disk_ioctl+0x5ac>
    4900:	02 e0       	ldi	r16, 0x02	; 2
    4902:	12 e0       	ldi	r17, 0x02	; 2
    4904:	8f ef       	ldi	r24, 0xFF	; 255
    4906:	ac d9       	rcall	.-3240   	; 0x3c60 <xchg_spi>
    4908:	01 50       	subi	r16, 0x01	; 1
    490a:	11 09       	sbc	r17, r1
    490c:	d9 f7       	brne	.-10     	; 0x4904 <mmc_disk_ioctl+0x5a2>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    490e:	8f ef       	ldi	r24, 0xFF	; 255
    4910:	a7 d9       	rcall	.-3250   	; 0x3c60 <xchg_spi>
    4912:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4914:	11 e0       	ldi	r17, 0x01	; 1
    4916:	85 30       	cpi	r24, 0x05	; 5
    4918:	19 f4       	brne	.+6      	; 0x4920 <mmc_disk_ioctl+0x5be>
    491a:	10 e0       	ldi	r17, 0x00	; 0
    491c:	01 c0       	rjmp	.+2      	; 0x4920 <mmc_disk_ioctl+0x5be>
    491e:	11 e0       	ldi	r17, 0x01	; 1
    4920:	f0 d9       	rcall	.-3104   	; 0x3d02 <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
    4922:	54 c0       	rjmp	.+168    	; 0x49cc <mmc_disk_ioctl+0x66a>
    4924:	fb 01       	movw	r30, r22
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    4926:	43 81       	ldd	r20, Z+3	; 0x03
    4928:	54 81       	ldd	r21, Z+4	; 0x04
    492a:	65 81       	ldd	r22, Z+5	; 0x05
    492c:	76 81       	ldd	r23, Z+6	; 0x06
    492e:	03 2e       	mov	r0, r19
    4930:	39 e0       	ldi	r19, 0x09	; 9
    4932:	44 0f       	add	r20, r20
    4934:	55 1f       	adc	r21, r21
    4936:	66 1f       	adc	r22, r22
    4938:	77 1f       	adc	r23, r23
    493a:	3a 95       	dec	r19
    493c:	d1 f7       	brne	.-12     	; 0x4932 <mmc_disk_ioctl+0x5d0>
    493e:	30 2d       	mov	r19, r0
    4940:	74 68       	ori	r23, 0x84	; 132
    4942:	80 81       	ld	r24, Z
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	a0 e0       	ldi	r26, 0x00	; 0
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	07 2e       	mov	r0, r23
    494c:	7c e1       	ldi	r23, 0x1C	; 28
    494e:	88 0f       	add	r24, r24
    4950:	99 1f       	adc	r25, r25
    4952:	aa 1f       	adc	r26, r26
    4954:	bb 1f       	adc	r27, r27
    4956:	7a 95       	dec	r23
    4958:	d1 f7       	brne	.-12     	; 0x494e <mmc_disk_ioctl+0x5ec>
    495a:	70 2d       	mov	r23, r0
    495c:	48 2b       	or	r20, r24
    495e:	59 2b       	or	r21, r25
    4960:	6a 2b       	or	r22, r26
    4962:	7b 2b       	or	r23, r27
    4964:	82 81       	ldd	r24, Z+2	; 0x02
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	a0 e0       	ldi	r26, 0x00	; 0
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	48 2b       	or	r20, r24
    496e:	59 2b       	or	r21, r25
    4970:	6a 2b       	or	r22, r26
    4972:	7b 2b       	or	r23, r27
			xchg_spi(0xFF); xchg_spi(0xFE);
    4974:	81 e3       	ldi	r24, 0x31	; 49
    4976:	81 da       	rcall	.-2814   	; 0x3e7a <send_cmd>
    4978:	81 11       	cpse	r24, r1
    497a:	16 c0       	rjmp	.+44     	; 0x49a8 <mmc_disk_ioctl+0x646>
    497c:	8f ef       	ldi	r24, 0xFF	; 255
    497e:	70 d9       	rcall	.-3360   	; 0x3c60 <xchg_spi>
			xchg_spi(sdi->ndata);
    4980:	8e ef       	ldi	r24, 0xFE	; 254
    4982:	6e d9       	rcall	.-3364   	; 0x3c60 <xchg_spi>
    4984:	f8 01       	movw	r30, r16
    4986:	81 81       	ldd	r24, Z+1	; 0x01
    4988:	6b d9       	rcall	.-3370   	; 0x3c60 <xchg_spi>
    498a:	01 e0       	ldi	r16, 0x01	; 1
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    498c:	12 e0       	ldi	r17, 0x02	; 2
    498e:	8f ef       	ldi	r24, 0xFF	; 255
    4990:	67 d9       	rcall	.-3378   	; 0x3c60 <xchg_spi>
    4992:	01 50       	subi	r16, 0x01	; 1
    4994:	11 09       	sbc	r17, r1
    4996:	d9 f7       	brne	.-10     	; 0x498e <mmc_disk_ioctl+0x62c>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    4998:	8f ef       	ldi	r24, 0xFF	; 255
    499a:	62 d9       	rcall	.-3388   	; 0x3c60 <xchg_spi>
    499c:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    499e:	11 e0       	ldi	r17, 0x01	; 1
    49a0:	85 30       	cpi	r24, 0x05	; 5
    49a2:	19 f4       	brne	.+6      	; 0x49aa <mmc_disk_ioctl+0x648>
    49a4:	10 e0       	ldi	r17, 0x00	; 0
    49a6:	01 c0       	rjmp	.+2      	; 0x49aa <mmc_disk_ioctl+0x648>
    49a8:	11 e0       	ldi	r17, 0x01	; 1
    49aa:	ab d9       	rcall	.-3242   	; 0x3d02 <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
    49ac:	0f c0       	rjmp	.+30     	; 0x49cc <mmc_disk_ioctl+0x66a>
    49ae:	13 e0       	ldi	r17, 0x03	; 3
		break;
    49b0:	0d c0       	rjmp	.+26     	; 0x49cc <mmc_disk_ioctl+0x66a>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    49b2:	14 e0       	ldi	r17, 0x04	; 4
    49b4:	0b c0       	rjmp	.+22     	; 0x49cc <mmc_disk_ioctl+0x66a>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    49b6:	11 e0       	ldi	r17, 0x01	; 1
    49b8:	09 c0       	rjmp	.+18     	; 0x49cc <mmc_disk_ioctl+0x66a>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    49ba:	11 e0       	ldi	r17, 0x01	; 1
    49bc:	07 c0       	rjmp	.+14     	; 0x49cc <mmc_disk_ioctl+0x66a>
    49be:	11 e0       	ldi	r17, 0x01	; 1
    49c0:	05 c0       	rjmp	.+10     	; 0x49cc <mmc_disk_ioctl+0x66a>
    49c2:	11 e0       	ldi	r17, 0x01	; 1
    49c4:	03 c0       	rjmp	.+6      	; 0x49cc <mmc_disk_ioctl+0x66a>
    49c6:	11 e0       	ldi	r17, 0x01	; 1
    49c8:	01 c0       	rjmp	.+2      	; 0x49cc <mmc_disk_ioctl+0x66a>
    49ca:	11 e0       	ldi	r17, 0x01	; 1
    49cc:	81 2f       	mov	r24, r17
    49ce:	60 96       	adiw	r28, 0x10	; 16
	default:
		res = RES_PARERR;
	}

	return res;
}
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	ff 90       	pop	r15
    49e4:	ef 90       	pop	r14
    49e6:	df 90       	pop	r13
    49e8:	cf 90       	pop	r12
    49ea:	bf 90       	pop	r11
    49ec:	af 90       	pop	r10
    49ee:	9f 90       	pop	r9
    49f0:	8f 90       	pop	r8
    49f2:	08 95       	ret

000049f4 <openTimer0>:
    49f4:	87 b7       	in	r24, 0x37	; 55
    49f6:	82 60       	ori	r24, 0x02	; 2
        break;
        case 3:
            closeTimer3B();
        break;
        default:
            printf("No timer found ...\n");
    49f8:	87 bf       	out	0x37, r24	; 55
    49fa:	78 94       	sei
    49fc:	08 95       	ret

000049fe <getTimer0PrescalerLevel>:
    49fe:	80 34       	cpi	r24, 0x40	; 64
    4a00:	91 05       	cpc	r25, r1
    4a02:	d1 f0       	breq	.+52     	; 0x4a38 <getTimer0PrescalerLevel+0x3a>
    4a04:	48 f4       	brcc	.+18     	; 0x4a18 <getTimer0PrescalerLevel+0x1a>
    4a06:	88 30       	cpi	r24, 0x08	; 8
    4a08:	91 05       	cpc	r25, r1
    4a0a:	91 f0       	breq	.+36     	; 0x4a30 <getTimer0PrescalerLevel+0x32>
    4a0c:	80 32       	cpi	r24, 0x20	; 32
    4a0e:	91 05       	cpc	r25, r1
    4a10:	89 f0       	breq	.+34     	; 0x4a34 <getTimer0PrescalerLevel+0x36>
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	c9 f4       	brne	.+50     	; 0x4a48 <getTimer0PrescalerLevel+0x4a>
    4a16:	1e c0       	rjmp	.+60     	; 0x4a54 <getTimer0PrescalerLevel+0x56>
    4a18:	81 15       	cp	r24, r1
    4a1a:	21 e0       	ldi	r18, 0x01	; 1
    4a1c:	92 07       	cpc	r25, r18
    4a1e:	81 f0       	breq	.+32     	; 0x4a40 <getTimer0PrescalerLevel+0x42>
    4a20:	81 15       	cp	r24, r1
    4a22:	24 e0       	ldi	r18, 0x04	; 4
    4a24:	92 07       	cpc	r25, r18
    4a26:	71 f0       	breq	.+28     	; 0x4a44 <getTimer0PrescalerLevel+0x46>
    4a28:	80 38       	cpi	r24, 0x80	; 128
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	69 f4       	brne	.+26     	; 0x4a48 <getTimer0PrescalerLevel+0x4a>
    4a2e:	06 c0       	rjmp	.+12     	; 0x4a3c <getTimer0PrescalerLevel+0x3e>
    4a30:	82 e0       	ldi	r24, 0x02	; 2
    4a32:	08 95       	ret
    4a34:	83 e0       	ldi	r24, 0x03	; 3
    4a36:	08 95       	ret
    4a38:	84 e0       	ldi	r24, 0x04	; 4
    4a3a:	08 95       	ret
    4a3c:	85 e0       	ldi	r24, 0x05	; 5
    4a3e:	08 95       	ret
    4a40:	86 e0       	ldi	r24, 0x06	; 6
    4a42:	08 95       	ret
    4a44:	87 e0       	ldi	r24, 0x07	; 7
    4a46:	08 95       	ret
    4a48:	8b ef       	ldi	r24, 0xFB	; 251
    4a4a:	91 e0       	ldi	r25, 0x01	; 1
    4a4c:	0e 94 b7 33 	call	0x676e	; 0x676e <puts>
    4a50:	84 e0       	ldi	r24, 0x04	; 4
    4a52:	08 95       	ret
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	08 95       	ret

00004a58 <setTimer0_CompareInterrupt>:
    4a58:	cf 93       	push	r28
    4a5a:	c8 2f       	mov	r28, r24
    4a5c:	93 b7       	in	r25, 0x33	; 51
    4a5e:	98 60       	ori	r25, 0x08	; 8
    4a60:	93 bf       	out	0x33, r25	; 51
    4a62:	cb 01       	movw	r24, r22
    4a64:	cc df       	rcall	.-104    	; 0x49fe <getTimer0PrescalerLevel>
    4a66:	93 b7       	in	r25, 0x33	; 51
    4a68:	89 2b       	or	r24, r25
    4a6a:	83 bf       	out	0x33, r24	; 51
    4a6c:	12 be       	out	0x32, r1	; 50
    4a6e:	c1 bf       	out	0x31, r28	; 49
    4a70:	87 b7       	in	r24, 0x37	; 55
    4a72:	82 60       	ori	r24, 0x02	; 2
    4a74:	87 bf       	out	0x37, r24	; 55
    4a76:	cf 91       	pop	r28
    4a78:	08 95       	ret

00004a7a <getTimer123PrescalerLevel>:
    4a7a:	80 34       	cpi	r24, 0x40	; 64
    4a7c:	91 05       	cpc	r25, r1
    4a7e:	89 f0       	breq	.+34     	; 0x4aa2 <getTimer123PrescalerLevel+0x28>
    4a80:	30 f4       	brcc	.+12     	; 0x4a8e <getTimer123PrescalerLevel+0x14>
    4a82:	81 30       	cpi	r24, 0x01	; 1
    4a84:	91 05       	cpc	r25, r1
    4a86:	c9 f0       	breq	.+50     	; 0x4aba <getTimer123PrescalerLevel+0x40>
    4a88:	08 97       	sbiw	r24, 0x08	; 8
    4a8a:	49 f0       	breq	.+18     	; 0x4a9e <getTimer123PrescalerLevel+0x24>
    4a8c:	10 c0       	rjmp	.+32     	; 0x4aae <getTimer123PrescalerLevel+0x34>
    4a8e:	81 15       	cp	r24, r1
    4a90:	21 e0       	ldi	r18, 0x01	; 1
    4a92:	92 07       	cpc	r25, r18
    4a94:	41 f0       	breq	.+16     	; 0x4aa6 <getTimer123PrescalerLevel+0x2c>
    4a96:	81 15       	cp	r24, r1
    4a98:	94 40       	sbci	r25, 0x04	; 4
    4a9a:	39 f0       	breq	.+14     	; 0x4aaa <getTimer123PrescalerLevel+0x30>
    4a9c:	08 c0       	rjmp	.+16     	; 0x4aae <getTimer123PrescalerLevel+0x34>
    4a9e:	82 e0       	ldi	r24, 0x02	; 2
    4aa0:	08 95       	ret
    4aa2:	83 e0       	ldi	r24, 0x03	; 3
    4aa4:	08 95       	ret
    4aa6:	84 e0       	ldi	r24, 0x04	; 4
    4aa8:	08 95       	ret
    4aaa:	85 e0       	ldi	r24, 0x05	; 5
    4aac:	08 95       	ret
    4aae:	80 e3       	ldi	r24, 0x30	; 48
    4ab0:	92 e0       	ldi	r25, 0x02	; 2
    4ab2:	0e 94 b7 33 	call	0x676e	; 0x676e <puts>
    4ab6:	84 e0       	ldi	r24, 0x04	; 4
    4ab8:	08 95       	ret
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	08 95       	ret

00004abe <setTimerPrescaler>:
        break;
    }
}

void setTimerPrescaler(char whichTimer, uint16_t prescalerLevel){
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	eb 01       	movw	r28, r22
	switch(whichTimer){
    4ac8:	81 30       	cpi	r24, 0x01	; 1
    4aca:	79 f0       	breq	.+30     	; 0x4aea <setTimerPrescaler+0x2c>
    4acc:	28 f0       	brcs	.+10     	; 0x4ad8 <setTimerPrescaler+0x1a>
    4ace:	82 30       	cpi	r24, 0x02	; 2
    4ad0:	c9 f0       	breq	.+50     	; 0x4b04 <setTimerPrescaler+0x46>
    4ad2:	83 30       	cpi	r24, 0x03	; 3
    4ad4:	01 f1       	breq	.+64     	; 0x4b16 <setTimerPrescaler+0x58>
    4ad6:	2b c0       	rjmp	.+86     	; 0x4b2e <setTimerPrescaler+0x70>
		case 0:
			TCCR0 &= ~(0b00000111);
    4ad8:	83 b7       	in	r24, 0x33	; 51
    4ada:	88 7f       	andi	r24, 0xF8	; 248
    4adc:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= getTimer0PrescalerLevel(prescalerLevel);
    4ade:	cb 01       	movw	r24, r22
    4ae0:	8e df       	rcall	.-228    	; 0x49fe <getTimer0PrescalerLevel>
    4ae2:	93 b7       	in	r25, 0x33	; 51
    4ae4:	89 2b       	or	r24, r25
    4ae6:	83 bf       	out	0x33, r24	; 51
		break;
    4ae8:	22 c0       	rjmp	.+68     	; 0x4b2e <setTimerPrescaler+0x70>
		case 1:
			TCCR1B &= ~(0b00000111);
    4aea:	8e b5       	in	r24, 0x2e	; 46
    4aec:	88 7f       	andi	r24, 0xF8	; 248
    4aee:	8e bd       	out	0x2e, r24	; 46
			TCCR1B |= getTimer123PrescalerLevel(prescalerLevel);
    4af0:	cb 01       	movw	r24, r22
    4af2:	c3 df       	rcall	.-122    	; 0x4a7a <getTimer123PrescalerLevel>
    4af4:	9e b5       	in	r25, 0x2e	; 46
    4af6:	89 2b       	or	r24, r25
    4af8:	8e bd       	out	0x2e, r24	; 46
			timerDutyCycle.Prescalar = prescalerLevel; 
    4afa:	d0 93 94 07 	sts	0x0794, r29	; 0x800794 <timerDutyCycle+0x5>
    4afe:	c0 93 93 07 	sts	0x0793, r28	; 0x800793 <timerDutyCycle+0x4>
		break;
    4b02:	15 c0       	rjmp	.+42     	; 0x4b2e <setTimerPrescaler+0x70>
		case 2:
			TCCR2 &= ~(0b00000111);
    4b04:	85 b5       	in	r24, 0x25	; 37
    4b06:	88 7f       	andi	r24, 0xF8	; 248
			TCCR2 |= getTimer123PrescalerLevel(prescalerLevel);
    4b08:	85 bd       	out	0x25, r24	; 37
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	b6 df       	rcall	.-148    	; 0x4a7a <getTimer123PrescalerLevel>
    4b0e:	95 b5       	in	r25, 0x25	; 37
    4b10:	89 2b       	or	r24, r25
    4b12:	85 bd       	out	0x25, r24	; 37
		break;
    4b14:	0c c0       	rjmp	.+24     	; 0x4b2e <setTimerPrescaler+0x70>
		case 3:
			TCCR3B &= ~(0b00000111);
    4b16:	0a e8       	ldi	r16, 0x8A	; 138
    4b18:	10 e0       	ldi	r17, 0x00	; 0
    4b1a:	f8 01       	movw	r30, r16
    4b1c:	80 81       	ld	r24, Z
    4b1e:	88 7f       	andi	r24, 0xF8	; 248
			TCCR3B |= getTimer123PrescalerLevel(prescalerLevel);
    4b20:	80 83       	st	Z, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	aa df       	rcall	.-172    	; 0x4a7a <getTimer123PrescalerLevel>
    4b26:	f8 01       	movw	r30, r16
    4b28:	90 81       	ld	r25, Z
    4b2a:	89 2b       	or	r24, r25
    4b2c:	80 83       	st	Z, r24
		break;
	}
}
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	08 95       	ret

00004b38 <setPWMTimer1Channel>:
void setPWMTimer1Channel(char whichChannel){
	switch(whichChannel){
    4b38:	81 30       	cpi	r24, 0x01	; 1
    4b3a:	61 f0       	breq	.+24     	; 0x4b54 <setPWMTimer1Channel+0x1c>
    4b3c:	18 f0       	brcs	.+6      	; 0x4b44 <setPWMTimer1Channel+0xc>
    4b3e:	82 30       	cpi	r24, 0x02	; 2
    4b40:	89 f0       	breq	.+34     	; 0x4b64 <setPWMTimer1Channel+0x2c>
    4b42:	08 95       	ret
		case ChannelA:
			TCCR1A &= ~(1<<COM1A0);
    4b44:	8f b5       	in	r24, 0x2f	; 47
    4b46:	8f 7b       	andi	r24, 0xBF	; 191
    4b48:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<COM1A1);
    4b4a:	8f b5       	in	r24, 0x2f	; 47
    4b4c:	80 68       	ori	r24, 0x80	; 128
    4b4e:	8f bd       	out	0x2f, r24	; 47
			DDRB |= (1<<PB5);
    4b50:	bd 9a       	sbi	0x17, 5	; 23
		break;
    4b52:	08 95       	ret
		case ChannelB:
			TCCR1A &= ~(1<<COM1B0);
    4b54:	8f b5       	in	r24, 0x2f	; 47
    4b56:	8f 7e       	andi	r24, 0xEF	; 239
    4b58:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<COM1B1);
    4b5a:	8f b5       	in	r24, 0x2f	; 47
    4b5c:	80 62       	ori	r24, 0x20	; 32
    4b5e:	8f bd       	out	0x2f, r24	; 47
			DDRB |= (1<<PB6);
    4b60:	be 9a       	sbi	0x17, 6	; 23
		break;
    4b62:	08 95       	ret
		case ChannelC:
			TCCR1A &= ~(1<<COM1C0);
    4b64:	8f b5       	in	r24, 0x2f	; 47
    4b66:	8b 7f       	andi	r24, 0xFB	; 251
    4b68:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<COM1C1);
    4b6a:	8f b5       	in	r24, 0x2f	; 47
    4b6c:	88 60       	ori	r24, 0x08	; 8
    4b6e:	8f bd       	out	0x2f, r24	; 47
			DDRB |= (1<<PB7);
    4b70:	bf 9a       	sbi	0x17, 7	; 23
    4b72:	08 95       	ret

00004b74 <setTimer1Mode>:
		break;
	}
}
void setTimer1Mode(char mode){
	switch(mode){
    4b74:	8e 30       	cpi	r24, 0x0E	; 14
    4b76:	59 f0       	breq	.+22     	; 0x4b8e <setTimer1Mode+0x1a>
    4b78:	8f 30       	cpi	r24, 0x0F	; 15
    4b7a:	99 f0       	breq	.+38     	; 0x4ba2 <setTimer1Mode+0x2e>
    4b7c:	81 11       	cpse	r24, r1
    4b7e:	17 c0       	rjmp	.+46     	; 0x4bae <setTimer1Mode+0x3a>
		case 0:
			TCCR1A &= ~(1<<WGM10) & ~(1<<WGM11);
    4b80:	8f b5       	in	r24, 0x2f	; 47
    4b82:	8c 7f       	andi	r24, 0xFC	; 252
    4b84:	8f bd       	out	0x2f, r24	; 47
			TCCR1B &= ~(1<<WGM12) & ~(1<<WGM13);
    4b86:	8e b5       	in	r24, 0x2e	; 46
    4b88:	87 7e       	andi	r24, 0xE7	; 231
    4b8a:	8e bd       	out	0x2e, r24	; 46
		break;
    4b8c:	08 95       	ret
		case 14: // fast PWM
			TCCR1A &= ~(1<<WGM10);
    4b8e:	8f b5       	in	r24, 0x2f	; 47
    4b90:	8e 7f       	andi	r24, 0xFE	; 254
    4b92:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<WGM11);
    4b94:	8f b5       	in	r24, 0x2f	; 47
    4b96:	82 60       	ori	r24, 0x02	; 2
    4b98:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= (1<<WGM12) | (1<<WGM13);
    4b9a:	8e b5       	in	r24, 0x2e	; 46
    4b9c:	88 61       	ori	r24, 0x18	; 24
    4b9e:	8e bd       	out	0x2e, r24	; 46
		break;
    4ba0:	08 95       	ret
		case 15: // fast PWM
			TCCR1A |= (1<<WGM10) | (1<<WGM11);
    4ba2:	8f b5       	in	r24, 0x2f	; 47
    4ba4:	83 60       	ori	r24, 0x03	; 3
    4ba6:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= (1<<WGM12) | (1<<WGM13);
    4ba8:	8e b5       	in	r24, 0x2e	; 46
    4baa:	88 61       	ori	r24, 0x18	; 24
    4bac:	8e bd       	out	0x2e, r24	; 46
    4bae:	08 95       	ret

00004bb0 <setPWMFrequency>:
		break;
	}
}

void setPWMFrequency(uint32_t freq){
    4bb0:	cf 93       	push	r28
    4bb2:	df 93       	push	r29
    4bb4:	9b 01       	movw	r18, r22
    4bb6:	ac 01       	movw	r20, r24
	timerDutyCycle.Frequency = freq;
    4bb8:	cf e8       	ldi	r28, 0x8F	; 143
    4bba:	d7 e0       	ldi	r29, 0x07	; 7
    4bbc:	79 83       	std	Y+1, r23	; 0x01
    4bbe:	68 83       	st	Y, r22
	timerDutyCycle.ICRBuff = (11059200)/(timerDutyCycle.Prescalar*freq) - 1;
    4bc0:	ac 81       	ldd	r26, Y+4	; 0x04
    4bc2:	bd 81       	ldd	r27, Y+5	; 0x05
    4bc4:	0e 94 07 32 	call	0x640e	; 0x640e <__muluhisi3>
    4bc8:	9b 01       	movw	r18, r22
    4bca:	ac 01       	movw	r20, r24
    4bcc:	60 e0       	ldi	r22, 0x00	; 0
    4bce:	70 ec       	ldi	r23, 0xC0	; 192
    4bd0:	88 ea       	ldi	r24, 0xA8	; 168
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__udivmodsi4>
    4bd8:	21 50       	subi	r18, 0x01	; 1
    4bda:	31 09       	sbc	r19, r1
    4bdc:	3b 83       	std	Y+3, r19	; 0x03
    4bde:	2a 83       	std	Y+2, r18	; 0x02
	ICR1 = timerDutyCycle.ICRBuff;
    4be0:	37 bd       	out	0x27, r19	; 39
    4be2:	26 bd       	out	0x26, r18	; 38
}
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	08 95       	ret

00004bea <setPWMDutyCycle>:
void setPWMDutyCycle(char whichChannel, float dutyCycle){
    4bea:	cf 92       	push	r12
    4bec:	df 92       	push	r13
    4bee:	ef 92       	push	r14
    4bf0:	ff 92       	push	r15
    4bf2:	6a 01       	movw	r12, r20
    4bf4:	7b 01       	movw	r14, r22
	timerDutyCycle.DutyCyclePercent = dutyCycle;
    4bf6:	40 93 95 07 	sts	0x0795, r20	; 0x800795 <timerDutyCycle+0x6>
    4bfa:	50 93 96 07 	sts	0x0796, r21	; 0x800796 <timerDutyCycle+0x7>
    4bfe:	60 93 97 07 	sts	0x0797, r22	; 0x800797 <timerDutyCycle+0x8>
    4c02:	70 93 98 07 	sts	0x0798, r23	; 0x800798 <timerDutyCycle+0x9>
	switch(whichChannel){
    4c06:	81 30       	cpi	r24, 0x01	; 1
    4c08:	b9 f0       	breq	.+46     	; 0x4c38 <setPWMDutyCycle+0x4e>
    4c0a:	18 f0       	brcs	.+6      	; 0x4c12 <setPWMDutyCycle+0x28>
    4c0c:	82 30       	cpi	r24, 0x02	; 2
    4c0e:	39 f1       	breq	.+78     	; 0x4c5e <setPWMDutyCycle+0x74>
    4c10:	3a c0       	rjmp	.+116    	; 0x4c86 <setPWMDutyCycle+0x9c>
		case ChannelA:
			OCR1A = ((float)timerDutyCycle.ICRBuff * dutyCycle / 100);
    4c12:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <timerDutyCycle+0x2>
    4c16:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <timerDutyCycle+0x3>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	a6 d2       	rcall	.+1356   	; 0x516c <__floatunsisf>
    4c20:	a7 01       	movw	r20, r14
    4c22:	96 01       	movw	r18, r12
    4c24:	31 d3       	rcall	.+1634   	; 0x5288 <__mulsf3>
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	48 ec       	ldi	r20, 0xC8	; 200
    4c2c:	52 e4       	ldi	r21, 0x42	; 66
    4c2e:	05 d2       	rcall	.+1034   	; 0x503a <__divsf3>
    4c30:	71 d2       	rcall	.+1250   	; 0x5114 <__fixunssfsi>
    4c32:	7b bd       	out	0x2b, r23	; 43
    4c34:	6a bd       	out	0x2a, r22	; 42
		break;
    4c36:	27 c0       	rjmp	.+78     	; 0x4c86 <setPWMDutyCycle+0x9c>
		case ChannelB:
			OCR1B = ((float)timerDutyCycle.ICRBuff * dutyCycle / 100);
    4c38:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <timerDutyCycle+0x2>
    4c3c:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <timerDutyCycle+0x3>
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	93 d2       	rcall	.+1318   	; 0x516c <__floatunsisf>
    4c46:	a7 01       	movw	r20, r14
    4c48:	96 01       	movw	r18, r12
    4c4a:	1e d3       	rcall	.+1596   	; 0x5288 <__mulsf3>
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	48 ec       	ldi	r20, 0xC8	; 200
    4c52:	52 e4       	ldi	r21, 0x42	; 66
    4c54:	f2 d1       	rcall	.+996    	; 0x503a <__divsf3>
    4c56:	5e d2       	rcall	.+1212   	; 0x5114 <__fixunssfsi>
    4c58:	79 bd       	out	0x29, r23	; 41
    4c5a:	68 bd       	out	0x28, r22	; 40
		break;
    4c5c:	14 c0       	rjmp	.+40     	; 0x4c86 <setPWMDutyCycle+0x9c>
		case ChannelC:
			OCR1C = ((float)timerDutyCycle.ICRBuff * dutyCycle / 100);
    4c5e:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <timerDutyCycle+0x2>
    4c62:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <timerDutyCycle+0x3>
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	80 d2       	rcall	.+1280   	; 0x516c <__floatunsisf>
    4c6c:	a7 01       	movw	r20, r14
    4c6e:	96 01       	movw	r18, r12
    4c70:	0b d3       	rcall	.+1558   	; 0x5288 <__mulsf3>
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	48 ec       	ldi	r20, 0xC8	; 200
    4c78:	52 e4       	ldi	r21, 0x42	; 66
    4c7a:	df d1       	rcall	.+958    	; 0x503a <__divsf3>
    4c7c:	4b d2       	rcall	.+1174   	; 0x5114 <__fixunssfsi>
    4c7e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    4c82:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    4c86:	ff 90       	pop	r15
		break;
	}
}
    4c88:	ef 90       	pop	r14
    4c8a:	df 90       	pop	r13
    4c8c:	cf 90       	pop	r12
    4c8e:	08 95       	ret

00004c90 <__vector_15>:
// 100 -> 133 hz
// 150 -> 90.91 hz
// 200 -> 66.67 hz

volatile int cnt=0;
ISR(TIMER0_COMP_vect){
    4c90:	1f 92       	push	r1
    4c92:	0f 92       	push	r0
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	0f 92       	push	r0
    4c98:	11 24       	eor	r1, r1
    4c9a:	0b b6       	in	r0, 0x3b	; 59
    4c9c:	0f 92       	push	r0
    4c9e:	2f 93       	push	r18
    4ca0:	3f 93       	push	r19
    4ca2:	4f 93       	push	r20
    4ca4:	5f 93       	push	r21
    4ca6:	6f 93       	push	r22
    4ca8:	7f 93       	push	r23
    4caa:	8f 93       	push	r24
    4cac:	9f 93       	push	r25
    4cae:	af 93       	push	r26
    4cb0:	bf 93       	push	r27
    4cb2:	ef 93       	push	r30
    4cb4:	ff 93       	push	r31
	
	setPWMDutyCycle(ChannelC, data[cnt]);
    4cb6:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <cnt>
    4cba:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <cnt+0x1>
    4cbe:	ee 0f       	add	r30, r30
    4cc0:	ff 1f       	adc	r31, r31
    4cc2:	ee 0f       	add	r30, r30
    4cc4:	ff 1f       	adc	r31, r31
    4cc6:	e7 56       	subi	r30, 0x67	; 103
    4cc8:	f8 4f       	sbci	r31, 0xF8	; 248
    4cca:	40 81       	ld	r20, Z
    4ccc:	51 81       	ldd	r21, Z+1	; 0x01
    4cce:	62 81       	ldd	r22, Z+2	; 0x02
    4cd0:	73 81       	ldd	r23, Z+3	; 0x03
    4cd2:	82 e0       	ldi	r24, 0x02	; 2
    4cd4:	8a df       	rcall	.-236    	; 0x4bea <setPWMDutyCycle>
	//setPWMDutyCycle(ChannelC, sinData[cnt]);
	//OCR1C = data[cnt];
	cnt++;
    4cd6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <cnt>
    4cda:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <cnt+0x1>
    4cde:	01 96       	adiw	r24, 0x01	; 1
    4ce0:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <cnt+0x1>
    4ce4:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <cnt>
	if(cnt >= dataNumbers){
    4ce8:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <cnt>
    4cec:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <cnt+0x1>
    4cf0:	80 39       	cpi	r24, 0x90	; 144
    4cf2:	91 40       	sbci	r25, 0x01	; 1
    4cf4:	2c f0       	brlt	.+10     	; 0x4d00 <__vector_15+0x70>
		cnt = 0;
    4cf6:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <cnt+0x1>
    4cfa:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <cnt>
    4cfe:	ff cf       	rjmp	.-2      	; 0x4cfe <__vector_15+0x6e>
		while(true);
	}
	
}
    4d00:	ff 91       	pop	r31
    4d02:	ef 91       	pop	r30
    4d04:	bf 91       	pop	r27
    4d06:	af 91       	pop	r26
    4d08:	9f 91       	pop	r25
    4d0a:	8f 91       	pop	r24
    4d0c:	7f 91       	pop	r23
    4d0e:	6f 91       	pop	r22
    4d10:	5f 91       	pop	r21
    4d12:	4f 91       	pop	r20
    4d14:	3f 91       	pop	r19
    4d16:	2f 91       	pop	r18
    4d18:	0f 90       	pop	r0
    4d1a:	0b be       	out	0x3b, r0	; 59
    4d1c:	0f 90       	pop	r0
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	0f 90       	pop	r0
    4d22:	1f 90       	pop	r1
    4d24:	18 95       	reti

00004d26 <main>:

int main(void){
    4d26:	cf 93       	push	r28
    4d28:	df 93       	push	r29
    4d2a:	cd b7       	in	r28, 0x3d	; 61
    4d2c:	de b7       	in	r29, 0x3e	; 62
    4d2e:	2a 97       	sbiw	r28, 0x0a	; 10
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	f8 94       	cli
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	cd bf       	out	0x3d, r28	; 61
    ASA_M128_set();
    4d3a:	0e 94 2b 02 	call	0x456	; 0x456 <ASA_M128_set>

	setSDCName("A", "TXT");
    4d3e:	67 e7       	ldi	r22, 0x77	; 119
    4d40:	72 e0       	ldi	r23, 0x02	; 2
    4d42:	85 ea       	ldi	r24, 0xA5	; 165
    4d44:	91 e0       	ldi	r25, 0x01	; 1
    4d46:	0e 94 29 03 	call	0x652	; 0x652 <setSDCName>
	setSDCRead();
    4d4a:	0e 94 03 03 	call	0x606	; 0x606 <setSDCRead>
    4d4e:	08 ee       	ldi	r16, 0xE8	; 232
    4d50:	13 e0       	ldi	r17, 0x03	; 3
	for(int k=0;k<1000;k++){
		char readBuffx[6];
		int calculateDatax = 0;
		initBuffer(readBuffx);
    4d52:	ce 01       	movw	r24, r28
    4d54:	05 96       	adiw	r24, 0x05	; 5
    4d56:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initBuffer>
		getSDCData(readBuffx, 6);
    4d5a:	66 e0       	ldi	r22, 0x06	; 6
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	05 96       	adiw	r24, 0x05	; 5
    4d60:	0e 94 0c 03 	call	0x618	; 0x618 <getSDCData>
		int digitsx = getBufferSizeUseCRLF(readBuffx);
    4d64:	ce 01       	movw	r24, r28
    4d66:	05 96       	adiw	r24, 0x05	; 5
    4d68:	0e 94 39 03 	call	0x672	; 0x672 <getBufferSizeUseCRLF>
    4d6c:	01 50       	subi	r16, 0x01	; 1
    4d6e:	11 09       	sbc	r17, r1
int main(void){
    ASA_M128_set();

	setSDCName("A", "TXT");
	setSDCRead();
	for(int k=0;k<1000;k++){
    4d70:	81 f7       	brne	.-32     	; 0x4d52 <main+0x2c>
    4d72:	0f 2e       	mov	r0, r31
    4d74:	f9 e9       	ldi	r31, 0x99	; 153
    4d76:	8f 2e       	mov	r8, r31
    4d78:	f7 e0       	ldi	r31, 0x07	; 7
    4d7a:	9f 2e       	mov	r9, r31
    4d7c:	f0 2d       	mov	r31, r0
    4d7e:	0f 2e       	mov	r0, r31
    4d80:	f9 ed       	ldi	r31, 0xD9	; 217
    4d82:	6f 2e       	mov	r6, r31
    4d84:	fd e0       	ldi	r31, 0x0D	; 13
    4d86:	7f 2e       	mov	r7, r31
    4d88:	f0 2d       	mov	r31, r0
		int digits = getBufferSizeUseCRLF(readBuff);
		// printf("digits:%d\n", digits);
		
		for(int k=0;k<digits;k++){
			int dpow=1;
			for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    4d8a:	22 24       	eor	r2, r2
    4d8c:	23 94       	inc	r2
    4d8e:	31 2c       	mov	r3, r1
			calculateData += dpow*ascii2num(readBuff[k]);
			// printf("%d\n", ascii2num(readBuff[k]));
		}
		//data[n] = calculateData*25/256;
		data[n] = calculateData*25/256;
		printf("%d\n", calculateData);
    4d90:	0f 2e       	mov	r0, r31
    4d92:	f8 e2       	ldi	r31, 0x28	; 40
    4d94:	4f 2e       	mov	r4, r31
    4d96:	f1 e0       	ldi	r31, 0x01	; 1
    4d98:	5f 2e       	mov	r5, r31
    4d9a:	f0 2d       	mov	r31, r0
	}
	for(uint16_t n=0;n<dataNumbers;n++){
		//PORTA |= (1<<1);
		char readBuff[6];
		int calculateData = 0;
		initBuffer(readBuff);
    4d9c:	ce 01       	movw	r24, r28
    4d9e:	05 96       	adiw	r24, 0x05	; 5
    4da0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initBuffer>
		getSDCData(readBuff, 6);
    4da4:	66 e0       	ldi	r22, 0x06	; 6
    4da6:	ce 01       	movw	r24, r28
    4da8:	05 96       	adiw	r24, 0x05	; 5
    4daa:	0e 94 0c 03 	call	0x618	; 0x618 <getSDCData>
		int digits = getBufferSizeUseCRLF(readBuff);
    4dae:	ce 01       	movw	r24, r28
    4db0:	05 96       	adiw	r24, 0x05	; 5
    4db2:	0e 94 39 03 	call	0x672	; 0x672 <getBufferSizeUseCRLF>
		// printf("digits:%d\n", digits);
		
		for(int k=0;k<digits;k++){
    4db6:	18 16       	cp	r1, r24
    4db8:	19 06       	cpc	r1, r25
    4dba:	c4 f5       	brge	.+112    	; 0x4e2c <main+0x106>
    4dbc:	7c 01       	movw	r14, r24
    4dbe:	21 e0       	ldi	r18, 0x01	; 1
    4dc0:	e2 1a       	sub	r14, r18
    4dc2:	f1 08       	sbc	r15, r1
    4dc4:	5e 01       	movw	r10, r28
    4dc6:	35 e0       	ldi	r19, 0x05	; 5
    4dc8:	a3 0e       	add	r10, r19
    4dca:	b1 1c       	adc	r11, r1
    4dcc:	c1 2c       	mov	r12, r1
    4dce:	d1 2c       	mov	r13, r1
    4dd0:	26 c0       	rjmp	.+76     	; 0x4e1e <main+0xf8>
			int dpow=1;
			for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	02 2d       	mov	r16, r2
    4dd8:	13 2d       	mov	r17, r3
    4dda:	98 01       	movw	r18, r16
    4ddc:	22 0f       	add	r18, r18
    4dde:	33 1f       	adc	r19, r19
    4de0:	00 0f       	add	r16, r16
    4de2:	11 1f       	adc	r17, r17
    4de4:	00 0f       	add	r16, r16
    4de6:	11 1f       	adc	r17, r17
    4de8:	00 0f       	add	r16, r16
    4dea:	11 1f       	adc	r17, r17
    4dec:	02 0f       	add	r16, r18
    4dee:	13 1f       	adc	r17, r19
    4df0:	01 96       	adiw	r24, 0x01	; 1
    4df2:	84 17       	cp	r24, r20
    4df4:	95 07       	cpc	r25, r21
    4df6:	8c f3       	brlt	.-30     	; 0x4dda <main+0xb4>
			calculateData += dpow*ascii2num(readBuff[k]);
    4df8:	f5 01       	movw	r30, r10
    4dfa:	81 91       	ld	r24, Z+
    4dfc:	5f 01       	movw	r10, r30
    4dfe:	0e 94 5f 03 	call	0x6be	; 0x6be <ascii2num>
    4e02:	9c 01       	movw	r18, r24
    4e04:	20 9f       	mul	r18, r16
    4e06:	c0 01       	movw	r24, r0
    4e08:	21 9f       	mul	r18, r17
    4e0a:	90 0d       	add	r25, r0
    4e0c:	30 9f       	mul	r19, r16
    4e0e:	90 0d       	add	r25, r0
    4e10:	11 24       	eor	r1, r1
    4e12:	c8 0e       	add	r12, r24
    4e14:	d9 1e       	adc	r13, r25
    4e16:	31 e0       	ldi	r19, 0x01	; 1
    4e18:	e3 1a       	sub	r14, r19
    4e1a:	f1 08       	sbc	r15, r1
    4e1c:	48 f0       	brcs	.+18     	; 0x4e30 <main+0x10a>
		int digits = getBufferSizeUseCRLF(readBuff);
		// printf("digits:%d\n", digits);
		
		for(int k=0;k<digits;k++){
			int dpow=1;
			for(int j=0;j<(digits-k-1);j++) dpow *= 10;
    4e1e:	a7 01       	movw	r20, r14
    4e20:	1e 14       	cp	r1, r14
    4e22:	1f 04       	cpc	r1, r15
    4e24:	b4 f2       	brlt	.-84     	; 0x4dd2 <main+0xac>
    4e26:	02 2d       	mov	r16, r2
    4e28:	13 2d       	mov	r17, r3
    4e2a:	e6 cf       	rjmp	.-52     	; 0x4df8 <main+0xd2>
		int digitsx = getBufferSizeUseCRLF(readBuffx);
	}
	for(uint16_t n=0;n<dataNumbers;n++){
		//PORTA |= (1<<1);
		char readBuff[6];
		int calculateData = 0;
    4e2c:	c1 2c       	mov	r12, r1
    4e2e:	d1 2c       	mov	r13, r1
			for(int j=0;j<(digits-k-1);j++) dpow *= 10;
			calculateData += dpow*ascii2num(readBuff[k]);
			// printf("%d\n", ascii2num(readBuff[k]));
		}
		//data[n] = calculateData*25/256;
		data[n] = calculateData*25/256;
    4e30:	e9 e1       	ldi	r30, 0x19	; 25
    4e32:	ec 9d       	mul	r30, r12
    4e34:	b0 01       	movw	r22, r0
    4e36:	ed 9d       	mul	r30, r13
    4e38:	70 0d       	add	r23, r0
    4e3a:	11 24       	eor	r1, r1
    4e3c:	77 23       	and	r23, r23
    4e3e:	14 f4       	brge	.+4      	; 0x4e44 <main+0x11e>
    4e40:	61 50       	subi	r22, 0x01	; 1
    4e42:	7f 4f       	sbci	r23, 0xFF	; 255
    4e44:	67 2f       	mov	r22, r23
    4e46:	77 0f       	add	r23, r23
    4e48:	77 0b       	sbc	r23, r23
    4e4a:	07 2e       	mov	r0, r23
    4e4c:	00 0c       	add	r0, r0
    4e4e:	88 0b       	sbc	r24, r24
    4e50:	99 0b       	sbc	r25, r25
    4e52:	8e d1       	rcall	.+796    	; 0x5170 <__floatsisf>
    4e54:	f4 01       	movw	r30, r8
    4e56:	61 93       	st	Z+, r22
    4e58:	71 93       	st	Z+, r23
    4e5a:	81 93       	st	Z+, r24
    4e5c:	91 93       	st	Z+, r25
    4e5e:	4f 01       	movw	r8, r30
		printf("%d\n", calculateData);
    4e60:	df 92       	push	r13
    4e62:	cf 92       	push	r12
    4e64:	5f 92       	push	r5
    4e66:	4f 92       	push	r4
    4e68:	0e 94 a3 33 	call	0x6746	; 0x6746 <printf>
		int calculateDatax = 0;
		initBuffer(readBuffx);
		getSDCData(readBuffx, 6);
		int digitsx = getBufferSizeUseCRLF(readBuffx);
	}
	for(uint16_t n=0;n<dataNumbers;n++){
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	68 14       	cp	r6, r8
    4e76:	79 04       	cpc	r7, r9
    4e78:	09 f0       	breq	.+2      	; 0x4e7c <main+0x156>
    4e7a:	90 cf       	rjmp	.-224    	; 0x4d9c <main+0x76>
		//data[n] = calculateData*25/256;
		data[n] = calculateData*25/256;
		printf("%d\n", calculateData);
		//PORTA &= ~(1<<1);
	}
	closeSDC();
    4e7c:	0e 94 12 03 	call	0x624	; 0x624 <closeSDC>
	
	float fr;
	printf("Enter freq\n");
    4e80:	8b e7       	ldi	r24, 0x7B	; 123
    4e82:	92 e0       	ldi	r25, 0x02	; 2
    4e84:	0e 94 b7 33 	call	0x676e	; 0x676e <puts>
	scanf("%f", &fr);
    4e88:	ce 01       	movw	r24, r28
    4e8a:	01 96       	adiw	r24, 0x01	; 1
    4e8c:	9f 93       	push	r25
    4e8e:	8f 93       	push	r24
    4e90:	86 e8       	ldi	r24, 0x86	; 134
    4e92:	92 e0       	ldi	r25, 0x02	; 2
    4e94:	9f 93       	push	r25
    4e96:	8f 93       	push	r24
    4e98:	0e 94 e7 33 	call	0x67ce	; 0x67ce <scanf>
	SinDataNumbers = 66.67/(fr/200);
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	48 e4       	ldi	r20, 0x48	; 72
    4ea2:	53 e4       	ldi	r21, 0x43	; 67
    4ea4:	69 81       	ldd	r22, Y+1	; 0x01
    4ea6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    4eac:	c6 d0       	rcall	.+396    	; 0x503a <__divsf3>
    4eae:	9b 01       	movw	r18, r22
    4eb0:	ac 01       	movw	r20, r24
    4eb2:	6a e0       	ldi	r22, 0x0A	; 10
    4eb4:	77 e5       	ldi	r23, 0x57	; 87
    4eb6:	85 e8       	ldi	r24, 0x85	; 133
    4eb8:	92 e4       	ldi	r25, 0x42	; 66
    4eba:	bf d0       	rcall	.+382    	; 0x503a <__divsf3>
    4ebc:	26 d1       	rcall	.+588    	; 0x510a <__fixsfsi>
    4ebe:	6b 01       	movw	r12, r22
    4ec0:	70 93 da 0d 	sts	0x0DDA, r23	; 0x800dda <SinDataNumbers+0x1>
    4ec4:	60 93 d9 0d 	sts	0x0DD9, r22	; 0x800dd9 <SinDataNumbers>
	for(int n=0;n<SinDataNumbers;n++){
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
    4ed0:	16 16       	cp	r1, r22
    4ed2:	17 06       	cpc	r1, r23
    4ed4:	b4 f5       	brge	.+108    	; 0x4f42 <main+0x21c>
    4ed6:	0f 2e       	mov	r0, r31
    4ed8:	fb ed       	ldi	r31, 0xDB	; 219
    4eda:	ef 2e       	mov	r14, r31
    4edc:	fd e0       	ldi	r31, 0x0D	; 13
    4ede:	ff 2e       	mov	r15, r31
    4ee0:	f0 2d       	mov	r31, r0
    4ee2:	00 e0       	ldi	r16, 0x00	; 0
    4ee4:	10 e0       	ldi	r17, 0x00	; 0
		sinData[n] = ((sin(2*pi*n/SinDataNumbers))+1) * 50;
    4ee6:	4b 01       	movw	r8, r22
    4ee8:	77 0f       	add	r23, r23
    4eea:	aa 08       	sbc	r10, r10
    4eec:	bb 08       	sbc	r11, r11
    4eee:	b8 01       	movw	r22, r16
    4ef0:	01 2e       	mov	r0, r17
    4ef2:	00 0c       	add	r0, r0
    4ef4:	88 0b       	sbc	r24, r24
    4ef6:	99 0b       	sbc	r25, r25
    4ef8:	3b d1       	rcall	.+630    	; 0x5170 <__floatsisf>
    4efa:	28 ed       	ldi	r18, 0xD8	; 216
    4efc:	3f e0       	ldi	r19, 0x0F	; 15
    4efe:	49 ec       	ldi	r20, 0xC9	; 201
    4f00:	50 e4       	ldi	r21, 0x40	; 64
    4f02:	c2 d1       	rcall	.+900    	; 0x5288 <__mulsf3>
    4f04:	2b 01       	movw	r4, r22
    4f06:	3c 01       	movw	r6, r24
    4f08:	c5 01       	movw	r24, r10
    4f0a:	b4 01       	movw	r22, r8
    4f0c:	31 d1       	rcall	.+610    	; 0x5170 <__floatsisf>
    4f0e:	9b 01       	movw	r18, r22
    4f10:	ac 01       	movw	r20, r24
    4f12:	c3 01       	movw	r24, r6
    4f14:	b2 01       	movw	r22, r4
    4f16:	91 d0       	rcall	.+290    	; 0x503a <__divsf3>
    4f18:	1a d2       	rcall	.+1076   	; 0x534e <sin>
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e8       	ldi	r20, 0x80	; 128
    4f20:	5f e3       	ldi	r21, 0x3F	; 63
    4f22:	27 d0       	rcall	.+78     	; 0x4f72 <__addsf3>
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	48 e4       	ldi	r20, 0x48	; 72
    4f2a:	52 e4       	ldi	r21, 0x42	; 66
    4f2c:	ad d1       	rcall	.+858    	; 0x5288 <__mulsf3>
    4f2e:	f2 d0       	rcall	.+484    	; 0x5114 <__fixunssfsi>
    4f30:	f7 01       	movw	r30, r14
    4f32:	61 93       	st	Z+, r22
    4f34:	71 93       	st	Z+, r23
    4f36:	7f 01       	movw	r14, r30
	
	float fr;
	printf("Enter freq\n");
	scanf("%f", &fr);
	SinDataNumbers = 66.67/(fr/200);
	for(int n=0;n<SinDataNumbers;n++){
    4f38:	0f 5f       	subi	r16, 0xFF	; 255
    4f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3c:	c0 16       	cp	r12, r16
    4f3e:	d1 06       	cpc	r13, r17
		sinData[n] = ((sin(2*pi*n/SinDataNumbers))+1) * 50;
	}
	setTimerPrescaler(1, 1);
    4f40:	b1 f6       	brne	.-84     	; 0x4eee <main+0x1c8>
    4f42:	61 e0       	ldi	r22, 0x01	; 1
    4f44:	70 e0       	ldi	r23, 0x00	; 0
    4f46:	81 e0       	ldi	r24, 0x01	; 1
	setTimer1Mode(14);
    4f48:	ba dd       	rcall	.-1164   	; 0x4abe <setTimerPrescaler>
    4f4a:	8e e0       	ldi	r24, 0x0E	; 14
	setPWMTimer1Channel(ChannelC);
    4f4c:	13 de       	rcall	.-986    	; 0x4b74 <setTimer1Mode>
    4f4e:	82 e0       	ldi	r24, 0x02	; 2
    4f50:	f3 dd       	rcall	.-1050   	; 0x4b38 <setPWMTimer1Channel>
	setPWMFrequency(PWMFrequency);
    4f52:	60 e2       	ldi	r22, 0x20	; 32
    4f54:	7e e4       	ldi	r23, 0x4E	; 78
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	2a de       	rcall	.-940    	; 0x4bb0 <setPWMFrequency>
    4f5c:	60 e0       	ldi	r22, 0x00	; 0
	
	setTimer0_CompareInterrupt(50, 256);
    4f5e:	71 e0       	ldi	r23, 0x01	; 1
    4f60:	82 e3       	ldi	r24, 0x32	; 50
    4f62:	7a dd       	rcall	.-1292   	; 0x4a58 <setTimer0_CompareInterrupt>
    4f64:	47 dd       	rcall	.-1394   	; 0x49f4 <openTimer0>
    4f66:	89 e8       	ldi	r24, 0x89	; 137
	openTimer0();
    4f68:	92 e0       	ldi	r25, 0x02	; 2
    4f6a:	0e 94 b7 33 	call	0x676e	; 0x676e <puts>
	
	printf("Run main code ~~~\n");
    4f6e:	ff cf       	rjmp	.-2      	; 0x4f6e <main+0x248>

00004f70 <__subsf3>:
    4f70:	50 58       	subi	r21, 0x80	; 128

00004f72 <__addsf3>:
    4f72:	bb 27       	eor	r27, r27
    4f74:	aa 27       	eor	r26, r26
    4f76:	0e d0       	rcall	.+28     	; 0x4f94 <__addsf3x>
    4f78:	4d c1       	rjmp	.+666    	; 0x5214 <__fp_round>
    4f7a:	3e d1       	rcall	.+636    	; 0x51f8 <__fp_pscA>
    4f7c:	30 f0       	brcs	.+12     	; 0x4f8a <__addsf3+0x18>
    4f7e:	43 d1       	rcall	.+646    	; 0x5206 <__fp_pscB>
    4f80:	20 f0       	brcs	.+8      	; 0x4f8a <__addsf3+0x18>
    4f82:	31 f4       	brne	.+12     	; 0x4f90 <__addsf3+0x1e>
    4f84:	9f 3f       	cpi	r25, 0xFF	; 255
    4f86:	11 f4       	brne	.+4      	; 0x4f8c <__addsf3+0x1a>
    4f88:	1e f4       	brtc	.+6      	; 0x4f90 <__addsf3+0x1e>
    4f8a:	33 c1       	rjmp	.+614    	; 0x51f2 <__fp_nan>
    4f8c:	0e f4       	brtc	.+2      	; 0x4f90 <__addsf3+0x1e>
    4f8e:	e0 95       	com	r30
    4f90:	e7 fb       	bst	r30, 7
    4f92:	29 c1       	rjmp	.+594    	; 0x51e6 <__fp_inf>

00004f94 <__addsf3x>:
    4f94:	e9 2f       	mov	r30, r25
    4f96:	4f d1       	rcall	.+670    	; 0x5236 <__fp_split3>
    4f98:	80 f3       	brcs	.-32     	; 0x4f7a <__addsf3+0x8>
    4f9a:	ba 17       	cp	r27, r26
    4f9c:	62 07       	cpc	r22, r18
    4f9e:	73 07       	cpc	r23, r19
    4fa0:	84 07       	cpc	r24, r20
    4fa2:	95 07       	cpc	r25, r21
    4fa4:	18 f0       	brcs	.+6      	; 0x4fac <__addsf3x+0x18>
    4fa6:	71 f4       	brne	.+28     	; 0x4fc4 <__addsf3x+0x30>
    4fa8:	9e f5       	brtc	.+102    	; 0x5010 <__addsf3x+0x7c>
    4faa:	67 c1       	rjmp	.+718    	; 0x527a <__fp_zero>
    4fac:	0e f4       	brtc	.+2      	; 0x4fb0 <__addsf3x+0x1c>
    4fae:	e0 95       	com	r30
    4fb0:	0b 2e       	mov	r0, r27
    4fb2:	ba 2f       	mov	r27, r26
    4fb4:	a0 2d       	mov	r26, r0
    4fb6:	0b 01       	movw	r0, r22
    4fb8:	b9 01       	movw	r22, r18
    4fba:	90 01       	movw	r18, r0
    4fbc:	0c 01       	movw	r0, r24
    4fbe:	ca 01       	movw	r24, r20
    4fc0:	a0 01       	movw	r20, r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	ff 27       	eor	r31, r31
    4fc6:	59 1b       	sub	r21, r25
    4fc8:	99 f0       	breq	.+38     	; 0x4ff0 <__addsf3x+0x5c>
    4fca:	59 3f       	cpi	r21, 0xF9	; 249
    4fcc:	50 f4       	brcc	.+20     	; 0x4fe2 <__addsf3x+0x4e>
    4fce:	50 3e       	cpi	r21, 0xE0	; 224
    4fd0:	68 f1       	brcs	.+90     	; 0x502c <__addsf3x+0x98>
    4fd2:	1a 16       	cp	r1, r26
    4fd4:	f0 40       	sbci	r31, 0x00	; 0
    4fd6:	a2 2f       	mov	r26, r18
    4fd8:	23 2f       	mov	r18, r19
    4fda:	34 2f       	mov	r19, r20
    4fdc:	44 27       	eor	r20, r20
    4fde:	58 5f       	subi	r21, 0xF8	; 248
    4fe0:	f3 cf       	rjmp	.-26     	; 0x4fc8 <__addsf3x+0x34>
    4fe2:	46 95       	lsr	r20
    4fe4:	37 95       	ror	r19
    4fe6:	27 95       	ror	r18
    4fe8:	a7 95       	ror	r26
    4fea:	f0 40       	sbci	r31, 0x00	; 0
    4fec:	53 95       	inc	r21
    4fee:	c9 f7       	brne	.-14     	; 0x4fe2 <__addsf3x+0x4e>
    4ff0:	7e f4       	brtc	.+30     	; 0x5010 <__addsf3x+0x7c>
    4ff2:	1f 16       	cp	r1, r31
    4ff4:	ba 0b       	sbc	r27, r26
    4ff6:	62 0b       	sbc	r22, r18
    4ff8:	73 0b       	sbc	r23, r19
    4ffa:	84 0b       	sbc	r24, r20
    4ffc:	ba f0       	brmi	.+46     	; 0x502c <__addsf3x+0x98>
    4ffe:	91 50       	subi	r25, 0x01	; 1
    5000:	a1 f0       	breq	.+40     	; 0x502a <__addsf3x+0x96>
    5002:	ff 0f       	add	r31, r31
    5004:	bb 1f       	adc	r27, r27
    5006:	66 1f       	adc	r22, r22
    5008:	77 1f       	adc	r23, r23
    500a:	88 1f       	adc	r24, r24
    500c:	c2 f7       	brpl	.-16     	; 0x4ffe <__addsf3x+0x6a>
    500e:	0e c0       	rjmp	.+28     	; 0x502c <__addsf3x+0x98>
    5010:	ba 0f       	add	r27, r26
    5012:	62 1f       	adc	r22, r18
    5014:	73 1f       	adc	r23, r19
    5016:	84 1f       	adc	r24, r20
    5018:	48 f4       	brcc	.+18     	; 0x502c <__addsf3x+0x98>
    501a:	87 95       	ror	r24
    501c:	77 95       	ror	r23
    501e:	67 95       	ror	r22
    5020:	b7 95       	ror	r27
    5022:	f7 95       	ror	r31
    5024:	9e 3f       	cpi	r25, 0xFE	; 254
    5026:	08 f0       	brcs	.+2      	; 0x502a <__addsf3x+0x96>
    5028:	b3 cf       	rjmp	.-154    	; 0x4f90 <__addsf3+0x1e>
    502a:	93 95       	inc	r25
    502c:	88 0f       	add	r24, r24
    502e:	08 f0       	brcs	.+2      	; 0x5032 <__addsf3x+0x9e>
    5030:	99 27       	eor	r25, r25
    5032:	ee 0f       	add	r30, r30
    5034:	97 95       	ror	r25
    5036:	87 95       	ror	r24
    5038:	08 95       	ret

0000503a <__divsf3>:
    503a:	0c d0       	rcall	.+24     	; 0x5054 <__divsf3x>
    503c:	eb c0       	rjmp	.+470    	; 0x5214 <__fp_round>
    503e:	e3 d0       	rcall	.+454    	; 0x5206 <__fp_pscB>
    5040:	40 f0       	brcs	.+16     	; 0x5052 <__divsf3+0x18>
    5042:	da d0       	rcall	.+436    	; 0x51f8 <__fp_pscA>
    5044:	30 f0       	brcs	.+12     	; 0x5052 <__divsf3+0x18>
    5046:	21 f4       	brne	.+8      	; 0x5050 <__divsf3+0x16>
    5048:	5f 3f       	cpi	r21, 0xFF	; 255
    504a:	19 f0       	breq	.+6      	; 0x5052 <__divsf3+0x18>
    504c:	cc c0       	rjmp	.+408    	; 0x51e6 <__fp_inf>
    504e:	51 11       	cpse	r21, r1
    5050:	15 c1       	rjmp	.+554    	; 0x527c <__fp_szero>
    5052:	cf c0       	rjmp	.+414    	; 0x51f2 <__fp_nan>

00005054 <__divsf3x>:
    5054:	f0 d0       	rcall	.+480    	; 0x5236 <__fp_split3>
    5056:	98 f3       	brcs	.-26     	; 0x503e <__divsf3+0x4>

00005058 <__divsf3_pse>:
    5058:	99 23       	and	r25, r25
    505a:	c9 f3       	breq	.-14     	; 0x504e <__divsf3+0x14>
    505c:	55 23       	and	r21, r21
    505e:	b1 f3       	breq	.-20     	; 0x504c <__divsf3+0x12>
    5060:	95 1b       	sub	r25, r21
    5062:	55 0b       	sbc	r21, r21
    5064:	bb 27       	eor	r27, r27
    5066:	aa 27       	eor	r26, r26
    5068:	62 17       	cp	r22, r18
    506a:	73 07       	cpc	r23, r19
    506c:	84 07       	cpc	r24, r20
    506e:	38 f0       	brcs	.+14     	; 0x507e <__divsf3_pse+0x26>
    5070:	9f 5f       	subi	r25, 0xFF	; 255
    5072:	5f 4f       	sbci	r21, 0xFF	; 255
    5074:	22 0f       	add	r18, r18
    5076:	33 1f       	adc	r19, r19
    5078:	44 1f       	adc	r20, r20
    507a:	aa 1f       	adc	r26, r26
    507c:	a9 f3       	breq	.-22     	; 0x5068 <__divsf3_pse+0x10>
    507e:	33 d0       	rcall	.+102    	; 0x50e6 <__divsf3_pse+0x8e>
    5080:	0e 2e       	mov	r0, r30
    5082:	3a f0       	brmi	.+14     	; 0x5092 <__divsf3_pse+0x3a>
    5084:	e0 e8       	ldi	r30, 0x80	; 128
    5086:	30 d0       	rcall	.+96     	; 0x50e8 <__divsf3_pse+0x90>
    5088:	91 50       	subi	r25, 0x01	; 1
    508a:	50 40       	sbci	r21, 0x00	; 0
    508c:	e6 95       	lsr	r30
    508e:	00 1c       	adc	r0, r0
    5090:	ca f7       	brpl	.-14     	; 0x5084 <__divsf3_pse+0x2c>
    5092:	29 d0       	rcall	.+82     	; 0x50e6 <__divsf3_pse+0x8e>
    5094:	fe 2f       	mov	r31, r30
    5096:	27 d0       	rcall	.+78     	; 0x50e6 <__divsf3_pse+0x8e>
    5098:	66 0f       	add	r22, r22
    509a:	77 1f       	adc	r23, r23
    509c:	88 1f       	adc	r24, r24
    509e:	bb 1f       	adc	r27, r27
    50a0:	26 17       	cp	r18, r22
    50a2:	37 07       	cpc	r19, r23
    50a4:	48 07       	cpc	r20, r24
    50a6:	ab 07       	cpc	r26, r27
    50a8:	b0 e8       	ldi	r27, 0x80	; 128
    50aa:	09 f0       	breq	.+2      	; 0x50ae <__divsf3_pse+0x56>
    50ac:	bb 0b       	sbc	r27, r27
    50ae:	80 2d       	mov	r24, r0
    50b0:	bf 01       	movw	r22, r30
    50b2:	ff 27       	eor	r31, r31
    50b4:	93 58       	subi	r25, 0x83	; 131
    50b6:	5f 4f       	sbci	r21, 0xFF	; 255
    50b8:	2a f0       	brmi	.+10     	; 0x50c4 <__divsf3_pse+0x6c>
    50ba:	9e 3f       	cpi	r25, 0xFE	; 254
    50bc:	51 05       	cpc	r21, r1
    50be:	68 f0       	brcs	.+26     	; 0x50da <__divsf3_pse+0x82>
    50c0:	92 c0       	rjmp	.+292    	; 0x51e6 <__fp_inf>
    50c2:	dc c0       	rjmp	.+440    	; 0x527c <__fp_szero>
    50c4:	5f 3f       	cpi	r21, 0xFF	; 255
    50c6:	ec f3       	brlt	.-6      	; 0x50c2 <__divsf3_pse+0x6a>
    50c8:	98 3e       	cpi	r25, 0xE8	; 232
    50ca:	dc f3       	brlt	.-10     	; 0x50c2 <__divsf3_pse+0x6a>
    50cc:	86 95       	lsr	r24
    50ce:	77 95       	ror	r23
    50d0:	67 95       	ror	r22
    50d2:	b7 95       	ror	r27
    50d4:	f7 95       	ror	r31
    50d6:	9f 5f       	subi	r25, 0xFF	; 255
    50d8:	c9 f7       	brne	.-14     	; 0x50cc <__divsf3_pse+0x74>
    50da:	88 0f       	add	r24, r24
    50dc:	91 1d       	adc	r25, r1
    50de:	96 95       	lsr	r25
    50e0:	87 95       	ror	r24
    50e2:	97 f9       	bld	r25, 7
    50e4:	08 95       	ret
    50e6:	e1 e0       	ldi	r30, 0x01	; 1
    50e8:	66 0f       	add	r22, r22
    50ea:	77 1f       	adc	r23, r23
    50ec:	88 1f       	adc	r24, r24
    50ee:	bb 1f       	adc	r27, r27
    50f0:	62 17       	cp	r22, r18
    50f2:	73 07       	cpc	r23, r19
    50f4:	84 07       	cpc	r24, r20
    50f6:	ba 07       	cpc	r27, r26
    50f8:	20 f0       	brcs	.+8      	; 0x5102 <__divsf3_pse+0xaa>
    50fa:	62 1b       	sub	r22, r18
    50fc:	73 0b       	sbc	r23, r19
    50fe:	84 0b       	sbc	r24, r20
    5100:	ba 0b       	sbc	r27, r26
    5102:	ee 1f       	adc	r30, r30
    5104:	88 f7       	brcc	.-30     	; 0x50e8 <__divsf3_pse+0x90>
    5106:	e0 95       	com	r30
    5108:	08 95       	ret

0000510a <__fixsfsi>:
    510a:	04 d0       	rcall	.+8      	; 0x5114 <__fixunssfsi>
    510c:	68 94       	set
    510e:	b1 11       	cpse	r27, r1
    5110:	b5 c0       	rjmp	.+362    	; 0x527c <__fp_szero>
    5112:	08 95       	ret

00005114 <__fixunssfsi>:
    5114:	98 d0       	rcall	.+304    	; 0x5246 <__fp_splitA>
    5116:	88 f0       	brcs	.+34     	; 0x513a <__fixunssfsi+0x26>
    5118:	9f 57       	subi	r25, 0x7F	; 127
    511a:	90 f0       	brcs	.+36     	; 0x5140 <__fixunssfsi+0x2c>
    511c:	b9 2f       	mov	r27, r25
    511e:	99 27       	eor	r25, r25
    5120:	b7 51       	subi	r27, 0x17	; 23
    5122:	a0 f0       	brcs	.+40     	; 0x514c <__fixunssfsi+0x38>
    5124:	d1 f0       	breq	.+52     	; 0x515a <__fixunssfsi+0x46>
    5126:	66 0f       	add	r22, r22
    5128:	77 1f       	adc	r23, r23
    512a:	88 1f       	adc	r24, r24
    512c:	99 1f       	adc	r25, r25
    512e:	1a f0       	brmi	.+6      	; 0x5136 <__fixunssfsi+0x22>
    5130:	ba 95       	dec	r27
    5132:	c9 f7       	brne	.-14     	; 0x5126 <__fixunssfsi+0x12>
    5134:	12 c0       	rjmp	.+36     	; 0x515a <__fixunssfsi+0x46>
    5136:	b1 30       	cpi	r27, 0x01	; 1
    5138:	81 f0       	breq	.+32     	; 0x515a <__fixunssfsi+0x46>
    513a:	9f d0       	rcall	.+318    	; 0x527a <__fp_zero>
    513c:	b1 e0       	ldi	r27, 0x01	; 1
    513e:	08 95       	ret
    5140:	9c c0       	rjmp	.+312    	; 0x527a <__fp_zero>
    5142:	67 2f       	mov	r22, r23
    5144:	78 2f       	mov	r23, r24
    5146:	88 27       	eor	r24, r24
    5148:	b8 5f       	subi	r27, 0xF8	; 248
    514a:	39 f0       	breq	.+14     	; 0x515a <__fixunssfsi+0x46>
    514c:	b9 3f       	cpi	r27, 0xF9	; 249
    514e:	cc f3       	brlt	.-14     	; 0x5142 <__fixunssfsi+0x2e>
    5150:	86 95       	lsr	r24
    5152:	77 95       	ror	r23
    5154:	67 95       	ror	r22
    5156:	b3 95       	inc	r27
    5158:	d9 f7       	brne	.-10     	; 0x5150 <__fixunssfsi+0x3c>
    515a:	3e f4       	brtc	.+14     	; 0x516a <__fixunssfsi+0x56>
    515c:	90 95       	com	r25
    515e:	80 95       	com	r24
    5160:	70 95       	com	r23
    5162:	61 95       	neg	r22
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	8f 4f       	sbci	r24, 0xFF	; 255
    5168:	9f 4f       	sbci	r25, 0xFF	; 255
    516a:	08 95       	ret

0000516c <__floatunsisf>:
    516c:	e8 94       	clt
    516e:	09 c0       	rjmp	.+18     	; 0x5182 <__floatsisf+0x12>

00005170 <__floatsisf>:
    5170:	97 fb       	bst	r25, 7
    5172:	3e f4       	brtc	.+14     	; 0x5182 <__floatsisf+0x12>
    5174:	90 95       	com	r25
    5176:	80 95       	com	r24
    5178:	70 95       	com	r23
    517a:	61 95       	neg	r22
    517c:	7f 4f       	sbci	r23, 0xFF	; 255
    517e:	8f 4f       	sbci	r24, 0xFF	; 255
    5180:	9f 4f       	sbci	r25, 0xFF	; 255
    5182:	99 23       	and	r25, r25
    5184:	a9 f0       	breq	.+42     	; 0x51b0 <__floatsisf+0x40>
    5186:	f9 2f       	mov	r31, r25
    5188:	96 e9       	ldi	r25, 0x96	; 150
    518a:	bb 27       	eor	r27, r27
    518c:	93 95       	inc	r25
    518e:	f6 95       	lsr	r31
    5190:	87 95       	ror	r24
    5192:	77 95       	ror	r23
    5194:	67 95       	ror	r22
    5196:	b7 95       	ror	r27
    5198:	f1 11       	cpse	r31, r1
    519a:	f8 cf       	rjmp	.-16     	; 0x518c <__floatsisf+0x1c>
    519c:	fa f4       	brpl	.+62     	; 0x51dc <__floatsisf+0x6c>
    519e:	bb 0f       	add	r27, r27
    51a0:	11 f4       	brne	.+4      	; 0x51a6 <__floatsisf+0x36>
    51a2:	60 ff       	sbrs	r22, 0
    51a4:	1b c0       	rjmp	.+54     	; 0x51dc <__floatsisf+0x6c>
    51a6:	6f 5f       	subi	r22, 0xFF	; 255
    51a8:	7f 4f       	sbci	r23, 0xFF	; 255
    51aa:	8f 4f       	sbci	r24, 0xFF	; 255
    51ac:	9f 4f       	sbci	r25, 0xFF	; 255
    51ae:	16 c0       	rjmp	.+44     	; 0x51dc <__floatsisf+0x6c>
    51b0:	88 23       	and	r24, r24
    51b2:	11 f0       	breq	.+4      	; 0x51b8 <__floatsisf+0x48>
    51b4:	96 e9       	ldi	r25, 0x96	; 150
    51b6:	11 c0       	rjmp	.+34     	; 0x51da <__floatsisf+0x6a>
    51b8:	77 23       	and	r23, r23
    51ba:	21 f0       	breq	.+8      	; 0x51c4 <__floatsisf+0x54>
    51bc:	9e e8       	ldi	r25, 0x8E	; 142
    51be:	87 2f       	mov	r24, r23
    51c0:	76 2f       	mov	r23, r22
    51c2:	05 c0       	rjmp	.+10     	; 0x51ce <__floatsisf+0x5e>
    51c4:	66 23       	and	r22, r22
    51c6:	71 f0       	breq	.+28     	; 0x51e4 <__floatsisf+0x74>
    51c8:	96 e8       	ldi	r25, 0x86	; 134
    51ca:	86 2f       	mov	r24, r22
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	60 e0       	ldi	r22, 0x00	; 0
    51d0:	2a f0       	brmi	.+10     	; 0x51dc <__floatsisf+0x6c>
    51d2:	9a 95       	dec	r25
    51d4:	66 0f       	add	r22, r22
    51d6:	77 1f       	adc	r23, r23
    51d8:	88 1f       	adc	r24, r24
    51da:	da f7       	brpl	.-10     	; 0x51d2 <__floatsisf+0x62>
    51dc:	88 0f       	add	r24, r24
    51de:	96 95       	lsr	r25
    51e0:	87 95       	ror	r24
    51e2:	97 f9       	bld	r25, 7
    51e4:	08 95       	ret

000051e6 <__fp_inf>:
    51e6:	97 f9       	bld	r25, 7
    51e8:	9f 67       	ori	r25, 0x7F	; 127
    51ea:	80 e8       	ldi	r24, 0x80	; 128
    51ec:	70 e0       	ldi	r23, 0x00	; 0
    51ee:	60 e0       	ldi	r22, 0x00	; 0
    51f0:	08 95       	ret

000051f2 <__fp_nan>:
    51f2:	9f ef       	ldi	r25, 0xFF	; 255
    51f4:	80 ec       	ldi	r24, 0xC0	; 192
    51f6:	08 95       	ret

000051f8 <__fp_pscA>:
    51f8:	00 24       	eor	r0, r0
    51fa:	0a 94       	dec	r0
    51fc:	16 16       	cp	r1, r22
    51fe:	17 06       	cpc	r1, r23
    5200:	18 06       	cpc	r1, r24
    5202:	09 06       	cpc	r0, r25
    5204:	08 95       	ret

00005206 <__fp_pscB>:
    5206:	00 24       	eor	r0, r0
    5208:	0a 94       	dec	r0
    520a:	12 16       	cp	r1, r18
    520c:	13 06       	cpc	r1, r19
    520e:	14 06       	cpc	r1, r20
    5210:	05 06       	cpc	r0, r21
    5212:	08 95       	ret

00005214 <__fp_round>:
    5214:	09 2e       	mov	r0, r25
    5216:	03 94       	inc	r0
    5218:	00 0c       	add	r0, r0
    521a:	11 f4       	brne	.+4      	; 0x5220 <__fp_round+0xc>
    521c:	88 23       	and	r24, r24
    521e:	52 f0       	brmi	.+20     	; 0x5234 <__fp_round+0x20>
    5220:	bb 0f       	add	r27, r27
    5222:	40 f4       	brcc	.+16     	; 0x5234 <__fp_round+0x20>
    5224:	bf 2b       	or	r27, r31
    5226:	11 f4       	brne	.+4      	; 0x522c <__fp_round+0x18>
    5228:	60 ff       	sbrs	r22, 0
    522a:	04 c0       	rjmp	.+8      	; 0x5234 <__fp_round+0x20>
    522c:	6f 5f       	subi	r22, 0xFF	; 255
    522e:	7f 4f       	sbci	r23, 0xFF	; 255
    5230:	8f 4f       	sbci	r24, 0xFF	; 255
    5232:	9f 4f       	sbci	r25, 0xFF	; 255
    5234:	08 95       	ret

00005236 <__fp_split3>:
    5236:	57 fd       	sbrc	r21, 7
    5238:	90 58       	subi	r25, 0x80	; 128
    523a:	44 0f       	add	r20, r20
    523c:	55 1f       	adc	r21, r21
    523e:	59 f0       	breq	.+22     	; 0x5256 <__fp_splitA+0x10>
    5240:	5f 3f       	cpi	r21, 0xFF	; 255
    5242:	71 f0       	breq	.+28     	; 0x5260 <__fp_splitA+0x1a>
    5244:	47 95       	ror	r20

00005246 <__fp_splitA>:
    5246:	88 0f       	add	r24, r24
    5248:	97 fb       	bst	r25, 7
    524a:	99 1f       	adc	r25, r25
    524c:	61 f0       	breq	.+24     	; 0x5266 <__fp_splitA+0x20>
    524e:	9f 3f       	cpi	r25, 0xFF	; 255
    5250:	79 f0       	breq	.+30     	; 0x5270 <__fp_splitA+0x2a>
    5252:	87 95       	ror	r24
    5254:	08 95       	ret
    5256:	12 16       	cp	r1, r18
    5258:	13 06       	cpc	r1, r19
    525a:	14 06       	cpc	r1, r20
    525c:	55 1f       	adc	r21, r21
    525e:	f2 cf       	rjmp	.-28     	; 0x5244 <__fp_split3+0xe>
    5260:	46 95       	lsr	r20
    5262:	f1 df       	rcall	.-30     	; 0x5246 <__fp_splitA>
    5264:	08 c0       	rjmp	.+16     	; 0x5276 <__fp_splitA+0x30>
    5266:	16 16       	cp	r1, r22
    5268:	17 06       	cpc	r1, r23
    526a:	18 06       	cpc	r1, r24
    526c:	99 1f       	adc	r25, r25
    526e:	f1 cf       	rjmp	.-30     	; 0x5252 <__fp_splitA+0xc>
    5270:	86 95       	lsr	r24
    5272:	71 05       	cpc	r23, r1
    5274:	61 05       	cpc	r22, r1
    5276:	08 94       	sec
    5278:	08 95       	ret

0000527a <__fp_zero>:
    527a:	e8 94       	clt

0000527c <__fp_szero>:
    527c:	bb 27       	eor	r27, r27
    527e:	66 27       	eor	r22, r22
    5280:	77 27       	eor	r23, r23
    5282:	cb 01       	movw	r24, r22
    5284:	97 f9       	bld	r25, 7
    5286:	08 95       	ret

00005288 <__mulsf3>:
    5288:	0b d0       	rcall	.+22     	; 0x52a0 <__mulsf3x>
    528a:	c4 cf       	rjmp	.-120    	; 0x5214 <__fp_round>
    528c:	b5 df       	rcall	.-150    	; 0x51f8 <__fp_pscA>
    528e:	28 f0       	brcs	.+10     	; 0x529a <__mulsf3+0x12>
    5290:	ba df       	rcall	.-140    	; 0x5206 <__fp_pscB>
    5292:	18 f0       	brcs	.+6      	; 0x529a <__mulsf3+0x12>
    5294:	95 23       	and	r25, r21
    5296:	09 f0       	breq	.+2      	; 0x529a <__mulsf3+0x12>
    5298:	a6 cf       	rjmp	.-180    	; 0x51e6 <__fp_inf>
    529a:	ab cf       	rjmp	.-170    	; 0x51f2 <__fp_nan>
    529c:	11 24       	eor	r1, r1
    529e:	ee cf       	rjmp	.-36     	; 0x527c <__fp_szero>

000052a0 <__mulsf3x>:
    52a0:	ca df       	rcall	.-108    	; 0x5236 <__fp_split3>
    52a2:	a0 f3       	brcs	.-24     	; 0x528c <__mulsf3+0x4>

000052a4 <__mulsf3_pse>:
    52a4:	95 9f       	mul	r25, r21
    52a6:	d1 f3       	breq	.-12     	; 0x529c <__mulsf3+0x14>
    52a8:	95 0f       	add	r25, r21
    52aa:	50 e0       	ldi	r21, 0x00	; 0
    52ac:	55 1f       	adc	r21, r21
    52ae:	62 9f       	mul	r22, r18
    52b0:	f0 01       	movw	r30, r0
    52b2:	72 9f       	mul	r23, r18
    52b4:	bb 27       	eor	r27, r27
    52b6:	f0 0d       	add	r31, r0
    52b8:	b1 1d       	adc	r27, r1
    52ba:	63 9f       	mul	r22, r19
    52bc:	aa 27       	eor	r26, r26
    52be:	f0 0d       	add	r31, r0
    52c0:	b1 1d       	adc	r27, r1
    52c2:	aa 1f       	adc	r26, r26
    52c4:	64 9f       	mul	r22, r20
    52c6:	66 27       	eor	r22, r22
    52c8:	b0 0d       	add	r27, r0
    52ca:	a1 1d       	adc	r26, r1
    52cc:	66 1f       	adc	r22, r22
    52ce:	82 9f       	mul	r24, r18
    52d0:	22 27       	eor	r18, r18
    52d2:	b0 0d       	add	r27, r0
    52d4:	a1 1d       	adc	r26, r1
    52d6:	62 1f       	adc	r22, r18
    52d8:	73 9f       	mul	r23, r19
    52da:	b0 0d       	add	r27, r0
    52dc:	a1 1d       	adc	r26, r1
    52de:	62 1f       	adc	r22, r18
    52e0:	83 9f       	mul	r24, r19
    52e2:	a0 0d       	add	r26, r0
    52e4:	61 1d       	adc	r22, r1
    52e6:	22 1f       	adc	r18, r18
    52e8:	74 9f       	mul	r23, r20
    52ea:	33 27       	eor	r19, r19
    52ec:	a0 0d       	add	r26, r0
    52ee:	61 1d       	adc	r22, r1
    52f0:	23 1f       	adc	r18, r19
    52f2:	84 9f       	mul	r24, r20
    52f4:	60 0d       	add	r22, r0
    52f6:	21 1d       	adc	r18, r1
    52f8:	82 2f       	mov	r24, r18
    52fa:	76 2f       	mov	r23, r22
    52fc:	6a 2f       	mov	r22, r26
    52fe:	11 24       	eor	r1, r1
    5300:	9f 57       	subi	r25, 0x7F	; 127
    5302:	50 40       	sbci	r21, 0x00	; 0
    5304:	8a f0       	brmi	.+34     	; 0x5328 <__mulsf3_pse+0x84>
    5306:	e1 f0       	breq	.+56     	; 0x5340 <__mulsf3_pse+0x9c>
    5308:	88 23       	and	r24, r24
    530a:	4a f0       	brmi	.+18     	; 0x531e <__mulsf3_pse+0x7a>
    530c:	ee 0f       	add	r30, r30
    530e:	ff 1f       	adc	r31, r31
    5310:	bb 1f       	adc	r27, r27
    5312:	66 1f       	adc	r22, r22
    5314:	77 1f       	adc	r23, r23
    5316:	88 1f       	adc	r24, r24
    5318:	91 50       	subi	r25, 0x01	; 1
    531a:	50 40       	sbci	r21, 0x00	; 0
    531c:	a9 f7       	brne	.-22     	; 0x5308 <__mulsf3_pse+0x64>
    531e:	9e 3f       	cpi	r25, 0xFE	; 254
    5320:	51 05       	cpc	r21, r1
    5322:	70 f0       	brcs	.+28     	; 0x5340 <__mulsf3_pse+0x9c>
    5324:	60 cf       	rjmp	.-320    	; 0x51e6 <__fp_inf>
    5326:	aa cf       	rjmp	.-172    	; 0x527c <__fp_szero>
    5328:	5f 3f       	cpi	r21, 0xFF	; 255
    532a:	ec f3       	brlt	.-6      	; 0x5326 <__mulsf3_pse+0x82>
    532c:	98 3e       	cpi	r25, 0xE8	; 232
    532e:	dc f3       	brlt	.-10     	; 0x5326 <__mulsf3_pse+0x82>
    5330:	86 95       	lsr	r24
    5332:	77 95       	ror	r23
    5334:	67 95       	ror	r22
    5336:	b7 95       	ror	r27
    5338:	f7 95       	ror	r31
    533a:	e7 95       	ror	r30
    533c:	9f 5f       	subi	r25, 0xFF	; 255
    533e:	c1 f7       	brne	.-16     	; 0x5330 <__mulsf3_pse+0x8c>
    5340:	fe 2b       	or	r31, r30
    5342:	88 0f       	add	r24, r24
    5344:	91 1d       	adc	r25, r1
    5346:	96 95       	lsr	r25
    5348:	87 95       	ror	r24
    534a:	97 f9       	bld	r25, 7
    534c:	08 95       	ret

0000534e <sin>:
    534e:	9f 93       	push	r25
    5350:	05 d0       	rcall	.+10     	; 0x535c <__fp_rempio2>
    5352:	0f 90       	pop	r0
    5354:	07 fc       	sbrc	r0, 7
    5356:	ee 5f       	subi	r30, 0xFE	; 254
    5358:	28 c0       	rjmp	.+80     	; 0x53aa <__fp_sinus>
    535a:	4b cf       	rjmp	.-362    	; 0x51f2 <__fp_nan>

0000535c <__fp_rempio2>:
    535c:	74 df       	rcall	.-280    	; 0x5246 <__fp_splitA>
    535e:	e8 f3       	brcs	.-6      	; 0x535a <sin+0xc>
    5360:	e8 94       	clt
    5362:	e0 e0       	ldi	r30, 0x00	; 0
    5364:	bb 27       	eor	r27, r27
    5366:	9f 57       	subi	r25, 0x7F	; 127
    5368:	f0 f0       	brcs	.+60     	; 0x53a6 <__fp_rempio2+0x4a>
    536a:	2a ed       	ldi	r18, 0xDA	; 218
    536c:	3f e0       	ldi	r19, 0x0F	; 15
    536e:	49 ec       	ldi	r20, 0xC9	; 201
    5370:	06 c0       	rjmp	.+12     	; 0x537e <__fp_rempio2+0x22>
    5372:	ee 0f       	add	r30, r30
    5374:	bb 0f       	add	r27, r27
    5376:	66 1f       	adc	r22, r22
    5378:	77 1f       	adc	r23, r23
    537a:	88 1f       	adc	r24, r24
    537c:	28 f0       	brcs	.+10     	; 0x5388 <__fp_rempio2+0x2c>
    537e:	b2 3a       	cpi	r27, 0xA2	; 162
    5380:	62 07       	cpc	r22, r18
    5382:	73 07       	cpc	r23, r19
    5384:	84 07       	cpc	r24, r20
    5386:	28 f0       	brcs	.+10     	; 0x5392 <__fp_rempio2+0x36>
    5388:	b2 5a       	subi	r27, 0xA2	; 162
    538a:	62 0b       	sbc	r22, r18
    538c:	73 0b       	sbc	r23, r19
    538e:	84 0b       	sbc	r24, r20
    5390:	e3 95       	inc	r30
    5392:	9a 95       	dec	r25
    5394:	72 f7       	brpl	.-36     	; 0x5372 <__fp_rempio2+0x16>
    5396:	80 38       	cpi	r24, 0x80	; 128
    5398:	30 f4       	brcc	.+12     	; 0x53a6 <__fp_rempio2+0x4a>
    539a:	9a 95       	dec	r25
    539c:	bb 0f       	add	r27, r27
    539e:	66 1f       	adc	r22, r22
    53a0:	77 1f       	adc	r23, r23
    53a2:	88 1f       	adc	r24, r24
    53a4:	d2 f7       	brpl	.-12     	; 0x539a <__fp_rempio2+0x3e>
    53a6:	90 48       	sbci	r25, 0x80	; 128
    53a8:	13 c0       	rjmp	.+38     	; 0x53d0 <__fp_mpack_finite>

000053aa <__fp_sinus>:
    53aa:	ef 93       	push	r30
    53ac:	e0 ff       	sbrs	r30, 0
    53ae:	06 c0       	rjmp	.+12     	; 0x53bc <__fp_sinus+0x12>
    53b0:	a2 ea       	ldi	r26, 0xA2	; 162
    53b2:	2a ed       	ldi	r18, 0xDA	; 218
    53b4:	3f e0       	ldi	r19, 0x0F	; 15
    53b6:	49 ec       	ldi	r20, 0xC9	; 201
    53b8:	5f eb       	ldi	r21, 0xBF	; 191
    53ba:	ec dd       	rcall	.-1064   	; 0x4f94 <__addsf3x>
    53bc:	2b df       	rcall	.-426    	; 0x5214 <__fp_round>
    53be:	0f 90       	pop	r0
    53c0:	03 94       	inc	r0
    53c2:	01 fc       	sbrc	r0, 1
    53c4:	90 58       	subi	r25, 0x80	; 128
    53c6:	e2 e1       	ldi	r30, 0x12	; 18
    53c8:	f1 e0       	ldi	r31, 0x01	; 1
    53ca:	0e c0       	rjmp	.+28     	; 0x53e8 <__fp_powsodd>

000053cc <__fp_mpack>:
    53cc:	9f 3f       	cpi	r25, 0xFF	; 255
    53ce:	31 f0       	breq	.+12     	; 0x53dc <__fp_mpack_finite+0xc>

000053d0 <__fp_mpack_finite>:
    53d0:	91 50       	subi	r25, 0x01	; 1
    53d2:	20 f4       	brcc	.+8      	; 0x53dc <__fp_mpack_finite+0xc>
    53d4:	87 95       	ror	r24
    53d6:	77 95       	ror	r23
    53d8:	67 95       	ror	r22
    53da:	b7 95       	ror	r27
    53dc:	88 0f       	add	r24, r24
    53de:	91 1d       	adc	r25, r1
    53e0:	96 95       	lsr	r25
    53e2:	87 95       	ror	r24
    53e4:	97 f9       	bld	r25, 7
    53e6:	08 95       	ret

000053e8 <__fp_powsodd>:
    53e8:	9f 93       	push	r25
    53ea:	8f 93       	push	r24
    53ec:	7f 93       	push	r23
    53ee:	6f 93       	push	r22
    53f0:	ff 93       	push	r31
    53f2:	ef 93       	push	r30
    53f4:	9b 01       	movw	r18, r22
    53f6:	ac 01       	movw	r20, r24
    53f8:	47 df       	rcall	.-370    	; 0x5288 <__mulsf3>
    53fa:	ef 91       	pop	r30
    53fc:	ff 91       	pop	r31
    53fe:	05 d0       	rcall	.+10     	; 0x540a <__fp_powser>
    5400:	2f 91       	pop	r18
    5402:	3f 91       	pop	r19
    5404:	4f 91       	pop	r20
    5406:	5f 91       	pop	r21
    5408:	3f cf       	rjmp	.-386    	; 0x5288 <__mulsf3>

0000540a <__fp_powser>:
    540a:	df 93       	push	r29
    540c:	cf 93       	push	r28
    540e:	1f 93       	push	r17
    5410:	0f 93       	push	r16
    5412:	ff 92       	push	r15
    5414:	ef 92       	push	r14
    5416:	df 92       	push	r13
    5418:	7b 01       	movw	r14, r22
    541a:	8c 01       	movw	r16, r24
    541c:	68 94       	set
    541e:	05 c0       	rjmp	.+10     	; 0x542a <__fp_powser+0x20>
    5420:	da 2e       	mov	r13, r26
    5422:	ef 01       	movw	r28, r30
    5424:	3d df       	rcall	.-390    	; 0x52a0 <__mulsf3x>
    5426:	fe 01       	movw	r30, r28
    5428:	e8 94       	clt
    542a:	a5 91       	lpm	r26, Z+
    542c:	25 91       	lpm	r18, Z+
    542e:	35 91       	lpm	r19, Z+
    5430:	45 91       	lpm	r20, Z+
    5432:	55 91       	lpm	r21, Z+
    5434:	ae f3       	brts	.-22     	; 0x5420 <__fp_powser+0x16>
    5436:	ef 01       	movw	r28, r30
    5438:	ad dd       	rcall	.-1190   	; 0x4f94 <__addsf3x>
    543a:	fe 01       	movw	r30, r28
    543c:	97 01       	movw	r18, r14
    543e:	a8 01       	movw	r20, r16
    5440:	da 94       	dec	r13
    5442:	79 f7       	brne	.-34     	; 0x5422 <__fp_powser+0x18>
    5444:	df 90       	pop	r13
    5446:	ef 90       	pop	r14
    5448:	ff 90       	pop	r15
    544a:	0f 91       	pop	r16
    544c:	1f 91       	pop	r17
    544e:	cf 91       	pop	r28
    5450:	df 91       	pop	r29
    5452:	08 95       	ret

00005454 <vfprintf>:
    5454:	2f 92       	push	r2
    5456:	3f 92       	push	r3
    5458:	4f 92       	push	r4
    545a:	5f 92       	push	r5
    545c:	6f 92       	push	r6
    545e:	7f 92       	push	r7
    5460:	8f 92       	push	r8
    5462:	9f 92       	push	r9
    5464:	af 92       	push	r10
    5466:	bf 92       	push	r11
    5468:	cf 92       	push	r12
    546a:	df 92       	push	r13
    546c:	ef 92       	push	r14
    546e:	ff 92       	push	r15
    5470:	0f 93       	push	r16
    5472:	1f 93       	push	r17
    5474:	cf 93       	push	r28
    5476:	df 93       	push	r29
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	60 97       	sbiw	r28, 0x10	; 16
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	f8 94       	cli
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	7c 01       	movw	r14, r24
    548a:	1b 01       	movw	r2, r22
    548c:	6a 01       	movw	r12, r20
    548e:	fc 01       	movw	r30, r24
    5490:	17 82       	std	Z+7, r1	; 0x07
    5492:	16 82       	std	Z+6, r1	; 0x06
    5494:	83 81       	ldd	r24, Z+3	; 0x03
    5496:	81 ff       	sbrs	r24, 1
    5498:	2b c3       	rjmp	.+1622   	; 0x5af0 <vfprintf+0x69c>
    549a:	9e 01       	movw	r18, r28
    549c:	2f 5f       	subi	r18, 0xFF	; 255
    549e:	3f 4f       	sbci	r19, 0xFF	; 255
    54a0:	39 01       	movw	r6, r18
    54a2:	f7 01       	movw	r30, r14
    54a4:	93 81       	ldd	r25, Z+3	; 0x03
    54a6:	f1 01       	movw	r30, r2
    54a8:	93 fd       	sbrc	r25, 3
    54aa:	85 91       	lpm	r24, Z+
    54ac:	93 ff       	sbrs	r25, 3
    54ae:	81 91       	ld	r24, Z+
    54b0:	1f 01       	movw	r2, r30
    54b2:	88 23       	and	r24, r24
    54b4:	09 f4       	brne	.+2      	; 0x54b8 <vfprintf+0x64>
    54b6:	18 c3       	rjmp	.+1584   	; 0x5ae8 <vfprintf+0x694>
    54b8:	85 32       	cpi	r24, 0x25	; 37
    54ba:	39 f4       	brne	.+14     	; 0x54ca <vfprintf+0x76>
    54bc:	93 fd       	sbrc	r25, 3
    54be:	85 91       	lpm	r24, Z+
    54c0:	93 ff       	sbrs	r25, 3
    54c2:	81 91       	ld	r24, Z+
    54c4:	1f 01       	movw	r2, r30
    54c6:	85 32       	cpi	r24, 0x25	; 37
    54c8:	39 f4       	brne	.+14     	; 0x54d8 <vfprintf+0x84>
    54ca:	b7 01       	movw	r22, r14
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	0e 94 67 33 	call	0x66ce	; 0x66ce <fputc>
    54d2:	56 01       	movw	r10, r12
    54d4:	65 01       	movw	r12, r10
    54d6:	e5 cf       	rjmp	.-54     	; 0x54a2 <vfprintf+0x4e>
    54d8:	10 e0       	ldi	r17, 0x00	; 0
    54da:	51 2c       	mov	r5, r1
    54dc:	91 2c       	mov	r9, r1
    54de:	ff e1       	ldi	r31, 0x1F	; 31
    54e0:	f9 15       	cp	r31, r9
    54e2:	d8 f0       	brcs	.+54     	; 0x551a <vfprintf+0xc6>
    54e4:	8b 32       	cpi	r24, 0x2B	; 43
    54e6:	79 f0       	breq	.+30     	; 0x5506 <vfprintf+0xb2>
    54e8:	38 f4       	brcc	.+14     	; 0x54f8 <vfprintf+0xa4>
    54ea:	80 32       	cpi	r24, 0x20	; 32
    54ec:	79 f0       	breq	.+30     	; 0x550c <vfprintf+0xb8>
    54ee:	83 32       	cpi	r24, 0x23	; 35
    54f0:	a1 f4       	brne	.+40     	; 0x551a <vfprintf+0xc6>
    54f2:	f9 2d       	mov	r31, r9
    54f4:	f0 61       	ori	r31, 0x10	; 16
    54f6:	2e c0       	rjmp	.+92     	; 0x5554 <vfprintf+0x100>
    54f8:	8d 32       	cpi	r24, 0x2D	; 45
    54fa:	61 f0       	breq	.+24     	; 0x5514 <vfprintf+0xc0>
    54fc:	80 33       	cpi	r24, 0x30	; 48
    54fe:	69 f4       	brne	.+26     	; 0x551a <vfprintf+0xc6>
    5500:	29 2d       	mov	r18, r9
    5502:	21 60       	ori	r18, 0x01	; 1
    5504:	2d c0       	rjmp	.+90     	; 0x5560 <vfprintf+0x10c>
    5506:	39 2d       	mov	r19, r9
    5508:	32 60       	ori	r19, 0x02	; 2
    550a:	93 2e       	mov	r9, r19
    550c:	89 2d       	mov	r24, r9
    550e:	84 60       	ori	r24, 0x04	; 4
    5510:	98 2e       	mov	r9, r24
    5512:	2a c0       	rjmp	.+84     	; 0x5568 <vfprintf+0x114>
    5514:	e9 2d       	mov	r30, r9
    5516:	e8 60       	ori	r30, 0x08	; 8
    5518:	15 c0       	rjmp	.+42     	; 0x5544 <vfprintf+0xf0>
    551a:	97 fc       	sbrc	r9, 7
    551c:	2d c0       	rjmp	.+90     	; 0x5578 <vfprintf+0x124>
    551e:	20 ed       	ldi	r18, 0xD0	; 208
    5520:	28 0f       	add	r18, r24
    5522:	2a 30       	cpi	r18, 0x0A	; 10
    5524:	88 f4       	brcc	.+34     	; 0x5548 <vfprintf+0xf4>
    5526:	96 fe       	sbrs	r9, 6
    5528:	06 c0       	rjmp	.+12     	; 0x5536 <vfprintf+0xe2>
    552a:	3a e0       	ldi	r19, 0x0A	; 10
    552c:	13 9f       	mul	r17, r19
    552e:	20 0d       	add	r18, r0
    5530:	11 24       	eor	r1, r1
    5532:	12 2f       	mov	r17, r18
    5534:	19 c0       	rjmp	.+50     	; 0x5568 <vfprintf+0x114>
    5536:	8a e0       	ldi	r24, 0x0A	; 10
    5538:	58 9e       	mul	r5, r24
    553a:	20 0d       	add	r18, r0
    553c:	11 24       	eor	r1, r1
    553e:	52 2e       	mov	r5, r18
    5540:	e9 2d       	mov	r30, r9
    5542:	e0 62       	ori	r30, 0x20	; 32
    5544:	9e 2e       	mov	r9, r30
    5546:	10 c0       	rjmp	.+32     	; 0x5568 <vfprintf+0x114>
    5548:	8e 32       	cpi	r24, 0x2E	; 46
    554a:	31 f4       	brne	.+12     	; 0x5558 <vfprintf+0x104>
    554c:	96 fc       	sbrc	r9, 6
    554e:	cc c2       	rjmp	.+1432   	; 0x5ae8 <vfprintf+0x694>
    5550:	f9 2d       	mov	r31, r9
    5552:	f0 64       	ori	r31, 0x40	; 64
    5554:	9f 2e       	mov	r9, r31
    5556:	08 c0       	rjmp	.+16     	; 0x5568 <vfprintf+0x114>
    5558:	8c 36       	cpi	r24, 0x6C	; 108
    555a:	21 f4       	brne	.+8      	; 0x5564 <vfprintf+0x110>
    555c:	29 2d       	mov	r18, r9
    555e:	20 68       	ori	r18, 0x80	; 128
    5560:	92 2e       	mov	r9, r18
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <vfprintf+0x114>
    5564:	88 36       	cpi	r24, 0x68	; 104
    5566:	41 f4       	brne	.+16     	; 0x5578 <vfprintf+0x124>
    5568:	f1 01       	movw	r30, r2
    556a:	93 fd       	sbrc	r25, 3
    556c:	85 91       	lpm	r24, Z+
    556e:	93 ff       	sbrs	r25, 3
    5570:	81 91       	ld	r24, Z+
    5572:	1f 01       	movw	r2, r30
    5574:	81 11       	cpse	r24, r1
    5576:	b3 cf       	rjmp	.-154    	; 0x54de <vfprintf+0x8a>
    5578:	9b eb       	ldi	r25, 0xBB	; 187
    557a:	98 0f       	add	r25, r24
    557c:	93 30       	cpi	r25, 0x03	; 3
    557e:	20 f4       	brcc	.+8      	; 0x5588 <vfprintf+0x134>
    5580:	99 2d       	mov	r25, r9
    5582:	90 61       	ori	r25, 0x10	; 16
    5584:	80 5e       	subi	r24, 0xE0	; 224
    5586:	07 c0       	rjmp	.+14     	; 0x5596 <vfprintf+0x142>
    5588:	9b e9       	ldi	r25, 0x9B	; 155
    558a:	98 0f       	add	r25, r24
    558c:	93 30       	cpi	r25, 0x03	; 3
    558e:	08 f0       	brcs	.+2      	; 0x5592 <vfprintf+0x13e>
    5590:	59 c1       	rjmp	.+690    	; 0x5844 <vfprintf+0x3f0>
    5592:	99 2d       	mov	r25, r9
    5594:	9f 7e       	andi	r25, 0xEF	; 239
    5596:	96 ff       	sbrs	r25, 6
    5598:	16 e0       	ldi	r17, 0x06	; 6
    559a:	9f 73       	andi	r25, 0x3F	; 63
    559c:	99 2e       	mov	r9, r25
    559e:	85 36       	cpi	r24, 0x65	; 101
    55a0:	19 f4       	brne	.+6      	; 0x55a8 <vfprintf+0x154>
    55a2:	90 64       	ori	r25, 0x40	; 64
    55a4:	99 2e       	mov	r9, r25
    55a6:	08 c0       	rjmp	.+16     	; 0x55b8 <vfprintf+0x164>
    55a8:	86 36       	cpi	r24, 0x66	; 102
    55aa:	21 f4       	brne	.+8      	; 0x55b4 <vfprintf+0x160>
    55ac:	39 2f       	mov	r19, r25
    55ae:	30 68       	ori	r19, 0x80	; 128
    55b0:	93 2e       	mov	r9, r19
    55b2:	02 c0       	rjmp	.+4      	; 0x55b8 <vfprintf+0x164>
    55b4:	11 11       	cpse	r17, r1
    55b6:	11 50       	subi	r17, 0x01	; 1
    55b8:	97 fe       	sbrs	r9, 7
    55ba:	07 c0       	rjmp	.+14     	; 0x55ca <vfprintf+0x176>
    55bc:	1c 33       	cpi	r17, 0x3C	; 60
    55be:	50 f4       	brcc	.+20     	; 0x55d4 <vfprintf+0x180>
    55c0:	44 24       	eor	r4, r4
    55c2:	43 94       	inc	r4
    55c4:	41 0e       	add	r4, r17
    55c6:	27 e0       	ldi	r18, 0x07	; 7
    55c8:	0b c0       	rjmp	.+22     	; 0x55e0 <vfprintf+0x18c>
    55ca:	18 30       	cpi	r17, 0x08	; 8
    55cc:	38 f0       	brcs	.+14     	; 0x55dc <vfprintf+0x188>
    55ce:	27 e0       	ldi	r18, 0x07	; 7
    55d0:	17 e0       	ldi	r17, 0x07	; 7
    55d2:	05 c0       	rjmp	.+10     	; 0x55de <vfprintf+0x18a>
    55d4:	27 e0       	ldi	r18, 0x07	; 7
    55d6:	9c e3       	ldi	r25, 0x3C	; 60
    55d8:	49 2e       	mov	r4, r25
    55da:	02 c0       	rjmp	.+4      	; 0x55e0 <vfprintf+0x18c>
    55dc:	21 2f       	mov	r18, r17
    55de:	41 2c       	mov	r4, r1
    55e0:	56 01       	movw	r10, r12
    55e2:	84 e0       	ldi	r24, 0x04	; 4
    55e4:	a8 0e       	add	r10, r24
    55e6:	b1 1c       	adc	r11, r1
    55e8:	f6 01       	movw	r30, r12
    55ea:	60 81       	ld	r22, Z
    55ec:	71 81       	ldd	r23, Z+1	; 0x01
    55ee:	82 81       	ldd	r24, Z+2	; 0x02
    55f0:	93 81       	ldd	r25, Z+3	; 0x03
    55f2:	04 2d       	mov	r16, r4
    55f4:	a3 01       	movw	r20, r6
    55f6:	24 d7       	rcall	.+3656   	; 0x6440 <__ftoa_engine>
    55f8:	6c 01       	movw	r12, r24
    55fa:	f9 81       	ldd	r31, Y+1	; 0x01
    55fc:	fc 87       	std	Y+12, r31	; 0x0c
    55fe:	f0 ff       	sbrs	r31, 0
    5600:	02 c0       	rjmp	.+4      	; 0x5606 <vfprintf+0x1b2>
    5602:	f3 ff       	sbrs	r31, 3
    5604:	06 c0       	rjmp	.+12     	; 0x5612 <vfprintf+0x1be>
    5606:	91 fc       	sbrc	r9, 1
    5608:	06 c0       	rjmp	.+12     	; 0x5616 <vfprintf+0x1c2>
    560a:	92 fe       	sbrs	r9, 2
    560c:	06 c0       	rjmp	.+12     	; 0x561a <vfprintf+0x1c6>
    560e:	00 e2       	ldi	r16, 0x20	; 32
    5610:	05 c0       	rjmp	.+10     	; 0x561c <vfprintf+0x1c8>
    5612:	0d e2       	ldi	r16, 0x2D	; 45
    5614:	03 c0       	rjmp	.+6      	; 0x561c <vfprintf+0x1c8>
    5616:	0b e2       	ldi	r16, 0x2B	; 43
    5618:	01 c0       	rjmp	.+2      	; 0x561c <vfprintf+0x1c8>
    561a:	00 e0       	ldi	r16, 0x00	; 0
    561c:	8c 85       	ldd	r24, Y+12	; 0x0c
    561e:	8c 70       	andi	r24, 0x0C	; 12
    5620:	19 f0       	breq	.+6      	; 0x5628 <vfprintf+0x1d4>
    5622:	01 11       	cpse	r16, r1
    5624:	43 c2       	rjmp	.+1158   	; 0x5aac <vfprintf+0x658>
    5626:	80 c2       	rjmp	.+1280   	; 0x5b28 <vfprintf+0x6d4>
    5628:	97 fe       	sbrs	r9, 7
    562a:	10 c0       	rjmp	.+32     	; 0x564c <vfprintf+0x1f8>
    562c:	4c 0c       	add	r4, r12
    562e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5630:	f4 ff       	sbrs	r31, 4
    5632:	04 c0       	rjmp	.+8      	; 0x563c <vfprintf+0x1e8>
    5634:	8a 81       	ldd	r24, Y+2	; 0x02
    5636:	81 33       	cpi	r24, 0x31	; 49
    5638:	09 f4       	brne	.+2      	; 0x563c <vfprintf+0x1e8>
    563a:	4a 94       	dec	r4
    563c:	14 14       	cp	r1, r4
    563e:	74 f5       	brge	.+92     	; 0x569c <vfprintf+0x248>
    5640:	28 e0       	ldi	r18, 0x08	; 8
    5642:	24 15       	cp	r18, r4
    5644:	78 f5       	brcc	.+94     	; 0x56a4 <vfprintf+0x250>
    5646:	88 e0       	ldi	r24, 0x08	; 8
    5648:	48 2e       	mov	r4, r24
    564a:	2c c0       	rjmp	.+88     	; 0x56a4 <vfprintf+0x250>
    564c:	96 fc       	sbrc	r9, 6
    564e:	2a c0       	rjmp	.+84     	; 0x56a4 <vfprintf+0x250>
    5650:	81 2f       	mov	r24, r17
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	8c 15       	cp	r24, r12
    5656:	9d 05       	cpc	r25, r13
    5658:	9c f0       	brlt	.+38     	; 0x5680 <vfprintf+0x22c>
    565a:	3c ef       	ldi	r19, 0xFC	; 252
    565c:	c3 16       	cp	r12, r19
    565e:	3f ef       	ldi	r19, 0xFF	; 255
    5660:	d3 06       	cpc	r13, r19
    5662:	74 f0       	brlt	.+28     	; 0x5680 <vfprintf+0x22c>
    5664:	89 2d       	mov	r24, r9
    5666:	80 68       	ori	r24, 0x80	; 128
    5668:	98 2e       	mov	r9, r24
    566a:	0a c0       	rjmp	.+20     	; 0x5680 <vfprintf+0x22c>
    566c:	e2 e0       	ldi	r30, 0x02	; 2
    566e:	f0 e0       	ldi	r31, 0x00	; 0
    5670:	ec 0f       	add	r30, r28
    5672:	fd 1f       	adc	r31, r29
    5674:	e1 0f       	add	r30, r17
    5676:	f1 1d       	adc	r31, r1
    5678:	80 81       	ld	r24, Z
    567a:	80 33       	cpi	r24, 0x30	; 48
    567c:	19 f4       	brne	.+6      	; 0x5684 <vfprintf+0x230>
    567e:	11 50       	subi	r17, 0x01	; 1
    5680:	11 11       	cpse	r17, r1
    5682:	f4 cf       	rjmp	.-24     	; 0x566c <vfprintf+0x218>
    5684:	97 fe       	sbrs	r9, 7
    5686:	0e c0       	rjmp	.+28     	; 0x56a4 <vfprintf+0x250>
    5688:	44 24       	eor	r4, r4
    568a:	43 94       	inc	r4
    568c:	41 0e       	add	r4, r17
    568e:	81 2f       	mov	r24, r17
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	c8 16       	cp	r12, r24
    5694:	d9 06       	cpc	r13, r25
    5696:	2c f4       	brge	.+10     	; 0x56a2 <vfprintf+0x24e>
    5698:	1c 19       	sub	r17, r12
    569a:	04 c0       	rjmp	.+8      	; 0x56a4 <vfprintf+0x250>
    569c:	44 24       	eor	r4, r4
    569e:	43 94       	inc	r4
    56a0:	01 c0       	rjmp	.+2      	; 0x56a4 <vfprintf+0x250>
    56a2:	10 e0       	ldi	r17, 0x00	; 0
    56a4:	97 fe       	sbrs	r9, 7
    56a6:	06 c0       	rjmp	.+12     	; 0x56b4 <vfprintf+0x260>
    56a8:	1c 14       	cp	r1, r12
    56aa:	1d 04       	cpc	r1, r13
    56ac:	34 f4       	brge	.+12     	; 0x56ba <vfprintf+0x266>
    56ae:	c6 01       	movw	r24, r12
    56b0:	01 96       	adiw	r24, 0x01	; 1
    56b2:	05 c0       	rjmp	.+10     	; 0x56be <vfprintf+0x26a>
    56b4:	85 e0       	ldi	r24, 0x05	; 5
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	02 c0       	rjmp	.+4      	; 0x56be <vfprintf+0x26a>
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	01 11       	cpse	r16, r1
    56c0:	01 96       	adiw	r24, 0x01	; 1
    56c2:	11 23       	and	r17, r17
    56c4:	31 f0       	breq	.+12     	; 0x56d2 <vfprintf+0x27e>
    56c6:	21 2f       	mov	r18, r17
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	2f 5f       	subi	r18, 0xFF	; 255
    56cc:	3f 4f       	sbci	r19, 0xFF	; 255
    56ce:	82 0f       	add	r24, r18
    56d0:	93 1f       	adc	r25, r19
    56d2:	25 2d       	mov	r18, r5
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	82 17       	cp	r24, r18
    56d8:	93 07       	cpc	r25, r19
    56da:	14 f4       	brge	.+4      	; 0x56e0 <vfprintf+0x28c>
    56dc:	58 1a       	sub	r5, r24
    56de:	01 c0       	rjmp	.+2      	; 0x56e2 <vfprintf+0x28e>
    56e0:	51 2c       	mov	r5, r1
    56e2:	89 2d       	mov	r24, r9
    56e4:	89 70       	andi	r24, 0x09	; 9
    56e6:	41 f4       	brne	.+16     	; 0x56f8 <vfprintf+0x2a4>
    56e8:	55 20       	and	r5, r5
    56ea:	31 f0       	breq	.+12     	; 0x56f8 <vfprintf+0x2a4>
    56ec:	b7 01       	movw	r22, r14
    56ee:	80 e2       	ldi	r24, 0x20	; 32
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	ed d7       	rcall	.+4058   	; 0x66ce <fputc>
    56f4:	5a 94       	dec	r5
    56f6:	f8 cf       	rjmp	.-16     	; 0x56e8 <vfprintf+0x294>
    56f8:	00 23       	and	r16, r16
    56fa:	21 f0       	breq	.+8      	; 0x5704 <vfprintf+0x2b0>
    56fc:	b7 01       	movw	r22, r14
    56fe:	80 2f       	mov	r24, r16
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	e5 d7       	rcall	.+4042   	; 0x66ce <fputc>
    5704:	93 fc       	sbrc	r9, 3
    5706:	08 c0       	rjmp	.+16     	; 0x5718 <vfprintf+0x2c4>
    5708:	55 20       	and	r5, r5
    570a:	31 f0       	breq	.+12     	; 0x5718 <vfprintf+0x2c4>
    570c:	b7 01       	movw	r22, r14
    570e:	80 e3       	ldi	r24, 0x30	; 48
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	dd d7       	rcall	.+4026   	; 0x66ce <fputc>
    5714:	5a 94       	dec	r5
    5716:	f8 cf       	rjmp	.-16     	; 0x5708 <vfprintf+0x2b4>
    5718:	97 fe       	sbrs	r9, 7
    571a:	4a c0       	rjmp	.+148    	; 0x57b0 <vfprintf+0x35c>
    571c:	46 01       	movw	r8, r12
    571e:	d7 fe       	sbrs	r13, 7
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <vfprintf+0x2d2>
    5722:	81 2c       	mov	r8, r1
    5724:	91 2c       	mov	r9, r1
    5726:	c6 01       	movw	r24, r12
    5728:	88 19       	sub	r24, r8
    572a:	99 09       	sbc	r25, r9
    572c:	f3 01       	movw	r30, r6
    572e:	e8 0f       	add	r30, r24
    5730:	f9 1f       	adc	r31, r25
    5732:	fe 87       	std	Y+14, r31	; 0x0e
    5734:	ed 87       	std	Y+13, r30	; 0x0d
    5736:	96 01       	movw	r18, r12
    5738:	24 19       	sub	r18, r4
    573a:	31 09       	sbc	r19, r1
    573c:	38 8b       	std	Y+16, r19	; 0x10
    573e:	2f 87       	std	Y+15, r18	; 0x0f
    5740:	01 2f       	mov	r16, r17
    5742:	10 e0       	ldi	r17, 0x00	; 0
    5744:	11 95       	neg	r17
    5746:	01 95       	neg	r16
    5748:	11 09       	sbc	r17, r1
    574a:	3f ef       	ldi	r19, 0xFF	; 255
    574c:	83 16       	cp	r8, r19
    574e:	93 06       	cpc	r9, r19
    5750:	21 f4       	brne	.+8      	; 0x575a <vfprintf+0x306>
    5752:	b7 01       	movw	r22, r14
    5754:	8e e2       	ldi	r24, 0x2E	; 46
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	ba d7       	rcall	.+3956   	; 0x66ce <fputc>
    575a:	c8 14       	cp	r12, r8
    575c:	d9 04       	cpc	r13, r9
    575e:	4c f0       	brlt	.+18     	; 0x5772 <vfprintf+0x31e>
    5760:	8f 85       	ldd	r24, Y+15	; 0x0f
    5762:	98 89       	ldd	r25, Y+16	; 0x10
    5764:	88 15       	cp	r24, r8
    5766:	99 05       	cpc	r25, r9
    5768:	24 f4       	brge	.+8      	; 0x5772 <vfprintf+0x31e>
    576a:	ed 85       	ldd	r30, Y+13	; 0x0d
    576c:	fe 85       	ldd	r31, Y+14	; 0x0e
    576e:	81 81       	ldd	r24, Z+1	; 0x01
    5770:	01 c0       	rjmp	.+2      	; 0x5774 <vfprintf+0x320>
    5772:	80 e3       	ldi	r24, 0x30	; 48
    5774:	f1 e0       	ldi	r31, 0x01	; 1
    5776:	8f 1a       	sub	r8, r31
    5778:	91 08       	sbc	r9, r1
    577a:	2d 85       	ldd	r18, Y+13	; 0x0d
    577c:	3e 85       	ldd	r19, Y+14	; 0x0e
    577e:	2f 5f       	subi	r18, 0xFF	; 255
    5780:	3f 4f       	sbci	r19, 0xFF	; 255
    5782:	3e 87       	std	Y+14, r19	; 0x0e
    5784:	2d 87       	std	Y+13, r18	; 0x0d
    5786:	80 16       	cp	r8, r16
    5788:	91 06       	cpc	r9, r17
    578a:	24 f0       	brlt	.+8      	; 0x5794 <vfprintf+0x340>
    578c:	b7 01       	movw	r22, r14
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	9e d7       	rcall	.+3900   	; 0x66ce <fputc>
    5792:	db cf       	rjmp	.-74     	; 0x574a <vfprintf+0x2f6>
    5794:	c8 14       	cp	r12, r8
    5796:	d9 04       	cpc	r13, r9
    5798:	41 f4       	brne	.+16     	; 0x57aa <vfprintf+0x356>
    579a:	9a 81       	ldd	r25, Y+2	; 0x02
    579c:	96 33       	cpi	r25, 0x36	; 54
    579e:	20 f4       	brcc	.+8      	; 0x57a8 <vfprintf+0x354>
    57a0:	95 33       	cpi	r25, 0x35	; 53
    57a2:	19 f4       	brne	.+6      	; 0x57aa <vfprintf+0x356>
    57a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    57a6:	34 ff       	sbrs	r19, 4
    57a8:	81 e3       	ldi	r24, 0x31	; 49
    57aa:	b7 01       	movw	r22, r14
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	48 c0       	rjmp	.+144    	; 0x5840 <vfprintf+0x3ec>
    57b0:	8a 81       	ldd	r24, Y+2	; 0x02
    57b2:	81 33       	cpi	r24, 0x31	; 49
    57b4:	19 f0       	breq	.+6      	; 0x57bc <vfprintf+0x368>
    57b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    57b8:	9f 7e       	andi	r25, 0xEF	; 239
    57ba:	9c 87       	std	Y+12, r25	; 0x0c
    57bc:	b7 01       	movw	r22, r14
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	86 d7       	rcall	.+3852   	; 0x66ce <fputc>
    57c2:	11 11       	cpse	r17, r1
    57c4:	05 c0       	rjmp	.+10     	; 0x57d0 <vfprintf+0x37c>
    57c6:	94 fc       	sbrc	r9, 4
    57c8:	16 c0       	rjmp	.+44     	; 0x57f6 <vfprintf+0x3a2>
    57ca:	85 e6       	ldi	r24, 0x65	; 101
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	15 c0       	rjmp	.+42     	; 0x57fa <vfprintf+0x3a6>
    57d0:	b7 01       	movw	r22, r14
    57d2:	8e e2       	ldi	r24, 0x2E	; 46
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	7b d7       	rcall	.+3830   	; 0x66ce <fputc>
    57d8:	1e 5f       	subi	r17, 0xFE	; 254
    57da:	82 e0       	ldi	r24, 0x02	; 2
    57dc:	01 e0       	ldi	r16, 0x01	; 1
    57de:	08 0f       	add	r16, r24
    57e0:	f3 01       	movw	r30, r6
    57e2:	e8 0f       	add	r30, r24
    57e4:	f1 1d       	adc	r31, r1
    57e6:	80 81       	ld	r24, Z
    57e8:	b7 01       	movw	r22, r14
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	70 d7       	rcall	.+3808   	; 0x66ce <fputc>
    57ee:	80 2f       	mov	r24, r16
    57f0:	01 13       	cpse	r16, r17
    57f2:	f4 cf       	rjmp	.-24     	; 0x57dc <vfprintf+0x388>
    57f4:	e8 cf       	rjmp	.-48     	; 0x57c6 <vfprintf+0x372>
    57f6:	85 e4       	ldi	r24, 0x45	; 69
    57f8:	90 e0       	ldi	r25, 0x00	; 0
    57fa:	b7 01       	movw	r22, r14
    57fc:	68 d7       	rcall	.+3792   	; 0x66ce <fputc>
    57fe:	d7 fc       	sbrc	r13, 7
    5800:	06 c0       	rjmp	.+12     	; 0x580e <vfprintf+0x3ba>
    5802:	c1 14       	cp	r12, r1
    5804:	d1 04       	cpc	r13, r1
    5806:	41 f4       	brne	.+16     	; 0x5818 <vfprintf+0x3c4>
    5808:	ec 85       	ldd	r30, Y+12	; 0x0c
    580a:	e4 ff       	sbrs	r30, 4
    580c:	05 c0       	rjmp	.+10     	; 0x5818 <vfprintf+0x3c4>
    580e:	d1 94       	neg	r13
    5810:	c1 94       	neg	r12
    5812:	d1 08       	sbc	r13, r1
    5814:	8d e2       	ldi	r24, 0x2D	; 45
    5816:	01 c0       	rjmp	.+2      	; 0x581a <vfprintf+0x3c6>
    5818:	8b e2       	ldi	r24, 0x2B	; 43
    581a:	b7 01       	movw	r22, r14
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	57 d7       	rcall	.+3758   	; 0x66ce <fputc>
    5820:	80 e3       	ldi	r24, 0x30	; 48
    5822:	2a e0       	ldi	r18, 0x0A	; 10
    5824:	c2 16       	cp	r12, r18
    5826:	d1 04       	cpc	r13, r1
    5828:	2c f0       	brlt	.+10     	; 0x5834 <vfprintf+0x3e0>
    582a:	8f 5f       	subi	r24, 0xFF	; 255
    582c:	fa e0       	ldi	r31, 0x0A	; 10
    582e:	cf 1a       	sub	r12, r31
    5830:	d1 08       	sbc	r13, r1
    5832:	f7 cf       	rjmp	.-18     	; 0x5822 <vfprintf+0x3ce>
    5834:	b7 01       	movw	r22, r14
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	4a d7       	rcall	.+3732   	; 0x66ce <fputc>
    583a:	b7 01       	movw	r22, r14
    583c:	c6 01       	movw	r24, r12
    583e:	c0 96       	adiw	r24, 0x30	; 48
    5840:	46 d7       	rcall	.+3724   	; 0x66ce <fputc>
    5842:	49 c1       	rjmp	.+658    	; 0x5ad6 <vfprintf+0x682>
    5844:	83 36       	cpi	r24, 0x63	; 99
    5846:	31 f0       	breq	.+12     	; 0x5854 <vfprintf+0x400>
    5848:	83 37       	cpi	r24, 0x73	; 115
    584a:	79 f0       	breq	.+30     	; 0x586a <vfprintf+0x416>
    584c:	83 35       	cpi	r24, 0x53	; 83
    584e:	09 f0       	breq	.+2      	; 0x5852 <vfprintf+0x3fe>
    5850:	52 c0       	rjmp	.+164    	; 0x58f6 <vfprintf+0x4a2>
    5852:	1f c0       	rjmp	.+62     	; 0x5892 <vfprintf+0x43e>
    5854:	56 01       	movw	r10, r12
    5856:	32 e0       	ldi	r19, 0x02	; 2
    5858:	a3 0e       	add	r10, r19
    585a:	b1 1c       	adc	r11, r1
    585c:	f6 01       	movw	r30, r12
    585e:	80 81       	ld	r24, Z
    5860:	89 83       	std	Y+1, r24	; 0x01
    5862:	01 e0       	ldi	r16, 0x01	; 1
    5864:	10 e0       	ldi	r17, 0x00	; 0
    5866:	63 01       	movw	r12, r6
    5868:	11 c0       	rjmp	.+34     	; 0x588c <vfprintf+0x438>
    586a:	56 01       	movw	r10, r12
    586c:	f2 e0       	ldi	r31, 0x02	; 2
    586e:	af 0e       	add	r10, r31
    5870:	b1 1c       	adc	r11, r1
    5872:	f6 01       	movw	r30, r12
    5874:	c0 80       	ld	r12, Z
    5876:	d1 80       	ldd	r13, Z+1	; 0x01
    5878:	96 fe       	sbrs	r9, 6
    587a:	03 c0       	rjmp	.+6      	; 0x5882 <vfprintf+0x42e>
    587c:	61 2f       	mov	r22, r17
    587e:	70 e0       	ldi	r23, 0x00	; 0
    5880:	02 c0       	rjmp	.+4      	; 0x5886 <vfprintf+0x432>
    5882:	6f ef       	ldi	r22, 0xFF	; 255
    5884:	7f ef       	ldi	r23, 0xFF	; 255
    5886:	c6 01       	movw	r24, r12
    5888:	d9 d6       	rcall	.+3506   	; 0x663c <strnlen>
    588a:	8c 01       	movw	r16, r24
    588c:	f9 2d       	mov	r31, r9
    588e:	ff 77       	andi	r31, 0x7F	; 127
    5890:	13 c0       	rjmp	.+38     	; 0x58b8 <vfprintf+0x464>
    5892:	56 01       	movw	r10, r12
    5894:	22 e0       	ldi	r18, 0x02	; 2
    5896:	a2 0e       	add	r10, r18
    5898:	b1 1c       	adc	r11, r1
    589a:	f6 01       	movw	r30, r12
    589c:	c0 80       	ld	r12, Z
    589e:	d1 80       	ldd	r13, Z+1	; 0x01
    58a0:	96 fe       	sbrs	r9, 6
    58a2:	03 c0       	rjmp	.+6      	; 0x58aa <vfprintf+0x456>
    58a4:	61 2f       	mov	r22, r17
    58a6:	70 e0       	ldi	r23, 0x00	; 0
    58a8:	02 c0       	rjmp	.+4      	; 0x58ae <vfprintf+0x45a>
    58aa:	6f ef       	ldi	r22, 0xFF	; 255
    58ac:	7f ef       	ldi	r23, 0xFF	; 255
    58ae:	c6 01       	movw	r24, r12
    58b0:	ba d6       	rcall	.+3444   	; 0x6626 <strnlen_P>
    58b2:	8c 01       	movw	r16, r24
    58b4:	f9 2d       	mov	r31, r9
    58b6:	f0 68       	ori	r31, 0x80	; 128
    58b8:	9f 2e       	mov	r9, r31
    58ba:	f3 fd       	sbrc	r31, 3
    58bc:	18 c0       	rjmp	.+48     	; 0x58ee <vfprintf+0x49a>
    58be:	85 2d       	mov	r24, r5
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	08 17       	cp	r16, r24
    58c4:	19 07       	cpc	r17, r25
    58c6:	98 f4       	brcc	.+38     	; 0x58ee <vfprintf+0x49a>
    58c8:	b7 01       	movw	r22, r14
    58ca:	80 e2       	ldi	r24, 0x20	; 32
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	ff d6       	rcall	.+3582   	; 0x66ce <fputc>
    58d0:	5a 94       	dec	r5
    58d2:	f5 cf       	rjmp	.-22     	; 0x58be <vfprintf+0x46a>
    58d4:	f6 01       	movw	r30, r12
    58d6:	97 fc       	sbrc	r9, 7
    58d8:	85 91       	lpm	r24, Z+
    58da:	97 fe       	sbrs	r9, 7
    58dc:	81 91       	ld	r24, Z+
    58de:	6f 01       	movw	r12, r30
    58e0:	b7 01       	movw	r22, r14
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	f4 d6       	rcall	.+3560   	; 0x66ce <fputc>
    58e6:	51 10       	cpse	r5, r1
    58e8:	5a 94       	dec	r5
    58ea:	01 50       	subi	r16, 0x01	; 1
    58ec:	11 09       	sbc	r17, r1
    58ee:	01 15       	cp	r16, r1
    58f0:	11 05       	cpc	r17, r1
    58f2:	81 f7       	brne	.-32     	; 0x58d4 <vfprintf+0x480>
    58f4:	f0 c0       	rjmp	.+480    	; 0x5ad6 <vfprintf+0x682>
    58f6:	84 36       	cpi	r24, 0x64	; 100
    58f8:	11 f0       	breq	.+4      	; 0x58fe <vfprintf+0x4aa>
    58fa:	89 36       	cpi	r24, 0x69	; 105
    58fc:	59 f5       	brne	.+86     	; 0x5954 <vfprintf+0x500>
    58fe:	56 01       	movw	r10, r12
    5900:	97 fe       	sbrs	r9, 7
    5902:	09 c0       	rjmp	.+18     	; 0x5916 <vfprintf+0x4c2>
    5904:	24 e0       	ldi	r18, 0x04	; 4
    5906:	a2 0e       	add	r10, r18
    5908:	b1 1c       	adc	r11, r1
    590a:	f6 01       	movw	r30, r12
    590c:	60 81       	ld	r22, Z
    590e:	71 81       	ldd	r23, Z+1	; 0x01
    5910:	82 81       	ldd	r24, Z+2	; 0x02
    5912:	93 81       	ldd	r25, Z+3	; 0x03
    5914:	0a c0       	rjmp	.+20     	; 0x592a <vfprintf+0x4d6>
    5916:	f2 e0       	ldi	r31, 0x02	; 2
    5918:	af 0e       	add	r10, r31
    591a:	b1 1c       	adc	r11, r1
    591c:	f6 01       	movw	r30, r12
    591e:	60 81       	ld	r22, Z
    5920:	71 81       	ldd	r23, Z+1	; 0x01
    5922:	07 2e       	mov	r0, r23
    5924:	00 0c       	add	r0, r0
    5926:	88 0b       	sbc	r24, r24
    5928:	99 0b       	sbc	r25, r25
    592a:	f9 2d       	mov	r31, r9
    592c:	ff 76       	andi	r31, 0x6F	; 111
    592e:	9f 2e       	mov	r9, r31
    5930:	97 ff       	sbrs	r25, 7
    5932:	09 c0       	rjmp	.+18     	; 0x5946 <vfprintf+0x4f2>
    5934:	90 95       	com	r25
    5936:	80 95       	com	r24
    5938:	70 95       	com	r23
    593a:	61 95       	neg	r22
    593c:	7f 4f       	sbci	r23, 0xFF	; 255
    593e:	8f 4f       	sbci	r24, 0xFF	; 255
    5940:	9f 4f       	sbci	r25, 0xFF	; 255
    5942:	f0 68       	ori	r31, 0x80	; 128
    5944:	9f 2e       	mov	r9, r31
    5946:	2a e0       	ldi	r18, 0x0A	; 10
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	a3 01       	movw	r20, r6
    594c:	9b d7       	rcall	.+3894   	; 0x6884 <__ultoa_invert>
    594e:	c8 2e       	mov	r12, r24
    5950:	c6 18       	sub	r12, r6
    5952:	3e c0       	rjmp	.+124    	; 0x59d0 <vfprintf+0x57c>
    5954:	09 2d       	mov	r16, r9
    5956:	85 37       	cpi	r24, 0x75	; 117
    5958:	21 f4       	brne	.+8      	; 0x5962 <vfprintf+0x50e>
    595a:	0f 7e       	andi	r16, 0xEF	; 239
    595c:	2a e0       	ldi	r18, 0x0A	; 10
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	1d c0       	rjmp	.+58     	; 0x599c <vfprintf+0x548>
    5962:	09 7f       	andi	r16, 0xF9	; 249
    5964:	8f 36       	cpi	r24, 0x6F	; 111
    5966:	91 f0       	breq	.+36     	; 0x598c <vfprintf+0x538>
    5968:	18 f4       	brcc	.+6      	; 0x5970 <vfprintf+0x51c>
    596a:	88 35       	cpi	r24, 0x58	; 88
    596c:	59 f0       	breq	.+22     	; 0x5984 <vfprintf+0x530>
    596e:	bc c0       	rjmp	.+376    	; 0x5ae8 <vfprintf+0x694>
    5970:	80 37       	cpi	r24, 0x70	; 112
    5972:	19 f0       	breq	.+6      	; 0x597a <vfprintf+0x526>
    5974:	88 37       	cpi	r24, 0x78	; 120
    5976:	11 f0       	breq	.+4      	; 0x597c <vfprintf+0x528>
    5978:	b7 c0       	rjmp	.+366    	; 0x5ae8 <vfprintf+0x694>
    597a:	00 61       	ori	r16, 0x10	; 16
    597c:	04 ff       	sbrs	r16, 4
    597e:	09 c0       	rjmp	.+18     	; 0x5992 <vfprintf+0x53e>
    5980:	04 60       	ori	r16, 0x04	; 4
    5982:	07 c0       	rjmp	.+14     	; 0x5992 <vfprintf+0x53e>
    5984:	94 fe       	sbrs	r9, 4
    5986:	08 c0       	rjmp	.+16     	; 0x5998 <vfprintf+0x544>
    5988:	06 60       	ori	r16, 0x06	; 6
    598a:	06 c0       	rjmp	.+12     	; 0x5998 <vfprintf+0x544>
    598c:	28 e0       	ldi	r18, 0x08	; 8
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	05 c0       	rjmp	.+10     	; 0x599c <vfprintf+0x548>
    5992:	20 e1       	ldi	r18, 0x10	; 16
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	02 c0       	rjmp	.+4      	; 0x599c <vfprintf+0x548>
    5998:	20 e1       	ldi	r18, 0x10	; 16
    599a:	32 e0       	ldi	r19, 0x02	; 2
    599c:	56 01       	movw	r10, r12
    599e:	07 ff       	sbrs	r16, 7
    59a0:	09 c0       	rjmp	.+18     	; 0x59b4 <vfprintf+0x560>
    59a2:	84 e0       	ldi	r24, 0x04	; 4
    59a4:	a8 0e       	add	r10, r24
    59a6:	b1 1c       	adc	r11, r1
    59a8:	f6 01       	movw	r30, r12
    59aa:	60 81       	ld	r22, Z
    59ac:	71 81       	ldd	r23, Z+1	; 0x01
    59ae:	82 81       	ldd	r24, Z+2	; 0x02
    59b0:	93 81       	ldd	r25, Z+3	; 0x03
    59b2:	08 c0       	rjmp	.+16     	; 0x59c4 <vfprintf+0x570>
    59b4:	f2 e0       	ldi	r31, 0x02	; 2
    59b6:	af 0e       	add	r10, r31
    59b8:	b1 1c       	adc	r11, r1
    59ba:	f6 01       	movw	r30, r12
    59bc:	60 81       	ld	r22, Z
    59be:	71 81       	ldd	r23, Z+1	; 0x01
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	a3 01       	movw	r20, r6
    59c6:	5e d7       	rcall	.+3772   	; 0x6884 <__ultoa_invert>
    59c8:	c8 2e       	mov	r12, r24
    59ca:	c6 18       	sub	r12, r6
    59cc:	0f 77       	andi	r16, 0x7F	; 127
    59ce:	90 2e       	mov	r9, r16
    59d0:	96 fe       	sbrs	r9, 6
    59d2:	0b c0       	rjmp	.+22     	; 0x59ea <vfprintf+0x596>
    59d4:	09 2d       	mov	r16, r9
    59d6:	0e 7f       	andi	r16, 0xFE	; 254
    59d8:	c1 16       	cp	r12, r17
    59da:	50 f4       	brcc	.+20     	; 0x59f0 <vfprintf+0x59c>
    59dc:	94 fe       	sbrs	r9, 4
    59de:	0a c0       	rjmp	.+20     	; 0x59f4 <vfprintf+0x5a0>
    59e0:	92 fc       	sbrc	r9, 2
    59e2:	08 c0       	rjmp	.+16     	; 0x59f4 <vfprintf+0x5a0>
    59e4:	09 2d       	mov	r16, r9
    59e6:	0e 7e       	andi	r16, 0xEE	; 238
    59e8:	05 c0       	rjmp	.+10     	; 0x59f4 <vfprintf+0x5a0>
    59ea:	dc 2c       	mov	r13, r12
    59ec:	09 2d       	mov	r16, r9
    59ee:	03 c0       	rjmp	.+6      	; 0x59f6 <vfprintf+0x5a2>
    59f0:	dc 2c       	mov	r13, r12
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <vfprintf+0x5a2>
    59f4:	d1 2e       	mov	r13, r17
    59f6:	04 ff       	sbrs	r16, 4
    59f8:	0d c0       	rjmp	.+26     	; 0x5a14 <vfprintf+0x5c0>
    59fa:	fe 01       	movw	r30, r28
    59fc:	ec 0d       	add	r30, r12
    59fe:	f1 1d       	adc	r31, r1
    5a00:	80 81       	ld	r24, Z
    5a02:	80 33       	cpi	r24, 0x30	; 48
    5a04:	11 f4       	brne	.+4      	; 0x5a0a <vfprintf+0x5b6>
    5a06:	09 7e       	andi	r16, 0xE9	; 233
    5a08:	09 c0       	rjmp	.+18     	; 0x5a1c <vfprintf+0x5c8>
    5a0a:	02 ff       	sbrs	r16, 2
    5a0c:	06 c0       	rjmp	.+12     	; 0x5a1a <vfprintf+0x5c6>
    5a0e:	d3 94       	inc	r13
    5a10:	d3 94       	inc	r13
    5a12:	04 c0       	rjmp	.+8      	; 0x5a1c <vfprintf+0x5c8>
    5a14:	80 2f       	mov	r24, r16
    5a16:	86 78       	andi	r24, 0x86	; 134
    5a18:	09 f0       	breq	.+2      	; 0x5a1c <vfprintf+0x5c8>
    5a1a:	d3 94       	inc	r13
    5a1c:	03 fd       	sbrc	r16, 3
    5a1e:	10 c0       	rjmp	.+32     	; 0x5a40 <vfprintf+0x5ec>
    5a20:	00 ff       	sbrs	r16, 0
    5a22:	06 c0       	rjmp	.+12     	; 0x5a30 <vfprintf+0x5dc>
    5a24:	1c 2d       	mov	r17, r12
    5a26:	d5 14       	cp	r13, r5
    5a28:	78 f4       	brcc	.+30     	; 0x5a48 <vfprintf+0x5f4>
    5a2a:	15 0d       	add	r17, r5
    5a2c:	1d 19       	sub	r17, r13
    5a2e:	0c c0       	rjmp	.+24     	; 0x5a48 <vfprintf+0x5f4>
    5a30:	d5 14       	cp	r13, r5
    5a32:	50 f4       	brcc	.+20     	; 0x5a48 <vfprintf+0x5f4>
    5a34:	b7 01       	movw	r22, r14
    5a36:	80 e2       	ldi	r24, 0x20	; 32
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	49 d6       	rcall	.+3218   	; 0x66ce <fputc>
    5a3c:	d3 94       	inc	r13
    5a3e:	f8 cf       	rjmp	.-16     	; 0x5a30 <vfprintf+0x5dc>
    5a40:	d5 14       	cp	r13, r5
    5a42:	10 f4       	brcc	.+4      	; 0x5a48 <vfprintf+0x5f4>
    5a44:	5d 18       	sub	r5, r13
    5a46:	01 c0       	rjmp	.+2      	; 0x5a4a <vfprintf+0x5f6>
    5a48:	51 2c       	mov	r5, r1
    5a4a:	04 ff       	sbrs	r16, 4
    5a4c:	0f c0       	rjmp	.+30     	; 0x5a6c <vfprintf+0x618>
    5a4e:	b7 01       	movw	r22, r14
    5a50:	80 e3       	ldi	r24, 0x30	; 48
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	3c d6       	rcall	.+3192   	; 0x66ce <fputc>
    5a56:	02 ff       	sbrs	r16, 2
    5a58:	16 c0       	rjmp	.+44     	; 0x5a86 <vfprintf+0x632>
    5a5a:	01 fd       	sbrc	r16, 1
    5a5c:	03 c0       	rjmp	.+6      	; 0x5a64 <vfprintf+0x610>
    5a5e:	88 e7       	ldi	r24, 0x78	; 120
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	02 c0       	rjmp	.+4      	; 0x5a68 <vfprintf+0x614>
    5a64:	88 e5       	ldi	r24, 0x58	; 88
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	b7 01       	movw	r22, r14
    5a6a:	0c c0       	rjmp	.+24     	; 0x5a84 <vfprintf+0x630>
    5a6c:	80 2f       	mov	r24, r16
    5a6e:	86 78       	andi	r24, 0x86	; 134
    5a70:	51 f0       	breq	.+20     	; 0x5a86 <vfprintf+0x632>
    5a72:	01 ff       	sbrs	r16, 1
    5a74:	02 c0       	rjmp	.+4      	; 0x5a7a <vfprintf+0x626>
    5a76:	8b e2       	ldi	r24, 0x2B	; 43
    5a78:	01 c0       	rjmp	.+2      	; 0x5a7c <vfprintf+0x628>
    5a7a:	80 e2       	ldi	r24, 0x20	; 32
    5a7c:	07 fd       	sbrc	r16, 7
    5a7e:	8d e2       	ldi	r24, 0x2D	; 45
    5a80:	b7 01       	movw	r22, r14
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	24 d6       	rcall	.+3144   	; 0x66ce <fputc>
    5a86:	c1 16       	cp	r12, r17
    5a88:	30 f4       	brcc	.+12     	; 0x5a96 <vfprintf+0x642>
    5a8a:	b7 01       	movw	r22, r14
    5a8c:	80 e3       	ldi	r24, 0x30	; 48
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	1e d6       	rcall	.+3132   	; 0x66ce <fputc>
    5a92:	11 50       	subi	r17, 0x01	; 1
    5a94:	f8 cf       	rjmp	.-16     	; 0x5a86 <vfprintf+0x632>
    5a96:	ca 94       	dec	r12
    5a98:	f3 01       	movw	r30, r6
    5a9a:	ec 0d       	add	r30, r12
    5a9c:	f1 1d       	adc	r31, r1
    5a9e:	80 81       	ld	r24, Z
    5aa0:	b7 01       	movw	r22, r14
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	14 d6       	rcall	.+3112   	; 0x66ce <fputc>
    5aa6:	c1 10       	cpse	r12, r1
    5aa8:	f6 cf       	rjmp	.-20     	; 0x5a96 <vfprintf+0x642>
    5aaa:	15 c0       	rjmp	.+42     	; 0x5ad6 <vfprintf+0x682>
    5aac:	f4 e0       	ldi	r31, 0x04	; 4
    5aae:	f5 15       	cp	r31, r5
    5ab0:	50 f5       	brcc	.+84     	; 0x5b06 <vfprintf+0x6b2>
    5ab2:	84 e0       	ldi	r24, 0x04	; 4
    5ab4:	58 1a       	sub	r5, r24
    5ab6:	93 fe       	sbrs	r9, 3
    5ab8:	1e c0       	rjmp	.+60     	; 0x5af6 <vfprintf+0x6a2>
    5aba:	01 11       	cpse	r16, r1
    5abc:	25 c0       	rjmp	.+74     	; 0x5b08 <vfprintf+0x6b4>
    5abe:	2c 85       	ldd	r18, Y+12	; 0x0c
    5ac0:	23 ff       	sbrs	r18, 3
    5ac2:	27 c0       	rjmp	.+78     	; 0x5b12 <vfprintf+0x6be>
    5ac4:	00 e3       	ldi	r16, 0x30	; 48
    5ac6:	11 e0       	ldi	r17, 0x01	; 1
    5ac8:	39 2d       	mov	r19, r9
    5aca:	30 71       	andi	r19, 0x10	; 16
    5acc:	93 2e       	mov	r9, r19
    5ace:	f8 01       	movw	r30, r16
    5ad0:	84 91       	lpm	r24, Z
    5ad2:	81 11       	cpse	r24, r1
    5ad4:	21 c0       	rjmp	.+66     	; 0x5b18 <vfprintf+0x6c4>
    5ad6:	55 20       	and	r5, r5
    5ad8:	09 f4       	brne	.+2      	; 0x5adc <vfprintf+0x688>
    5ada:	fc cc       	rjmp	.-1544   	; 0x54d4 <vfprintf+0x80>
    5adc:	b7 01       	movw	r22, r14
    5ade:	80 e2       	ldi	r24, 0x20	; 32
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	f5 d5       	rcall	.+3050   	; 0x66ce <fputc>
    5ae4:	5a 94       	dec	r5
    5ae6:	f7 cf       	rjmp	.-18     	; 0x5ad6 <vfprintf+0x682>
    5ae8:	f7 01       	movw	r30, r14
    5aea:	86 81       	ldd	r24, Z+6	; 0x06
    5aec:	97 81       	ldd	r25, Z+7	; 0x07
    5aee:	23 c0       	rjmp	.+70     	; 0x5b36 <vfprintf+0x6e2>
    5af0:	8f ef       	ldi	r24, 0xFF	; 255
    5af2:	9f ef       	ldi	r25, 0xFF	; 255
    5af4:	20 c0       	rjmp	.+64     	; 0x5b36 <vfprintf+0x6e2>
    5af6:	b7 01       	movw	r22, r14
    5af8:	80 e2       	ldi	r24, 0x20	; 32
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	e8 d5       	rcall	.+3024   	; 0x66ce <fputc>
    5afe:	5a 94       	dec	r5
    5b00:	51 10       	cpse	r5, r1
    5b02:	f9 cf       	rjmp	.-14     	; 0x5af6 <vfprintf+0x6a2>
    5b04:	da cf       	rjmp	.-76     	; 0x5aba <vfprintf+0x666>
    5b06:	51 2c       	mov	r5, r1
    5b08:	b7 01       	movw	r22, r14
    5b0a:	80 2f       	mov	r24, r16
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	df d5       	rcall	.+3006   	; 0x66ce <fputc>
    5b10:	d6 cf       	rjmp	.-84     	; 0x5abe <vfprintf+0x66a>
    5b12:	04 e3       	ldi	r16, 0x34	; 52
    5b14:	11 e0       	ldi	r17, 0x01	; 1
    5b16:	d8 cf       	rjmp	.-80     	; 0x5ac8 <vfprintf+0x674>
    5b18:	91 10       	cpse	r9, r1
    5b1a:	80 52       	subi	r24, 0x20	; 32
    5b1c:	b7 01       	movw	r22, r14
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	d6 d5       	rcall	.+2988   	; 0x66ce <fputc>
    5b22:	0f 5f       	subi	r16, 0xFF	; 255
    5b24:	1f 4f       	sbci	r17, 0xFF	; 255
    5b26:	d3 cf       	rjmp	.-90     	; 0x5ace <vfprintf+0x67a>
    5b28:	23 e0       	ldi	r18, 0x03	; 3
    5b2a:	25 15       	cp	r18, r5
    5b2c:	10 f4       	brcc	.+4      	; 0x5b32 <vfprintf+0x6de>
    5b2e:	83 e0       	ldi	r24, 0x03	; 3
    5b30:	c1 cf       	rjmp	.-126    	; 0x5ab4 <vfprintf+0x660>
    5b32:	51 2c       	mov	r5, r1
    5b34:	c4 cf       	rjmp	.-120    	; 0x5abe <vfprintf+0x66a>
    5b36:	60 96       	adiw	r28, 0x10	; 16
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	f8 94       	cli
    5b3c:	de bf       	out	0x3e, r29	; 62
    5b3e:	0f be       	out	0x3f, r0	; 63
    5b40:	cd bf       	out	0x3d, r28	; 61
    5b42:	df 91       	pop	r29
    5b44:	cf 91       	pop	r28
    5b46:	1f 91       	pop	r17
    5b48:	0f 91       	pop	r16
    5b4a:	ff 90       	pop	r15
    5b4c:	ef 90       	pop	r14
    5b4e:	df 90       	pop	r13
    5b50:	cf 90       	pop	r12
    5b52:	bf 90       	pop	r11
    5b54:	af 90       	pop	r10
    5b56:	9f 90       	pop	r9
    5b58:	8f 90       	pop	r8
    5b5a:	7f 90       	pop	r7
    5b5c:	6f 90       	pop	r6
    5b5e:	5f 90       	pop	r5
    5b60:	4f 90       	pop	r4
    5b62:	3f 90       	pop	r3
    5b64:	2f 90       	pop	r2
    5b66:	08 95       	ret

00005b68 <putval>:
    5b68:	20 fd       	sbrc	r18, 0
    5b6a:	09 c0       	rjmp	.+18     	; 0x5b7e <putval+0x16>
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	23 fd       	sbrc	r18, 3
    5b70:	05 c0       	rjmp	.+10     	; 0x5b7c <putval+0x14>
    5b72:	22 ff       	sbrs	r18, 2
    5b74:	02 c0       	rjmp	.+4      	; 0x5b7a <putval+0x12>
    5b76:	73 83       	std	Z+3, r23	; 0x03
    5b78:	62 83       	std	Z+2, r22	; 0x02
    5b7a:	51 83       	std	Z+1, r21	; 0x01
    5b7c:	40 83       	st	Z, r20
    5b7e:	08 95       	ret

00005b80 <mulacc>:
    5b80:	44 fd       	sbrc	r20, 4
    5b82:	17 c0       	rjmp	.+46     	; 0x5bb2 <mulacc+0x32>
    5b84:	46 fd       	sbrc	r20, 6
    5b86:	17 c0       	rjmp	.+46     	; 0x5bb6 <mulacc+0x36>
    5b88:	ab 01       	movw	r20, r22
    5b8a:	bc 01       	movw	r22, r24
    5b8c:	da 01       	movw	r26, r20
    5b8e:	fb 01       	movw	r30, r22
    5b90:	aa 0f       	add	r26, r26
    5b92:	bb 1f       	adc	r27, r27
    5b94:	ee 1f       	adc	r30, r30
    5b96:	ff 1f       	adc	r31, r31
    5b98:	10 94       	com	r1
    5b9a:	d1 f7       	brne	.-12     	; 0x5b90 <mulacc+0x10>
    5b9c:	4a 0f       	add	r20, r26
    5b9e:	5b 1f       	adc	r21, r27
    5ba0:	6e 1f       	adc	r22, r30
    5ba2:	7f 1f       	adc	r23, r31
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	ba 01       	movw	r22, r20
    5ba8:	66 0f       	add	r22, r22
    5baa:	77 1f       	adc	r23, r23
    5bac:	88 1f       	adc	r24, r24
    5bae:	99 1f       	adc	r25, r25
    5bb0:	09 c0       	rjmp	.+18     	; 0x5bc4 <mulacc+0x44>
    5bb2:	33 e0       	ldi	r19, 0x03	; 3
    5bb4:	01 c0       	rjmp	.+2      	; 0x5bb8 <mulacc+0x38>
    5bb6:	34 e0       	ldi	r19, 0x04	; 4
    5bb8:	66 0f       	add	r22, r22
    5bba:	77 1f       	adc	r23, r23
    5bbc:	88 1f       	adc	r24, r24
    5bbe:	99 1f       	adc	r25, r25
    5bc0:	31 50       	subi	r19, 0x01	; 1
    5bc2:	d1 f7       	brne	.-12     	; 0x5bb8 <mulacc+0x38>
    5bc4:	62 0f       	add	r22, r18
    5bc6:	71 1d       	adc	r23, r1
    5bc8:	81 1d       	adc	r24, r1
    5bca:	91 1d       	adc	r25, r1
    5bcc:	08 95       	ret

00005bce <skip_spaces>:
    5bce:	0f 93       	push	r16
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	8c 01       	movw	r16, r24
    5bd8:	c8 01       	movw	r24, r16
    5bda:	3b d5       	rcall	.+2678   	; 0x6652 <fgetc>
    5bdc:	ec 01       	movw	r28, r24
    5bde:	97 fd       	sbrc	r25, 7
    5be0:	06 c0       	rjmp	.+12     	; 0x5bee <skip_spaces+0x20>
    5be2:	06 d5       	rcall	.+2572   	; 0x65f0 <isspace>
    5be4:	89 2b       	or	r24, r25
    5be6:	c1 f7       	brne	.-16     	; 0x5bd8 <skip_spaces+0xa>
    5be8:	b8 01       	movw	r22, r16
    5bea:	ce 01       	movw	r24, r28
    5bec:	32 d6       	rcall	.+3172   	; 0x6852 <ungetc>
    5bee:	ce 01       	movw	r24, r28
    5bf0:	df 91       	pop	r29
    5bf2:	cf 91       	pop	r28
    5bf4:	1f 91       	pop	r17
    5bf6:	0f 91       	pop	r16
    5bf8:	08 95       	ret

00005bfa <conv_int>:
    5bfa:	8f 92       	push	r8
    5bfc:	9f 92       	push	r9
    5bfe:	af 92       	push	r10
    5c00:	bf 92       	push	r11
    5c02:	cf 92       	push	r12
    5c04:	df 92       	push	r13
    5c06:	ef 92       	push	r14
    5c08:	ff 92       	push	r15
    5c0a:	0f 93       	push	r16
    5c0c:	1f 93       	push	r17
    5c0e:	cf 93       	push	r28
    5c10:	df 93       	push	r29
    5c12:	7c 01       	movw	r14, r24
    5c14:	8b 01       	movw	r16, r22
    5c16:	6a 01       	movw	r12, r20
    5c18:	d2 2f       	mov	r29, r18
    5c1a:	1b d5       	rcall	.+2614   	; 0x6652 <fgetc>
    5c1c:	9c 01       	movw	r18, r24
    5c1e:	33 27       	eor	r19, r19
    5c20:	2b 32       	cpi	r18, 0x2B	; 43
    5c22:	31 05       	cpc	r19, r1
    5c24:	21 f0       	breq	.+8      	; 0x5c2e <conv_int+0x34>
    5c26:	2d 32       	cpi	r18, 0x2D	; 45
    5c28:	31 05       	cpc	r19, r1
    5c2a:	51 f4       	brne	.+20     	; 0x5c40 <conv_int+0x46>
    5c2c:	d0 68       	ori	r29, 0x80	; 128
    5c2e:	01 50       	subi	r16, 0x01	; 1
    5c30:	11 09       	sbc	r17, r1
    5c32:	11 f4       	brne	.+4      	; 0x5c38 <conv_int+0x3e>
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	64 c0       	rjmp	.+200    	; 0x5d00 <conv_int+0x106>
    5c38:	c7 01       	movw	r24, r14
    5c3a:	0b d5       	rcall	.+2582   	; 0x6652 <fgetc>
    5c3c:	97 fd       	sbrc	r25, 7
    5c3e:	fa cf       	rjmp	.-12     	; 0x5c34 <conv_int+0x3a>
    5c40:	cd 2f       	mov	r28, r29
    5c42:	cd 7f       	andi	r28, 0xFD	; 253
    5c44:	2d 2f       	mov	r18, r29
    5c46:	20 73       	andi	r18, 0x30	; 48
    5c48:	09 f5       	brne	.+66     	; 0x5c8c <conv_int+0x92>
    5c4a:	80 33       	cpi	r24, 0x30	; 48
    5c4c:	f9 f4       	brne	.+62     	; 0x5c8c <conv_int+0x92>
    5c4e:	58 01       	movw	r10, r16
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	a8 1a       	sub	r10, r24
    5c54:	b1 08       	sbc	r11, r1
    5c56:	09 f4       	brne	.+2      	; 0x5c5a <conv_int+0x60>
    5c58:	40 c0       	rjmp	.+128    	; 0x5cda <conv_int+0xe0>
    5c5a:	c7 01       	movw	r24, r14
    5c5c:	fa d4       	rcall	.+2548   	; 0x6652 <fgetc>
    5c5e:	97 fd       	sbrc	r25, 7
    5c60:	3c c0       	rjmp	.+120    	; 0x5cda <conv_int+0xe0>
    5c62:	9c 01       	movw	r18, r24
    5c64:	2f 7d       	andi	r18, 0xDF	; 223
    5c66:	33 27       	eor	r19, r19
    5c68:	28 35       	cpi	r18, 0x58	; 88
    5c6a:	31 05       	cpc	r19, r1
    5c6c:	49 f4       	brne	.+18     	; 0x5c80 <conv_int+0x86>
    5c6e:	c2 64       	ori	r28, 0x42	; 66
    5c70:	02 50       	subi	r16, 0x02	; 2
    5c72:	11 09       	sbc	r17, r1
    5c74:	91 f1       	breq	.+100    	; 0x5cda <conv_int+0xe0>
    5c76:	c7 01       	movw	r24, r14
    5c78:	ec d4       	rcall	.+2520   	; 0x6652 <fgetc>
    5c7a:	97 ff       	sbrs	r25, 7
    5c7c:	07 c0       	rjmp	.+14     	; 0x5c8c <conv_int+0x92>
    5c7e:	2d c0       	rjmp	.+90     	; 0x5cda <conv_int+0xe0>
    5c80:	d6 ff       	sbrs	r29, 6
    5c82:	02 c0       	rjmp	.+4      	; 0x5c88 <conv_int+0x8e>
    5c84:	c2 60       	ori	r28, 0x02	; 2
    5c86:	01 c0       	rjmp	.+2      	; 0x5c8a <conv_int+0x90>
    5c88:	c2 61       	ori	r28, 0x12	; 18
    5c8a:	85 01       	movw	r16, r10
    5c8c:	81 2c       	mov	r8, r1
    5c8e:	91 2c       	mov	r9, r1
    5c90:	54 01       	movw	r10, r8
    5c92:	20 ed       	ldi	r18, 0xD0	; 208
    5c94:	28 0f       	add	r18, r24
    5c96:	28 30       	cpi	r18, 0x08	; 8
    5c98:	78 f0       	brcs	.+30     	; 0x5cb8 <conv_int+0xbe>
    5c9a:	c4 ff       	sbrs	r28, 4
    5c9c:	03 c0       	rjmp	.+6      	; 0x5ca4 <conv_int+0xaa>
    5c9e:	b7 01       	movw	r22, r14
    5ca0:	d8 d5       	rcall	.+2992   	; 0x6852 <ungetc>
    5ca2:	18 c0       	rjmp	.+48     	; 0x5cd4 <conv_int+0xda>
    5ca4:	2a 30       	cpi	r18, 0x0A	; 10
    5ca6:	40 f0       	brcs	.+16     	; 0x5cb8 <conv_int+0xbe>
    5ca8:	c6 ff       	sbrs	r28, 6
    5caa:	f9 cf       	rjmp	.-14     	; 0x5c9e <conv_int+0xa4>
    5cac:	2f 7d       	andi	r18, 0xDF	; 223
    5cae:	3f ee       	ldi	r19, 0xEF	; 239
    5cb0:	32 0f       	add	r19, r18
    5cb2:	36 30       	cpi	r19, 0x06	; 6
    5cb4:	a0 f7       	brcc	.-24     	; 0x5c9e <conv_int+0xa4>
    5cb6:	27 50       	subi	r18, 0x07	; 7
    5cb8:	4c 2f       	mov	r20, r28
    5cba:	c5 01       	movw	r24, r10
    5cbc:	b4 01       	movw	r22, r8
    5cbe:	60 df       	rcall	.-320    	; 0x5b80 <mulacc>
    5cc0:	4b 01       	movw	r8, r22
    5cc2:	5c 01       	movw	r10, r24
    5cc4:	c2 60       	ori	r28, 0x02	; 2
    5cc6:	01 50       	subi	r16, 0x01	; 1
    5cc8:	11 09       	sbc	r17, r1
    5cca:	51 f0       	breq	.+20     	; 0x5ce0 <conv_int+0xe6>
    5ccc:	c7 01       	movw	r24, r14
    5cce:	c1 d4       	rcall	.+2434   	; 0x6652 <fgetc>
    5cd0:	97 ff       	sbrs	r25, 7
    5cd2:	df cf       	rjmp	.-66     	; 0x5c92 <conv_int+0x98>
    5cd4:	c1 fd       	sbrc	r28, 1
    5cd6:	04 c0       	rjmp	.+8      	; 0x5ce0 <conv_int+0xe6>
    5cd8:	ad cf       	rjmp	.-166    	; 0x5c34 <conv_int+0x3a>
    5cda:	81 2c       	mov	r8, r1
    5cdc:	91 2c       	mov	r9, r1
    5cde:	54 01       	movw	r10, r8
    5ce0:	c7 ff       	sbrs	r28, 7
    5ce2:	08 c0       	rjmp	.+16     	; 0x5cf4 <conv_int+0xfa>
    5ce4:	b0 94       	com	r11
    5ce6:	a0 94       	com	r10
    5ce8:	90 94       	com	r9
    5cea:	80 94       	com	r8
    5cec:	81 1c       	adc	r8, r1
    5cee:	91 1c       	adc	r9, r1
    5cf0:	a1 1c       	adc	r10, r1
    5cf2:	b1 1c       	adc	r11, r1
    5cf4:	2c 2f       	mov	r18, r28
    5cf6:	b5 01       	movw	r22, r10
    5cf8:	a4 01       	movw	r20, r8
    5cfa:	c6 01       	movw	r24, r12
    5cfc:	35 df       	rcall	.-406    	; 0x5b68 <putval>
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	df 91       	pop	r29
    5d02:	cf 91       	pop	r28
    5d04:	1f 91       	pop	r17
    5d06:	0f 91       	pop	r16
    5d08:	ff 90       	pop	r15
    5d0a:	ef 90       	pop	r14
    5d0c:	df 90       	pop	r13
    5d0e:	cf 90       	pop	r12
    5d10:	bf 90       	pop	r11
    5d12:	af 90       	pop	r10
    5d14:	9f 90       	pop	r9
    5d16:	8f 90       	pop	r8
    5d18:	08 95       	ret

00005d1a <conv_brk>:
    5d1a:	4f 92       	push	r4
    5d1c:	5f 92       	push	r5
    5d1e:	6f 92       	push	r6
    5d20:	7f 92       	push	r7
    5d22:	8f 92       	push	r8
    5d24:	9f 92       	push	r9
    5d26:	af 92       	push	r10
    5d28:	bf 92       	push	r11
    5d2a:	cf 92       	push	r12
    5d2c:	df 92       	push	r13
    5d2e:	ef 92       	push	r14
    5d30:	ff 92       	push	r15
    5d32:	0f 93       	push	r16
    5d34:	1f 93       	push	r17
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
    5d3e:	a0 97       	sbiw	r28, 0x20	; 32
    5d40:	0f b6       	in	r0, 0x3f	; 63
    5d42:	f8 94       	cli
    5d44:	de bf       	out	0x3e, r29	; 62
    5d46:	0f be       	out	0x3f, r0	; 63
    5d48:	cd bf       	out	0x3d, r28	; 61
    5d4a:	5c 01       	movw	r10, r24
    5d4c:	4b 01       	movw	r8, r22
    5d4e:	7a 01       	movw	r14, r20
    5d50:	8e 01       	movw	r16, r28
    5d52:	0f 5f       	subi	r16, 0xFF	; 255
    5d54:	1f 4f       	sbci	r17, 0xFF	; 255
    5d56:	68 01       	movw	r12, r16
    5d58:	80 e2       	ldi	r24, 0x20	; 32
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	11 92       	st	Z+, r1
    5d5e:	8a 95       	dec	r24
    5d60:	e9 f7       	brne	.-6      	; 0x5d5c <conv_brk+0x42>
    5d62:	f5 01       	movw	r30, r10
    5d64:	53 80       	ldd	r5, Z+3	; 0x03
    5d66:	40 e0       	ldi	r20, 0x00	; 0
    5d68:	50 e0       	ldi	r21, 0x00	; 0
    5d6a:	61 2c       	mov	r6, r1
    5d6c:	90 e0       	ldi	r25, 0x00	; 0
    5d6e:	71 2c       	mov	r7, r1
    5d70:	a1 e0       	ldi	r26, 0x01	; 1
    5d72:	b0 e0       	ldi	r27, 0x00	; 0
    5d74:	f9 01       	movw	r30, r18
    5d76:	53 fc       	sbrc	r5, 3
    5d78:	85 91       	lpm	r24, Z+
    5d7a:	53 fe       	sbrs	r5, 3
    5d7c:	81 91       	ld	r24, Z+
    5d7e:	8f 01       	movw	r16, r30
    5d80:	48 2e       	mov	r4, r24
    5d82:	9f 01       	movw	r18, r30
    5d84:	81 11       	cpse	r24, r1
    5d86:	03 c0       	rjmp	.+6      	; 0x5d8e <conv_brk+0x74>
    5d88:	80 e0       	ldi	r24, 0x00	; 0
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	94 c0       	rjmp	.+296    	; 0x5eb6 <conv_brk+0x19c>
    5d8e:	8e 35       	cpi	r24, 0x5E	; 94
    5d90:	19 f4       	brne	.+6      	; 0x5d98 <conv_brk+0x7e>
    5d92:	41 15       	cp	r20, r1
    5d94:	51 05       	cpc	r21, r1
    5d96:	51 f1       	breq	.+84     	; 0x5dec <conv_brk+0xd2>
    5d98:	67 2d       	mov	r22, r7
    5d9a:	70 e0       	ldi	r23, 0x00	; 0
    5d9c:	64 17       	cp	r22, r20
    5d9e:	75 07       	cpc	r23, r21
    5da0:	3c f4       	brge	.+14     	; 0x5db0 <conv_brk+0x96>
    5da2:	8d 35       	cpi	r24, 0x5D	; 93
    5da4:	61 f1       	breq	.+88     	; 0x5dfe <conv_brk+0xe4>
    5da6:	8d 32       	cpi	r24, 0x2D	; 45
    5da8:	19 f4       	brne	.+6      	; 0x5db0 <conv_brk+0x96>
    5daa:	99 23       	and	r25, r25
    5dac:	11 f1       	breq	.+68     	; 0x5df2 <conv_brk+0xd8>
    5dae:	03 c0       	rjmp	.+6      	; 0x5db6 <conv_brk+0x9c>
    5db0:	99 23       	and	r25, r25
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <conv_brk+0x9c>
    5db4:	6b c0       	rjmp	.+214    	; 0x5e8c <conv_brk+0x172>
    5db6:	84 2d       	mov	r24, r4
    5db8:	86 95       	lsr	r24
    5dba:	86 95       	lsr	r24
    5dbc:	86 95       	lsr	r24
    5dbe:	f6 01       	movw	r30, r12
    5dc0:	e8 0f       	add	r30, r24
    5dc2:	f1 1d       	adc	r31, r1
    5dc4:	84 2d       	mov	r24, r4
    5dc6:	87 70       	andi	r24, 0x07	; 7
    5dc8:	8d 01       	movw	r16, r26
    5dca:	02 c0       	rjmp	.+4      	; 0x5dd0 <conv_brk+0xb6>
    5dcc:	00 0f       	add	r16, r16
    5dce:	11 1f       	adc	r17, r17
    5dd0:	8a 95       	dec	r24
    5dd2:	e2 f7       	brpl	.-8      	; 0x5dcc <conv_brk+0xb2>
    5dd4:	c8 01       	movw	r24, r16
    5dd6:	90 81       	ld	r25, Z
    5dd8:	89 2b       	or	r24, r25
    5dda:	80 83       	st	Z, r24
    5ddc:	64 14       	cp	r6, r4
    5dde:	59 f0       	breq	.+22     	; 0x5df6 <conv_brk+0xdc>
    5de0:	46 14       	cp	r4, r6
    5de2:	10 f4       	brcc	.+4      	; 0x5de8 <conv_brk+0xce>
    5de4:	43 94       	inc	r4
    5de6:	e7 cf       	rjmp	.-50     	; 0x5db6 <conv_brk+0x9c>
    5de8:	4a 94       	dec	r4
    5dea:	e5 cf       	rjmp	.-54     	; 0x5db6 <conv_brk+0x9c>
    5dec:	77 24       	eor	r7, r7
    5dee:	73 94       	inc	r7
    5df0:	03 c0       	rjmp	.+6      	; 0x5df8 <conv_brk+0xde>
    5df2:	91 e0       	ldi	r25, 0x01	; 1
    5df4:	01 c0       	rjmp	.+2      	; 0x5df8 <conv_brk+0xde>
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	4f 5f       	subi	r20, 0xFF	; 255
    5dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfc:	bb cf       	rjmp	.-138    	; 0x5d74 <conv_brk+0x5a>
    5dfe:	99 23       	and	r25, r25
    5e00:	19 f0       	breq	.+6      	; 0x5e08 <conv_brk+0xee>
    5e02:	8e 81       	ldd	r24, Y+6	; 0x06
    5e04:	80 62       	ori	r24, 0x20	; 32
    5e06:	8e 83       	std	Y+6, r24	; 0x06
    5e08:	71 10       	cpse	r7, r1
    5e0a:	03 c0       	rjmp	.+6      	; 0x5e12 <conv_brk+0xf8>
    5e0c:	77 24       	eor	r7, r7
    5e0e:	73 94       	inc	r7
    5e10:	19 c0       	rjmp	.+50     	; 0x5e44 <conv_brk+0x12a>
    5e12:	f6 01       	movw	r30, r12
    5e14:	9e 01       	movw	r18, r28
    5e16:	2f 5d       	subi	r18, 0xDF	; 223
    5e18:	3f 4f       	sbci	r19, 0xFF	; 255
    5e1a:	80 81       	ld	r24, Z
    5e1c:	80 95       	com	r24
    5e1e:	81 93       	st	Z+, r24
    5e20:	2e 17       	cp	r18, r30
    5e22:	3f 07       	cpc	r19, r31
    5e24:	d1 f7       	brne	.-12     	; 0x5e1a <conv_brk+0x100>
    5e26:	f2 cf       	rjmp	.-28     	; 0x5e0c <conv_brk+0xf2>
    5e28:	e1 14       	cp	r14, r1
    5e2a:	f1 04       	cpc	r15, r1
    5e2c:	31 f0       	breq	.+12     	; 0x5e3a <conv_brk+0x120>
    5e2e:	f7 01       	movw	r30, r14
    5e30:	80 83       	st	Z, r24
    5e32:	b7 01       	movw	r22, r14
    5e34:	6f 5f       	subi	r22, 0xFF	; 255
    5e36:	7f 4f       	sbci	r23, 0xFF	; 255
    5e38:	7b 01       	movw	r14, r22
    5e3a:	71 e0       	ldi	r23, 0x01	; 1
    5e3c:	87 1a       	sub	r8, r23
    5e3e:	91 08       	sbc	r9, r1
    5e40:	71 2c       	mov	r7, r1
    5e42:	e9 f0       	breq	.+58     	; 0x5e7e <conv_brk+0x164>
    5e44:	c5 01       	movw	r24, r10
    5e46:	05 d4       	rcall	.+2058   	; 0x6652 <fgetc>
    5e48:	97 fd       	sbrc	r25, 7
    5e4a:	17 c0       	rjmp	.+46     	; 0x5e7a <conv_brk+0x160>
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	ff 27       	eor	r31, r31
    5e50:	23 e0       	ldi	r18, 0x03	; 3
    5e52:	f5 95       	asr	r31
    5e54:	e7 95       	ror	r30
    5e56:	2a 95       	dec	r18
    5e58:	e1 f7       	brne	.-8      	; 0x5e52 <conv_brk+0x138>
    5e5a:	ec 0d       	add	r30, r12
    5e5c:	fd 1d       	adc	r31, r13
    5e5e:	20 81       	ld	r18, Z
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	ac 01       	movw	r20, r24
    5e64:	47 70       	andi	r20, 0x07	; 7
    5e66:	55 27       	eor	r21, r21
    5e68:	02 c0       	rjmp	.+4      	; 0x5e6e <conv_brk+0x154>
    5e6a:	35 95       	asr	r19
    5e6c:	27 95       	ror	r18
    5e6e:	4a 95       	dec	r20
    5e70:	e2 f7       	brpl	.-8      	; 0x5e6a <conv_brk+0x150>
    5e72:	20 fd       	sbrc	r18, 0
    5e74:	d9 cf       	rjmp	.-78     	; 0x5e28 <conv_brk+0x10e>
    5e76:	b5 01       	movw	r22, r10
    5e78:	ec d4       	rcall	.+2520   	; 0x6852 <ungetc>
    5e7a:	71 10       	cpse	r7, r1
    5e7c:	85 cf       	rjmp	.-246    	; 0x5d88 <conv_brk+0x6e>
    5e7e:	e1 14       	cp	r14, r1
    5e80:	f1 04       	cpc	r15, r1
    5e82:	11 f0       	breq	.+4      	; 0x5e88 <conv_brk+0x16e>
    5e84:	f7 01       	movw	r30, r14
    5e86:	10 82       	st	Z, r1
    5e88:	c8 01       	movw	r24, r16
    5e8a:	15 c0       	rjmp	.+42     	; 0x5eb6 <conv_brk+0x19c>
    5e8c:	68 2f       	mov	r22, r24
    5e8e:	66 95       	lsr	r22
    5e90:	66 95       	lsr	r22
    5e92:	66 95       	lsr	r22
    5e94:	f6 01       	movw	r30, r12
    5e96:	e6 0f       	add	r30, r22
    5e98:	f1 1d       	adc	r31, r1
    5e9a:	68 2f       	mov	r22, r24
    5e9c:	67 70       	andi	r22, 0x07	; 7
    5e9e:	8d 01       	movw	r16, r26
    5ea0:	02 c0       	rjmp	.+4      	; 0x5ea6 <conv_brk+0x18c>
    5ea2:	00 0f       	add	r16, r16
    5ea4:	11 1f       	adc	r17, r17
    5ea6:	6a 95       	dec	r22
    5ea8:	e2 f7       	brpl	.-8      	; 0x5ea2 <conv_brk+0x188>
    5eaa:	b8 01       	movw	r22, r16
    5eac:	70 81       	ld	r23, Z
    5eae:	67 2b       	or	r22, r23
    5eb0:	60 83       	st	Z, r22
    5eb2:	68 2e       	mov	r6, r24
    5eb4:	a1 cf       	rjmp	.-190    	; 0x5df8 <conv_brk+0xde>
    5eb6:	a0 96       	adiw	r28, 0x20	; 32
    5eb8:	0f b6       	in	r0, 0x3f	; 63
    5eba:	f8 94       	cli
    5ebc:	de bf       	out	0x3e, r29	; 62
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	cd bf       	out	0x3d, r28	; 61
    5ec2:	df 91       	pop	r29
    5ec4:	cf 91       	pop	r28
    5ec6:	1f 91       	pop	r17
    5ec8:	0f 91       	pop	r16
    5eca:	ff 90       	pop	r15
    5ecc:	ef 90       	pop	r14
    5ece:	df 90       	pop	r13
    5ed0:	cf 90       	pop	r12
    5ed2:	bf 90       	pop	r11
    5ed4:	af 90       	pop	r10
    5ed6:	9f 90       	pop	r9
    5ed8:	8f 90       	pop	r8
    5eda:	7f 90       	pop	r7
    5edc:	6f 90       	pop	r6
    5ede:	5f 90       	pop	r5
    5ee0:	4f 90       	pop	r4
    5ee2:	08 95       	ret

00005ee4 <conv_flt>:
    5ee4:	2f 92       	push	r2
    5ee6:	3f 92       	push	r3
    5ee8:	4f 92       	push	r4
    5eea:	5f 92       	push	r5
    5eec:	6f 92       	push	r6
    5eee:	7f 92       	push	r7
    5ef0:	9f 92       	push	r9
    5ef2:	af 92       	push	r10
    5ef4:	bf 92       	push	r11
    5ef6:	cf 92       	push	r12
    5ef8:	df 92       	push	r13
    5efa:	ef 92       	push	r14
    5efc:	ff 92       	push	r15
    5efe:	0f 93       	push	r16
    5f00:	1f 93       	push	r17
    5f02:	cf 93       	push	r28
    5f04:	df 93       	push	r29
    5f06:	6c 01       	movw	r12, r24
    5f08:	8b 01       	movw	r16, r22
    5f0a:	1a 01       	movw	r2, r20
    5f0c:	a2 d3       	rcall	.+1860   	; 0x6652 <fgetc>
    5f0e:	ec 01       	movw	r28, r24
    5f10:	99 27       	eor	r25, r25
    5f12:	8b 32       	cpi	r24, 0x2B	; 43
    5f14:	91 05       	cpc	r25, r1
    5f16:	29 f0       	breq	.+10     	; 0x5f22 <conv_flt+0x3e>
    5f18:	8d 97       	sbiw	r24, 0x2d	; 45
    5f1a:	79 f4       	brne	.+30     	; 0x5f3a <conv_flt+0x56>
    5f1c:	30 e8       	ldi	r19, 0x80	; 128
    5f1e:	93 2e       	mov	r9, r19
    5f20:	01 c0       	rjmp	.+2      	; 0x5f24 <conv_flt+0x40>
    5f22:	91 2c       	mov	r9, r1
    5f24:	01 50       	subi	r16, 0x01	; 1
    5f26:	11 09       	sbc	r17, r1
    5f28:	11 f4       	brne	.+4      	; 0x5f2e <conv_flt+0x4a>
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	fe c0       	rjmp	.+508    	; 0x612a <conv_flt+0x246>
    5f2e:	c6 01       	movw	r24, r12
    5f30:	90 d3       	rcall	.+1824   	; 0x6652 <fgetc>
    5f32:	ec 01       	movw	r28, r24
    5f34:	97 ff       	sbrs	r25, 7
    5f36:	02 c0       	rjmp	.+4      	; 0x5f3c <conv_flt+0x58>
    5f38:	f8 cf       	rjmp	.-16     	; 0x5f2a <conv_flt+0x46>
    5f3a:	91 2c       	mov	r9, r1
    5f3c:	ce 01       	movw	r24, r28
    5f3e:	60 d3       	rcall	.+1728   	; 0x6600 <tolower>
    5f40:	89 36       	cpi	r24, 0x69	; 105
    5f42:	91 05       	cpc	r25, r1
    5f44:	31 f0       	breq	.+12     	; 0x5f52 <conv_flt+0x6e>
    5f46:	8e 36       	cpi	r24, 0x6E	; 110
    5f48:	91 05       	cpc	r25, r1
    5f4a:	81 f5       	brne	.+96     	; 0x5fac <conv_flt+0xc8>
    5f4c:	c4 e4       	ldi	r28, 0x44	; 68
    5f4e:	d2 e0       	ldi	r29, 0x02	; 2
    5f50:	02 c0       	rjmp	.+4      	; 0x5f56 <conv_flt+0x72>
    5f52:	c7 e4       	ldi	r28, 0x47	; 71
    5f54:	d2 e0       	ldi	r29, 0x02	; 2
    5f56:	21 96       	adiw	r28, 0x01	; 1
    5f58:	fe 01       	movw	r30, r28
    5f5a:	31 97       	sbiw	r30, 0x01	; 1
    5f5c:	b4 90       	lpm	r11, Z
    5f5e:	bb 20       	and	r11, r11
    5f60:	b1 f0       	breq	.+44     	; 0x5f8e <conv_flt+0xaa>
    5f62:	01 50       	subi	r16, 0x01	; 1
    5f64:	11 09       	sbc	r17, r1
    5f66:	79 f0       	breq	.+30     	; 0x5f86 <conv_flt+0xa2>
    5f68:	c6 01       	movw	r24, r12
    5f6a:	73 d3       	rcall	.+1766   	; 0x6652 <fgetc>
    5f6c:	7c 01       	movw	r14, r24
    5f6e:	97 fd       	sbrc	r25, 7
    5f70:	0a c0       	rjmp	.+20     	; 0x5f86 <conv_flt+0xa2>
    5f72:	46 d3       	rcall	.+1676   	; 0x6600 <tolower>
    5f74:	99 27       	eor	r25, r25
    5f76:	eb 2d       	mov	r30, r11
    5f78:	f0 e0       	ldi	r31, 0x00	; 0
    5f7a:	8e 17       	cp	r24, r30
    5f7c:	9f 07       	cpc	r25, r31
    5f7e:	59 f3       	breq	.-42     	; 0x5f56 <conv_flt+0x72>
    5f80:	b6 01       	movw	r22, r12
    5f82:	c7 01       	movw	r24, r14
    5f84:	66 d4       	rcall	.+2252   	; 0x6852 <ungetc>
    5f86:	ca 54       	subi	r28, 0x4A	; 74
    5f88:	d2 40       	sbci	r29, 0x02	; 2
    5f8a:	79 f6       	brne	.-98     	; 0x5f2a <conv_flt+0x46>
    5f8c:	03 c0       	rjmp	.+6      	; 0x5f94 <conv_flt+0xb0>
    5f8e:	c7 54       	subi	r28, 0x47	; 71
    5f90:	d2 40       	sbci	r29, 0x02	; 2
    5f92:	29 f0       	breq	.+10     	; 0x5f9e <conv_flt+0xba>
    5f94:	80 e0       	ldi	r24, 0x00	; 0
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	a0 e8       	ldi	r26, 0x80	; 128
    5f9a:	bf e7       	ldi	r27, 0x7F	; 127
    5f9c:	04 c0       	rjmp	.+8      	; 0x5fa6 <conv_flt+0xc2>
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	a0 ec       	ldi	r26, 0xC0	; 192
    5fa4:	bf e7       	ldi	r27, 0x7F	; 127
    5fa6:	bc 01       	movw	r22, r24
    5fa8:	cd 01       	movw	r24, r26
    5faa:	af c0       	rjmp	.+350    	; 0x610a <conv_flt+0x226>
    5fac:	41 2c       	mov	r4, r1
    5fae:	51 2c       	mov	r5, r1
    5fb0:	32 01       	movw	r6, r4
    5fb2:	e1 2c       	mov	r14, r1
    5fb4:	f1 2c       	mov	r15, r1
    5fb6:	2c 2f       	mov	r18, r28
    5fb8:	20 53       	subi	r18, 0x30	; 48
    5fba:	2a 30       	cpi	r18, 0x0A	; 10
    5fbc:	08 f5       	brcc	.+66     	; 0x6000 <conv_flt+0x11c>
    5fbe:	e9 2d       	mov	r30, r9
    5fc0:	e2 60       	ori	r30, 0x02	; 2
    5fc2:	be 2e       	mov	r11, r30
    5fc4:	89 2d       	mov	r24, r9
    5fc6:	88 70       	andi	r24, 0x08	; 8
    5fc8:	92 fe       	sbrs	r9, 2
    5fca:	06 c0       	rjmp	.+12     	; 0x5fd8 <conv_flt+0xf4>
    5fcc:	81 11       	cpse	r24, r1
    5fce:	1f c0       	rjmp	.+62     	; 0x600e <conv_flt+0x12a>
    5fd0:	ff ef       	ldi	r31, 0xFF	; 255
    5fd2:	ef 1a       	sub	r14, r31
    5fd4:	ff 0a       	sbc	r15, r31
    5fd6:	1b c0       	rjmp	.+54     	; 0x600e <conv_flt+0x12a>
    5fd8:	88 23       	and	r24, r24
    5fda:	19 f0       	breq	.+6      	; 0x5fe2 <conv_flt+0xfe>
    5fdc:	81 e0       	ldi	r24, 0x01	; 1
    5fde:	e8 1a       	sub	r14, r24
    5fe0:	f1 08       	sbc	r15, r1
    5fe2:	40 e2       	ldi	r20, 0x20	; 32
    5fe4:	c3 01       	movw	r24, r6
    5fe6:	b2 01       	movw	r22, r4
    5fe8:	cb dd       	rcall	.-1130   	; 0x5b80 <mulacc>
    5fea:	2b 01       	movw	r4, r22
    5fec:	3c 01       	movw	r6, r24
    5fee:	68 39       	cpi	r22, 0x98	; 152
    5ff0:	79 49       	sbci	r23, 0x99	; 153
    5ff2:	89 49       	sbci	r24, 0x99	; 153
    5ff4:	99 41       	sbci	r25, 0x19	; 25
    5ff6:	58 f0       	brcs	.+22     	; 0x600e <conv_flt+0x12a>
    5ff8:	f9 2d       	mov	r31, r9
    5ffa:	f6 60       	ori	r31, 0x06	; 6
    5ffc:	bf 2e       	mov	r11, r31
    5ffe:	07 c0       	rjmp	.+14     	; 0x600e <conv_flt+0x12a>
    6000:	2e 3f       	cpi	r18, 0xFE	; 254
    6002:	81 f4       	brne	.+32     	; 0x6024 <conv_flt+0x140>
    6004:	93 fc       	sbrc	r9, 3
    6006:	0e c0       	rjmp	.+28     	; 0x6024 <conv_flt+0x140>
    6008:	29 2d       	mov	r18, r9
    600a:	28 60       	ori	r18, 0x08	; 8
    600c:	b2 2e       	mov	r11, r18
    600e:	01 50       	subi	r16, 0x01	; 1
    6010:	11 09       	sbc	r17, r1
    6012:	39 f0       	breq	.+14     	; 0x6022 <conv_flt+0x13e>
    6014:	c6 01       	movw	r24, r12
    6016:	1d d3       	rcall	.+1594   	; 0x6652 <fgetc>
    6018:	ec 01       	movw	r28, r24
    601a:	9b 2c       	mov	r9, r11
    601c:	97 ff       	sbrs	r25, 7
    601e:	cb cf       	rjmp	.-106    	; 0x5fb6 <conv_flt+0xd2>
    6020:	01 c0       	rjmp	.+2      	; 0x6024 <conv_flt+0x140>
    6022:	9b 2c       	mov	r9, r11
    6024:	91 fe       	sbrs	r9, 1
    6026:	81 cf       	rjmp	.-254    	; 0x5f2a <conv_flt+0x46>
    6028:	ce 01       	movw	r24, r28
    602a:	8f 7d       	andi	r24, 0xDF	; 223
    602c:	99 27       	eor	r25, r25
    602e:	85 34       	cpi	r24, 0x45	; 69
    6030:	91 05       	cpc	r25, r1
    6032:	09 f0       	breq	.+2      	; 0x6036 <conv_flt+0x152>
    6034:	3e c0       	rjmp	.+124    	; 0x60b2 <conv_flt+0x1ce>
    6036:	58 01       	movw	r10, r16
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	a8 1a       	sub	r10, r24
    603c:	b1 08       	sbc	r11, r1
    603e:	09 f4       	brne	.+2      	; 0x6042 <conv_flt+0x15e>
    6040:	74 cf       	rjmp	.-280    	; 0x5f2a <conv_flt+0x46>
    6042:	c6 01       	movw	r24, r12
    6044:	06 d3       	rcall	.+1548   	; 0x6652 <fgetc>
    6046:	ec 01       	movw	r28, r24
    6048:	97 fd       	sbrc	r25, 7
    604a:	6f cf       	rjmp	.-290    	; 0x5f2a <conv_flt+0x46>
    604c:	99 27       	eor	r25, r25
    604e:	8b 32       	cpi	r24, 0x2B	; 43
    6050:	91 05       	cpc	r25, r1
    6052:	29 f0       	breq	.+10     	; 0x605e <conv_flt+0x17a>
    6054:	8d 97       	sbiw	r24, 0x2d	; 45
    6056:	61 f4       	brne	.+24     	; 0x6070 <conv_flt+0x18c>
    6058:	e9 2d       	mov	r30, r9
    605a:	e0 61       	ori	r30, 0x10	; 16
    605c:	9e 2e       	mov	r9, r30
    605e:	58 01       	movw	r10, r16
    6060:	f2 e0       	ldi	r31, 0x02	; 2
    6062:	af 1a       	sub	r10, r31
    6064:	b1 08       	sbc	r11, r1
    6066:	09 f4       	brne	.+2      	; 0x606a <conv_flt+0x186>
    6068:	60 cf       	rjmp	.-320    	; 0x5f2a <conv_flt+0x46>
    606a:	c6 01       	movw	r24, r12
    606c:	f2 d2       	rcall	.+1508   	; 0x6652 <fgetc>
    606e:	ec 01       	movw	r28, r24
    6070:	ce 01       	movw	r24, r28
    6072:	c0 97       	sbiw	r24, 0x30	; 48
    6074:	0a 97       	sbiw	r24, 0x0a	; 10
    6076:	08 f0       	brcs	.+2      	; 0x607a <conv_flt+0x196>
    6078:	58 cf       	rjmp	.-336    	; 0x5f2a <conv_flt+0x46>
    607a:	85 01       	movw	r16, r10
    607c:	a1 2c       	mov	r10, r1
    607e:	b1 2c       	mov	r11, r1
    6080:	b5 01       	movw	r22, r10
    6082:	bb 0c       	add	r11, r11
    6084:	88 0b       	sbc	r24, r24
    6086:	99 0b       	sbc	r25, r25
    6088:	2c 2f       	mov	r18, r28
    608a:	20 53       	subi	r18, 0x30	; 48
    608c:	40 e2       	ldi	r20, 0x20	; 32
    608e:	78 dd       	rcall	.-1296   	; 0x5b80 <mulacc>
    6090:	5b 01       	movw	r10, r22
    6092:	01 50       	subi	r16, 0x01	; 1
    6094:	11 09       	sbc	r17, r1
    6096:	31 f0       	breq	.+12     	; 0x60a4 <conv_flt+0x1c0>
    6098:	c6 01       	movw	r24, r12
    609a:	db d2       	rcall	.+1462   	; 0x6652 <fgetc>
    609c:	ec 01       	movw	r28, r24
    609e:	c0 97       	sbiw	r24, 0x30	; 48
    60a0:	0a 97       	sbiw	r24, 0x0a	; 10
    60a2:	70 f3       	brcs	.-36     	; 0x6080 <conv_flt+0x19c>
    60a4:	94 fe       	sbrs	r9, 4
    60a6:	03 c0       	rjmp	.+6      	; 0x60ae <conv_flt+0x1ca>
    60a8:	b1 94       	neg	r11
    60aa:	a1 94       	neg	r10
    60ac:	b1 08       	sbc	r11, r1
    60ae:	ea 0c       	add	r14, r10
    60b0:	fb 1c       	adc	r15, r11
    60b2:	01 2b       	or	r16, r17
    60b4:	29 f0       	breq	.+10     	; 0x60c0 <conv_flt+0x1dc>
    60b6:	d7 fd       	sbrc	r29, 7
    60b8:	03 c0       	rjmp	.+6      	; 0x60c0 <conv_flt+0x1dc>
    60ba:	b6 01       	movw	r22, r12
    60bc:	ce 01       	movw	r24, r28
    60be:	c9 d3       	rcall	.+1938   	; 0x6852 <ungetc>
    60c0:	c3 01       	movw	r24, r6
    60c2:	b2 01       	movw	r22, r4
    60c4:	53 d8       	rcall	.-3930   	; 0x516c <__floatunsisf>
    60c6:	f7 fe       	sbrs	r15, 7
    60c8:	06 c0       	rjmp	.+12     	; 0x60d6 <conv_flt+0x1f2>
    60ca:	f1 94       	neg	r15
    60cc:	e1 94       	neg	r14
    60ce:	f1 08       	sbc	r15, r1
    60d0:	c3 e6       	ldi	r28, 0x63	; 99
    60d2:	d2 e0       	ldi	r29, 0x02	; 2
    60d4:	02 c0       	rjmp	.+4      	; 0x60da <conv_flt+0x1f6>
    60d6:	cb e7       	ldi	r28, 0x7B	; 123
    60d8:	d2 e0       	ldi	r29, 0x02	; 2
    60da:	6e 01       	movw	r12, r28
    60dc:	28 e1       	ldi	r18, 0x18	; 24
    60de:	c2 1a       	sub	r12, r18
    60e0:	d1 08       	sbc	r13, r1
    60e2:	00 e2       	ldi	r16, 0x20	; 32
    60e4:	10 e0       	ldi	r17, 0x00	; 0
    60e6:	e0 16       	cp	r14, r16
    60e8:	f1 06       	cpc	r15, r17
    60ea:	48 f0       	brcs	.+18     	; 0x60fe <conv_flt+0x21a>
    60ec:	fe 01       	movw	r30, r28
    60ee:	25 91       	lpm	r18, Z+
    60f0:	35 91       	lpm	r19, Z+
    60f2:	45 91       	lpm	r20, Z+
    60f4:	54 91       	lpm	r21, Z
    60f6:	c8 d8       	rcall	.-3696   	; 0x5288 <__mulsf3>
    60f8:	e0 1a       	sub	r14, r16
    60fa:	f1 0a       	sbc	r15, r17
    60fc:	f4 cf       	rjmp	.-24     	; 0x60e6 <conv_flt+0x202>
    60fe:	24 97       	sbiw	r28, 0x04	; 4
    6100:	16 95       	lsr	r17
    6102:	07 95       	ror	r16
    6104:	cc 16       	cp	r12, r28
    6106:	dd 06       	cpc	r13, r29
    6108:	71 f7       	brne	.-36     	; 0x60e6 <conv_flt+0x202>
    610a:	97 fe       	sbrs	r9, 7
    610c:	05 c0       	rjmp	.+10     	; 0x6118 <conv_flt+0x234>
    610e:	dc 01       	movw	r26, r24
    6110:	cb 01       	movw	r24, r22
    6112:	b0 58       	subi	r27, 0x80	; 128
    6114:	bc 01       	movw	r22, r24
    6116:	cd 01       	movw	r24, r26
    6118:	21 14       	cp	r2, r1
    611a:	31 04       	cpc	r3, r1
    611c:	29 f0       	breq	.+10     	; 0x6128 <conv_flt+0x244>
    611e:	f1 01       	movw	r30, r2
    6120:	60 83       	st	Z, r22
    6122:	71 83       	std	Z+1, r23	; 0x01
    6124:	82 83       	std	Z+2, r24	; 0x02
    6126:	93 83       	std	Z+3, r25	; 0x03
    6128:	81 e0       	ldi	r24, 0x01	; 1
    612a:	df 91       	pop	r29
    612c:	cf 91       	pop	r28
    612e:	1f 91       	pop	r17
    6130:	0f 91       	pop	r16
    6132:	ff 90       	pop	r15
    6134:	ef 90       	pop	r14
    6136:	df 90       	pop	r13
    6138:	cf 90       	pop	r12
    613a:	bf 90       	pop	r11
    613c:	af 90       	pop	r10
    613e:	9f 90       	pop	r9
    6140:	7f 90       	pop	r7
    6142:	6f 90       	pop	r6
    6144:	5f 90       	pop	r5
    6146:	4f 90       	pop	r4
    6148:	3f 90       	pop	r3
    614a:	2f 90       	pop	r2
    614c:	08 95       	ret

0000614e <vfscanf>:
    614e:	6f 92       	push	r6
    6150:	7f 92       	push	r7
    6152:	8f 92       	push	r8
    6154:	9f 92       	push	r9
    6156:	af 92       	push	r10
    6158:	bf 92       	push	r11
    615a:	cf 92       	push	r12
    615c:	df 92       	push	r13
    615e:	ef 92       	push	r14
    6160:	ff 92       	push	r15
    6162:	0f 93       	push	r16
    6164:	1f 93       	push	r17
    6166:	cf 93       	push	r28
    6168:	df 93       	push	r29
    616a:	5c 01       	movw	r10, r24
    616c:	eb 01       	movw	r28, r22
    616e:	4a 01       	movw	r8, r20
    6170:	fc 01       	movw	r30, r24
    6172:	17 82       	std	Z+7, r1	; 0x07
    6174:	16 82       	std	Z+6, r1	; 0x06
    6176:	61 2c       	mov	r6, r1
    6178:	f5 01       	movw	r30, r10
    617a:	03 81       	ldd	r16, Z+3	; 0x03
    617c:	fe 01       	movw	r30, r28
    617e:	03 fd       	sbrc	r16, 3
    6180:	85 91       	lpm	r24, Z+
    6182:	03 ff       	sbrs	r16, 3
    6184:	81 91       	ld	r24, Z+
    6186:	18 2f       	mov	r17, r24
    6188:	ef 01       	movw	r28, r30
    618a:	88 23       	and	r24, r24
    618c:	09 f4       	brne	.+2      	; 0x6190 <vfscanf+0x42>
    618e:	00 c1       	rjmp	.+512    	; 0x6390 <vfscanf+0x242>
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	2e d2       	rcall	.+1116   	; 0x65f0 <isspace>
    6194:	89 2b       	or	r24, r25
    6196:	19 f0       	breq	.+6      	; 0x619e <vfscanf+0x50>
    6198:	c5 01       	movw	r24, r10
    619a:	19 dd       	rcall	.-1486   	; 0x5bce <skip_spaces>
    619c:	ed cf       	rjmp	.-38     	; 0x6178 <vfscanf+0x2a>
    619e:	15 32       	cpi	r17, 0x25	; 37
    61a0:	41 f4       	brne	.+16     	; 0x61b2 <vfscanf+0x64>
    61a2:	fe 01       	movw	r30, r28
    61a4:	03 fd       	sbrc	r16, 3
    61a6:	15 91       	lpm	r17, Z+
    61a8:	03 ff       	sbrs	r16, 3
    61aa:	11 91       	ld	r17, Z+
    61ac:	ef 01       	movw	r28, r30
    61ae:	15 32       	cpi	r17, 0x25	; 37
    61b0:	71 f4       	brne	.+28     	; 0x61ce <vfscanf+0x80>
    61b2:	c5 01       	movw	r24, r10
    61b4:	4e d2       	rcall	.+1180   	; 0x6652 <fgetc>
    61b6:	97 fd       	sbrc	r25, 7
    61b8:	e9 c0       	rjmp	.+466    	; 0x638c <vfscanf+0x23e>
    61ba:	41 2f       	mov	r20, r17
    61bc:	50 e0       	ldi	r21, 0x00	; 0
    61be:	9c 01       	movw	r18, r24
    61c0:	33 27       	eor	r19, r19
    61c2:	24 17       	cp	r18, r20
    61c4:	35 07       	cpc	r19, r21
    61c6:	c1 f2       	breq	.-80     	; 0x6178 <vfscanf+0x2a>
    61c8:	b5 01       	movw	r22, r10
    61ca:	43 d3       	rcall	.+1670   	; 0x6852 <ungetc>
    61cc:	e1 c0       	rjmp	.+450    	; 0x6390 <vfscanf+0x242>
    61ce:	1a 32       	cpi	r17, 0x2A	; 42
    61d0:	41 f4       	brne	.+16     	; 0x61e2 <vfscanf+0x94>
    61d2:	03 fd       	sbrc	r16, 3
    61d4:	15 91       	lpm	r17, Z+
    61d6:	03 ff       	sbrs	r16, 3
    61d8:	11 91       	ld	r17, Z+
    61da:	ef 01       	movw	r28, r30
    61dc:	77 24       	eor	r7, r7
    61de:	73 94       	inc	r7
    61e0:	01 c0       	rjmp	.+2      	; 0x61e4 <vfscanf+0x96>
    61e2:	71 2c       	mov	r7, r1
    61e4:	e1 2c       	mov	r14, r1
    61e6:	f1 2c       	mov	r15, r1
    61e8:	20 ed       	ldi	r18, 0xD0	; 208
    61ea:	21 0f       	add	r18, r17
    61ec:	2a 30       	cpi	r18, 0x0A	; 10
    61ee:	80 f4       	brcc	.+32     	; 0x6210 <vfscanf+0xc2>
    61f0:	f7 2d       	mov	r31, r7
    61f2:	f2 60       	ori	r31, 0x02	; 2
    61f4:	7f 2e       	mov	r7, r31
    61f6:	b7 01       	movw	r22, r14
    61f8:	80 e0       	ldi	r24, 0x00	; 0
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	40 e2       	ldi	r20, 0x20	; 32
    61fe:	c0 dc       	rcall	.-1664   	; 0x5b80 <mulacc>
    6200:	7b 01       	movw	r14, r22
    6202:	fe 01       	movw	r30, r28
    6204:	03 fd       	sbrc	r16, 3
    6206:	15 91       	lpm	r17, Z+
    6208:	03 ff       	sbrs	r16, 3
    620a:	11 91       	ld	r17, Z+
    620c:	ef 01       	movw	r28, r30
    620e:	ec cf       	rjmp	.-40     	; 0x61e8 <vfscanf+0x9a>
    6210:	71 fe       	sbrs	r7, 1
    6212:	04 c0       	rjmp	.+8      	; 0x621c <vfscanf+0xce>
    6214:	e1 14       	cp	r14, r1
    6216:	f1 04       	cpc	r15, r1
    6218:	21 f4       	brne	.+8      	; 0x6222 <vfscanf+0xd4>
    621a:	ba c0       	rjmp	.+372    	; 0x6390 <vfscanf+0x242>
    621c:	ee 24       	eor	r14, r14
    621e:	ea 94       	dec	r14
    6220:	fe 2c       	mov	r15, r14
    6222:	18 36       	cpi	r17, 0x68	; 104
    6224:	19 f0       	breq	.+6      	; 0x622c <vfscanf+0xde>
    6226:	1c 36       	cpi	r17, 0x6C	; 108
    6228:	61 f0       	breq	.+24     	; 0x6242 <vfscanf+0xf4>
    622a:	14 c0       	rjmp	.+40     	; 0x6254 <vfscanf+0x106>
    622c:	fe 01       	movw	r30, r28
    622e:	03 fd       	sbrc	r16, 3
    6230:	15 91       	lpm	r17, Z+
    6232:	03 ff       	sbrs	r16, 3
    6234:	11 91       	ld	r17, Z+
    6236:	ef 01       	movw	r28, r30
    6238:	18 36       	cpi	r17, 0x68	; 104
    623a:	61 f4       	brne	.+24     	; 0x6254 <vfscanf+0x106>
    623c:	87 2d       	mov	r24, r7
    623e:	88 60       	ori	r24, 0x08	; 8
    6240:	78 2e       	mov	r7, r24
    6242:	97 2d       	mov	r25, r7
    6244:	94 60       	ori	r25, 0x04	; 4
    6246:	79 2e       	mov	r7, r25
    6248:	fe 01       	movw	r30, r28
    624a:	03 fd       	sbrc	r16, 3
    624c:	15 91       	lpm	r17, Z+
    624e:	03 ff       	sbrs	r16, 3
    6250:	11 91       	ld	r17, Z+
    6252:	ef 01       	movw	r28, r30
    6254:	11 23       	and	r17, r17
    6256:	09 f4       	brne	.+2      	; 0x625a <vfscanf+0x10c>
    6258:	9b c0       	rjmp	.+310    	; 0x6390 <vfscanf+0x242>
    625a:	61 2f       	mov	r22, r17
    625c:	70 e0       	ldi	r23, 0x00	; 0
    625e:	82 e3       	ldi	r24, 0x32	; 50
    6260:	92 e0       	ldi	r25, 0x02	; 2
    6262:	d6 d1       	rcall	.+940    	; 0x6610 <strchr_P>
    6264:	89 2b       	or	r24, r25
    6266:	09 f4       	brne	.+2      	; 0x626a <vfscanf+0x11c>
    6268:	93 c0       	rjmp	.+294    	; 0x6390 <vfscanf+0x242>
    626a:	70 fc       	sbrc	r7, 0
    626c:	07 c0       	rjmp	.+14     	; 0x627c <vfscanf+0x12e>
    626e:	f4 01       	movw	r30, r8
    6270:	c0 80       	ld	r12, Z
    6272:	d1 80       	ldd	r13, Z+1	; 0x01
    6274:	c4 01       	movw	r24, r8
    6276:	02 96       	adiw	r24, 0x02	; 2
    6278:	4c 01       	movw	r8, r24
    627a:	02 c0       	rjmp	.+4      	; 0x6280 <vfscanf+0x132>
    627c:	c1 2c       	mov	r12, r1
    627e:	d1 2c       	mov	r13, r1
    6280:	1e 36       	cpi	r17, 0x6E	; 110
    6282:	49 f4       	brne	.+18     	; 0x6296 <vfscanf+0x148>
    6284:	f5 01       	movw	r30, r10
    6286:	46 81       	ldd	r20, Z+6	; 0x06
    6288:	57 81       	ldd	r21, Z+7	; 0x07
    628a:	60 e0       	ldi	r22, 0x00	; 0
    628c:	70 e0       	ldi	r23, 0x00	; 0
    628e:	27 2d       	mov	r18, r7
    6290:	c6 01       	movw	r24, r12
    6292:	6a dc       	rcall	.-1836   	; 0x5b68 <putval>
    6294:	71 cf       	rjmp	.-286    	; 0x6178 <vfscanf+0x2a>
    6296:	13 36       	cpi	r17, 0x63	; 99
    6298:	b1 f4       	brne	.+44     	; 0x62c6 <vfscanf+0x178>
    629a:	71 fc       	sbrc	r7, 1
    629c:	03 c0       	rjmp	.+6      	; 0x62a4 <vfscanf+0x156>
    629e:	ee 24       	eor	r14, r14
    62a0:	e3 94       	inc	r14
    62a2:	f1 2c       	mov	r15, r1
    62a4:	c5 01       	movw	r24, r10
    62a6:	d5 d1       	rcall	.+938    	; 0x6652 <fgetc>
    62a8:	97 fd       	sbrc	r25, 7
    62aa:	70 c0       	rjmp	.+224    	; 0x638c <vfscanf+0x23e>
    62ac:	c1 14       	cp	r12, r1
    62ae:	d1 04       	cpc	r13, r1
    62b0:	29 f0       	breq	.+10     	; 0x62bc <vfscanf+0x16e>
    62b2:	f6 01       	movw	r30, r12
    62b4:	80 83       	st	Z, r24
    62b6:	c6 01       	movw	r24, r12
    62b8:	01 96       	adiw	r24, 0x01	; 1
    62ba:	6c 01       	movw	r12, r24
    62bc:	91 e0       	ldi	r25, 0x01	; 1
    62be:	e9 1a       	sub	r14, r25
    62c0:	f1 08       	sbc	r15, r1
    62c2:	81 f7       	brne	.-32     	; 0x62a4 <vfscanf+0x156>
    62c4:	5f c0       	rjmp	.+190    	; 0x6384 <vfscanf+0x236>
    62c6:	1b 35       	cpi	r17, 0x5B	; 91
    62c8:	51 f4       	brne	.+20     	; 0x62de <vfscanf+0x190>
    62ca:	9e 01       	movw	r18, r28
    62cc:	a6 01       	movw	r20, r12
    62ce:	b7 01       	movw	r22, r14
    62d0:	c5 01       	movw	r24, r10
    62d2:	23 dd       	rcall	.-1466   	; 0x5d1a <conv_brk>
    62d4:	ec 01       	movw	r28, r24
    62d6:	89 2b       	or	r24, r25
    62d8:	09 f0       	breq	.+2      	; 0x62dc <vfscanf+0x18e>
    62da:	54 c0       	rjmp	.+168    	; 0x6384 <vfscanf+0x236>
    62dc:	4e c0       	rjmp	.+156    	; 0x637a <vfscanf+0x22c>
    62de:	c5 01       	movw	r24, r10
    62e0:	76 dc       	rcall	.-1812   	; 0x5bce <skip_spaces>
    62e2:	97 fd       	sbrc	r25, 7
    62e4:	53 c0       	rjmp	.+166    	; 0x638c <vfscanf+0x23e>
    62e6:	1f 36       	cpi	r17, 0x6F	; 111
    62e8:	c9 f1       	breq	.+114    	; 0x635c <vfscanf+0x20e>
    62ea:	40 f4       	brcc	.+16     	; 0x62fc <vfscanf+0x1ae>
    62ec:	14 36       	cpi	r17, 0x64	; 100
    62ee:	91 f1       	breq	.+100    	; 0x6354 <vfscanf+0x206>
    62f0:	19 36       	cpi	r17, 0x69	; 105
    62f2:	b9 f1       	breq	.+110    	; 0x6362 <vfscanf+0x214>
    62f4:	18 35       	cpi	r17, 0x58	; 88
    62f6:	09 f0       	breq	.+2      	; 0x62fa <vfscanf+0x1ac>
    62f8:	3a c0       	rjmp	.+116    	; 0x636e <vfscanf+0x220>
    62fa:	28 c0       	rjmp	.+80     	; 0x634c <vfscanf+0x1fe>
    62fc:	13 37       	cpi	r17, 0x73	; 115
    62fe:	a9 f0       	breq	.+42     	; 0x632a <vfscanf+0x1dc>
    6300:	18 f4       	brcc	.+6      	; 0x6308 <vfscanf+0x1ba>
    6302:	10 37       	cpi	r17, 0x70	; 112
    6304:	19 f1       	breq	.+70     	; 0x634c <vfscanf+0x1fe>
    6306:	33 c0       	rjmp	.+102    	; 0x636e <vfscanf+0x220>
    6308:	15 37       	cpi	r17, 0x75	; 117
    630a:	21 f1       	breq	.+72     	; 0x6354 <vfscanf+0x206>
    630c:	18 37       	cpi	r17, 0x78	; 120
    630e:	f1 f0       	breq	.+60     	; 0x634c <vfscanf+0x1fe>
    6310:	2e c0       	rjmp	.+92     	; 0x636e <vfscanf+0x220>
    6312:	c1 14       	cp	r12, r1
    6314:	d1 04       	cpc	r13, r1
    6316:	29 f0       	breq	.+10     	; 0x6322 <vfscanf+0x1d4>
    6318:	f6 01       	movw	r30, r12
    631a:	00 83       	st	Z, r16
    631c:	c6 01       	movw	r24, r12
    631e:	01 96       	adiw	r24, 0x01	; 1
    6320:	6c 01       	movw	r12, r24
    6322:	91 e0       	ldi	r25, 0x01	; 1
    6324:	e9 1a       	sub	r14, r25
    6326:	f1 08       	sbc	r15, r1
    6328:	59 f0       	breq	.+22     	; 0x6340 <vfscanf+0x1f2>
    632a:	c5 01       	movw	r24, r10
    632c:	92 d1       	rcall	.+804    	; 0x6652 <fgetc>
    632e:	8c 01       	movw	r16, r24
    6330:	97 fd       	sbrc	r25, 7
    6332:	06 c0       	rjmp	.+12     	; 0x6340 <vfscanf+0x1f2>
    6334:	5d d1       	rcall	.+698    	; 0x65f0 <isspace>
    6336:	89 2b       	or	r24, r25
    6338:	61 f3       	breq	.-40     	; 0x6312 <vfscanf+0x1c4>
    633a:	b5 01       	movw	r22, r10
    633c:	c8 01       	movw	r24, r16
    633e:	89 d2       	rcall	.+1298   	; 0x6852 <ungetc>
    6340:	c1 14       	cp	r12, r1
    6342:	d1 04       	cpc	r13, r1
    6344:	f9 f0       	breq	.+62     	; 0x6384 <vfscanf+0x236>
    6346:	f6 01       	movw	r30, r12
    6348:	10 82       	st	Z, r1
    634a:	1c c0       	rjmp	.+56     	; 0x6384 <vfscanf+0x236>
    634c:	f7 2d       	mov	r31, r7
    634e:	f0 64       	ori	r31, 0x40	; 64
    6350:	7f 2e       	mov	r7, r31
    6352:	07 c0       	rjmp	.+14     	; 0x6362 <vfscanf+0x214>
    6354:	87 2d       	mov	r24, r7
    6356:	80 62       	ori	r24, 0x20	; 32
    6358:	78 2e       	mov	r7, r24
    635a:	03 c0       	rjmp	.+6      	; 0x6362 <vfscanf+0x214>
    635c:	97 2d       	mov	r25, r7
    635e:	90 61       	ori	r25, 0x10	; 16
    6360:	79 2e       	mov	r7, r25
    6362:	27 2d       	mov	r18, r7
    6364:	a6 01       	movw	r20, r12
    6366:	b7 01       	movw	r22, r14
    6368:	c5 01       	movw	r24, r10
    636a:	47 dc       	rcall	.-1906   	; 0x5bfa <conv_int>
    636c:	04 c0       	rjmp	.+8      	; 0x6376 <vfscanf+0x228>
    636e:	a6 01       	movw	r20, r12
    6370:	b7 01       	movw	r22, r14
    6372:	c5 01       	movw	r24, r10
    6374:	b7 dd       	rcall	.-1170   	; 0x5ee4 <conv_flt>
    6376:	81 11       	cpse	r24, r1
    6378:	05 c0       	rjmp	.+10     	; 0x6384 <vfscanf+0x236>
    637a:	f5 01       	movw	r30, r10
    637c:	83 81       	ldd	r24, Z+3	; 0x03
    637e:	80 73       	andi	r24, 0x30	; 48
    6380:	29 f4       	brne	.+10     	; 0x638c <vfscanf+0x23e>
    6382:	06 c0       	rjmp	.+12     	; 0x6390 <vfscanf+0x242>
    6384:	70 fc       	sbrc	r7, 0
    6386:	f8 ce       	rjmp	.-528    	; 0x6178 <vfscanf+0x2a>
    6388:	63 94       	inc	r6
    638a:	f6 ce       	rjmp	.-532    	; 0x6178 <vfscanf+0x2a>
    638c:	66 20       	and	r6, r6
    638e:	19 f0       	breq	.+6      	; 0x6396 <vfscanf+0x248>
    6390:	86 2d       	mov	r24, r6
    6392:	90 e0       	ldi	r25, 0x00	; 0
    6394:	02 c0       	rjmp	.+4      	; 0x639a <vfscanf+0x24c>
    6396:	8f ef       	ldi	r24, 0xFF	; 255
    6398:	9f ef       	ldi	r25, 0xFF	; 255
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	1f 91       	pop	r17
    63a0:	0f 91       	pop	r16
    63a2:	ff 90       	pop	r15
    63a4:	ef 90       	pop	r14
    63a6:	df 90       	pop	r13
    63a8:	cf 90       	pop	r12
    63aa:	bf 90       	pop	r11
    63ac:	af 90       	pop	r10
    63ae:	9f 90       	pop	r9
    63b0:	8f 90       	pop	r8
    63b2:	7f 90       	pop	r7
    63b4:	6f 90       	pop	r6
    63b6:	08 95       	ret

000063b8 <__udivmodsi4>:
    63b8:	a1 e2       	ldi	r26, 0x21	; 33
    63ba:	1a 2e       	mov	r1, r26
    63bc:	aa 1b       	sub	r26, r26
    63be:	bb 1b       	sub	r27, r27
    63c0:	fd 01       	movw	r30, r26
    63c2:	0d c0       	rjmp	.+26     	; 0x63de <__udivmodsi4_ep>

000063c4 <__udivmodsi4_loop>:
    63c4:	aa 1f       	adc	r26, r26
    63c6:	bb 1f       	adc	r27, r27
    63c8:	ee 1f       	adc	r30, r30
    63ca:	ff 1f       	adc	r31, r31
    63cc:	a2 17       	cp	r26, r18
    63ce:	b3 07       	cpc	r27, r19
    63d0:	e4 07       	cpc	r30, r20
    63d2:	f5 07       	cpc	r31, r21
    63d4:	20 f0       	brcs	.+8      	; 0x63de <__udivmodsi4_ep>
    63d6:	a2 1b       	sub	r26, r18
    63d8:	b3 0b       	sbc	r27, r19
    63da:	e4 0b       	sbc	r30, r20
    63dc:	f5 0b       	sbc	r31, r21

000063de <__udivmodsi4_ep>:
    63de:	66 1f       	adc	r22, r22
    63e0:	77 1f       	adc	r23, r23
    63e2:	88 1f       	adc	r24, r24
    63e4:	99 1f       	adc	r25, r25
    63e6:	1a 94       	dec	r1
    63e8:	69 f7       	brne	.-38     	; 0x63c4 <__udivmodsi4_loop>
    63ea:	60 95       	com	r22
    63ec:	70 95       	com	r23
    63ee:	80 95       	com	r24
    63f0:	90 95       	com	r25
    63f2:	9b 01       	movw	r18, r22
    63f4:	ac 01       	movw	r20, r24
    63f6:	bd 01       	movw	r22, r26
    63f8:	cf 01       	movw	r24, r30
    63fa:	08 95       	ret

000063fc <__tablejump2__>:
    63fc:	ee 0f       	add	r30, r30
    63fe:	ff 1f       	adc	r31, r31
    6400:	00 24       	eor	r0, r0
    6402:	00 1c       	adc	r0, r0
    6404:	0b be       	out	0x3b, r0	; 59
    6406:	07 90       	elpm	r0, Z+
    6408:	f6 91       	elpm	r31, Z
    640a:	e0 2d       	mov	r30, r0
    640c:	09 94       	ijmp

0000640e <__muluhisi3>:
    640e:	09 d0       	rcall	.+18     	; 0x6422 <__umulhisi3>
    6410:	a5 9f       	mul	r26, r21
    6412:	90 0d       	add	r25, r0
    6414:	b4 9f       	mul	r27, r20
    6416:	90 0d       	add	r25, r0
    6418:	a4 9f       	mul	r26, r20
    641a:	80 0d       	add	r24, r0
    641c:	91 1d       	adc	r25, r1
    641e:	11 24       	eor	r1, r1
    6420:	08 95       	ret

00006422 <__umulhisi3>:
    6422:	a2 9f       	mul	r26, r18
    6424:	b0 01       	movw	r22, r0
    6426:	b3 9f       	mul	r27, r19
    6428:	c0 01       	movw	r24, r0
    642a:	a3 9f       	mul	r26, r19
    642c:	70 0d       	add	r23, r0
    642e:	81 1d       	adc	r24, r1
    6430:	11 24       	eor	r1, r1
    6432:	91 1d       	adc	r25, r1
    6434:	b2 9f       	mul	r27, r18
    6436:	70 0d       	add	r23, r0
    6438:	81 1d       	adc	r24, r1
    643a:	11 24       	eor	r1, r1
    643c:	91 1d       	adc	r25, r1
    643e:	08 95       	ret

00006440 <__ftoa_engine>:
    6440:	28 30       	cpi	r18, 0x08	; 8
    6442:	08 f0       	brcs	.+2      	; 0x6446 <__ftoa_engine+0x6>
    6444:	27 e0       	ldi	r18, 0x07	; 7
    6446:	33 27       	eor	r19, r19
    6448:	da 01       	movw	r26, r20
    644a:	99 0f       	add	r25, r25
    644c:	31 1d       	adc	r19, r1
    644e:	87 fd       	sbrc	r24, 7
    6450:	91 60       	ori	r25, 0x01	; 1
    6452:	00 96       	adiw	r24, 0x00	; 0
    6454:	61 05       	cpc	r22, r1
    6456:	71 05       	cpc	r23, r1
    6458:	39 f4       	brne	.+14     	; 0x6468 <__ftoa_engine+0x28>
    645a:	32 60       	ori	r19, 0x02	; 2
    645c:	2e 5f       	subi	r18, 0xFE	; 254
    645e:	3d 93       	st	X+, r19
    6460:	30 e3       	ldi	r19, 0x30	; 48
    6462:	2a 95       	dec	r18
    6464:	e1 f7       	brne	.-8      	; 0x645e <__ftoa_engine+0x1e>
    6466:	08 95       	ret
    6468:	9f 3f       	cpi	r25, 0xFF	; 255
    646a:	30 f0       	brcs	.+12     	; 0x6478 <__ftoa_engine+0x38>
    646c:	80 38       	cpi	r24, 0x80	; 128
    646e:	71 05       	cpc	r23, r1
    6470:	61 05       	cpc	r22, r1
    6472:	09 f0       	breq	.+2      	; 0x6476 <__ftoa_engine+0x36>
    6474:	3c 5f       	subi	r19, 0xFC	; 252
    6476:	3c 5f       	subi	r19, 0xFC	; 252
    6478:	3d 93       	st	X+, r19
    647a:	91 30       	cpi	r25, 0x01	; 1
    647c:	08 f0       	brcs	.+2      	; 0x6480 <__ftoa_engine+0x40>
    647e:	80 68       	ori	r24, 0x80	; 128
    6480:	91 1d       	adc	r25, r1
    6482:	df 93       	push	r29
    6484:	cf 93       	push	r28
    6486:	1f 93       	push	r17
    6488:	0f 93       	push	r16
    648a:	ff 92       	push	r15
    648c:	ef 92       	push	r14
    648e:	19 2f       	mov	r17, r25
    6490:	98 7f       	andi	r25, 0xF8	; 248
    6492:	96 95       	lsr	r25
    6494:	e9 2f       	mov	r30, r25
    6496:	96 95       	lsr	r25
    6498:	96 95       	lsr	r25
    649a:	e9 0f       	add	r30, r25
    649c:	ff 27       	eor	r31, r31
    649e:	ee 56       	subi	r30, 0x6E	; 110
    64a0:	fe 4f       	sbci	r31, 0xFE	; 254
    64a2:	99 27       	eor	r25, r25
    64a4:	33 27       	eor	r19, r19
    64a6:	ee 24       	eor	r14, r14
    64a8:	ff 24       	eor	r15, r15
    64aa:	a7 01       	movw	r20, r14
    64ac:	e7 01       	movw	r28, r14
    64ae:	05 90       	lpm	r0, Z+
    64b0:	08 94       	sec
    64b2:	07 94       	ror	r0
    64b4:	28 f4       	brcc	.+10     	; 0x64c0 <__ftoa_engine+0x80>
    64b6:	36 0f       	add	r19, r22
    64b8:	e7 1e       	adc	r14, r23
    64ba:	f8 1e       	adc	r15, r24
    64bc:	49 1f       	adc	r20, r25
    64be:	51 1d       	adc	r21, r1
    64c0:	66 0f       	add	r22, r22
    64c2:	77 1f       	adc	r23, r23
    64c4:	88 1f       	adc	r24, r24
    64c6:	99 1f       	adc	r25, r25
    64c8:	06 94       	lsr	r0
    64ca:	a1 f7       	brne	.-24     	; 0x64b4 <__ftoa_engine+0x74>
    64cc:	05 90       	lpm	r0, Z+
    64ce:	07 94       	ror	r0
    64d0:	28 f4       	brcc	.+10     	; 0x64dc <__ftoa_engine+0x9c>
    64d2:	e7 0e       	add	r14, r23
    64d4:	f8 1e       	adc	r15, r24
    64d6:	49 1f       	adc	r20, r25
    64d8:	56 1f       	adc	r21, r22
    64da:	c1 1d       	adc	r28, r1
    64dc:	77 0f       	add	r23, r23
    64de:	88 1f       	adc	r24, r24
    64e0:	99 1f       	adc	r25, r25
    64e2:	66 1f       	adc	r22, r22
    64e4:	06 94       	lsr	r0
    64e6:	a1 f7       	brne	.-24     	; 0x64d0 <__ftoa_engine+0x90>
    64e8:	05 90       	lpm	r0, Z+
    64ea:	07 94       	ror	r0
    64ec:	28 f4       	brcc	.+10     	; 0x64f8 <__ftoa_engine+0xb8>
    64ee:	f8 0e       	add	r15, r24
    64f0:	49 1f       	adc	r20, r25
    64f2:	56 1f       	adc	r21, r22
    64f4:	c7 1f       	adc	r28, r23
    64f6:	d1 1d       	adc	r29, r1
    64f8:	88 0f       	add	r24, r24
    64fa:	99 1f       	adc	r25, r25
    64fc:	66 1f       	adc	r22, r22
    64fe:	77 1f       	adc	r23, r23
    6500:	06 94       	lsr	r0
    6502:	a1 f7       	brne	.-24     	; 0x64ec <__ftoa_engine+0xac>
    6504:	05 90       	lpm	r0, Z+
    6506:	07 94       	ror	r0
    6508:	20 f4       	brcc	.+8      	; 0x6512 <__ftoa_engine+0xd2>
    650a:	49 0f       	add	r20, r25
    650c:	56 1f       	adc	r21, r22
    650e:	c7 1f       	adc	r28, r23
    6510:	d8 1f       	adc	r29, r24
    6512:	99 0f       	add	r25, r25
    6514:	66 1f       	adc	r22, r22
    6516:	77 1f       	adc	r23, r23
    6518:	88 1f       	adc	r24, r24
    651a:	06 94       	lsr	r0
    651c:	a9 f7       	brne	.-22     	; 0x6508 <__ftoa_engine+0xc8>
    651e:	84 91       	lpm	r24, Z
    6520:	10 95       	com	r17
    6522:	17 70       	andi	r17, 0x07	; 7
    6524:	41 f0       	breq	.+16     	; 0x6536 <__ftoa_engine+0xf6>
    6526:	d6 95       	lsr	r29
    6528:	c7 95       	ror	r28
    652a:	57 95       	ror	r21
    652c:	47 95       	ror	r20
    652e:	f7 94       	ror	r15
    6530:	e7 94       	ror	r14
    6532:	1a 95       	dec	r17
    6534:	c1 f7       	brne	.-16     	; 0x6526 <__ftoa_engine+0xe6>
    6536:	e8 e3       	ldi	r30, 0x38	; 56
    6538:	f1 e0       	ldi	r31, 0x01	; 1
    653a:	68 94       	set
    653c:	15 90       	lpm	r1, Z+
    653e:	15 91       	lpm	r17, Z+
    6540:	35 91       	lpm	r19, Z+
    6542:	65 91       	lpm	r22, Z+
    6544:	95 91       	lpm	r25, Z+
    6546:	05 90       	lpm	r0, Z+
    6548:	7f e2       	ldi	r23, 0x2F	; 47
    654a:	73 95       	inc	r23
    654c:	e1 18       	sub	r14, r1
    654e:	f1 0a       	sbc	r15, r17
    6550:	43 0b       	sbc	r20, r19
    6552:	56 0b       	sbc	r21, r22
    6554:	c9 0b       	sbc	r28, r25
    6556:	d0 09       	sbc	r29, r0
    6558:	c0 f7       	brcc	.-16     	; 0x654a <__ftoa_engine+0x10a>
    655a:	e1 0c       	add	r14, r1
    655c:	f1 1e       	adc	r15, r17
    655e:	43 1f       	adc	r20, r19
    6560:	56 1f       	adc	r21, r22
    6562:	c9 1f       	adc	r28, r25
    6564:	d0 1d       	adc	r29, r0
    6566:	7e f4       	brtc	.+30     	; 0x6586 <__ftoa_engine+0x146>
    6568:	70 33       	cpi	r23, 0x30	; 48
    656a:	11 f4       	brne	.+4      	; 0x6570 <__ftoa_engine+0x130>
    656c:	8a 95       	dec	r24
    656e:	e6 cf       	rjmp	.-52     	; 0x653c <__ftoa_engine+0xfc>
    6570:	e8 94       	clt
    6572:	01 50       	subi	r16, 0x01	; 1
    6574:	30 f0       	brcs	.+12     	; 0x6582 <__ftoa_engine+0x142>
    6576:	08 0f       	add	r16, r24
    6578:	0a f4       	brpl	.+2      	; 0x657c <__ftoa_engine+0x13c>
    657a:	00 27       	eor	r16, r16
    657c:	02 17       	cp	r16, r18
    657e:	08 f4       	brcc	.+2      	; 0x6582 <__ftoa_engine+0x142>
    6580:	20 2f       	mov	r18, r16
    6582:	23 95       	inc	r18
    6584:	02 2f       	mov	r16, r18
    6586:	7a 33       	cpi	r23, 0x3A	; 58
    6588:	28 f0       	brcs	.+10     	; 0x6594 <__ftoa_engine+0x154>
    658a:	79 e3       	ldi	r23, 0x39	; 57
    658c:	7d 93       	st	X+, r23
    658e:	2a 95       	dec	r18
    6590:	e9 f7       	brne	.-6      	; 0x658c <__ftoa_engine+0x14c>
    6592:	10 c0       	rjmp	.+32     	; 0x65b4 <__ftoa_engine+0x174>
    6594:	7d 93       	st	X+, r23
    6596:	2a 95       	dec	r18
    6598:	89 f6       	brne	.-94     	; 0x653c <__ftoa_engine+0xfc>
    659a:	06 94       	lsr	r0
    659c:	97 95       	ror	r25
    659e:	67 95       	ror	r22
    65a0:	37 95       	ror	r19
    65a2:	17 95       	ror	r17
    65a4:	17 94       	ror	r1
    65a6:	e1 18       	sub	r14, r1
    65a8:	f1 0a       	sbc	r15, r17
    65aa:	43 0b       	sbc	r20, r19
    65ac:	56 0b       	sbc	r21, r22
    65ae:	c9 0b       	sbc	r28, r25
    65b0:	d0 09       	sbc	r29, r0
    65b2:	98 f0       	brcs	.+38     	; 0x65da <__ftoa_engine+0x19a>
    65b4:	23 95       	inc	r18
    65b6:	7e 91       	ld	r23, -X
    65b8:	73 95       	inc	r23
    65ba:	7a 33       	cpi	r23, 0x3A	; 58
    65bc:	08 f0       	brcs	.+2      	; 0x65c0 <__ftoa_engine+0x180>
    65be:	70 e3       	ldi	r23, 0x30	; 48
    65c0:	7c 93       	st	X, r23
    65c2:	20 13       	cpse	r18, r16
    65c4:	b8 f7       	brcc	.-18     	; 0x65b4 <__ftoa_engine+0x174>
    65c6:	7e 91       	ld	r23, -X
    65c8:	70 61       	ori	r23, 0x10	; 16
    65ca:	7d 93       	st	X+, r23
    65cc:	30 f0       	brcs	.+12     	; 0x65da <__ftoa_engine+0x19a>
    65ce:	83 95       	inc	r24
    65d0:	71 e3       	ldi	r23, 0x31	; 49
    65d2:	7d 93       	st	X+, r23
    65d4:	70 e3       	ldi	r23, 0x30	; 48
    65d6:	2a 95       	dec	r18
    65d8:	e1 f7       	brne	.-8      	; 0x65d2 <__ftoa_engine+0x192>
    65da:	11 24       	eor	r1, r1
    65dc:	ef 90       	pop	r14
    65de:	ff 90       	pop	r15
    65e0:	0f 91       	pop	r16
    65e2:	1f 91       	pop	r17
    65e4:	cf 91       	pop	r28
    65e6:	df 91       	pop	r29
    65e8:	99 27       	eor	r25, r25
    65ea:	87 fd       	sbrc	r24, 7
    65ec:	90 95       	com	r25
    65ee:	08 95       	ret

000065f0 <isspace>:
    65f0:	91 11       	cpse	r25, r1
    65f2:	a6 c1       	rjmp	.+844    	; 0x6940 <__ctype_isfalse>
    65f4:	80 32       	cpi	r24, 0x20	; 32
    65f6:	19 f0       	breq	.+6      	; 0x65fe <isspace+0xe>
    65f8:	89 50       	subi	r24, 0x09	; 9
    65fa:	85 50       	subi	r24, 0x05	; 5
    65fc:	d0 f7       	brcc	.-12     	; 0x65f2 <isspace+0x2>
    65fe:	08 95       	ret

00006600 <tolower>:
    6600:	91 11       	cpse	r25, r1
    6602:	08 95       	ret
    6604:	81 54       	subi	r24, 0x41	; 65
    6606:	8a 51       	subi	r24, 0x1A	; 26
    6608:	08 f4       	brcc	.+2      	; 0x660c <tolower+0xc>
    660a:	80 5e       	subi	r24, 0xE0	; 224
    660c:	85 5a       	subi	r24, 0xA5	; 165
    660e:	08 95       	ret

00006610 <strchr_P>:
    6610:	fc 01       	movw	r30, r24
    6612:	05 90       	lpm	r0, Z+
    6614:	06 16       	cp	r0, r22
    6616:	21 f0       	breq	.+8      	; 0x6620 <strchr_P+0x10>
    6618:	00 20       	and	r0, r0
    661a:	d9 f7       	brne	.-10     	; 0x6612 <strchr_P+0x2>
    661c:	c0 01       	movw	r24, r0
    661e:	08 95       	ret
    6620:	31 97       	sbiw	r30, 0x01	; 1
    6622:	cf 01       	movw	r24, r30
    6624:	08 95       	ret

00006626 <strnlen_P>:
    6626:	fc 01       	movw	r30, r24
    6628:	05 90       	lpm	r0, Z+
    662a:	61 50       	subi	r22, 0x01	; 1
    662c:	70 40       	sbci	r23, 0x00	; 0
    662e:	01 10       	cpse	r0, r1
    6630:	d8 f7       	brcc	.-10     	; 0x6628 <strnlen_P+0x2>
    6632:	80 95       	com	r24
    6634:	90 95       	com	r25
    6636:	8e 0f       	add	r24, r30
    6638:	9f 1f       	adc	r25, r31
    663a:	08 95       	ret

0000663c <strnlen>:
    663c:	fc 01       	movw	r30, r24
    663e:	61 50       	subi	r22, 0x01	; 1
    6640:	70 40       	sbci	r23, 0x00	; 0
    6642:	01 90       	ld	r0, Z+
    6644:	01 10       	cpse	r0, r1
    6646:	d8 f7       	brcc	.-10     	; 0x663e <strnlen+0x2>
    6648:	80 95       	com	r24
    664a:	90 95       	com	r25
    664c:	8e 0f       	add	r24, r30
    664e:	9f 1f       	adc	r25, r31
    6650:	08 95       	ret

00006652 <fgetc>:
    6652:	cf 93       	push	r28
    6654:	df 93       	push	r29
    6656:	ec 01       	movw	r28, r24
    6658:	2b 81       	ldd	r18, Y+3	; 0x03
    665a:	20 ff       	sbrs	r18, 0
    665c:	33 c0       	rjmp	.+102    	; 0x66c4 <fgetc+0x72>
    665e:	26 ff       	sbrs	r18, 6
    6660:	0a c0       	rjmp	.+20     	; 0x6676 <fgetc+0x24>
    6662:	2f 7b       	andi	r18, 0xBF	; 191
    6664:	2b 83       	std	Y+3, r18	; 0x03
    6666:	8e 81       	ldd	r24, Y+6	; 0x06
    6668:	9f 81       	ldd	r25, Y+7	; 0x07
    666a:	01 96       	adiw	r24, 0x01	; 1
    666c:	9f 83       	std	Y+7, r25	; 0x07
    666e:	8e 83       	std	Y+6, r24	; 0x06
    6670:	8a 81       	ldd	r24, Y+2	; 0x02
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	29 c0       	rjmp	.+82     	; 0x66c8 <fgetc+0x76>
    6676:	22 ff       	sbrs	r18, 2
    6678:	0f c0       	rjmp	.+30     	; 0x6698 <fgetc+0x46>
    667a:	e8 81       	ld	r30, Y
    667c:	f9 81       	ldd	r31, Y+1	; 0x01
    667e:	80 81       	ld	r24, Z
    6680:	08 2e       	mov	r0, r24
    6682:	00 0c       	add	r0, r0
    6684:	99 0b       	sbc	r25, r25
    6686:	00 97       	sbiw	r24, 0x00	; 0
    6688:	19 f4       	brne	.+6      	; 0x6690 <fgetc+0x3e>
    668a:	20 62       	ori	r18, 0x20	; 32
    668c:	2b 83       	std	Y+3, r18	; 0x03
    668e:	1a c0       	rjmp	.+52     	; 0x66c4 <fgetc+0x72>
    6690:	31 96       	adiw	r30, 0x01	; 1
    6692:	f9 83       	std	Y+1, r31	; 0x01
    6694:	e8 83       	st	Y, r30
    6696:	0e c0       	rjmp	.+28     	; 0x66b4 <fgetc+0x62>
    6698:	ea 85       	ldd	r30, Y+10	; 0x0a
    669a:	fb 85       	ldd	r31, Y+11	; 0x0b
    669c:	09 95       	icall
    669e:	97 ff       	sbrs	r25, 7
    66a0:	09 c0       	rjmp	.+18     	; 0x66b4 <fgetc+0x62>
    66a2:	2b 81       	ldd	r18, Y+3	; 0x03
    66a4:	01 96       	adiw	r24, 0x01	; 1
    66a6:	11 f0       	breq	.+4      	; 0x66ac <fgetc+0x5a>
    66a8:	80 e2       	ldi	r24, 0x20	; 32
    66aa:	01 c0       	rjmp	.+2      	; 0x66ae <fgetc+0x5c>
    66ac:	80 e1       	ldi	r24, 0x10	; 16
    66ae:	82 2b       	or	r24, r18
    66b0:	8b 83       	std	Y+3, r24	; 0x03
    66b2:	08 c0       	rjmp	.+16     	; 0x66c4 <fgetc+0x72>
    66b4:	2e 81       	ldd	r18, Y+6	; 0x06
    66b6:	3f 81       	ldd	r19, Y+7	; 0x07
    66b8:	2f 5f       	subi	r18, 0xFF	; 255
    66ba:	3f 4f       	sbci	r19, 0xFF	; 255
    66bc:	3f 83       	std	Y+7, r19	; 0x07
    66be:	2e 83       	std	Y+6, r18	; 0x06
    66c0:	99 27       	eor	r25, r25
    66c2:	02 c0       	rjmp	.+4      	; 0x66c8 <fgetc+0x76>
    66c4:	8f ef       	ldi	r24, 0xFF	; 255
    66c6:	9f ef       	ldi	r25, 0xFF	; 255
    66c8:	df 91       	pop	r29
    66ca:	cf 91       	pop	r28
    66cc:	08 95       	ret

000066ce <fputc>:
    66ce:	0f 93       	push	r16
    66d0:	1f 93       	push	r17
    66d2:	cf 93       	push	r28
    66d4:	df 93       	push	r29
    66d6:	fb 01       	movw	r30, r22
    66d8:	23 81       	ldd	r18, Z+3	; 0x03
    66da:	21 fd       	sbrc	r18, 1
    66dc:	03 c0       	rjmp	.+6      	; 0x66e4 <fputc+0x16>
    66de:	8f ef       	ldi	r24, 0xFF	; 255
    66e0:	9f ef       	ldi	r25, 0xFF	; 255
    66e2:	2c c0       	rjmp	.+88     	; 0x673c <fputc+0x6e>
    66e4:	22 ff       	sbrs	r18, 2
    66e6:	16 c0       	rjmp	.+44     	; 0x6714 <fputc+0x46>
    66e8:	46 81       	ldd	r20, Z+6	; 0x06
    66ea:	57 81       	ldd	r21, Z+7	; 0x07
    66ec:	24 81       	ldd	r18, Z+4	; 0x04
    66ee:	35 81       	ldd	r19, Z+5	; 0x05
    66f0:	42 17       	cp	r20, r18
    66f2:	53 07       	cpc	r21, r19
    66f4:	44 f4       	brge	.+16     	; 0x6706 <fputc+0x38>
    66f6:	a0 81       	ld	r26, Z
    66f8:	b1 81       	ldd	r27, Z+1	; 0x01
    66fa:	9d 01       	movw	r18, r26
    66fc:	2f 5f       	subi	r18, 0xFF	; 255
    66fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6700:	31 83       	std	Z+1, r19	; 0x01
    6702:	20 83       	st	Z, r18
    6704:	8c 93       	st	X, r24
    6706:	26 81       	ldd	r18, Z+6	; 0x06
    6708:	37 81       	ldd	r19, Z+7	; 0x07
    670a:	2f 5f       	subi	r18, 0xFF	; 255
    670c:	3f 4f       	sbci	r19, 0xFF	; 255
    670e:	37 83       	std	Z+7, r19	; 0x07
    6710:	26 83       	std	Z+6, r18	; 0x06
    6712:	14 c0       	rjmp	.+40     	; 0x673c <fputc+0x6e>
    6714:	8b 01       	movw	r16, r22
    6716:	ec 01       	movw	r28, r24
    6718:	fb 01       	movw	r30, r22
    671a:	00 84       	ldd	r0, Z+8	; 0x08
    671c:	f1 85       	ldd	r31, Z+9	; 0x09
    671e:	e0 2d       	mov	r30, r0
    6720:	09 95       	icall
    6722:	89 2b       	or	r24, r25
    6724:	e1 f6       	brne	.-72     	; 0x66de <fputc+0x10>
    6726:	d8 01       	movw	r26, r16
    6728:	16 96       	adiw	r26, 0x06	; 6
    672a:	8d 91       	ld	r24, X+
    672c:	9c 91       	ld	r25, X
    672e:	17 97       	sbiw	r26, 0x07	; 7
    6730:	01 96       	adiw	r24, 0x01	; 1
    6732:	17 96       	adiw	r26, 0x07	; 7
    6734:	9c 93       	st	X, r25
    6736:	8e 93       	st	-X, r24
    6738:	16 97       	sbiw	r26, 0x06	; 6
    673a:	ce 01       	movw	r24, r28
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	1f 91       	pop	r17
    6742:	0f 91       	pop	r16
    6744:	08 95       	ret

00006746 <printf>:
    6746:	cf 93       	push	r28
    6748:	df 93       	push	r29
    674a:	cd b7       	in	r28, 0x3d	; 61
    674c:	de b7       	in	r29, 0x3e	; 62
    674e:	ae 01       	movw	r20, r28
    6750:	4b 5f       	subi	r20, 0xFB	; 251
    6752:	5f 4f       	sbci	r21, 0xFF	; 255
    6754:	fa 01       	movw	r30, r20
    6756:	61 91       	ld	r22, Z+
    6758:	71 91       	ld	r23, Z+
    675a:	af 01       	movw	r20, r30
    675c:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <__iob+0x2>
    6760:	90 91 6e 0f 	lds	r25, 0x0F6E	; 0x800f6e <__iob+0x3>
    6764:	0e 94 2a 2a 	call	0x5454	; 0x5454 <vfprintf>
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	08 95       	ret

0000676e <puts>:
    676e:	0f 93       	push	r16
    6770:	1f 93       	push	r17
    6772:	cf 93       	push	r28
    6774:	df 93       	push	r29
    6776:	e0 91 6d 0f 	lds	r30, 0x0F6D	; 0x800f6d <__iob+0x2>
    677a:	f0 91 6e 0f 	lds	r31, 0x0F6E	; 0x800f6e <__iob+0x3>
    677e:	23 81       	ldd	r18, Z+3	; 0x03
    6780:	21 ff       	sbrs	r18, 1
    6782:	1b c0       	rjmp	.+54     	; 0x67ba <puts+0x4c>
    6784:	8c 01       	movw	r16, r24
    6786:	d0 e0       	ldi	r29, 0x00	; 0
    6788:	c0 e0       	ldi	r28, 0x00	; 0
    678a:	f8 01       	movw	r30, r16
    678c:	81 91       	ld	r24, Z+
    678e:	8f 01       	movw	r16, r30
    6790:	60 91 6d 0f 	lds	r22, 0x0F6D	; 0x800f6d <__iob+0x2>
    6794:	70 91 6e 0f 	lds	r23, 0x0F6E	; 0x800f6e <__iob+0x3>
    6798:	db 01       	movw	r26, r22
    679a:	18 96       	adiw	r26, 0x08	; 8
    679c:	ed 91       	ld	r30, X+
    679e:	fc 91       	ld	r31, X
    67a0:	19 97       	sbiw	r26, 0x09	; 9
    67a2:	88 23       	and	r24, r24
    67a4:	31 f0       	breq	.+12     	; 0x67b2 <puts+0x44>
    67a6:	09 95       	icall
    67a8:	89 2b       	or	r24, r25
    67aa:	79 f3       	breq	.-34     	; 0x678a <puts+0x1c>
    67ac:	df ef       	ldi	r29, 0xFF	; 255
    67ae:	cf ef       	ldi	r28, 0xFF	; 255
    67b0:	ec cf       	rjmp	.-40     	; 0x678a <puts+0x1c>
    67b2:	8a e0       	ldi	r24, 0x0A	; 10
    67b4:	09 95       	icall
    67b6:	89 2b       	or	r24, r25
    67b8:	19 f0       	breq	.+6      	; 0x67c0 <puts+0x52>
    67ba:	8f ef       	ldi	r24, 0xFF	; 255
    67bc:	9f ef       	ldi	r25, 0xFF	; 255
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <puts+0x56>
    67c0:	8d 2f       	mov	r24, r29
    67c2:	9c 2f       	mov	r25, r28
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	0f 91       	pop	r16
    67cc:	08 95       	ret

000067ce <scanf>:
    67ce:	cf 93       	push	r28
    67d0:	df 93       	push	r29
    67d2:	cd b7       	in	r28, 0x3d	; 61
    67d4:	de b7       	in	r29, 0x3e	; 62
    67d6:	ae 01       	movw	r20, r28
    67d8:	4b 5f       	subi	r20, 0xFB	; 251
    67da:	5f 4f       	sbci	r21, 0xFF	; 255
    67dc:	fa 01       	movw	r30, r20
    67de:	61 91       	ld	r22, Z+
    67e0:	71 91       	ld	r23, Z+
    67e2:	af 01       	movw	r20, r30
    67e4:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <__iob>
    67e8:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <__iob+0x1>
    67ec:	b0 dc       	rcall	.-1696   	; 0x614e <vfscanf>
    67ee:	df 91       	pop	r29
    67f0:	cf 91       	pop	r28
    67f2:	08 95       	ret

000067f4 <sprintf>:
    67f4:	0f 93       	push	r16
    67f6:	1f 93       	push	r17
    67f8:	cf 93       	push	r28
    67fa:	df 93       	push	r29
    67fc:	cd b7       	in	r28, 0x3d	; 61
    67fe:	de b7       	in	r29, 0x3e	; 62
    6800:	2e 97       	sbiw	r28, 0x0e	; 14
    6802:	0f b6       	in	r0, 0x3f	; 63
    6804:	f8 94       	cli
    6806:	de bf       	out	0x3e, r29	; 62
    6808:	0f be       	out	0x3f, r0	; 63
    680a:	cd bf       	out	0x3d, r28	; 61
    680c:	0d 89       	ldd	r16, Y+21	; 0x15
    680e:	1e 89       	ldd	r17, Y+22	; 0x16
    6810:	86 e0       	ldi	r24, 0x06	; 6
    6812:	8c 83       	std	Y+4, r24	; 0x04
    6814:	1a 83       	std	Y+2, r17	; 0x02
    6816:	09 83       	std	Y+1, r16	; 0x01
    6818:	8f ef       	ldi	r24, 0xFF	; 255
    681a:	9f e7       	ldi	r25, 0x7F	; 127
    681c:	9e 83       	std	Y+6, r25	; 0x06
    681e:	8d 83       	std	Y+5, r24	; 0x05
    6820:	ae 01       	movw	r20, r28
    6822:	47 5e       	subi	r20, 0xE7	; 231
    6824:	5f 4f       	sbci	r21, 0xFF	; 255
    6826:	6f 89       	ldd	r22, Y+23	; 0x17
    6828:	78 8d       	ldd	r23, Y+24	; 0x18
    682a:	ce 01       	movw	r24, r28
    682c:	01 96       	adiw	r24, 0x01	; 1
    682e:	0e 94 2a 2a 	call	0x5454	; 0x5454 <vfprintf>
    6832:	ef 81       	ldd	r30, Y+7	; 0x07
    6834:	f8 85       	ldd	r31, Y+8	; 0x08
    6836:	e0 0f       	add	r30, r16
    6838:	f1 1f       	adc	r31, r17
    683a:	10 82       	st	Z, r1
    683c:	2e 96       	adiw	r28, 0x0e	; 14
    683e:	0f b6       	in	r0, 0x3f	; 63
    6840:	f8 94       	cli
    6842:	de bf       	out	0x3e, r29	; 62
    6844:	0f be       	out	0x3f, r0	; 63
    6846:	cd bf       	out	0x3d, r28	; 61
    6848:	df 91       	pop	r29
    684a:	cf 91       	pop	r28
    684c:	1f 91       	pop	r17
    684e:	0f 91       	pop	r16
    6850:	08 95       	ret

00006852 <ungetc>:
    6852:	fb 01       	movw	r30, r22
    6854:	23 81       	ldd	r18, Z+3	; 0x03
    6856:	20 ff       	sbrs	r18, 0
    6858:	12 c0       	rjmp	.+36     	; 0x687e <ungetc+0x2c>
    685a:	26 fd       	sbrc	r18, 6
    685c:	10 c0       	rjmp	.+32     	; 0x687e <ungetc+0x2c>
    685e:	8f 3f       	cpi	r24, 0xFF	; 255
    6860:	3f ef       	ldi	r19, 0xFF	; 255
    6862:	93 07       	cpc	r25, r19
    6864:	61 f0       	breq	.+24     	; 0x687e <ungetc+0x2c>
    6866:	82 83       	std	Z+2, r24	; 0x02
    6868:	2f 7d       	andi	r18, 0xDF	; 223
    686a:	20 64       	ori	r18, 0x40	; 64
    686c:	23 83       	std	Z+3, r18	; 0x03
    686e:	26 81       	ldd	r18, Z+6	; 0x06
    6870:	37 81       	ldd	r19, Z+7	; 0x07
    6872:	21 50       	subi	r18, 0x01	; 1
    6874:	31 09       	sbc	r19, r1
    6876:	37 83       	std	Z+7, r19	; 0x07
    6878:	26 83       	std	Z+6, r18	; 0x06
    687a:	99 27       	eor	r25, r25
    687c:	08 95       	ret
    687e:	8f ef       	ldi	r24, 0xFF	; 255
    6880:	9f ef       	ldi	r25, 0xFF	; 255
    6882:	08 95       	ret

00006884 <__ultoa_invert>:
    6884:	fa 01       	movw	r30, r20
    6886:	aa 27       	eor	r26, r26
    6888:	28 30       	cpi	r18, 0x08	; 8
    688a:	51 f1       	breq	.+84     	; 0x68e0 <__ultoa_invert+0x5c>
    688c:	20 31       	cpi	r18, 0x10	; 16
    688e:	81 f1       	breq	.+96     	; 0x68f0 <__ultoa_invert+0x6c>
    6890:	e8 94       	clt
    6892:	6f 93       	push	r22
    6894:	6e 7f       	andi	r22, 0xFE	; 254
    6896:	6e 5f       	subi	r22, 0xFE	; 254
    6898:	7f 4f       	sbci	r23, 0xFF	; 255
    689a:	8f 4f       	sbci	r24, 0xFF	; 255
    689c:	9f 4f       	sbci	r25, 0xFF	; 255
    689e:	af 4f       	sbci	r26, 0xFF	; 255
    68a0:	b1 e0       	ldi	r27, 0x01	; 1
    68a2:	3e d0       	rcall	.+124    	; 0x6920 <__ultoa_invert+0x9c>
    68a4:	b4 e0       	ldi	r27, 0x04	; 4
    68a6:	3c d0       	rcall	.+120    	; 0x6920 <__ultoa_invert+0x9c>
    68a8:	67 0f       	add	r22, r23
    68aa:	78 1f       	adc	r23, r24
    68ac:	89 1f       	adc	r24, r25
    68ae:	9a 1f       	adc	r25, r26
    68b0:	a1 1d       	adc	r26, r1
    68b2:	68 0f       	add	r22, r24
    68b4:	79 1f       	adc	r23, r25
    68b6:	8a 1f       	adc	r24, r26
    68b8:	91 1d       	adc	r25, r1
    68ba:	a1 1d       	adc	r26, r1
    68bc:	6a 0f       	add	r22, r26
    68be:	71 1d       	adc	r23, r1
    68c0:	81 1d       	adc	r24, r1
    68c2:	91 1d       	adc	r25, r1
    68c4:	a1 1d       	adc	r26, r1
    68c6:	20 d0       	rcall	.+64     	; 0x6908 <__ultoa_invert+0x84>
    68c8:	09 f4       	brne	.+2      	; 0x68cc <__ultoa_invert+0x48>
    68ca:	68 94       	set
    68cc:	3f 91       	pop	r19
    68ce:	2a e0       	ldi	r18, 0x0A	; 10
    68d0:	26 9f       	mul	r18, r22
    68d2:	11 24       	eor	r1, r1
    68d4:	30 19       	sub	r19, r0
    68d6:	30 5d       	subi	r19, 0xD0	; 208
    68d8:	31 93       	st	Z+, r19
    68da:	de f6       	brtc	.-74     	; 0x6892 <__ultoa_invert+0xe>
    68dc:	cf 01       	movw	r24, r30
    68de:	08 95       	ret
    68e0:	46 2f       	mov	r20, r22
    68e2:	47 70       	andi	r20, 0x07	; 7
    68e4:	40 5d       	subi	r20, 0xD0	; 208
    68e6:	41 93       	st	Z+, r20
    68e8:	b3 e0       	ldi	r27, 0x03	; 3
    68ea:	0f d0       	rcall	.+30     	; 0x690a <__ultoa_invert+0x86>
    68ec:	c9 f7       	brne	.-14     	; 0x68e0 <__ultoa_invert+0x5c>
    68ee:	f6 cf       	rjmp	.-20     	; 0x68dc <__ultoa_invert+0x58>
    68f0:	46 2f       	mov	r20, r22
    68f2:	4f 70       	andi	r20, 0x0F	; 15
    68f4:	40 5d       	subi	r20, 0xD0	; 208
    68f6:	4a 33       	cpi	r20, 0x3A	; 58
    68f8:	18 f0       	brcs	.+6      	; 0x6900 <__ultoa_invert+0x7c>
    68fa:	49 5d       	subi	r20, 0xD9	; 217
    68fc:	31 fd       	sbrc	r19, 1
    68fe:	40 52       	subi	r20, 0x20	; 32
    6900:	41 93       	st	Z+, r20
    6902:	02 d0       	rcall	.+4      	; 0x6908 <__ultoa_invert+0x84>
    6904:	a9 f7       	brne	.-22     	; 0x68f0 <__ultoa_invert+0x6c>
    6906:	ea cf       	rjmp	.-44     	; 0x68dc <__ultoa_invert+0x58>
    6908:	b4 e0       	ldi	r27, 0x04	; 4
    690a:	a6 95       	lsr	r26
    690c:	97 95       	ror	r25
    690e:	87 95       	ror	r24
    6910:	77 95       	ror	r23
    6912:	67 95       	ror	r22
    6914:	ba 95       	dec	r27
    6916:	c9 f7       	brne	.-14     	; 0x690a <__ultoa_invert+0x86>
    6918:	00 97       	sbiw	r24, 0x00	; 0
    691a:	61 05       	cpc	r22, r1
    691c:	71 05       	cpc	r23, r1
    691e:	08 95       	ret
    6920:	9b 01       	movw	r18, r22
    6922:	ac 01       	movw	r20, r24
    6924:	0a 2e       	mov	r0, r26
    6926:	06 94       	lsr	r0
    6928:	57 95       	ror	r21
    692a:	47 95       	ror	r20
    692c:	37 95       	ror	r19
    692e:	27 95       	ror	r18
    6930:	ba 95       	dec	r27
    6932:	c9 f7       	brne	.-14     	; 0x6926 <__ultoa_invert+0xa2>
    6934:	62 0f       	add	r22, r18
    6936:	73 1f       	adc	r23, r19
    6938:	84 1f       	adc	r24, r20
    693a:	95 1f       	adc	r25, r21
    693c:	a0 1d       	adc	r26, r0
    693e:	08 95       	ret

00006940 <__ctype_isfalse>:
    6940:	99 27       	eor	r25, r25
    6942:	88 27       	eor	r24, r24

00006944 <__ctype_istrue>:
    6944:	08 95       	ret

00006946 <_exit>:
    6946:	f8 94       	cli

00006948 <__stop_program>:
    6948:	ff cf       	rjmp	.-2      	; 0x6948 <__stop_program>
